decentralized business platform for frictionless collaboration white paper dmitry kochin, alexander neymark april, introduction abstract what ties.network? key abilities the platform the concept public nosql database applications business contracts making connections starting new project the expert community what ties.network can for you: ties.network aspects definitions profile ... your profile deals ... invoice ... escrow and disputes ... cryptocurrency trade with tie tokens search results linkedin.com/in/kochin linkedin.com/in/neymark project ... basic attributes project: work process example economics platform revenue sources revenue sources for nodes ties.network architecture architecture features architecture layers data storage ties.db ties.db: overview ties.db: data organization principles ties.db incentive system reward for data extraction reward for data storage ties.db: full-text search conclusion cjdns and hyperboria network client chats node and client interaction schematic determination factors for the solutions used byzantine generals' problem blockchain database ipfs decentralized cloud file storages distributed databases overview bigchaindb conclusion self-organization and motivation platform revenue sources platform roles referral system tie tokens operations with tie tokens conclusion references introduction abstract modern technologies allow rediscover the issues decentralization and freedom for millions people. the surge interest cryptocurrencies and decentralized economy direct proof people's disappointment the classical system commodity-money relations and professional networking, and their attempt escape into the counter-economy. this document presents the ties.network project new business platform for crypto-community with integrated deals based smart-contracts and irrefutable reputation system based previous deals. distributed business platform that allows traders, investors, developers, consultants and enthusiasts find business partners, offer their services, close deals based smart contracts, hire staff, advertise their own services comfortable and secure environment, and also finance projects (individually part particular community). the platform allows you get maximum exposure the crypto-community through system ratings and reviews. also allows you act anonymously while keeping transactions with other community members safe. ties.network satisfies the need crypto-community connect and the need secure business transactions new counter-economy. today the community fragmented and connections are fragile for two reasons. it's still new market (though it's growing rapidly), and because new, hard find professionals one can immediately trust and strike deal with. ties.network aims resolving the issue trust for crypto-community fundamental level giving people opportunities find each other and business new, yet safe environment accordance with the principles decentralized economy. the platform utilizes system 'geniune rating' which means only those, who actually did business with user have right rate them professionals thus basing their reviews real successful business transactions, and not assumptions marketing information. this means that reviews can not fake, and that the platform will become credible, solid source information about viable blockchain-related projects globally, decentralized technologies, real due diligence reports upcoming token generation events, and will give voice real blockchain experts who have track record successful deals. using ties.network people can connect and strike business deals via smart-contracts launch projects, promote their businesses, find projects invest in, and groups join. additionally, such platform would help recruiting collaborators, posting jobs well cvs with all parties profiting from these features. currently, there platform providing this array services. time introduce large scale public network based blockchain technology that would include decentralized ledger for business and social networking purposes. this will allow the crypto-community have access single, universal and public platform that allows cooperation and gives opportunities discuss and strike business deals the same environment. what ties.network? business tool ties.network decentralized social platform where business professionals can connect and strike business deals via smart-contracts time the platform uses trustworthy rating system, thus making sure all participants can focus solely business and benefits beneficial relationships, and leave the verification and trust issues the platform's integrated solutions. product, ties.network based ties.db public, decentralized, and distributed nosql database that allows store huge amounts dynamic data, and search within the content the files. ties.db public, open-source solution that can utilized other dapps and decentralized blockchain-related projects facilitate their entering the market and structure large amounts data. ties.network business platform for the crypto-community with integrated deals based smart-contracts and reputation systems based previous deals. decentralized platform for traders, investors, developers, consultants and enthusiasts that allows find and hire rated partners, employees and volunteers, sell their products services, secure business deals via smart contracts, promote themselves, and finance their projects, among other items. people can work individually teams accomplish their objectives. free rating and reviews ("crowdsourcing") give each participant maximum opportunities, while also giving them the option anonymity. all cases, all transactions are safe and secure. registration, each user receives default rating based objective observations user activity the crypto-community and based provided documents. the community will modify this rating based the review the deals that have already been processed the platform though impartial and decentralized voting. key abilities the platform ties.network (see chapter integration smart contracts into business platform lets its users the following: trade goods and services trade cryptocurrencies hire and recruit specialists participate token generation events and blockchain projects receive feedback for startups token generation events promote token generation events and network with startups the concept public nosql database for the last few years the blockchain community has been rapidly growing. today blockchain not only gives people the opportunity make safe financial transactions, but also provides broad range other services. smart contracts have become big breakthrough this field. smart contract program that executed the blockchain core allowing flexible custom processing each transaction. smart contracts ethereum are turing-complete and allow programming algorithms any complexity. that why ethereum has created new market decentralized applications applications that are running directly the blockchain inheriting its distribution, decentralization and security well. however, this market growth restrained the absence appropriate public data storage serious applications require large and fast data storage and should able perform complex search within the files. faced ourselves while designing the architecture ties.network. there are some implementations decentralized data storages such ipfs cloud file storages special blockchains but all them have significant disadvantage they not allow complex search within the stored data. there are also distributed databases and they have all the required features except the main one byzantine proof tolerance they can not used public untrusted environment. the byzantine problem experiment meant illustrate the pitfalls and design challenges attempting coordinate action communicating over unreliable link, where failures communication are possible. with that mind, ties.network programmers developed resilient public decentralized nosql database, ties.db, that can built any blockchain with smart contracts; supports replication, sharding, secondary indexes, full-text search and allows users modify and delete data. the database public the sense that anyone can establish ties.db node and participate the network processing user transactions and earn money from this. equally, anyone can use for storing data. the same time, ties.db maintains the same powerful processing system and speed that you find private (intra-corporate) nosql databases. since ties.db can made compatible with any blockchain that supports turing-complete smart contracts, members can use perform transactions any platform. learn more here chapter applications business contracts ties.network can used make the following business contracts (inside outside the crypto-community): outsourcing jobs (e.g., programming, white paper submission, translation, design, advisorship etc.), where terms and conditions are regulated smart contract automation. engaging freelancing, temporary contract work, where smart contracts regulate project terms and details. obtaining feedback from experts the platform. making connections the user uses keywords find profiles potential employers business connections. both arties discuss and negotiate the deal. the user finalizes the deal depositing the agreed-upon number tokens the smart contract wallet, which acts guarantor the deal. either party reneges, tokens are returned. after the service trade has been performed, the smart contract wallet deposits the tokens the recipient (or client) contracted. system moderators act per-diem arbitrators and use the contract terms settle disputes, when and necessary. moderators chapter are rewarded the company since they need financial incentive regulate the blockchain ledger and supervise its dealings. starting new project any user can upload their project, organization details profile ties.network. the platform can used recruit members the project team, create project wallet pay team members, receive donations. additionally, users can negotiate terms the deal and share documents and photos members the community users can add the following information the profile the project: the project head's resume and their biographical summary their contact information links their website and/or blog information past employment, books published, past projects, portfolio, etc. you can also use the platform share your project with selected individuals organizations and block those you wish exclude. when you start your own project, you can invite your own team members, set wallet for the project pay relevant participants and receive donations, and share documents and photos the members your community (or the public) among other items. ties.network uses smart-contract automated platform, based ethereum, where transactions are encoded its ledger, and where conditions are automatically executed once contract terms are met. users use this function for investing, voting, fundraising, and crowdfunding. the expert community the platform vets all parties, records and authenticates all transactions that use the platform, rejecting illegitimate questionable data. expert members ties.network can also requested provide feedback your project enterprise, you want them to. the level anonymity optional the users. the option remain anonymous makes safe environment for anyone warn investors funding scam, warn participants illegitimate organizations, caution someone against hiring certain contractor accepting certain job. the expert community can use this platform provide professional feedback regarding issues discussed the platform point out the limitations, deficiencies, any particular transaction. what ties.network can for you: help you engage economic trade with entities from any country. provide real-time transparent platform for conducting trade. benefits include: rating businesses, smart contracts technology, locked-in funds that are only released when the contract fulfilled. provide security: all transactions can witnessed and monitored qualified experts who intervene resolve conflicts should you wish so. provide you with extensive network highly-professional members crypto-community, connected the blockchain industry, crypto economics, and it. give you flexible platform expand your network professional connections and search for specialists completely different areas give transparency the outsourcing process. give openness and scalability with technically unlimited basic protocol that can handle growing amount storage, and has the potential enlarged accommodate membership growth. ties.network aspects definitions profile the profile serves single entry point for the user the community. registration denotes agreement with community rules and completed opening wallet that contains tie currency (ties.network platform tokens) chapter the keys the wallet are attached user's profile. there option use/restore the wallet from multiple devices. when filling out the profile, the user allocates the degree anonymity that she wants. even the user selects total anonymity, platform mediators can still investigate and regulate user conduct (through geography, personal data, photos containing personal information, stylistics, spelling and punctuation texts, etc.) maintain platform trust. further, the platform gives user crowd-sourced rating, implements review system and allows advertisers place and manage ads. ... your profile your profile page that describes your career history, education, and other related content that you may want publish. the user information includes: name and surname date birth contact information current occupation position professional headshot skills and experiences business ads keywords included the search rating and review form (which can filled out other users based previous business transactions), well advertising form for their goods and services. chat this refers communication between the users real-time. all messaging history the chats stored client-side (mobile/desktop) and encrypted using end-to-end protocol. the content the chats (photos, videos, files) also encrypted and stored the same manner. deals this refers agreement that two more parties enter for their mutual benefit onties.network. our case, "deal" denotes the economic exchange tie tokens for some products, goods, services currencies any form. also implies investing startups, projects and participating token generation events. ... invoice list goods sent services provided, with statement the sum due for these. reference ties.network: user named contracts deal with party complete job service. then presents with form that proves the job/service was completed and requests payment. accepts the invoice and pays with tie currency. ... escrow and disputes payment transferred smart contract escrow, which only released when the results the transaction are accepted all parties involved. when and only necessary, ties.network arbitrators would intervene resolve disputes (for further information see further "self-organization and motivation"). ... cryptocurrency trade with tie tokens the essence the platform indicates trade and exchange, give and take, and purchase and sale with tie tokens. search results users can search profiles wanted employers, services, organizations, individuals, and the like. the search results are presented list with filters (e.g., individuals, projects, connections, ratings). project project ties.network instrument for users' collaboration within certain industry allowing users discuss/share their ideas, make financial transactions between the project team members and collect finance from other users the platform. ... basic attributes project: the existence project owner (public anonymous). the existence project moderator (role within the project). the existence multiple signature owners the project wallet. the existence solid idea and project description. possibility creating short name for the project promote outside the network. possibility creating public and private projects. possibility creating temporary permanent projects. possibility publishing project materials (photos, videos, documents, text, comments). possibility discussing project materials. possibility shutting down the project. possibility adding new people the project and creating channel for entry. instruments collaborative financing the project (fund raising the project's wallet). possibility creating derivatives for funding different parts the project. work process example access the platform provided via mobile client (android, ios, windows phone) well desktop versions the platform for all main operating systems (windows, macos, linux). the registration process involves setting-up wallet (personal public with signatures) and account (with without personal data). the user chooses certain industry/field and either creates project joins existing one for discussion, participation investment purposes. the platform helps find contacts clients, conduct deals and issue invoices. users buy tie (the token used for deals and invoices) through simplified registration process. tie wallets are available for instant transactions using internet payments for paying person (using nfc codes). tie can traded for other cryptocurrencies the platform's exchange outside exchange. economics ties.network platform does not take commission from money received from goods services, nor does take share any project. instead, ties.network imposes taxes and commissions services repay moderators and maintain its service. platform revenue sources ties.network gains its revenue from the following proceeds: premium accounts escrow fee premium accounts provide users with higher visibility compared other users. such promotion will help get new and relevant connections faster, that will also help user build personal rating quicker. premium accounts are charged based monthly subscription. user can turn subscription on/off any time. escrow will allow users have guarantees upon completion certain contract. escrow can provided any user (both premium and non-premium). each contract can protected one escrow. escrow cannot cover more than one contract. each these proceeds will used pay moderators and ensure optimum platform efficacy (for further information see "self-organization and motivation"). revenue sources for nodes ties.db gains its revenue from the following sources: storing content the node server retrieving content from the node server when the user places the content the database the node server, she pays the node's service fee for storing and processing content. the system does not only motivate node owners utilize the process, but also prevents attackers from littering the database. later the platform refunds user expenses case users show signs malicious activity and there collusion between the participant and the node (for further information see further "self-organization and motivation"). user costs for storage well for content retrieval come from the platform budget. ties.network architecture architecture features fig. high level overview the platform architecture ties.network, platform suitable for striking business deals, conforms the following requirements: decentralization the ties.network platform represents decentralized network servers (nodes). client applications connect nodes within the network. the heart each tinode the blockchain that fosters decentralization. the moment, various blockchain versions can used for ties.network. ethereum will used for the initial stage but can transfer another blockchain with smart contracts, for example, rchain [], necessary, meet network growth and other requirements such scaling and speed, ethereum cannot address scalability issues. stability. the platform resistant malicious activity the participants (stability sybil attacks, the byzantine generals problem, etc.). blockchain intrinsically resists the malicious behavior individual network members. however, there something else besides the blockchain the system, additional efforts are required ensure sustainability. will return this issue when consider data storage chapter anonymity individual servers and users, well privacy communications between servers and users. traditionally, masking and traffic encryption methods such tor have been used provide anonymity and privacy for both platform clients and individual nodes hiding their address. however, these methods are too slow and server-synchronized data require far more powerful speed processing. resolve the issue, use hyperboria mesh network that uses the cjdns protocol []. storage data the ability store data and conduct search through large amount structured data. scalability. the capability the platform handle growing amount work order accommodate member growth. open-source all platform components have open-source code and are published with open license. publicity. anyone can join the network support system installing the open software the system. profitability. users can profit from the platform. speed the platform includes fast processing achieve real-time computation and overcome the lag caused current cloud-based models. expansion possibilities the platform supports third-party applications (dapps) and provides new model for building successful and massively scalable applications. architecture layers high-level can distinguish the following layers the platform. ticlient client application ties.db public decentralized database smart contracts blockchain hyperboria network users interact with ties.network with client application ticlient. ticlient connects ties.db and blockchain. ties.db used store and retrieve user data. ticlient and ties.db use smart contracts blockchain for financial transactions and ensure stability critical operations. all the nodes are connected through hyperboria network provide speed, anonymity and end-to-end encryption all communications. data storage ties.network deals with large amount data, must choose the right place store it. the distributed data repository should made available for applications running top the blockchain with the following qualities: distribution publicity resistance the byzantine generals' problem and other forms attacks public network sharding support (the ability replicate only part the data each node order increase data storage capacity) speed ability store structured data ability delete data the problem that there implementation currently available that meets all these requirements. there are some decentralized file storages but they have drawbacks. the main one that solution provides tools for searching the files their content, which critical for most applications. will overview current solutions chapter and underline their limitations. and the next chapter are presenting our own universal solution for decentralized structured data storage ties.db. ties.db ties.db: overview there are many implementations distributed databases that meet all the above requirements except one byzantine fault tolerance (see therefore, they can not public. propose ties.db, which brings bft nosql distributed databases and preserves their other qualities. ties.db new-generation decentralized database with the following innovative interfaces: distribution ties.db supports unlimited number replicas, each which can coordinator (see requesting any one them, the user gets access all data. publicity ties.db created for operation the public sphere. new nodes can added the network and will take part the load any time. resistance the byzantine generals' problem and other types attacks public network all data placed ties.db signed owner (see nodes cannot arbitrarily change the data, nor can they corrupt data when replicating other nodes. attempts substitute are immediately detected through changes the electronic signature. any participant who does so, attempts so, will instantly removed from the network. external blockchain (for ties.db) used for tie deposits, setting access rights and mutual settlements between the nodes. sharding support each node responsible for storing certain range primary data keys. data replication has scalability, can grow with the network. speed due the data storage principles (see the read/write speed ties.db will almost identical similar private databases, such apache cassandra. ability store structured data data stored ties.network complements its platform. can json document with structure, which useful for particular applications. ability delete data data deletion supported ties.db. although instant data deletion cannot guaranteed, data will deleted the nodes act non-maliciously. malicious node can never delete the data however can not store everything, since only certain primary key intervals can forwarded it. query language with ability conduct search using more than the primary key use secondary indexes similar integration methods elasticsearch with cassandra the elassandra project, that allow secondary key search well full-text search. addition the ties.network project, ties.db can also used for other projects. relies blockchain, which supports turing-complete smart contracts. therefore, can used for other distributed blockchains like ethereum, rchain, and others. ties.db: data organization principles since the database needs satisfy wide range blockchain applications, flexible for rapid processing power, resistant the malicious behavior other nodes, provide sufficient level replication, and have mechanisms motivate participants support the network, the designed with the following properties: the database public, the user (client) the database identified its public key. the public key the user id. each user can send transactions the database. and each transaction must signed this user. the new owner-signed record created the user. only the owner (or the user for whom the trust installed through the permissions mechanism implemented smart contract the blockchain) can change the record after creation. everybody can read all the records. every unique user identification code creates separate records. more complex permissions can installed using smart contract the blockchain (for example, trust between specific users, rights create delete tables, etc.). all permissions must checked for transactions and replications. the mandatory cryptographic signature each record ensures that record can changed removed malicious party without knowing the private key. data storage remains resilient the byzantine generals' problem attack, even without consensus mechanism while speed remains the same that nosql databases. the other hand, attacker can generate sybil attack, where single adversary controls multiple nodes network, unknown the network that the nodes are controlled the same adversarial entity. can solve this issue with "motivation" our incentive system. ties.db incentive system public network type network where anyone has access and can connect other networks the internet. incentives are usually given motivate participants and encourage ethical participation. ties.db similar ethereum swarm offers the following incentives: reward for data extraction reward for data storage rewards are allocated from the funds the user who makes inquiries. since payments through the blockchain are slow, two methods can used for fast payments: off-chain transactions and "chequebooks." off-chain transactions, the user needs create off-chain channel with each node the database, use intermediate channels between nodes. since such channel requires its own funding repository, such approach can very expensive, the "chequebook" approach preferred. before accessing the database, the user deposits part their funds smart contract "chequebook", and funds can used payment reward. the chequebook contract assumes the following: the contract monitors the total amount issued each recipient the time the connection. when sending cheque, the owner must memorize the total amount sent each recipient. cheque cashed if: the address the contract corresponds the address the cheque. the cheque signed the owner (user public key). the total amount the cheque larger than the amount the previous cheque given the same recipient. participants use "cheques" reward nodes. the recipient node can only save the last received cheque from each user and cashes depositing the "chequebook." reward for data extraction the data the nodes has certain level replication. specifically, the data with specific key stored only part the nodes, for example, them. however, the user can refer any node for the data, which then acts "coordinator." user request the coordinator determines these nodes the data keys and routes the request them. the data returned the nodes checked the coordinator for compliance with electronic signatures and compared the timestamp, after which the most recent record returned the user. for this work, the incentive has fulfill the following conditions: faster nodes receive more payment. nodes that return old data would receive less payment. delinquent nodes (that fail return the data all) receive payment. the coordinator receives fixed fee. the coordinator issues invoice with the data, which includes information the nodes used. later, the user writes cheque for each. then, the coordinator sends the cheques the nodes. also sends the update the data nodes that failed return valid data. protect against malicious coordinators and delinquent users, each node maintains list users from which expects payment. the debt level exceeds certain threshold, the node may stop accepting requests from these delinquent users and coordinators. and the lists are updated cheques have been received. reward for data storage the reward for extraction indirectly incentivizes storage data but does only for popular and often requested data. encourage long-term data storage, especially data are rarely requested, some sort data storage incentive needed. this piece ethereum swarm describes the system rewards for storage. nodes enter into data storage contract with the information owner for period time. the storage can paid the time data storage (update) after certain period time provided that the data actually stored. the event loss data detected during the duration the contract, the node may penalized, each node requires initial registration with security deposit. when you store data, the node returns receipt that proves that has accepted the file for storage. this receipt then allows you check the storage situation the associated data and, necessary, initiate legal smart contract penalize the offending node. since data not static, record with the same key can rewritten several times. this means that not only can the original record correspond the presented receipt, but record with the same key that newer the timestamp can also correspond. when the user initiates data deletion operation, instead physically deleting data, the data replaced with special "zero" record. the record can physically deleted after expiration its storage contract. ties.db: full-text search simple nosql databases, quick search with small number nodes possible only with the primary key. thorough keyword search difficult achieve without secondary indexes and full-text search capabilities. this respect, ties.db differs from nosql databases. suggest solution similar elassandra [], which uses the local full-text indexes elasticsearch each node the distributed nosql cassandra database. full-text queries are sent the coordinator (see all nodes, mixed and returned the client. since additional indexes are created locally and independently each node, byzantine generals' problem longer concern here. conclusion built according the above principles ties.db solves the problem fast public data storage for decentralized applications, which need perform advanced searches the stored data. this unique solution the moment. ties.db public and can used any decentralized application ethereum. the future ties.db can ported any blockchain with turing-complete smart contracts. cjdns and hyperboria network solve anonymity and privacy requirement, use hyperboria network. cjdns (caleb james delisle network suite) networking protocol and reference implementation, founded the idea that networks should easy set up, protocols should scale smoothly, and security should ubiquitous. cjdns' project page boasts that implements "an encrypted ipv network using public-key cryptography for address allocation and distributed hash table for routing." essentially, the application creates tunnel interface host computer that acts any other network interface and powerful that allows any existing services you might want face network run long that service already compatible with ipv. all traffic over hyperboria encrypted end-to-end, stopping eavesdroppers operating rogue nodes. every node the network receives unique ipv address, which derived from that node's public key after the public/private keypair generated. this eliminates the need for additional encryption configuration and creates environment with enough addresses for substantial network expansion. the network grows size, the quality routing also improves. with more active nodes, the number potential routes increases both mitigate failure (think "malicious generals") and optimize the quickest path from sender receiver. overall, cjdns not anonymous, nor intended be. rather, users use pseudonyms hide their identities. better conceal your identity, you can periodically change pseudonyms make unclear whether the requests come from one several sources. advantages the hyperboria mesh network: agnostic towards how the host connects peers. meaning, doesn't matter much the peer need connect over the internet physical access point. encrypted end-to-end, stopping eavesdroppers operating rogue nodes. every node the network receives unique ipv address. this eliminates the need for additional encryption configuration and creates environment with enough addresses for substantial network expansion. the ipv addresses assigned the nodes are not related their location, which makes impossible know the physical location the node. high processing power. disadvantages the hyperboria mesh network: the communicating nodes only know each other's ip, not those other nodes with which they are not directly connected to. traffic conducted via the shortest path, all intermediate nodes know which nodes communicate but not know what, and where they are. the first drawback can circumvented the following: node connected network communicates with tunnels only with trusted nodes, any exist. hyperboria's own intermediate node created, and the node linked the tunnel the system. instead your own site, you can use trusted one, one exists. ties.network users can use this method connect the network. the second drawback can reduced altering the ipv identifier and the key pair your own node. for intermediate nodes, passing traffic will look like coming from different nodes. despite these drawbacks, hyperboria compatible for linking the ties.network nodes into network, because allows users show their real address only trusted nodes trusted existing third-party hyperboria node. other words, the fact that any traffic the network automatically encrypted makes unnecessary connect nodes through direct tunnels. the same time, the connection speed remains high, and the platform gives you the security publish ipv node addresses for connecting clients and for load balancing. users who want anonymity can benefit from additional connectivity the nodes where some the nodes are published tor hidden service and access them only achieved through tor. for greater anonymity, you can use tor with the vpn. thus, the anonymity the platform realized placing hyperboria, and privacy provided mandatory encryption all traffic, regardless overlay services. discerning clients can use tor vpn for connection with nodes. fig. anonymity and privacy client users interact with the system using the ticlient program. the client supplies the user interface, stores keys, interacts with the blockchain and tinode nodes, well with other clients via chat protocols. chats sum things up, chat software implementation necessary for business communication and improved collaboration. ties.network, chat using end-to-end encryption, such bitmessage, will implemented, connect network users. node and client interaction schematic fig. node and client interaction schematic determination factors for the solutions used this chapter consider the available technologies and justify our efforts make better approach public decentralized data storage. while not use the solutions reviewed this chapter considered them thoroughly and found them inappropriate for being used ties.network. here explain why. byzantine generals' problem open-source-platforms engender certain challenges, first and foremost which the so-called byzantine problem (or "the byzantine generals' problem") []. reliable computer systems must handle malfunctioning components that give conflicting information different parts the system. this situation can expressed abstractly terms group generals the byzantine army camped with their troops around enemy city. communicating only messenger, the generals must agree upon common battle plan. however, one more them may traitors who will try confuse the others. the problem find algorithm ensure that the loyal generals will reach agreement. the "byzantine generals' problem", otherwise known "byzantine failures", are considered the most general and most difficult class failures among the failure modes. the so-called fail-stop failure mode occupies the simplest end the spectrum. whereas fail-stop failure model simply means that the only way fail node crash, detected other nodes, byzantine failures imply restrictions, which means that the failed node can generate arbitrary data, pretending correct one, which makes fault tolerance difficult. this problem, several army factions surround castle they hope sack. general leads each faction and one general the lead general. only simultaneous attack ensures victory. also, since the factions surround the castle, they are dispersed, making centralized command difficult. the generals must send messages between the factions relay the attack time. however, some generals are traitors and will not obey the command will relay the wrong attack time the other generals. the generals not know who loyal and who traitor and there way find out. problem: how can ensure coordinated attack sack the castle? implications distributed system, any inputs (messages) the system (the agreed upon time the attack) must trusted. digital networks usually have millions members (the generals) who are dispersed globally and since there centralized command (no central governance), impossible for you know each the members. how can you trust the other members the network and ensure that the inputs the distributed ledger are accurate and that the ledger, itself, has the correct information? the ties.db architecture solves this problem and regulates successful "coordinated attack" providing decentralized, self-governing network that vets all incoming transactions and uses secure cryptography sustain trust despite lack central governance (see and onwards). blockchain database the blockchain already distributed data repository. why not store data directly blockchain? new implementations blockchain, such ethereum, allow you also store smart contracts, among other data. smart contracts allow distributed applications (for example, dapps ethereum), which also store user information. currently most simple applications store all their data blockchain. however, blockchain data storage has significant drawbacks: blockchain immutable. everything stored blockchain remains there forever and cannot removed. this serious drawback given that most the information users` interaction temporary and can deleted later on. eternal storage information also works against anonymity. data capacity limited. each node complete replica other nodes. result popular application may cause the rapid inflation the blockchain size all the nodes simultaneously. some point, the blockchain may become too large size and exceed the capacity mass-produced hard disks. this occurs, would need expensive equipment that could lead unwanted centralization. slow. the throughput the ethereum blockchain, the most production-ready blockchain the market, just about tps. absolutely not enough for popular decentralized application. primitive key-value storage without ability perform complex search within users' data. thus current blockchain implementations have several disadvantages making their use data storage ineffective. they are slow dozen transactions per seconds for total network), have limited capacity due excessive replication and immutability and are primitive functionality (they are simple key-value databases without ability perform complex search). therefore, blockchain does not meet the requirements for the decentralized data storage are looking for. ipfs ipfs (interplanetary file system) distributed file system based dht (distributed hash table) and the bittorrent protocol []. uses content addressing merge and integrate different file systems. advantages devices only store needed files. there's need trust peers, since addressing done via the hash contents. ipfs provides resistance "flooding" (i.e., loading useless files into the network) peers downloading only the necessary files. ipfs has high transfer rate (thanks bittorrent). disadvantages ipfs only stores files (unstructured data, content search). user can only leave the network once file distribution complete. other participants must online guarantee data storage. the files are static (i.e. unchangeable). ipfs does not delete files. both ipfs-based social networks, akasha (ethereum ipfs) and the trading platform openbazaar [], have all the disadvantages the ipfs system, including storage limitations, and users are only able leave the network once file distribution complete. don't find ipfs suitable for our data storage and have find better solution. decentralized cloud file storages such repositories allow you merge individual devices into common cloud storage, similar dropbox [], but with lower costs. owners such services (also called "farmers"), provide place store other people's files for certain cost. they use cryptographic proofs measure certain data such proof storage proof retrievability. both trader and "farmer" use cryptocurrency medium for trade. such projects are mainly created with dht technology and content addressing. some entrepreneurs also use blockchain and smart contracts. the most prominent distributed storage protocols are sia [], storj [], ethereum swarm [], maidsafe []. all them are built using similar principles, while ethereum swarm decentralized platform for applications that also houses dapps. advantages files are stored the cloud and are available whether the owner online not. high transfer rate. guaranteed storage security and file extraction. you can delete unwanted files. disadvantages storage files only (unstructured data, complex search). files are tatic. storage paid option. distributed file repositories are not suited well for storing structured dynamic information (such user data social network) because their data search capacities are severely limited. for instance, such repositories, are not able search keyword, location, specific publication the user. distributed databases overview the cap theorem makes impossible obtain the fully distributed database that would ensure consistency, availability, and partition tolerance. our case, need distributed database resistant partitioning but constantly available (availability partition tolerance eventual consistency), because need quickly receive response from the system request. this limits our selection near-nosql databases, because acid sql dbmss primarily provide consistency. there are many implementations distributed nosql databases like mongodb [], cassandra [], rethinkdb that are easy use and configure cluster with replication and sharding. replicas are incomplete, that is, they imply sharding, which type database partitioning that separates very large databases the into smaller, faster, more easily managed data parts. the client works with one the replicas, and the data automatically synchronized with the others. for load balancing, sharding can used when part the data stored only part the replicas. adding new replica the cluster scales the cluster, and some implementations (for example, cassandra) allow the replica automatically control part the cluster work. nosql databases provide "eventual consistency," that is, the system eventually consistent. updates are made given data item for "long enough" period time, then, eventually, all reads that item will return the same consistent value. nosql databases can store both simple key-value, and maintain the internal structure the value, well additional indexes. the most advanced ones also have basic transaction support and sql-like query language (for example, cassandra). all the above, this database class may seem ideal for use blockchain. but malicious replica added such cluster, which starts tell other replicas the cluster that all data needs deleted, the result will docile deletion the data with the remaining replicas and corruption the database. thus, the coordinated work replicas now possible only trusted environment cluster such databases not stable the problem byzantine generals). maliciously working replica placed cluster, can cause the destruction the entire cluster data. advantages: high speed linear peed and storage size scaling resistance unavailability certain replicas disadvantages: trust factor vulnerability the byzantine generals' problem. so, distributed databases have the only disadvantage but still the essential one. they can not used decentralized system without modification. note, that ties.db brings byzantine proof tolerance nosql database (see and onwards). due special data organization and incentives mechanism ties.network does not need consensus procedure, where nodes the network share information about candidate transactions, because the user's encrypted signature protects the information. that is, harmful nodes can not delete and change data other nodes without showing noticeable impact. bigchaindb the blockchain implementation, called bigchaindb [], ipdb (interplanetary database) claims powerful transaction speed million per second) and enormous storage capacity (due distributed storage with partial replication). bigchaindb gets these benefits through starting with big data distributed database and then adding blockchain characteristics decentralized control, immutability and the transfer digital assets. unfortunately, bigchaindb's architecture fundamentally flawed that each node has full rights write the common data store, which means that its system vulnerable the problem byzantine generals'. other words, all bigchaindb nodes connect single rethinkdb cluster. something bad happens that rethinkdb cluster, all other nodes that blockchain fall because they lack independent storage. the authors this project know about it, promising think about this later []. however, fixing the fundamental flaws the underlying architecture after the release the product very laborious and often impossible, this can lead significantly different product with different architecture. such easy approach the fundamental problem causes criticism from the project community [], since the high speed and mass characteristics bigchaindb, demonstrated the absence bft (byzantine fault tolerance), are fact those demonstrated the rethinkdb and mongodb databases used for data storage. but since you still need complete trust between the nodes, why not use the specified databases directly? our summary the bigchaindb the following: advantages speed and storage are comparable distributed nosql databases disadvantages bigchaindb ordinary nosql database that additionally has all the blockchain drawbacks. permanency (the data can't deleted legally, but can deleted maliciously). susceptible the yzantine generals' problem, thus can't used public network. for these and other reasons, have concluded that bigchaindb unsuited for ties.network data storage. conclusion having carried out thorough analysis existing storage solutions conclude that current solution meets the high demands emerging decentralized applications. what they need decentralized public database. that why focused our efforts developing ties.db, which can use not only for ties.network but can boost the development other feature-rich decentralized applications ethereum blockchain. self-organization and motivation platform revenue sources profits come from the following sources: premium accounts escrow fee income for nodes comes from the following: placing content the node server retrieving content from the node server users must pay for storing their data the database servers. that allows the network sustain itself making its support profitable. also prevents flooding the network with garbage malicious data. but such model networking not very popular the moment. for example, jim (hypothetical person) signs ties.network. before can anything, needs place deposit smart contract "chequebook." that his paid registration. for ordinary social networks, where users just have fun, such step would have meant the end our network why pay for something you can get free somewhere else? since ties.network different that earns you money, feel justified asking for initial payment and commissions down the line help continue offering you this service. unlike centralized competitors who get their revenues from advertising from using freemium models, ties.network belongs the community its revenues must spent developing and maintaining it. one the ways that revenues will used will for paying moderators and for platform maintenance. thus, the profit the project will distributed pay for key individuals who support the project. these are: content moderator (who has the authority delete content and ban users). "super-moderator" (who investigates collusion between nodes and participants, manages the budget, and rejects, fires, participants). moderators (who arbitrate disputes). technical positions that include developers (who develop software for ties.network). ordinary users (covering fair user expenses) the platform will cover the users' expenses their fair use the platform making eventually free use. fairness platform use will observed budget super-moderators. platform roles social roles: content moderator (individuals given special authority enforce the rules the platform and regulate, delete, ban content) budget defense super-moderator (this moderator investigates collusion between nodes and users, banning nodes and users necessary) judges (settling disputes between users) ordinary users technical role: developer (develops software for ties.network) referral system propose referral system motivate individuals join ties.network and affiliate initial investment. already registered member the network invites another participant through alternative channel, giving them special invitation code. new participant enters with this code, while part the money from the inviter immediately transferred the deposit, that is, new user can start using the system immediately, without any initial investment. the end the reporting period, the cost invitations and payment for data storage can offset from the profit the project. for this system work, the budget managed the budget defence super-moderators who must only use coins set aside for this purpose. tie tokens tie tokens are the digital currency used members the ties.network platform. operations with tie tokens purchase and sale tokens conducted via the internal platform exchange via outside exchange which lists tie tokens. registration the user sends participation fee the system, which then refunded out the platform budget. all deals transacted over the platform are paid for with tie tokens (which can converted into other cryptocurrencies (e.g., btc, eth, ripple) and into fiat currency). conclusion this paper reviewed the proposal ties.network, platform for business and social networking transactions. the platform publicly distributed system self-motivated servers that serve common purpose. the paper also outlines the architecture and key interfaces ties.db. these include: that public distributed nosql database with powerful processing speed, that supports secondary index and full-text search capacity, and that can used conjunction with any blockchain that supports smart contracts. references leslie lamport, robert shostak, and marshall pease. the byzantine generals problem. acm transactions programming languages and systems (toplas), ():-, july http: //research.microsoft.com/en-us/um/people/lamport/pubs/byz.pdf. https://ethereum.org/ https://www.rchain.coop https://www.torproject.org/ https://getip.net/ https://hyperboria.net/ https://github.com/cjdelisle/cjdns https://ipfs.io/ https://en.wikipedia.org/wiki/distributed_hash_table https://en.wikipedia.org/wiki/bittorrent https://akasha.world/ https://openbazaar.org/ https://www.dropbox.com/ http://sia.tech/ https://storj.io/ https://github.com/ethersphere/swarm https://maidsafe.net/ https://en.wikipedia.org/wiki/cap_theorem https://en.wikipedia.org/wiki/acid https://www.mongodb.com/ http://cassandra.apache.org/ https://www.rethinkdb.com/ https://www.bigchaindb.com/ https://docs.bigchaindb.com/en/latest/bft.html https://github.com/bigchaindb/bigchaindb/issues/ https://reddit.com/r/bitcoin/comments/jwjf/bigchaindb_a_prime_example_of_blockchain_bullshit/ viktor tron al. "swap, swear and swindle incentive system for swarm", http://swarm-gateways.net/bzz:/theswarm.eth/ethersphere/orange-papers//sw%e.pdf http://www.elassandra.io/ https://www.elastic.co/products/elasticsearch