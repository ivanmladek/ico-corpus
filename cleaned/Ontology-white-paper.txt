technology white paper version date updated:// new high-performance public multi-chain project distributed trust collaboration platform www.ont.io technology white paper abstract throughout history people have established trust through technology, rule law, and communities. however, trust and collaboration between entities involves multiple sources and isolated systems, which means can costly, and therefore hinders the breadth and depth collaboration potential. although the technology has advanced great deal recent times, too many factors are still hindering collaboration with trust. these include fragmentation trust systems, the missing role the individual, inaccurate identity verification, inability dispute false information, etc. areas such social governance, economic cooperation, and financial services, the cost establishing trust huge. the decentralized, tamper-proof blockchain has brought trust through technology certain industries, however, further integrative mechanisms are needed join together diverse trust systems and applications into single new trust ecosystem. ontology establishes the connecting infrastructure for trust ecosystem, with effective coordination trust and data sources, well providing the infrastructure for distributed application development. this paper focuses ontology's technological framework, key technology principles, and core protocols. ontology supports various collaborative trust scenarios. will continuously expand modules and protocols response scenario and application needs. this version the technical white paper describes the architecture and protocols ontology its first stage. the technical white paper will subsequently updated accordance with application development. (c) ont team www.ont.io technology white paper contents .introduction ................................................................................................................... .glossary .......................................................................................................................... .chain group structure .................................................................................................... .distributed trust framework ........................................................................................ ontology identification protocol ........................................................................... ... ont generation ............................................................................................ ... self-sovereign................................................................................................... ... multi-key binding ............................................................................................. ... authorized control ........................................................................................... trust model ............................................................................................................. ... centralized trust model ................................................................................... ... decentralized trust model ............................................................................. verifiable claim .................................................................................................... ... life cycle ......................................................................................................... ... anonymous claim .......................................................................................... .distributed ledger ....................................................................................................... ontology ledger .................................................................................................. ... consensus mechanism ................................................................................... ... procedure protocols ....................................................................................... ... attestation design .......................................................................................... smart contract ..................................................................................................... shared data contract model ................................................................................ merkle tree storage model .................................................................................. ... merkle hash tree ............................................................................................ ... merkle audit path ........................................................................................... ... merkle consistency proofs ............................................................................. (c) ont team www.ont.io technology white paper ... merkle patricia tree ........................................................................................ hyradao ............................................................................................................... ... built-in dao data prediction .......................................................................... ... external trusted data source ......................................................................... core protocols ............................................................................................................. multi-source authentication protocol ................................................................. ... external trust certification ............................................................................ ... identity authentication between ontology entities ..................................... user authorization protocol ................................................................................ ... roles................................................................................................................ ... authorization .................................................................................................. ... mutual registration ........................................................................................ ... access control strategy .................................................................................. ... authorization certificate ................................................................................ ... delegated authorization ................................................................................ distributed data exchange protocol .................................................................... ... roles................................................................................................................ ... user authorization .......................................................................................... ... secure transaction ......................................................................................... ... data exchange process................................................................................... ... privacy protection .......................................................................................... .ontology application framework ............................................................................... application framework model ............................................................................ data marketplace ................................................................................................. data dealer module .............................................................................................. cryptography and security modules ................................................................... ... secure multiparty computation .................................................................... ... fully homomorphic encryption .................................................................... ... digital copyright............................................................................................. (c) ont team www.ont.io technology white paper user authorization controller.............................................................................. ... authorization policy setting .......................................................................... ... access control ................................................................................................ claim management module ................................................................................. globaldb ............................................................................................................... ... distributed transactions ................................................................................ ... storage sharding ............................................................................................ ... load balancing ............................................................................................... ... sql ........................................................................................................ .postscript ..................................................................................................................... reference ......................................................................................................................... contact ....................................................................................................................... (c) ont team iii www.ont.io technology white paper introduction ontology integrated multi-chain and multi-system framework composed different industries and regions that pass through ontology's protocols allow mapping between different chains and traditional information systems. for this reason, ontology also referred "ontology chain group" "ontology chain network", that is, connector between blockchains. decentralized data collaboration and trade decentralized collaborative systems decentralized content sharing decentralized reputation system ... application protocols application modules application framework sdk data trade module data protection module api data synchronization module multi-source verification module ... registration/verification protocol data reading protocol multi-source verification protocol user authorization protocol data exchange protocol ... core protocols distributed trust framework multi-source identity verification data protection authorization smart contracts ... trustworthy certification trustworthy data storage distributed identification distributed ledger layer ontology ledger neo more blockchains more nonblockchain systems figure ontology's technology framework (c) ont team ... www.ont.io technology white paper ontology's core complete distributed ledger system, including the core ledger, smart contract system, and security system. the distributed ledger important underlying storage infrastructure ontology; the decentralized, mutually managed, and tamper-proof features distributed ledger technology are key creating trust between entities the network. the distributed ledger includes consensus and smart contract system, and provides consensus, storage, and smart contract support for the upper application framework. ontology and its distributed ledger technology use decoupled architecture (which the default for the ontology ledger) that can support neo, ethereum, and other blockchains the underlying layer. the ledger level, creatively propose shared data contract model that decouples data storage and business logic, and implements different business logic with the use smart contracts improve the scalability and flexibility the architecture the whole. the distributed trust framework the core logic layer ontology. use ont connect different authentication services and provide source trust for people, money, goods, and things. ont decentralized, self-manageable, privacy-protected, and safe and easy use. the trust framework establishes distributed trust model and distributed trust delivery system through verifiable claims[][], and uses the signature algorithm and zero-knowledge proof protocol assure privacy protection verifiable claims. ontology uses series protocol standards. proposals include identity protocol, multi-source authentication protocol, user authorization protocol, and distributed data exchange protocol. range protocols that are compatible internationally are implemented, such did[] designed wc. the cryptographic signature protocol also supports cryptography such the chinese national cryptography standard, rsa, and ecdsa. the distributed data exchange system compatible with the widely used authorization protocols, e.g. oauth[] and uma[], enable the architecture meet the goal being open and standardized, and support future extensive ecological cooperation and expansion. for application service provision, ontology provides the infrastructure for application developers directly provide distributed services top ontology without having knowledge how develop distributed systems. short, ontology provides series application frameworks, including apis, sdks, and various application modules that allow application service providers with wide range technological backgrounds develop their own dapps and make dapps service (daas). this makes blockchain easy use for all. ontology also includes variety advanced modules: cryptography and data protection modules, data exchange markets, global transaction databases, hybrid oracle, unlimited consensus engines, and more. the future, ontology will develop community developers and business partners, continuously enriching applications and modules promote the technological development ontology's ecosystem. (c) ont team www.ont.io technology white paper glossary ontology chain group also known the "ontology chain network", formed chains entities based disparate industries and regions combining together ontology. each chain uses separate distributed ledger and collaborates through interactive protocols. ontology distributed ledger one more core public service chains part ontology's distributed ledger/blockchain framework. provides core distributed ledger, smart contract system, and other services for all services ontology. entity participants ontology who can identified their ont id. ont ont decentralized distributed identification protocol based data from entity's identity service/s, connected with mapping services and other links. decentralized, self-manageable, privacy-protected, and safe and easy use. verifiable claim statement confirm claim made one entity about another (including themselves). the claim accompanied digital signature that can used other entities for authentication. ontology trust framework modules which make ontology's trust ecosystem including the distributed identity verification protocol, distributed trust model, distributed trust transfer, and other modules. multi-source authentication refers many different verifications covering various aspects the same entity create multisource verification. trust anchor entity that has been entrusted conduct verification. acting source for trust delivery chains and providing identity verification services. distributed consistent ledger incremental modification data storage mechanism decentralized network that maintained joint nodes. transparent and tamper-proof nature, provides trusted storage and smart contract support for ontology. (c) ont team www.ont.io technology white paper consensus each node confirms data written onto the ledger according protocol ensure consistency. smart contract executable code recorded the ledger runs through the smart contract engine which runs the ledger's nodes. the input and output each execution can also recorded the ledger. ontology application framework generic term referring application modules, protocols, sdks, and apis, facilitate fast, low-cost access third party dapps. hybrid oracle hybrid oracle service that provides credible external data the blockchain. with users can predict outcomes events outside the blockchain system and record these permanently the blockchain. (c) ont team www.ont.io technology white paper chain group structure the aim ontology build bridge between the real world and distributed data systems. due the diversity, complexity, and specialization businesses the real world, considerations performance, scalability, and applicability must taken into consideration, which hard use one public chain/ affiliated chain network support all scenarios. practice, different business logics require different chains meet the needs different scenarios with different access methods and governance models. also, many business scenarios not exist independently, and require diversified interaction with other scenarios. therefore, different protocols need provided between these different chains support inter-service process cooperation. figure hyper-converged chain group (c) ont team www.ont.io technology white paper based these requirements and models, ontology proposes hyper-converged chain group, which takes the form matrix grid. horizontal area there may public chains that provide basic common services, such entity mapping, protocol support for data exchange, and smart contract services. one more public blockchains, each industry, geographical area, and business scenario can have its own unique service chain that can meet its requirements for access, compliance, governance, consensus, etc. each can also use public chains provide basic services, such entity authentication, data exchange protocols, etc., well collaborate with other businesses. service chain service chain service chain smart contract smart contract smart contract ontology computation platform ontology computation platform interactive chain interactive chain affiliated main chain figure service chains using the ontology computation platform for cross-chain information exchange service chain service chain service chain smart contract smart contract smart contract ontology computation platform interactive chain ontology computation platform interactive chain affiliated main chain figure building dedicated interactive chain using ontology's computation platform (c) ont team www.ont.io technology white paper addition the use the public chain, there will also collaborations with chains related the industry the specific business. under different collaborations, the service chains involved may also vary, there may some small dedicated public/affiliate service chains that cooperate with one several service chains service points for specific business requirements. therefore, the vertical area, many business collaboration chains will emerge that will include special cross-chain collaborative support for smart contract services, business logic services, etc. the matrix grid architecture can form truly autonomous next-generation, versatile network. different business scenarios can find different ways apply the right service model through wide range collaborative methods. the various protocols ontology are not static and users can choose different protocols according different business scenarios, industry features, regulatory requirements, and governance requirements. therefore, ontology, protocols will continue part the development process, though the main aim maximize usability with different protocols and standards within each scenario make ontology have better compatibility and scalability with the world. ontology uses its distributed ledger framework satisfy different scenarios with the implementation one more configurable blockchains. the distributed ledger framework can also customize the service chain for specific business scenarios (e.g. different mechanisms for access, governance, consensus, storage, etc.). addition, ontology can collaborate with other existing blockchain systems and traditional systems through the use protocols. (c) ont team www.ont.io technology white paper distributed trust framework ontology identification protocol "entity" refers individuals, legal entities (organizations, enterprises, institutions, etc.), objects (mobile phones, automobiles, iot devices, etc.) the real world, and "identity" refers the entity's identity within the network. ontology uses ontology identifier (ont id) identify and manage the entities' identities the network. ontology one entity can correspond multiple individual identities. ont decentralized identity protocol that links and maps different authentication services single entity. decentralized, self-manageable, privacy protected, and safe and easy use. each ont corresponds ont description object, which used record the attribute information, such the public key, the ont id. description objects serve public information for storage the distribution layer the core ontology. for privacy reasons, the description object default does not include information about the identity any entity. scenarios ontology client produce ont ont records use ont records ... ont records ont ddo bind manage pubkey( controller list user signature ...... store ontology ledger figure ont system (c) ont team verify www.ont.io technology white paper ... ont generation ont type uri[], generated each entity. the generation algorithm ensures that there very small probability duplication two ont ids the same time when registering ontology, the consensus node checks see the has already been registered. ... self-sovereign ontology uses digital signature technology ensure that each entity manages their own identity. ont registered with the entity's public key indicate its ownership. ont id's use and its attributes need digitally signed the owner. entity can determine their own ont id's usage, bind private key, and manage its attributes. ... multi-key binding ontology supports variety domestic and international digital signature algorithm standards, including rsa, ecdsa, and sm. private keys bound ont need specify the algorithm used, and the same time, ont can bind several private keys meet entity requirements different application scenarios. ... authorized control the owner the ont may authorize other ont ids exercise management rights over their ont id. for example, the attribute information corresponding the ont may modified, another private keys can bound ont the original key lost. ont supports fine-grained permission management for each attribute and multiple access controls such "and", "or", the n". trust model ontology's trust model generates trust between entities using both centralized and decentralized trust models. different trust models can used according specific scenarios meet different needs. ... centralized trust model under this model one group entities act the trust anchor and the trust relationship between entities established based the trust anchor. the trust anchor specifies the entities trusts, and the other entities can turn designate other entities they trust. this format, with the trust anchor the (c) ont team www.ont.io technology white paper source, creates trust tree trust delivery created. each node the tree has path (its "trust path") the trust anchor, which its chain trust. when interacting with other nodes the tree entity that recognizes the trust anchor can verify its chain trust. the most mature and widely used trust system, pki[] centralized trust model. become trust anchor user must first apply for digital certificate. after approving the application, the certification center writes its identity information and public key into the digital certificate, and then adds the digital signature the certification authority. the digital certificate issued the certificate authority authenticates the binding between the user's identity and the public key. anyone can use the public key the certification center verify the authenticity the certificate, and then use the public key the certificate verify the user's signature and confirm its identity. the same time users who have digital certificates can also issue digital certificates other users subordinate certifiers, and the validity the digital certificates issued them guaranteed the certification center. the pki model every participant must unconditionally trust the certificate authority, and the trust relationship passed from the certificate authority layer layer between entities though digital signatures. the centralized trust model has many advantages. the strict method trust transfer and the clear trust and non-trust boundary are good features many scenarios and can solve many problems. however, there are certain disadvantages the centralized trust model. the dependence the central node may unsuitable for complex trust relationships, well for cases where there are higher demands for honesty and security. this method relying the central node can severely limit application flexibility. ... decentralized trust model addition relying specific central entities build trust relationships, entities can also build equally strong trust relationships themselves. trust transfer achieved through mutual authentication between entities. entities will have higher credibility they receive more authentications from other entities especially those other entities have high credibility. the decentralized trust model blurry trust model, and there clear trust boundary. under different scenarios different trust assessment methods can used evaluate the trust entities. because this high degree flexibility that the model has wide range uses real life. verifiable claim verifiable claims are used prove certain attributes entity. they can stored and transmitted data units and verified any entity. claim includes metadata, claim content, and the issuer's signature, while the content can any data. claims are formatted json-ld[], with signatures following the ldsignature specification[]. (c) ont team www.ont.io technology white paper ... life cycle cancel issue verify verifiable claim issuer apply verifier present owner figure verifiable claim lifecycle entities associated with verifiable claim fall into three categories: issuer, holder, and certifier. the life cycle verifiable claim includes the following five operations: issuance: any entity can issue verifiable claim attribute another entity. for example, school may give student their transcript issuing verifiable claim. when verifiable claim used validity period can set. when the validity period has passed the claim will automatically expire. storage: verifiable claims can issued either public claims private claims. public claims are stored distributed ledger ontology, whereas private claims are typically stored the entity's client and managed the entity itself. presenting: the owner the verifiable claim can choose whom the claim made public and which information shown without affecting the integrity the claim. verification: the verification the verifiable claim does not need interact with the issuer the claim, only needs use the issuer's ont obtain the public key information from ontology's distributed ledger. can then use the public key verify the digital signature the claim. cancellation: the issuer the verifiable claim can cancel their claim before the expiry date. the cancelled claim will not able validated. ... anonymous claim normal circumstances the claim owner exposes the full content the claim the verifier when makes claim. however, some scenarios the claim owner may not want expose certain content the claim the verifier. light this, ontologys offers anonymous verifiable claim technology protect the privacy its users. (c) ont team www.ont.io technology white paper anonymous claim technology solves the problem hiding the holder's information during the process issuing and presenting claim. the anonymous claim protocol entity receives two verifications their claim from two different verifiers. even the two verifiers wanted conspire together leak the information they hold, they would not able verify whether the information they received from the same entity. when making anonymous claim the issuer does not need provide the original claim the verifier, they only need provide zero-knowledge proof. the verifier can verify the authenticity the claim running validation algorithm with the issuer's public key, certificate, and assertion the attribute values contained the certificate, e.g. "age and "resident shanghai". anonymous claim usually xml json file that contains both public and cryptographic information. the public information includes all the attributes the anonymous claim, consisting three parts: the name the attribute, the type the attribute, and the value the attribute. attributes support variety data types, such strings, integers, dates, and enumeration types. the cryptographic information mainly includes the owner's own master key and the issuer's public information digital signature. during the presentation the anonymous verifiable claim the owner proves the third party verifier that owns anonymous claim from issuer. they can selectively expose some attribute values and hide other attribute values. addition, they can prove that some hidden attributes satisfy certain logical assertions. anonymous claims use the signature scheme[] and s-protocol[] achieve the features mentioned above. .... signature scheme the signature scheme consists three algorithms, namely the key generation algorithm, signature generation algorithm, and signature verification algorithm. this scheme provably secure under the strong rsa assumption. key generation gen: choose two random secure primes and compute choose random quadratic residues !(r, ..., output the private key !sk q), and the public key ..., signature generation signsk ({mi}): input values !{m, ..., mk}. compute the euler totient function !ph (n) p)ph (q) )(q choose large prime and large integer randomly. (c) ont team www.ont.io technology white paper compute the inverse module !ph (n), denoted which satisfies (mod (n)) compute integer rim (mod output signature (a, v). signature verification ypk ({mi}, v): v). input values !{m, ..., mk} and the signature (a, check and are the given interval and prime. check the signature satisfies (mod .... s-protocols s-protocols are efficient zero-knowledge proof protocols, which can used prover convince verifier that knows some secret, without conveying the secret any other information. there are some well-known s-protocols, e.g. fiat-shamir heuristic[] and schnorr signature scheme []. assume knows solution the following system equations then can use the following sigma protocol which standard notation written as: spk{x can proven using the following interactive protocol: chooses random integer !r. computes !(g and sends them !v. chooses random integer and sends !p. computes and sends !v. verifies whether satisfies the following equations (c) ont team www.ont.io technology white paper .... anonymous claim issuance issue anonymous claim recipient the issuer and recipient need run two-round interactive protocol follows: chooses random integer and sends !r. chooses random integer !v' and computes (mod n), where the master secret. then sends choose prime and integer !v'' random. computes the signature !(a, v'') the !r's pubic attributes !{m and sends !r. computes v'' and save the final anonymous claim (a, v). the recipient will get signature his public attribute values from the issuer running this protocol. the signature constitutes the cryptographic information anonymous credential. .... presentation and verification the holder anonymous claim can selectively disclose some attributes the verifier and keep the others private. the anonymous verifiable claim scheme also allows for proving the correctness certain assertions. keep the unrevealed attributes private, the holder needs prove his knowledge the unrevealed attributes. suppose there are attributes kept private among attributes {m, ..., mk}. the proof can constructed follows: choose random integer and use randomize the signature ra, build the proof using the protocol described section ...: spk{ra, v', hl} ypk ({m i}, a', v') output the proof illustrate the proof predicate, show how prove the inequality predicate some private attributes. greater than inequality predicate specifies attribute value and lower bound here give protocol show that without leaking the actual compute and decompose into the sum squares for integers: generate four random numbers !tui hide these four numbers. then construct the proof: spk{(ui ri} (c) ont team www.ont.io technology white paper choose random number !td hide the difference and construct the proof: spk{(u, construct the proof for spk{(m btd rd} output !(p, p). combining and (p, get the complete proof. the verifier can use the verification method described section ... check each subproof. the predicate true and only all subproofs are valid. (c) ont team www.ont.io technology white paper distributed ledger ontology ledger ... consensus mechanism ontology ledger supports the next generation ontorand consensus engine (oce). oce efficient, consensus-based version the dbft consensus protocol and verifiable random function (vrf) consensus engine. has reached near-infinite scalability and requires relatively low hashing rate, making network forks highly unlikely. dbft has demonstrated excellent stability and reliability during its operation neo's public chain and other affiliated blockchain projects. oce's block-creation speed only limited internet speed, usually resulting confirmations within seconds. oce selects who will participate consensus validation using verifiable random function and reaches consensus using byzantine fault tolerance algorithm[][][]. meanwhile, the seed will generated signatures validator group and direct the next validator group. oce also supports pluggable verifiers and online protocol recovery and upgrade. vote service block proposal service block proposal service relay client propose candidate blocks graded consensus send figure oce execution process (c) ont team vote block finalized, client notified www.ont.io technology white paper hi, h(sigi (r, start hi, h(sigi (r, collect pending txs, construct block hi, where concatenation lists. figure shows example merkle audit path. figure audit path [b, (c) ont team www.ont.io technology white paper ... merkle consistency proofs merkle consistency proofs prove the append-only property the tree. merkle consistency proof for merkle tree hash h(d[n]) and previously advertised hash h(d[ m]) the first leaves(m figure example merkle consistency proof. figure proof (,d[]) [c,d,g,l] ... merkle patricia tree some scenarios ontology need quickly prove transaction's final state for particular entity, for example prove the identity entity. using merkle proof will require proving each historical transaction one one, and using merkle patricia tree (mpt)[] efficiency can greatly improved. (c) ont team www.ont.io technology white paper mpt the combination patricia tree and merkle tree. contains key-value mapping relation, provides anti-tamper data structure based cryptography, and has determinacy, high efficiency, and security. determinacy: when looking data the same key-values will ensure finding the same result and will have the same root hash. efficiency: new roots can quickly calculated. when data changed, the time complexity insert, search, update, and delete (log n). security: when someone maliciously attacks another with dos attack and tries take control the depth the tree. limited tree depth will make this kind attack unachievable. hyradao hydradao data prediction and interaction module integrating smart contracts, cross-chain, and cross-data source collaboration. contains ontology's dao (distributed autonomous organization) and cross-chain data interaction (big data/ai) features. ontology's governance mechanism supports democratic and ai-automated propositions, voting, and verifications. unique dao address and polling token will created during the process, which allows dao automatically add funds and results ontology. once polling complete, dao will autonomously execute accordance with the tamper-proof smart contract. the mechanism allows data exchange and governance ontology function with flexibility and supports technology for large-scale automated network operations. ontology's oracle smart contract implementation logic follows: resolved fetch from datasource-a oracle-a yes fetch from datasource-b oracle-b fetch from datasource-c oracle-c agreed? validate integrity data sources yes valid update datasource figure processing logic hydradao (c) ont team wait $update_time for datasource updating www.ont.io technology white paper when any transaction executed the beginning end possible choose use the oracle smart contract. oracle smart contracts and their parameters must set the time the transaction created and stored the blockchain part the transaction. after the transaction has ended the contract logic automatically executed determine the outcome and tokens deposited the dao contract address are paid the participant who provided valid data information. through ontology's distributed data exchange protocol (ddep) real-time api access big data computing power provided along with data market participation the analysis and prediction transaction results verify its integrity. part the trust data service, transaction participants can bind trusted data sources utilize ontology access services validate accurate transaction status data before participating the transaction. for transactions that depend only the status the blockchain, the oracle smart contract queries the blockchain data directly from the blockchain interface upon authorization. for most transactions related the real world, oracle smart contracts require data get real world transaction results. when oracle smart contract needs access/read data the real world, each hydra-oracle randomly chooses one the multiple trust sources specifies threshold number for the data anchor. the end the transaction the global state verified and interactively updated via the specified trusted data source. ... built-in dao data prediction the charm decentralized systems not only the reduction costs and improvement efficiency, but also the advantage distributed group decision making. when executing contracts ontology there the option hook hydradao activate "public testing". for example, user wishes buy certain amount foreign currency from foreign currency exchange but the user not sure the pending order correct, may initiate dao project proposal and deposit certain amount margin mortgage. once sufficient amount approval obtained the proposal goes into the forecast period. any participant who accepts the proposal can attach fact statement and their signature. the participant may amend their order any time, but this requires additional margin. once the forecast period over, the dao contract will automatically lock the margin the contract and screen out the best proposals according the rules the proposal. those participants who made the most accurate predictions will rewarded. user initiated transactions are also automatically executed accordance with the best output. once the proposal submitted the dao the new proposal will evaluated and decided the token holders the entire network. during this period participants can submit facts and amend them any time. changing facts may also require voting and ranking. the dao incentive mechanism for ontology will ensure the proposal that receives the majority approvals and the closest the fact the one which receives the maximum reward. all usage data needs authorized the data owner relevant authorizing entities, and follow privacy regulations. (c) ont team www.ont.io technology white paper hydradao automatically starts arbitration after the forecast period completed. once arbitration triggered hydradao will calculate and sort all submissions and assign the dao contract funds the account the receiver the reward. finish off hyrdradao will output fact status bind the smart contract. ... external trusted data source avoid disputes, pre-defined configurable oracle smart contracts ensure that value transfer does not occur until smart contract validation conditions are met. oracle smart contracts can support any json api type for easy definition and development. trusted data source access process: select the data location, data source obtain frequency, expiration date, api certificate, privacy terms, and other input parameters generate oracle smart contracts. define the smart contract for other verifiers evaluate. descriptive information should include clear instructions explain the contract's function. the contract's label makes easy for users find the blockchain and enhances transparency. detailed "if... then..." descriptions can explain conditions for the transaction executed. association with real world legal documents oracle smart contracts use the contract publisher's electronic signatures sign the binding legal document. evidence put the blockchain uploading legal documents. notifying co-signers the contract according the terms the contract and parties involved, the participants who need sign are notified im/email/phone/etc. the contract will not execute until all signatories sign (before the deadline). the signatories not sign before the deadline the contract will fail. when participant signs the contract the oracle smart contract assigns the participant fund escrow address. recharging tokens for the oracle smart contract escrow address using external data source incurs costs. users must pre-credit the address created the smart contract, which will controlled the smart contract. complete the contract release once the contract signed and the deposit completed the contract will run autonomously ontology. once transaction completed, the smart contract from the escrow address will pay funds according the contract terms. funds that fail meet the requirements the transaction any fraudulent transactions will automatically returned the escrow account. (optional) data open platform, open data access protocol for some open data sharing platforms oracle smart contracts can interact directly with related offchain data, based provided apis and data usage protocols. based the open and transparent conditions, the terms and legal information the entire process will publicly displayed, all blockchain users can query/retrieve, and the non-profit nature such data will simplify the (c) ont team www.ont.io technology white paper configuration process for oracle smart contracts. there will need maintain the payment relationship, just maintain data and status updates. (c) ont team www.ont.io technology white paper core protocols multi-source authentication protocol multi-source authentication different from existing single-factor authentication systems. ontology can provide entities with multi-source authentication systems which integrate the authentication external identity trust sources and the endorsement entities ontology. not only can entity provide information who they are, they can also provide what they own, what they want, what skills they have, and other information related their identity create comprehensive identity portfolio. multi-source authentication protocol includes the following two modes: external trust certification:ontology binds ont external trust source with self-signed verifiable claim. any entity can verify the identity entity verifying the external trust source bound the ont id. the trustworthiness entity's authentication determined the trustworthiness and acceptance external trust bound the ont id. authentication between ontology entities: entities ontology can also authenticate each other issuing claims between themselves. ... external trust certification external trust certification supports the following two methods: self-introduction and importing through trust anchors. .... self-introduction users bind trust through social media, e-banking, etc., taking advantage existing trust systems. the principle very simple, first the user adds proof address external trust source ontology. then the user provides credible declaration the proof address, the format which follows: claim creation and expiration time. claim content: including the claim type, ont id, social media type, social media username, etc. signature: public key already contained the ont id. when the third party needs verify the user's external identity, first reads the certification address the user's trust source ontology, then goes the address obtain verifiable claim, and finally verifies the verifiable claim. (c) ont team www.ont.io technology white paper .... importing through trust anchors trust anchors are usually government organizations and other public institutions, enterprises, non-profit organizations, and individuals with authority who have been verified. trust anchors use their own authentication methods authenticate entities and issue verifiable claims the authenticated entities. the claim does not need contain the identity information the authenticated entity; only the ont and the authentication service are recorded, and the authentication result can provided. the authentication model follows: verify outer trust resources ont verifier institution verify eid auth institution link biometrics institution verifiable claim issue social media off-chain authentication other ont owner figure importing through trust anchors ... identity authentication between ontology entities entities ontology can also authenticate identity through entities that have passed identity authentication (from external trust source) ontology, showed figure due the versatility verifiable claims, any entity ontology can make claim about anything regarding another entity. this takes identity authentication ontology far beyond the traditional concept identity authentication. collecting claims from government institutions, schools, hospitals, banks, businesses, families, friends, partners, community leaders, colleagues, and teachers, can create more multi-faceted authentication far more effective than traditional systems. (c) ont team www.ont.io technology white paper ont government authentication ont owner ont bank issue verify ont university ont verifier verifiable claim authentication ont individual issue ont other entities hold figure authentication between entities user authorization protocol ontology user has complete control over their own data. any access transaction involving the data needs authorized the user. light this, have devised set user authorization protocols protect users' data privacy. the protocol uses verifiable claims perform asynchronous and verifiable authorization, and supports delegated authorization and fine-grained access control. ... roles the main roles the user authorization protocols are: user: the entity that has ownership resource and capable granting access the resource. resource requester: the requester who needs obtain the user data other resources. resource provider: the service provider that provides the user data other resources. authorization server: the server who receives and processes the authorization requests, and can provide delegated authorization service for users. (c) ont team www.ont.io technology white paper ... authorization the user authorization protocol for application scenarios divided into three phases: mutual registration: the user authorizes the resource provider register the specified resource the authorization server, and the authorization server register its address the resource provider. access control policy setting: after the mutual registration complete, the user can access the authorization server and set the resource's access control strategies. authorization: resource requester initiates access authorization request. the authorization condition met, the requester will receive authorization certificate which would used request data from the resource provider. ... mutual registration mutual registration means that the authorization server registers their address with the resource provider that when the resource provider processes the data access request returns the address the authorization server the requester. the same time, the resource provider also needs register its own address with the authorization server that users can access the user's resource controls. before performing authorization operations, user needs cooperate with the resource provider and the authorization server complete the mutual registration process. user resource provider provide user agent address and issue two-way registration claim authorized server request two-way registration claim verification successful, request registration data resources verify two-way registration claim and digital signature record user agent information register user data resources registration successful two-way registration complete record data resource and resource provider information figure two-way registration process the process briefly explained follows: the mutual registration process initiated user, the user self-signs mutual registration claim containing their ont id, the address the resource provider, and the ont and address the authorization server. (c) ont team www.ont.io technology white paper the resource provider handshakes with the authorization server using the mutual registration claim and both parties verify the digital signature. the resource provider records the authorization server's access address. the authorization server records the resource provided the resource provider. ... access control strategy with attribute-based access control, users can set flexible access control strategies that restrict specific resources from being accessed requesters that meet specific attribute conditions. access control strategy can described boolean expression, such the strategy which combination three attribute conditions. when requesting authorization, the requester must provide proof attributes verifiable claim that satisfies the strategy. ... authorization certificate when receiving authorization request, the authorization server notifies the owner perform access control. for requesters who meet the access control strategies, the owner issues certificate authority for them. within the validity period the certificate, the requester can access the data repeatedly without requesting authorization again. ... delegated authorization authorization servers can act delegates for users allowing them set their access control strategies. this pattern the servers can process authorization requests and issue certificates without interacting with users. prove the validity the certificates, users need issue delegate claims for the authorization server. distributed data exchange protocol the downsides centralized data exchange include data caching, use data without user authorization, and data copyright protection. ontology proposes distributed data exchange protocol (ddep), which defines set protocol specifications for data transactions between entities. protect the equity both parties the transaction, middleman acting "guarantor" introduced into the transaction process the agreement ensure the settlement process handled securely and smoothly. the intermediary responsible for keeping the buyer's funds and transferring the funds the seller the buyer based the final trading result. since the middleman responsible for (c) ont team www.ont.io technology white paper the final settlement the transaction fair and secure. works distributed ledger contract with public and decentralized management features ensure can suitably play role intermediary. ... roles the main roles the distributed data exchange protocol are: data requester: data agencies/businesses/individuals who want buy data. data provider: data agencies/business/individuals who want sell data, both raw and processed. the data needs meet local government laws and regulations. user agent: responsible for interacting with users meet user authorization requirements for data transaction. user agents can diversified (enterprise systems, internet platforms, even simple sms gateways), but they need fully implemented defined the application protocol framework's user license protocol. data owner: the data subject, which can institutions/businesses/individuals. ... user authorization the data exchange architecture, since transaction data needs authorized the data owner, the authorization process fully complies with the user authorization protocol described section ... secure transaction secure transaction protocols through smart contracts provide centralized third-party assurance services for trading activities and allows for secure and smooth transaction process that protects the equity data requesters and providers. wait for transaction buyer confirms funds position locks seller confirms figure guarantor transaction process (c) ont team www.ont.io technology white paper the implementation process the secure smart contract transaction follows: the data provider enters pending order, writes the product information including the resource id, data characteristics, provider's account, price, and other features, and the contract waits requester starting transaction. the data requester transfers the contract the specified amount and the contract checks whether the amount transferred meets the sale requirements. passes the contract enters funds-locked state; the check fails, error message returned the transferee and the transaction status returns its previous state. after the provider provides the data, the contract confirms and sets expiration date. other action has been taken the end the validity period, the contract automatically enters the settlement process (step after receiving the data, the requester confirms with the contract. the contract transfers the funds the provider's account complete this transaction, and waiting for the next transaction. ... data exchange process download data and decrypt encrypt data and upload decentralized data cache user query requester post the market distributed data exchange provider user agent transaction request ddm ddm smart contract release position, transaction complete smart contract lock position trade user authorization ontology network figure data exchange process pre-order: transaction preparation data product release: the data provider publishes their data product information the marketplace. requesters can browse the marketplace, search for data products, and choose data they would like (c) ont team www.ont.io technology white paper buy. meta data information should include but not limited to: data resource introduction, keywords, data resource hash, contract payment address, and other information. mutual registration: the data product requires the authorization the data owner, the data provider needs complete mutual registration with the user-appointed user agent before releasing the data. for more details refer the mutual registration above. transaction request after finding the data they would like purchase the requester verifies the identity the provider through ontology and for more details refers the multi-source authentication protocol. before the transaction request initiated, the requester first deposits funds the contract address, sends purchase data request the provider, and attaches the information required for the user's authorization. the request includes but not limited transaction information and ont information. authorization after receiving the request from the requester, the data provider accesses the user agent and initiates authorization request. this point the user agent can authenticate the identity the requester demand via ontology, and perform authorization according the access control policies provided advance the owner. the owner does not set access control policy, the user agent notifies the owner for authorization. the authorization request rejected, the transaction should terminated. uploading data the data provider generates one-time session key according the symmetric-key algorithm supported the requester, uses encrypt the data and data characteristic values the transaction, and sends the ciphertext intermediate storage system, e.g. ipfs. locking position the data provider calls the smart contract check the funds deposited the requester. the amount correct, the position gets locked until the transaction completed cancelled. meanwhile, the provider encrypts the session key with the requester's public key and sends the requester through secure channel. receiving data after receiving the notification the smart contract event (event referring section .), the requester then gets the ciphertext from the intermediate storage, decrypts with the session key, calculates and verifies the characteristics the plaintext, and move onto step the verification succeeds. transaction confirmation when the data trade contract complete, the contract funds are transferred the data provider's account. (c) ont team www.ont.io technology white paper exception handling mechanism: the exception handling mechanism can customized according different business scenarios. for example: the data has not yet been confirmed the requester within the specified period the provider can make the contract unlock the funds, the smart contract can automatically unlock the funds. ... privacy protection some data exchange cases participants may want hide their transactions. propose using the stealth address technique make infeasible correlate the recipient's token address and ont id. the requester generates stealth address whose private key can only recovered the data provider based the his token address. suppose the data provider's token address the requester generates random number compute then the stealth address sh(r which will used the output address token transaction. only the provider can calculate the private key sh(s with his own private key (c) ont team www.ont.io technology white paper ontology application framework application framework model ontology's application framework provides rich set application protocols and modules that enable third-party dapp developers quickly build decentralized applications without having understand the complexities the underlying distributed ledger. ontology's application framework has high degree scalability and can expanded according scenarios' needs. figure shows how dapps interact with ontology through its application framework achieve decentralized trust: scenario scenario scenario layer dapp auth. application modules ont application protocols ontology network auth. protocol and module layer sdks and apis attestation/ smart contract ont trust layer figure application framework model trust layer: ontology takes the responsibility trust system through its identity, attestation, and smart contract systems, etc. module and protocol layer: this layer enables the upper-layer scenarios make better use ontology through application modules, application protocols, sdks, and apis. (c) ont team www.ont.io technology white paper application layer: dapps for different scenarios and the teams behind them can focus scenario development, user services, etc. ontology can help solve trust issues. data marketplace the future digital world and data exchange market fit for the future will not limited only the transfer data ownership. trusted collaborative computation will also become important mode collaboration. products the data marketplaces include data, data forecasting, and data computing resources, etc. participants include data consumers, providers, and processors such big data services using deep learning and other technology, which together will form data collaboration ecosystem. this complex data collaboration ecosystem requires matching infrastructure. ontology's distributed data exchange protocol (ddep), data trading module (ddm), and series cryptographic modules together form complete distributed data trading and collaboration framework, allowing for global scale trade sizes and exchange needs across industries for ontology dapp users. layers data exchanges service providers allow for variety data exchange types across industries. data dealer module data dealer module (ddm) based the distributed data exchange protocol and important application module ontology. ddm enables both the dapp developers and data exchange participants rapidly utilize data exchange. the modules can use restful api, rpc, sdk, etc., and can support multiple types protocols. ddm has variety types meet different requirements including data transaction server, single-user client, multi-user client, and light wallet client. there are four major components for ont identity management, data resource management, smart contract transactions, and communication. the ddm data transaction module has the following advantages and features: decoupling from access control module. the module only manages the binding the data resource and the data resource owner's control server. does not participate the configuration and verification access rights. not only maintains the equity privacy protection for the data owner, but also enhances the data provider's credit avoid unnecessary disputes. protecting data privacy. modules not store the actual data, and with transaction data encrypted, vendors' data precipitation concerns are eliminated. addition data directory retrieval, data requester can also broadcast his orders which will received data providers. designed accordance with the "single module, single function" principle, easily supports flexible scenarios with cryptographic security modules and user authorization modules. (c) ont team www.ont.io technology white paper cryptography and security modules ... secure multiparty computation typical collaborative computation scenario, two more participants may want conduct computation using private data without sharing with others. current approaches used not work this scenario. for example, application development company wants integrate powerful machine learning algorithms into their application, current systems will transfer their data algorithm provider then will run their algorithm the data and return the results back will know everything about a's data. for this kind scenario, utilize secure multiparty computation (mpc) techniques. the first secure two-party computation protocol was introduced andrew yao, which can used solve yao's millionaires' problem: two millionaires who are interested knowing who richer without letting the other know their actual wealth. the general problem can summarized as, participants each hold some private data and want compute the value public function that private data: (x, ..., the goal design protocol such that all information each party can learn what they can learn from the output and their own input. thus, there additional data leakage for every participant. two major approaches for mpc have been developed over the years: those based yao's garbled circuits[][] and those based secret sharing[]. the remainder this section, will focus the latter approach. put simply, (t,n)-threshold secret sharing scheme, secret partitioned into shares. each party gets only one share that secret. one can recover the secret and only gets least shares. mpc protocols based secret sharing usually partition the intermediate results into different shares and distribute them the participants. the end, each participant will reconstruct the value (x, ..., from the shares they received. ... fully homomorphic encryption typical data exchange scenario, the data provider wants give the requester access permission his data, rather than transfer the whole data the requester. critical that company able maintain the privacy its data while permitting limited access its data. recent advances cryptography, namely fully homomorphic encryption, provide very promising solutions this problem[][][][]. for example, the company first uses its public key encrypt data and then sends ciphertext the other party who will complicated computation the ciphertext. this new ciphertext encryption (c) ont team www.ont.io technology white paper (m). finally, the new cipher text will sent back the enterprise who can decrypt using its private key and get (m). formally, fully homomorphic encryption scheme consists three elementary algorithms which are common all public key encryption schemes: key generation, encryption, and decryption, plus homomorphic addition cad and multiplication cmul. suppose c(resp. ciphertext message m(resp. m), then: decr ypt (cad d(c, decr ypt (cmul(c, many complicated operations can built arithmetic circuit consisting these two elementary operations. encrypt f(m) decrypt encrypt decrypt enc(m) enc(f(m)) figure homomorphic encryption plain text therefore, using fhe scheme, can run homomorphic operation the ciphertexts and the decryption algorithm will give (m) back (as illustrated the above graph). plan support various fhe schemes such bgv and the future. ... digital copyright based data's digital characteristics, ontology provides data storage and lifecycle management functions. firstly, ontology designs the life cycle traceability mechanism. ontology establishes digital identity for each piece data track the entire process registration, request, authorization, and transaction. secondly, ontology ensures data's copyright and transaction information are all recorded the distributed ledger. ontology uses digital watermarking technology directly embed the identification information into the digital carrier. without affecting the use value, ontology can easily identify attackers and prevent them from making modifications. with the hidden information the carrier, the requester can easily (c) ont team www.ont.io technology white paper confirm the content creator and determine whether the carrier has been tampered with. digital watermarking effective method for implementing anti-counterfeit traceability, copyright protection, hidden identification, authentication, and secure covert communication. the main features digital watermarking technology used ontology: vindicability: the watermark provides complete and reliable evidence attributes the copyrighted product. using the watermarking algorithm users can identify the owner's information embedded into the protected object (such the registered user number, product logo, text, etc.), and extract when needed. watermarks can used determine whether the object protected, monitor the spread protected data, conduct authentication, and prevent illegal copying. imperceptibility: the embedded watermark not able seen. the ideal situation that the watermarked image visually identical the original image, which what most watermarking algorithms can accomplish. robustness: after undergoing variety unintentional intentional signal processing, the digital watermark still maintains integrity and can accurately identified. robustness extremely important for watermarks. digital watermark should able withstand different physical and geometric distortions, including intentional distortions (e.g. malicious attacks) and unintentional distortions (such image compression, filtering, scanning and copying, noise pollution, dimensional changes, etc.). robust watermarking algorithm should able extract the embedded watermark from the watermarked image prove the existence the watermark. specific watermark embedding and detection algorithm missing, the data product copyright protection mark should difficult forged. the attacker attempts delete the watermark, multimedia products will destroy the image. ontology's data watermarking feature contains two modules: one for embedding watermarks and the other for removing them, showed figure digital watermarking will used security system for documents, bills, and digital identity. through digital watermarking the authenticity document can proven, and protected from illegal copying. watermark original information embedding algorithm encryption key (a) data watermark embedding process (c) ont team watermark embedded www.ont.io technology white paper original information watermark embedded information extraction algorithm watermark removed encryption key (b) data watermark removal process figure data watermark module user authorization controller the user authorization control (uac) module based the user authorization protocol. using granular access control, uac modules assist the data owner with the authorization their own data. any transactions related data will notify the data owner conduct data transaction authorization. uac modules provide restful apis for external use, supporting the use relational databases (mysql oracle). they have two major functions: user data authorization access policy settings. user data authorization access control. ... authorization policy setting the user can request the resource provider register his data using the restful api provided the uac module. after registration the user can search and review the registered data using the uac module and conduct data access and control policy settings. for some specific frequently accessed data with low privacy requirements, users can set authorization hosting uac modules. (c) ont team www.ont.io technology white paper request resource registration set the authorization policy user resource registration resource server uac component figure setting authorization access policy ... access control non-hosted mode, the uac module acts the protector user data and requires the user authorize data transmission requester. the hosted mode, the uac module makes authorization decisions behalf users and provides authorization receipts the users. both modes inform users the details data transactions, including who involved, what time the transaction occurs, and what data transferred. auth. notification uac component user auth. decision making auth. request uac endpoint resource server request server request resources without authtoken request resources with authtoken return resources figure authorization access control (c) ont team get authtoken www.ont.io technology white paper claim management module verifiable claim management important and basic module for the trust anchor ontology. the claim management module developed accordance with the distributed trust system's requirement. this module provides restful apis support the use relational databases (mysql oracle). key features its modules include, but not limited to: the issuance, verification, querying, and cancellation trusted claims. globaldb globaldb pluggable distributed key-value database. its underlying layer tibd, open-source distributed newsql database based google's spanner/f. globaldb database optimized for blockchain/distributed ledger and ipfs. globaldb provides sql compatibility, storage sharding, distributed transaction, horizontal scalability, and error recovery capability. could applied joint applications blockchain and big data, blockchain and artificial intelligence(ai). globaldb has four major features: distributed transactions, storage sharding, load balancing, and sql kv. ... distributed transactions globaldb provides complete set distributed transactions that support state sharding and off-chain services. the transaction model based google percolator for optimization. globaldb's transactional model adopts optimistic locking. distributed transactions only detect conflicts when they are submitted. the traditional methods conflict they need retried. this model will inefficient the case severe conflicts and the optimistic locking model has higher efficiency most scenarios. since distributed transactions must conducted two phases and the underlying data needs consistent replication, transaction very large the would slow the commit process and clog the consistent replication process. avoid that, ontology has limitations below: single entry does not exceed mb. the total number entries does not exceed the total size the entry does not exceed mb. (c) ont team www.ont.io technology white paper ... storage sharding globaldb automatically shards the underlying data based the key's range. each region key range [star tke y). when the total amount the fragmented key-value exceeds certain threshold, will automatically split. ... load balancing the load balancer schedules the load the cluster based the state the storage cluster. the scheduling based region, the policy configured the the scheduling logic, and the whole process completed automatically. ... sql globaldb automatically maps the sql structure structure. nutshell globaldb does two things: one line data mapped kv. the key prefixed the tableid, and the line suffixed. index mapped kv. the key constructs prefix with tableid+indexid and suffix with index values. data indexes one table will have the same prefix, the key space tikv, the key-value will adjacent position. globaldb will configure the corresponding dirty data management strategy achieve higher performing data readability.[] globaldb highly configurable and adaptable, and could utilized simultaneously on-chain and offchain real-time high-performance business. will serve core component ontology provide solid foundation for the underlying distributed ledger. (c) ont team www.ont.io technology white paper postscript this white paper includes overview technologies involved ontology. however, the technology itself advances, the ontology team would constantly updating its content the future. meanwhile, ontology will create open, collaborative, and creative technology ecosystem. the team ontology welcomes developers around the globe join the family, participate and advance ontology's technology. (c) ont team www.ont.io technology white paper reference burnett, daniel al. "verifiable claims data model" verifiable claims working group, editor's draft, https://wc.github.io/vc-data-model/. mccarron, shane al. "verifiable claims use cases" verifiable claims working group, working group note, october https://wc.github.io/vc-use-cases/. reed, drummond al. "decentralized identifiers (dids)" wc, credentials community group, https://wc-ccg.github.io/did-spec/. hardt d.. "the oauth authorization framework" rfc, october machulak, maciej and machulak richer. "user-managed access (uma) grant for oauth authorization" user-managed access work group, draft recommendation, https://docs.kantarainitiative.org/uma/wg/oauth-uma-grant-.-.html. jones, m., al. "uniform resource identifier (uri): generic syntax" rfc, january adams, carlisle, and steve lloyd. "understanding pki concepts, standards, and deployment considerations." boston: addison-wesley, sporny, manu al. "json-ld wc, recommendation, january http:// www.w.org/tr/json-ld/. longley, dave, al. "linked data signatures". digital verification community group, draft community group report. https://wc-dvcg.github.io/ld-signatures/. camenisch, jan, and anna lysyanskaya. signature scheme with efficient protocols." international workshop security (): r., cramer. "modular design secure yet practical cryptographic protocols." ph. thesis, universiteit van amsterdam, netherlands, fiat, amos, and adi shamir. "how prove yourself: practical solutions identification and signature problems." international cryptology conference(): schnorr, clauspeter. "efficient signature generation smart cards." journal cryptology (): abdelmalek, michael, al. "fault-scalable byzantine fault-tolerant services." symposium operating systems principles (): castro, miguel, and barbara liskov. "practical byzantine fault tolerance." operating systems design and implementation (): (c) ont team www.ont.io technology white paper borran, fatemeh, and andre schiper. "brief announcement: leader-free byzantine consensus algorithm." international symposium distributed computing (): laurie, b., al. "certificate transparency" rfc, june merkle, ralph c.. digital signature based conventional encryption function." lecture notes computer science (). patent ralph merkle, "method providing digital signatures", published jan assigned the board trustees the leland stanford junior university. matthew, s.. "merkle patricia trie specification" ethereum, october https:// github.com/ethereum/wiki/wiki/patricia-tree. morrison, donald r.. "patricia--practical algorithm retrieve information coded alphanumeric." journal the acm (): yao, andrew "protocols for secure computations." foundations computer science, sfcs'. annual symposium on. ieee, shamir, adi. "how share secret." communications the acm (): damgard, ivan, al. "practical covertly secure mpc for dishonest majority-or: breaking the spdz limits." european symposium research computer security. springer, berlin, heidelberg, gentry, craig. fully homomorphic encryption scheme." stanford university, brakerski, zvika, craig gentry, and vinod vaikuntanathan. "(leveled) fully homomorphic encryption without bootstrapping." acm transactions computation theory (toct) (): halevi, shai, and victor shoup. "algorithms helib." international cryptology conference. springer, berlin, heidelberg, fan, junfeng, and frederik vercauteren. "somewhat practical fully homomorphic encryption." iacr cryptology eprint archive (): peng, daniel, and frank dabek. "large-scale incremental processing using distributed transactions and notifications" proceedings the usenix symposium operating systems design and implementation, shen, li. "understand tidb technology insider" pingcap, https://pingcap.com/blogcn/tidb-internal-/. (c) ont team www.ont.io technology white paper contact email: contact@ont.io telegram: ontologynetwork twitter: ontologynetwork facebook: ontnetwork reddit: ontologynetwork discord:https://discord.gg/vkrdcct medium: ontologynetwork linkedin: ontology network (c) ont team