proof-of-proof: decentralized, trustless, transparent, and scalable means inheriting proof-of-work security veriblock, inc. maxwell sanchez justin fisher version abstract the proof-of-proof consensus protocol enables blockchains inherit proof-of-work security from other blockchains, creating ecosystem wherein security originates established blockchains like bitcoin and extends other blockchains. such ecosystem creates indirect scalability bitcoin utilizing security mechanism for purposebuilt chains. current progress other areas scalability, including off-chain transactional networks and sidechains, benefit from hierarchical security model which enables all blockchains operate under the security context bitcoin. propose means for this inheritance without the involvement approval bitcoin miners, without any centralized entities federated nodes, and without imposing any technological limitations blockchains which adopt this protocol. introduction one the largest issues facing blockchains today--their ability reach and maintain consensus over blockchain data--has sparked variety debates over the complexity and security broad selection upcoming technologies. the proof-of-work protocol used bitcoin has met two primary criticisms: wasteful electricity consumption, and weak chains with less hash power. the criticism regarding inefficiency consuming electricity stands unsolid footing--so too could the filament lightbulb similarly called inefficient conductor, despite its ability produce light. true, however, that smaller cryptocurrencies implementing proof-of-work are vulnerable relatively low-cost attacks, especially when larger chain utilizing the same hashing algorithm exists. answer these criticisms, variety alternative consensus mechanisms have been proposed and developed, including proof-of-stake where users hold balances native tokens mine, practical byzantine fault tolerance and the ripple protocol consensus algorithm which adapt the ideas behind classical consensus algorithms like raft and paxos function large-scale and trustless systems, and federated nodes trusted nodes which act network authorities and resolve consensus conflicts. each these consensus algorithms trade off some the advantages proof-of-work consensus mechanism: thermodynamically-sound security expectations, trustless and permissionless involvement miners, mathematically-verifiable replaying network history for new nodes, significant opportunity costs attack, etc. our proof-of-proof consensus protocol addresses both these concerns recycling the hashing power powerful proof-of-work blockchain secure unlimited quantity additional blockchains. previous technologies there have been previous attempts reuse the security existing high-security blockchains. several blockchains, including namecoin, adopted merge mining and the auxpow protocol, which allowed bitcoin miners simultaneously mine both bitcoin and one more auxiliary blockchains. mastercoin (now omni/omnilayer) launched protocol which runs top bitcoin embedding data the bitcoin blockchain. merged mining (auxpow) merged mining enables the miner one parent blockchain simultaneously mine one more auxiliary blockchains. the parent blockchain itself requires modification allow other blockchains merge-mine using auxpow. merge mine, miner must first build valid block(s) for the auxiliary blockchain(s), and then include some proof these blocks the parent blockchain which they attempt mine (often embedding the auxiliary blockchain hash the parent block coinbase transaction). miner successfully solves the proof-of-work below target that satisfies one more the merge-mined parent blockchains, the corresponding block(s) and the proof-of-work solution are combined and relayed their respective blockchain(s). merge-mining requires active participation parent blockchain miners, and the percentage the hash-rate which the auxiliary blockchain inherits the percentage the parent blockchain's hashing power which performing merge-mining for the particular auxiliary blockchain. merge-mining doesn't scale effectively secure large number auxiliary blockchains, because would require that parent blockchain miners track and assemble blocks for large quantity auxiliary blockchains. also forces the auxiliary blockchains use the same hashing algorithm the parent blockchain. finally, most implementations, the opportunity cost for parent blockchain miners attack the auxiliary blockchain only the cost not merge-mining the auxiliary blockchain legitimately, the miner can continue mine the parent blockchain (and merge-mine other blockchains) honestly while attempting attack another auxiliary network. layered technologies blockchains pseudo-blockchains inherit the security highly-secure blockchains writing the entirety near-entirety their blockchain within another blockchain. "enhanced" "aware" clients for these technologies act nodes the parent blockchain network and look for embedded data which has special meaning their blockchain. these data are then interpreted under their own rules perform manipulations the secondary embedded blockchain. some implementations layered technologies: omni/omnilayer (formerly mastercoin), colored coins, and counterparty. reorganizations the parent blockchain result reorganizations the secondary/embedded blockchain. generally, transaction the parent blockchain created whenever transaction the secondary/embedded blockchain created. this transactional data representation (hash) thereof embedded into the parent blockchain transaction using variety means including op_return and "impossible" addresses which embed data and don't have known corresponding public/private keypair. embedding secondary blockchain within parent blockchain imposes significant limitations the secondary blockchain including block-time limitation and minimal storage capacity. for the sake efficiency, this often requires the secondary blockchain utilize the address format (and corresponding signature algorithm) the parent blockchain. users the secondary blockchain must also own and spend tokens the parent blockchain transact the secondary blockchain. finally, these technologies have significant difficulty scaling beyond the transactional volume (measured number transactions, not necessarily size transactions) supported the parent blockchain. while technologies like omni(layer) store and transmit transaction "attachments" torrent network, each unique transaction the omni blockchain requires transaction broadcast bitcoin well. chaindb the chaindb proposal for securing chain bitcoin requires that chaindb block-building nodes collaborate build bitcoin transaction which denotes the next chaindb block, limits the secured chain's minimum block time the block time bitcoin, requires that fullyvalidating chaindb nodes also fully-validating bitcoin nodes (although model using spvlike knowledge bitcoin embedded the chaindb chain would appear function well), and poses attack vector wherein bitcoin miners take the fee paid legitimate chaindb bidders, but still controls the chaindb blockchain including alternate chaindb blockdefining transaction with incredibly-large fee. additionally, attacker who wishes modify chaindb blockchain would only need pay fees that are each few times greater than the block reward the chaindb block have significant chance multi-block rewrite the chaindb blockchain; chaindb blockchain would have potential security issues when significantly more value than its per-block coinbase transferred per block. summary existing technologies existing technologies for reusing the proof-of-work security one parent blockchain auxiliary/secondary blockchains comes with significant drawbacks regarding level security, limitations imposed the auxiliary/secondary blockchains, and scalability concerns. the goal proof-of-proof aims enable security inheriting (si) blockchain (analogous merge mining auxiliary blockchain layered technology secondary blockchain) inherit the complete proof-of-work security security providing (sp) blockchain (analogous parent blockchain). this inheritance should not impose any non-trivial limitations the blockchain, should not require the permission the blockchain the knowledge/involvement blockchain miners, should not require any centralized network authority (including federated nodes), and should not leave the blockchain non-functional the event that the blockchain fails. additionally, non-mining users the blockchain network should not have interface with the blockchain network, nor should they required hold any its native token. pop protocol the pop protocol introduces new type miner who performs periodic publications one blockchain's current state another blockchain. these publications are referenced the event potential blockchain reorganization. pop requires blockchain has some means creating blocks, such low-hashrate local pow, pos, etc. definitions consensus inheriting (ci) blockchain: blockchain secured pop, which inherits pow from another blockchain. consensus providing (cp) blockchain: established, high-security blockchain which blockchain inherits pow from. blockchain state data: data regarding the current state blockchain, such the most recent block header, block hash, merkle root transactions, etc. pop miner: new type miner who performs publications blockchain state data from blockchain blockchain. pop mining process overview pop miners serve the communication/transactional bridges between blockchain and blockchain. often they wish, pop miners will take the most recent blockchain state data from the blockchain and publish the blockchain, along with some identifier, which allows them later receive compensation creating blockchain transaction with the blockchain state data and identifier embedded it, and submits the blockchain network. several different methods can used for embedding the blockchain state data blockchain transaction: op_return, fake addresses, fake addresses multisig, etc. the pop miner then waits for the transaction included blockchain block, constructs some form proof publication, adds any identifying information necessary for them take credit for the publication, and submits this proof back the blockchain the form special pop mining transaction. pop publication data order take advantage op_return, the blockchain state data along with some means identifying the miner for payment needs fit within bytes. recommended that the entire block header the blockchain published close security vulnerability discussed later. using -bit hashes for the previous block hash and merkle tree, the standard block header format consisting version, previous block hash, merkle tree hash, timestamp, nbits-style target, and nonce only occupies bytes space, leaving bytes the op_return data for pop miner identification (such the first bytes the miner's address). when the pop miner submits their pop mining transaction the blockchain, they will include the full blockchain address whose first bytes match these bytes miner identification. pop mining transactions the specialized pop mining transaction demonstrates that blockchain state data was included blockchain transaction, which was included blockchain block. such, needs contain the blockchain state data which was originally published (along with the miner identification), the blockchain transaction containing the blockchain state data, the merkle path (or another form proof such witness for cryptographic accumulator, the blockchain uses structure other than merkle tree for transactions) which demonstrates inclusion the transaction blockchain block, and the blockchain block header corresponding the block which the blockchain state data was published. additionally, the mining transaction needs provide the full miner identification wasn't included its entirety the published data (example: the full address whose first bytes match the bytes miner identification published op_return). finally, additional contextual information may required, such sufficient previous block hashes from the blockchain enable the blockchain construct and validate the entire blockchain blockchain the block holding the pop miner's publication. the simplest algorithm for this requires that the pop miner submit adequate blockchain block headers build from the blockchain network's previously-known and highest-height blockchain header the header the block which the pop publication occurs. pop mining transaction validation peers the blockchain validate pop mining transaction checking the validity the published blockchain state data, checking for its inclusion the provided blockchain transaction, ensuring the blockchain transaction included the provided blockchain block header's merkle tree (or evaluating some other form proof, such cryptographic accumulator witness), and ensuring that the provided block header(s) the blockchain build the "longest" pow chain the blockchain. checking the validity the blockchain state data only requires looking back the blockchain for the block corresponding the published state data. checking for its inclusion the provided blockchain transaction involves parsing the transaction and checking the data after op_return, for the blockchain state data appear encoded form, such inside multisig addresses. then, the blockchain transaction hashed and the merkle path followed, which should result the merkle root embedded the provided blockchain header. since only the headers pure pow blockchain are sufficient for determining consensus blocks, blockchain peers have sufficient information ensure that the pop publication occurred valid blockchain block. pop block format order for pop mining transactions later used for consensus, they must stored the blockchain. additionally, the block headers the blockchain need stored such way that consensus the blockchain can tracked without requiring peers interface with the blockchain network. such, the blocks blockchain implementing pop contain special segment hold the new blockchain block headers since the last blockchain block's included headers. the diagram above, the green blockchain blockchain implementing pop. the blue blocks are headers from the blockchain. linking together the blockchain headers stored the blockchain, the entire blockchain's pow consensus can confirmed. the event that fork the blockchain occurs, block can include multiple competing blocks and allow blockchain headers embedded future blockchain blocks resolve the conflict: proof-of-proof mining transactions can reference, the blockchain block which they published blockchain state data, any blockchain block headers stored their enclosing block previous blocks (pop mining transactions purple): facilitate this, block miners (pow/pos/etc.) take the block header data provided the pop mining transactions, and embed the zero more blockchain headers necessary provide context for the pop mining transactions they wish include their block. fork resolution with pop the "best" fork amongst all proposed forks selected based cumulative score. pop, however, the score fork calculated relative another fork; the timeliness pop publications the blockchain determine their weight, and the timeliness pop publication blockchain block particular height relative the first publication any blockchain block from any the considered forks. blockchain tracking order for peer the blockchain network perform fork resolution, the peer must construct and evaluate version the blockchain using all the blockchain headers provided all the blockchain blocks (including those every potential fork for which the client has knowledge). order so, the peer collects every single blockchain header from the blockchain blocks, and determines consensus according the rules the blockchain (finding the "heaviest" chain requiring the most computational power build). utilizing information available from all potential forks when reconstructing the blockchain, the peer can ensure that whatever final picture they get the blockchain represents the state the blockchain the latest time any the blocks any the forks were created, allowing for evaluation nearly the peer had direct access the entirety the blockchain. through this mechanism, the relative weight any two particular chains can calculated on-demand peers who join the network later point time. fork weight calculation the weight two competing forks calculated summing all the scores all the blocks for which two chains diverge. the scores competing blocks between multiple forks are calculated relative each other, following the algorithm: for all competing blocks height find all pop mining transactions each chain that match said chain's block height for all pop mining transactions endorsing any block height from all competing chains, find the one with the earliest publication (by block height) the blockchain. store this height for each competing block for each pop mining transaction endorsing block the pop mining transaction publishes block the longest known blockchain fork: determine the difference blockchain publication height from add the value floor(/((difference (difference ))) the score for the current block the diagram above, the blockchain encounters fork, with two competing chains (red and orange). the blue numbers inside pop mining transactions represent the index the blockchain which they published data to. not shown for the sake complexity are the blockchain blocks embedded the two forks, which allow the reconstruction the blockchain and subsequent ordering pop transactions. determine which blockchain accept, the score for each block each index calculated relative the other block the same index, and the scores for all blocks each chain are added together: the first pop publication for either competing block fork index was index the illustrated blockchain. the red block fork index endorsed three pop publications which occur index the blockchain, its score *(/((-+)*(+))) the orange block fork index endorsed two pop publications which occur index the blockchain, and one pop publication index the blockchain, its score *(/((-+)*(-+))) *(/((-+)*(-+))) similarly, *(/((-+)*(-+))) and *(/((-+)*(-+))) the last block any chain never has any proof weight, because block has come after contain pop endorsements for it; and summing these up, the weight the red chain and the weight the orange chain since the red chain the more-endorsed blockchain. despite the orange chain's inclusion pop mining transactions compared the red chain's inclusion pop mining transactions, the relative timeliness the red chain's transactions caused have higher proof weight, making the better chain. fork resolution design rationale the use relative weighting pop mining transactions based their timeliness the blockchain makes incredibly difficult for attacker produce fork any significant period time into the future without forking the blockchain itself. such, attacker needs generate their potential fork the blockchain alongside the legitimate network, and must full public view publishing the block hashes their ci-forking chain the blockchain. anyone can monitor the blockchain for forks being built and delay accepting transactions until the fork resolved, and blockchain networks can implement additional features invalidate these chains using mechanisms such balance-based voting invalidate the attacker's chain before released onto the network. weighting function the weighting function suggested for pop mining transaction floor(/((distance+)^)), where distance the afore-described distance between the pop mining transaction's corresponding blockchain block and the first blockchain block which any block any considered competing chain the same index was first published the blockchain. this formula can tweaked better fit the desired security profile particular blockchain network. using function which trends towards faster will result existing blockchain being easier attack, but also increases the possibility short-term in-step attacks, where attacker attempts get single block their ci-attacking chain into blockchain block before the corresponding legitimate chain block occurs the network. this suggested function will continue tweaked run more simulations different attack scenarios. the following graph illustrates the suggested distance-vs-pop-weight function. pop weight distance vs. pop weight distance instead calculating the function each time, simple lookup table can used: distance weight any pop mining transaction corresponding blockchain block more blockchain blocks after the first publication the relevant blockchain block index has weight. mentioned below solution potential vulnerability, similar weighting scheme can also applied prioritize the relative scores blocks closer the forking point, ensure that blockchain forks need announced the blockchain early. potential attack vectors and mitigations with all consensus mechanisms, adversarial party can attempt force the network reestablish consensus. properly-implemented pop network, these attack vectors include forking the blockchain and building and proving alternate blockchain. some the design decisions pop eliminate other potential attack vectors simpler theoretical pop-like implementations. blockchain forking the event that adversarial party successfully forks the blockchain, they can re-write the forked blockchain blocks with new pop data, enabling them produce blockchain with higher pop weight. the amount/length (measured real-world time, not blocks) the blockchain they are able rewrite approximately equal the distance they successfully fork the blockchain for. note that fork the blockchain without specific intention fork the blockchain won't result blockchain fork. however, such reorganization the blockchain will cause the blockchain's pop mining transactions which occurred the forked blockchain blocks longer exist the blockchain, and thus hold weight. area further research whether, the attacker still includes the pop publications their new blocks earn their transaction fees, some sort process could used pop miners re-demonstrate their old proofs' presence the new blockchain. the event that the blockchain forks but doesn't attack the blockchain, and the blockchain's pop mining transactions are impacted and longer hold weight, the current security the blockchain will drop down its own intermediate (pow/pos/etc.) consensus mechanism until pop miners publish new blockchain state data the blockchain and provide pop mining transactions back the blockchain. building alternative high-proof-weight blockchain performing this attack requires that the adversarial party build alternate chain which has higher proof weight than the current best chain. order execute this attack successfully (due proofs being evaluated their timeliness), attacker would need build their attacking blockchain simultaneously with (or faster than) the current chain. this requires that the attacker publish their attacking chain's blockchain state data the blockchain promptly, allowing users the network see the pending attack and its properties. such, anyone watching the blockchain would see what block(s) are risk for the fork, how much stronger (or weaker) the current chain compared the adversarial party's chain, and could potentially use some means (like balance-based voting) invalidate the adversarial chain before released the network. another possible (although more difficult) implementation, the attacker would build alternate chain whose earlier blocks have little-to-no proof weight when compared the current chain, but whose later blocks are published extensively the blockchain. this sort attack would still publicly visible due the publications the blockchain, but would not necessarily reveal how far back the fork could occur, and would also not appear users the network the time when some the earlier blocks the attacking chain were being built without proof weight. mitigate this attack, blockchain networks simply weight blocks closer the forking point with significantly more weight (so the sum might look something like weight weight weight ...), making this attack difficult impossible successfully perform. publishing bogus blockchain state data version pop implementation where the blockchain state data published the blockchain isn't enough verify the potential validity the data, adversarial party could cause parties the network delay accepting transactions faking potential fork which doesn't actually exist. this attack does not require overpowering the intermediate consensus, but only allows the attacker nuisance because the network won't fork the attacker can't provide the complete blocks for which data tagged the blockchain exists. this attack involves the attacker publishing apparently valid blockchain state data for which they don't actually have blocks for. blockchain which relies solely pow for immediate consensus, this can mitigated requiring, pop currently does, the publication the entire block header. this way, the attacker cannot publish bogus blockchain data because the data would not valid pow solution. blockchain employing pos, also possible publish additional information proving the ownership coin age similar network-asset-based mining resources, which could verified informed network participants such full nodes (txid containing the coinage claiming spent, etc.). combination with pos pop requires intermediate method creating blocks (or other discrete units consensus) and maintaining short-term consensus pending pop publications. implementing pop network using pow the intermediate consensus mechanism straight-forward, given pop's natural extension pow-like consensus. implementing pop pos network requires additional considerations, and offers solutions for the long-standing issues with pure pos. existing pos issues note: several implementations pos exist. pos not single consensus algorithm, but rather collection several closely-related consensus algorithms which share the common trait "balance-based" (or unspent-output-based) mining, which miners use their native token balance produce blocks, and the "resource expenditure" mining the time-value the tokens. some the issues present the original peercoin implementation pos (such long-range attacks due fixed stake modifiers) have been solved newer pos implementations, and those solved issues will not resurrected for discussion here. two primary issues face the latest iteration pos: there way mathematically demonstrate the validity blockchain new node during bootstrapping (the chain has "weak subjectivity"). there only short-term solution (last 'n' blocks) the "nothing stake" problem. both these issues fall back the subjectivity pos--a number private keys representing 'critical mass' network token ownership arbitrary point blockchain's history can used produce more valid fork the network weeks, months, years into the past, and doesn't require present ownership any tokens. additionally, it's impossible prove that party has access critical mass network tokens. the slasher protocol presents punitive system solve "nothing stake" problems the short-term. mathematical demonstration validity during bootstrapping traditional pow systems have objective definition the "best blockchain," (the blockchain which requires the most cumulative work build) and assuming that bootstrapping node has unrestricted access the blockchain network, the node will always able independently determine the best blockchain. pure-pos systems, the solution the aforementioned critical mass ownership problem simply to, part the protocol, prevent any node from forking back more than certain number blocks. such system results rolling checkpointing system wherein each node simply refuses remove more than certain number blocks 'n' from their current 'best blockchain' view. such, client uses old coin ownership create fork which begins more than blocks ago, nodes the network will simply reject the fork. however, boostrapping client might fed the illegitimate blockchain first, and subsequently refuse fork back more than blocks back the illegitimate chain, permanently (without human intervention) preventing them from tracking the correct blockchain. pop provides simple solution this problem, blockchain using pop will have mathematically-verifiable "best blockchain" defined the blockchain's inclusion pow blockchain. more than 'n' blocks "nothing stake" solution the current solution the "nothing stake" solution the long-run for clients ignore forks that remove more than blocks from the current blockchain, explained above. refusing perform blockchain reorganization more than blocks deep presents one interesting attack vector: deploying fork the blockchain which forks exactly blocks history during the propagation new block, leaving portions the network (who haven't yet seen the latest block and such willing fork back blocks) permanently desynchronized (without human intervention) from the portions the network who had already received the new block, and refused fork back blocks. this attack's plausibility and potential damage increases with increasing block propagation times, which can result from larger and more-complex-to-validate blocks. since were unable find any mention this type attack elsewhere, describe appendix implementing pop would ensure that the acquisition critical mass ownership coins given time blockchain's history couldn't used attack the network, because the accompanying pop publications would either non-existent irrelevant due untimeliness, allowing clients remove the rule regarding maximum fork distance, since forking any significant portion the blockchain would require successfully and simultaneously attacking the blockchain. fact, successful non-contested pop endorsements block act effective "soft maximum forking distance," growing stronger the difficulty creating fork from before certain point history becomes exceedingly implausible due the pop weighting algorithms. appendix limited reorg distance fracturing attack review short-term consensus protection pos the short term, pure-pos blockchains can avoid "nothing stake" issues requiring deposits (or freezing assets) for given period time order enable pos mining those coins method considered for ethereum, and termed 'slasher' ethereum developers). normal pos systems, there negligible cost attempting produce pos blocks top all possible forks. when pos miner receives two more competing blocks, their best interest attempt build upon both chains, potentially withhold any the competing blocks which they are unable mine atop. however, freezing assets, the network can punish miners who practice this behavior allowing "bounty hunters" watch for this type behavior, provide cryptographic proof (such two signatures from the same miner which vote for competing blocks the same height), and receive portion the frozen coins. naive short-term forking attacks require ownership significant portion the total network's staking coins immediately before the attack, making them largely implausible and uneconomical. the "stake grinding" attack also ineffective the short-term due minimum coin age before staking and dynamic stake modifiers implemented projects like blackcoin and neucoin. these issues not exist pow networks, computational power spent attempting build one chain can't spent attempting build another chain. long-term attack the long term, most the means protecting consensus are ineffective. frozen deposits are eventually returned, long periods time allow attackers sell their entire position the coin acquire private keys which held large portion the staking coins long ago, and grinding attacks become possible since attacker able reliably rewrite critical mass the blockchain far the past can explore number possible blockchains (each with different transactions/transaction order, which alter things like the stake modifier) bound only their available computational power. this allows critical mass token ownership/control far the blockchain's past to, given sufficient computational power, create more-valid blockchain than the current blockchain. attacker attempting conduct this form attack doesn't necessarily own any the token currently, and more likely interested causing massive disruption services than performing double-spends. current long-term attack solution order eliminate the possibility long-term attacks from rewriting potentially years blockchain history, clients pos networks are simply programmed not accept reorganizations which fork the network more than 'n' blocks ago. this makes possible for new bootstrapping peers permanently stranded incorrect fork, but under normal operation doesn't cause any potential disruptions nodes which are always connected, connect more often than takes the network add blocks. the value chosen the maximum reorganization depth relies several factors, including the period for which coins are locked (if deposit-based pos system, slasher proposes), the time expected for attacker acquire old private keys/sell their position the currency, the speed blocks the network, etc. too small makes possible for the network easily desynchronize (since even extremely difficult attacks are plausible very short timespans due probability), and too large makes long-term attacks more efficacious. issues with maximum reorganization depth the event that attacker was capable creating fork which diverges from the correct blockchain blocks ago, the attacker could release this fork while the current block still propagating across the network (meaning some peers the network are different block than others). blockchain like neucoin where the maximum reorganization depth blocks, the current block height the network was then releasing fork which forks the network back block would accepted all peers. however, releasing the fork back block once the network block wouldn't produce any results. due network/processing latency new blocks, there period between the entire network being block and the entire network being block during this period, carefully-distributed and well-connected nodes controlled the attacker could release the fork their peers soon block first observed the network. such, peers who are only aware block would accept the fork and overwrite blocks history (and would end the last block the fork, which could ,). however, peers which receive the legitimate block first don't accept the fork propagating across the network. this point, the network fractured into two segments, which both have apparently-valid block the two sides the split aren't able reconcile and determine which blockchain correct, since either side accepting the other side's blockchain would require reorganization blocks deep, which clients will perform without human intervention, per protocol. non-punitive pos system where the optimal self-serving mining strategy involves mining all available blockchain forks, possible that several competing forks stemming from long-ago common point continue built parallel. when the length since common ancestor these competing forks reaches clients are likely permanently desynchronize from each other they individually choose one these forks and refuse fork any other fork since the other forks require organizations that are deeper than they are willing perform. mitigation this attack requires that sufficiently large that attacker can successfully build "selfsustaining" blockchain based private keys owned the past, that sufficiently small that shorter-term attacks distance are practical produce. setting value far possible from both extremes significantly reduces attacker's ability perform this attack. alternately, implementing pop removes the need for maximum reorganization depth (and makes nearly impossible for long reorganization produced), eliminating the potential for this permanent desynchronization attack. appendix the veriblock blockchain most blockchains will want inherit consensus security from bitcoin. mitigate problems arising from the limited block size and rising transaction fees, -minute block time, -byte limit data published with op_return, and the large amount unorganized un-related data sort through the bitcoin blockchain, propose intermediary aggregation blockchain: veriblock. veriblock designed secure directly with bitcoin using pop, and allow other blockchains publish arbitrary blockchain state data directly veriblock, which gets published proxy aggregate bitcoin. integrating with veriblock blockchain securing with veriblock would use provided library track veriblock and bitcoin consensus automatically, and then would change their block format and reward structure slightly accommodate and reward pop miners, and update the rules their network consensus query the veriblock library when resolving forks. veriblock design veriblock pow-based network designed handle simple transactions (no scripting) mini-blockchain secured directly bitcoin with pop. fast blocktime (such minute) reduces publication variability, the transactions support publication larger arbitrary pieces data (sufficient for pos and dpos networks use), and veriblock pow miners automatically follow several simple aggregation rules provide summaries published data (ordering pop transactions based prefix the published data, which groups all potentially-relevant information for each network together). additionally, veriblock designed provide easy subscriptions early attack notifications any blockchain interest. this provides environment where merchant, exchange, payment processor, etc. has one place (veriblock) acquire security information about all the blockchains they are interested in, making secure integration with third parties incredibly simple. veriblock benefits directly bitcoin, blockchain needs change their block header around bytes (instead the normal for pow networks, choose use far more expensive and difficult means publication (like "impossible" addresses, multiple op_return multiple transactions, etc.). additionally, the blockchain would need implement maintaining full spv-level consensus bitcoin themselves, and interested users would need listen the entire bitcoin blockchain for early attack detection. using veriblock, they can keep their current block format, publish larger amounts blockchain state data (particularly useful for pos networks which need publish data pertaining proving the existence the stake weight pos miner claiming consume mint block), take advantage faster blocktime for publications and weight appropriately force attacks become visible sooner viable, and have higher level decentralization their pop mining, because each pop publication costs less perform veriblock than bitcoin. veriblock dependence blockchain which choses use veriblock for security won't cease function the event that the veriblock network fails. existing pop consensus stored the blockchains themselves and can still used, and future consensus will simply fall back the blockchain's normal consensus algorithm (pow/pos/etc.) the absence new pop information. additionally, blockchains willing forgo the early attack detection benefits veriblock (or willing put the development effort monitor veriblock and bitcoin simultaneously for potential attacks) can allow pop miners use veriblock perform publications directly bitcoin, providing pop failover the event veriblock problems. references peercoin whitepaper [https://peercoin.net/assets/paper/peercoin-paper.pdf] blackcoin pos whitepaper [https://blackcoin.co/blackcoin-pos-protocol-v-whitepaper.pdf] neucoin whitepaper [http://www.neucoin.org/en/whitepaper] ethereum blog post weak subjectivity [https://blog.ethereum.org////proof-stakelearned-love-weak-subjectivity/] omnilayer specifications [https://github.com/omnilayer/spec] counterparty specifications [http://counterparty.io/docs/protocol_specification/] colored coins specifications [https://github.com/colored-coins/colored-coins-protocolspecification] merged mining specifications [https://en.bitcoin.it/wiki/merged_mining_specification] chaindb whitepaper [https://bitpay.com/chaindb.pdf]