platform for decentralized cryptographic trade and payment service creation latest publication date: nov. http://www.neonexchange.org the information this document subject change over time. does not constitute any financial advice nex: platform for decentralized cryptographic trade and payment service creation ethan fast, phd* neon exchange stanford, ca. usa ethan@neonexchange.org luciano engel, eng neon exchange florianopolis, brazil luciano@neonexchange.org fabio canesin, msc neon exchange cambridge, ma. usa canesin@neonexchange.org fabian wahle, phd neon exchange zurich, fabian@neonexchange.org thomas saunders neon exchange minneapolis, mn. usa tom@neonexchange.org abstract today, cryptocurrencies are primarily traded centralized exchanges where user funds are risk hackers and platform managers. decentralized exchanges (dexs) allow users retain control their funds trades are mediated smart contracts blockchain, but on-chain computation generally too slow keep with high volume order books. this paper describes neon exchange (nex), new decentralized exchange the neo blockchain that applies publicly verifiable off-chain matching engine handle massive trading volume and support complex orders (such limit orders) that are not possible existing dexs. nex also introduces payment service and funds management layer that enables thirdparty smart contracts neo send and receive global assets part their computation. fund developments and future expansion into related services, nex will issue million tokens that give holders share profits its services. introduction cryptocurrency markets have grown enormously recent years, from daily trade volume million january more than billion november []. despite the fact that most cryptocurrencies are secured decentralized architectures, almost all trades between currencies take place centralized exchanges, where funds must deposited under the control the entity facilitating exchange. this layer centralization puts user funds risk hackers and platform managers. most famously, millions dollars worth bitcoin were stolen from mt. gox and again from bitfinex recently, decentralized exchanges have emerged allow users trade without giving control their funds under these systems, trades are executed smart contracts blockchain, removing the need for centralized third-party control user accounts. while these exchanges succeed their primary goal decreasing third-party risk, their success comes the cost huge loss trading performance. smart contracts are far too slow execute the complex matching logic order books high-volume, centralized exchanges. practice, this means that users cannot execute complex trades, and presents opportunities for arbitrage stale orders []. centralized exchanges provide speed, and decentralized exchanges provide security, then seems natural ask: can hybrid system provide the best both worlds? this paper, propose that computer science phd granted may stanford university version copyright neon exchange, the optimal mix speed and security provided decentralized exchange with fully off-chain matching engine. order matching far the most computationally expensive operation when running exchange. encapsulating this component trusted off-chain service, can reap enormous improvements speed, and also support complex orders such limits margins. the same time, committing orders on-chain they are matched--with provable deterministic behavior--we can retain the security benefits traditional decentralized exchanges. neon exchange (nex) new decentralized exchange that embodies these ideas, built the neo blockchain. this white paper presents our vision for the nex platform, the performance benefits our technical approach, and how nex fits into the broader neo ecosystem. also discuss our roadmap over the coming months and plans for public token sale. background blockchain and smart contracts blockchain decentralized ledger that can record transactions between two parties verifiable and permanent way without the need for central authority []. bitcoin emerged the first public blockchain with large-scale adoption digital currency. other chains have since attempted improve this technology. most notably, ethereum launched the first blockchain with programmable, turing complete smart contracts []. smart contracts allow developers publish programs blockchain that anyone can inspect, and that will deterministically execute accomplish complex goals way verifiable all involved third parties. for example, smart contract might accept incoming funds from user, then release them certain date, collect funds from series users and split them evenly. these smart contracts are what make possible more sophisticated distributed on-chain applications such decentralized exchanges. decentralized exchanges many decentralized exchanges have emerged over the years. this section, lay out the trade-offs this design space, and how nex contributes over existing systems. summary, nex trades small degree user trust for vastly improved performance and usability. the earliest decentralized exchanges placed order books directly the blockchain these systems, market makers must perform on-chain transactions every time they want place, modify, cancel order. further, new orders are placed, smart contract must execute matching logic that runs slowly (and redundantly) all virtual machines the network. general, these exchanges take large amount network bandwidth and operate very slowly, very few decentralized exchanges operate under this scheme today. second class systems uses automated market maker (amm) smart contracts, opposed on-chain order book these systems adopt price adjustment model, where all parties trade with the amm, and the spot price asset determined the resulting market forces. while amms provide increased availability and performance over on-chain order books, they are still much slower than centralized exchanges and must place artificial constraints supply prevent their working capital from being depleted potential arbitragers. state channels have been proposed reduce network overhead for the more general problem asset exchange allowing two parties iterate transfer off-chain before ultimately committing on-chain. however, state channels are expensive open and close, usually requiring security deposit and series on-chain transactions. for this reason, they are most useful among known parties who want manage series interactions (e.g., "bar tab"), not single party conducting one transaction with broader market. building from state channels, more recent class dex based off-chain relay these systems, market makers broadcast order off-chain, which can then picked interested counterparty and passed smart contract for fulfillment. these systems require far fewer on-chain transactions perform trade, but still suffer from performance issues comparison centralized exchanges. notably, order matching not automatic these systems, presenting arbitrage opportunities against users who are slow cancel their orders. similarly, the absence matching means that users cannot place more complex orders such limit buys market sells. contrast these approaches, introduce new kind decentralized exchange, nex, based trusted, off-chain matching engine []. this matching engine works exactly like its equivalent centralized exchange, but only has control over active orders, and commits trades on-chain without access the full balance user account. like exchanges based off-chain relay, nex orders are matched off-chain and fulfilled on-chain, but nex's automatic matching engine reduces opportunities for arbitrage and allows for more complex orders. ensure trust, nex provides public record orders and deterministic specification behavior, that users can verify orders matched off-chain and claim award the event incorrect behavior. taken together, this makes nex the first decentralized exchange with performance comparable today's centralized exchanges. the neo blockchain neo was launched china's first public blockchain. recent improvements the network have made compelling alternative ethereum for smart contracts and distributed applications []. nex will run first neo, before later expanding support exchange ethereum. while most the ideas behind nex apply both platforms, there are several major differences between neo and ethereum that are relevant decentralized exchanges. modeling user balance ethereum based account model, where user's balance eth stored number the ethereum virtual machine (evm) and can easily modified (e.g., sent received smart contract logic) []. contrast, global assets neo such neo and gas are based utxo model, where funds are sent and received through chain spent transaction ids the network []. notably, these differences only apply global assets the neo network and not tokens created through smart contracts, which behave similarly eth []. each system design has trade-offs. ethereum, for example, easy for smart contract interact with user's balance eth, but difficult for node prove that transaction has taken place without syncing the full chain and running the evm. contrast, easy for third parties neo verify that transaction has taken place the chain (e.g., through spv []), but much more difficult for smart contracts program interactions with user's neo gas balance. for nex succeed, smart contracts neo require some way programmatically interact with global assets like neo and gas. solve this problem, introduce novel payment service layer, that converts global assets into smart contract tokens, which can then easily interacted with smart contracts the neo network. users can convert their global assets into tokens depositing them the payment service address, then later withdraw them from that contract address (perhaps with different balance), whenever their interactions with third-party smart contract have been completed. believe this solution will generalize other networks that combine utxo models with independent smart contracts, such cardano []. calls between smart contracts second major difference between neo and ethereum how and when smart contracts are allowed call each other the course execution. ethereum, smart contract can dynamically call any other smart contract, given address passed run-time. contrast, neo enforces that all calls between smart contracts must declared statically advance []. this constraint makes much easier for neo implement sharding optimizations across state, but means that nex smart contracts must hard-code all token pairs that are supported the exchange. consensus neo and ethereum also operate under very different consensus models. neo uses delegated byzantine fault tolerance (dbft) for consensus whereas ethereum uses proof work (pow) []. neo's consensus model allows for much higher theoretical transaction throughput (up tps) which has huge positive impact the performance decentralized exchange. ethereum moves proof stake (pos) model neo's comparative advantage may diminish, but many details have yet worked out before that transition occurs []. neon exchange neon exchange (nex) aims combine the performance centralized exchanges with the trust and security properties decentralized exchanges. the system consists three main components: off-chain trade matching engine, smart contract where trades are executed, and payment service where global assets such neo and gas can converted tokens that can transfered directly smart contracts, making them compatible with the exchange. the following sections, describe each component more depth. off-chain matching engine off-chain matching engine allows nex benefit from the performance characteristics centralized exchanges, while maintaining decentralized user account model based the blockchain (figure orders are signed and sent from user addresses the matching engine, where they are quickly and deterministically processed using high-performance hardware. matched orders are then signed off-chain and committed back user accounts the blockchain. figure the nex architecture provides fast, decentralized exchange using off-chain matching engine. here illustrate example user interaction with nex exchange. first, one user authorizes trade exchange token for token and sends the order the matching engine (). next, second user authorizes and submits trade for token exchange for token (-). the engine matches the orders and submits them smart contract for execution (). note that steps (-) and (-) can initiated either via api call the nex exchange website. trade nex, user must first authorize nex access the amount token traded calling the nep- approve method the token's smart contract. the user can then submit signed json request the nex matching engine api. once the order matched off-chain, the engine will call the nex smart contract execute the order. because single invocation transaction neo can contain many smart contract calls, the engine can batch set matched orders one on-chain transaction minimize computation. assuming transactions per second, nex could potentially execute more than thousand trades per second the chain. the future, such batches could adopt match-rings further enhance liquidity []. trusted off-chain matching while off-chain matching engine brings enormous performance benefits, also opens the door potential trust issues between users and the exchange. how users know that the engine matching orders fairly, for example, and not manipulating the order books its own benefit? address this problem, propose the idea provable fair off-chain matching. under this scheme, the off-chain matching engine follows publicly specified deterministic algorithm. combining this knowledge with public ledger the order which trades have been sent the exchange and fulfilled the blockchain, any user can verify that the exchange operating fairly. make this trust nex even more explicit, the future plan build smart contract where users can submit evidence unfair exchange behavior return for large reward. concretely, matching nex occurs deterministically based price and time, commonly known fifo []. lower priced orders will matched first, with preference given orders placed earlier time given price level. any modifications order will reset its placement time. centralized user accounts the security problems centralized exchanges are not simply technical challenge overcome, but also social consequence the common user desire hold assets exchange accounts. this desire largely due the familiarity the bank-like user experience provided these centralized platforms when managing funds. nex aims bring similar user experience decentralized exchange storing user's encrypted private key client-side user's browser. this preserves the security guarantees decentralized account model while allowing users login into nex through traditional web form that asks for username and password. types orders unlike existing decentralized exchanges, which only support point-to-point orders that allow tokens traded fixed price, nex supports more complex trades such limit and market orders. below describe the types trades available nex (table table order types supported nex type description limit market margin exchange tokens above below given price ratio exchange one token for another the current market price borrow with leverage long short token nex able support these complex order types due the speed and flexibility its matching engine, which not limited slow computation cycles the blockchain. exchange api nex exposes public json api that third-party applications can use trade tokens. this api allows users place, modify, and cancel orders the matching engine. because these transactions take place off-chain, the nex api can handle tens thousands requests per second, in-line with popular centralized exchanges []. submit order the matching engine, client must make json request that signed with the private key associated with the address placing the order. this ensures that user cannot submit trade address they not control. before attempting match order, the engine will also verify that the user has granted nex's smart contract enough the asset such that the order can successfully executed. the user has not authorized enough funds, the order will rejected. modify cancel order, user must similarly submit json request signed with the correct private key. order will then canceled modified has not already been matched. order has been partially matched, then only the unmatched portion the order will affected. table nex initial fee structure user days volume taker fee maker fee fee structure nex follows the maker/taker fee structure common other exchanges. market makers who place new limit orders the order books will pay fee, while takers who place order market place, limit order below the current market price will pay small fee (table fees will deducted this order type our roadmap, supported some time after the initial launch from the taker the token denomination their trade. nex computes user's days moving average volume using the volume trades associated with their public key, percentage total exchange volume. implementation the nex off-chain matching engine will built elixir, functional programming language designed build scalable, distributed, and fault-tolerant applications. elixir builds top erlang, language originally intended for development telecommunication systems, which now used modern web developers manage the challenges dealing with high availability. elixir will help nex realize off-chain matching engine that provides service users from all over the world, while functioning continuously and without downtime. smart contract for token exchange the nex matching engine communicates with smart contract that commits trades between users. this smart contract contains logic powered the nep- token standard, which allows hold user tokens involved active trades. once the matching engine computes match, sends this smart contract all involved user addresses and the types and amounts tokens trade between them, and the contract completes the trade. calls this smart contract can batched single invocation transaction increase performance and reduce network volume. trade method signature the nex exchange smart contract (sc) accepts two parameters: string indicating the operation performed and bytearray containing serialized data for usage the method. the output any call will returned bytearray, with the first byte indicating the success failure the call and any resulting data serialized the remainder the bytearray. the central interface between the off-chain matching engine and the blockchain will the trade method the exchange sc. this method will take the parameters currency_maker, currency_taker, amount_maker, amount_taker, address_maker, and address_taker. with these data the exchange delegates the trade each currency corresponding via the nep transferfrom method. the case that the transfer currency from the maker taker vice versa fails, any non-failed transfers will reversed and the method will return false, otherwise the method will return true. security ensure that third-party can execute fraudulent trade between users, the trade method the exchange smart contract will only accept orders signed private key held the matching engine. withdrawal the nex smart contract only has access funds involved active trades, and not the full balance tokens user's address. retrieve tokens held for active trade, user can submit cancel order the nex matching engine, which will then submit immediate withdraw order the exchange sc, transferring tokens back the user. delegating this request through the matching engine ensures that the engine will not match order that longer backed user funds. however, enhance user trust nex, the smart contract also supports slower direct withdrawal that requires communication with the off-chain matching engine. this second withdrawal process ensures that users can withdraw active trade funds the event broken compromised matching engine the matching engine has enough time notice and cancel orders invalidated through any direct withdrawal funds. withdraw directly, user first calls public withdrawal method the exchange sc, specifying the token type and amount. ten blocks later, the user can then call complete_withdrawal method, and the tokens will transfered. users can always retrieve funds immediately submitting order cancellation the matching engine, expect that the slower direct withdrawal method will not often used. exists simply prove that users control any funds involved active trades. payment service the nex payment service allows neo smart contracts interact with assets that live outside the neo virtual machine. for example, user might use the payment service make transactions across chains, sending eth neo smart contract that then distributes among their friends' neo addresses. the future, the payment service will support assets other blockchains non-digital assets such usd, serving gateway for the trade off-chain assets nex. the near term, however, the payment service designed provide similar function for global assets the neo blockchain such neo and gas. more broadly, the payment service provides starting point for reasoning about how decentralized exchange can interact with assets other chains. motivation for neo and gas while might seem surprising that neo smart contracts cannot send neo and gas directly through computation, there are good reasons for this involving network scalability (see section ..). result, the nex payment service necessary for complex interactions--such decentralized exchange--between smart contracts and these global assets. interacting with the payment service high level, the payment service converts global assets such neo and gas into token assets that can more easily sent and received smart contracts (figure when you deposit neo into the payment service, equivalent amount xneo created for you, which can sent and received smart contracts using the nep- standard. for example, when you then withdraw your neo from the payment service, your balance xneo adjusted down accordingly. any address that receives xneo can withdraw the equivalent amount neo from the payment service. figure nex's payment service layer allows neo smart contracts interact with utxo based global assets such neo and gas. above, user deposits neo the nex payment service smart contract, creating balance xneo that can transferred between smart contracts (). the user authorizes third-party smart contract access their xneo (a). the user then calls that contract (b), which sends some the xneo another user and authorizes second smart contract use the rest (c). the first smart contract then calls the second smart contract (d). finally, the users and second smart contract withdraw neo from the payment service, zeroing their xneo balances (). network-assisted global asset withdrawal procedure the nex payment service powered novel withdrawal procedure have developed for global assets the neo blockchain. while smart contracts are not able send neo gas user address directly, they are able execute logic that decides whether user authorized withdraw certain amount these assets through normal contract transaction. use this idea allow users withdraw funds from the nex payment service. concretely, withdraw assets from the payment service, user calls the withdrawal method the service sc, specifying unspent txid, asset type, and the amount withdraw. the smart contract checks this information, and user cleared for withdrawal, adds the txid, output address, and amount white list storage. this white list consulted any attempted transfer funds from the smart contract. the user can then withdraw the appropriate amount from the smart contract using normal contract transaction the network. default, this kind withdrawal two-step process. the first step, user registers txid and amount the system for withdrawal, and the second step, they perform contract transaction execute the withdrawal. however, possible make withdrawals one-step process from the perspective end-user incentivizing third parties perform the second step the process, allowing them take small gas fee. this scenario, user would authorize withdrawal with the sc, and number bots monitoring public events the chain would compete execute the contract transaction return for the fee. generalization assets other blockchains the future, the concepts applied neo and gas the nex payment service can also applied assets other chains. one additional challenge when dealing with off-chain assets, however, that neo smart contract cannot observe them directly. solve this, propose create hubs that monitor events that occur one chain, such user depositing funds address controlled nex, and push them smart contract another. beyond this important difference, similar principals hold: neo smart contract can create virtual nep- representations asset under nex control, allowing users to, for example, send ethereum neo address smart contract. the owner the receiving address smart contract can then withdraw the funds the outside chain following procedure through which they prove ownership the neo address question. decentralized banking beyond enabling decentralized exchange, nex offers long term vision decentralized banking: smart contract based funds management service for assets the blockchain. with traditional banking, this management service would designed provide both fund security and investment opportunities (figure for example, this funds management smart contract can provide advanced security features through dual key system consisting frequent use key and large funds key. user moving funds nex with the frequent key would limited daily amount, and trade above this threshold would need provide their large funds key. frequent use key compromised the user can lock their account using both keys and transfer the funds new account. following the success core exchange features, envision this smart contract will integrate with and manage other nex services, such peer-to-peer lending indexed investment accounts. figure nex enables long term vision decentralized banking through smart contract based funds management service. users buy assets from conventional services, then interact with them the neo blockchain through the nex smart contract. these assets can also traded nex through nep- pairs, enable cross-chain exchange. funds stored the management contract have access other services such indexed investment accounts peer-to-peer lending. nex token the nex token allows holders claim share fees generated the payment service and exchange. total, million tokens will issued that entitle holders share the fees taken the exchange and payment service. nex holders can claim their profits through staking process, where claims the staked nex operate similar gas claim calculations the neo network. this way, token holders who stake nex benefit directly from the success the exchange services: more fees are generated, holders will receive larger rewards. please note: legal and regulatory policy may require changes this token model. aim transparent possible with the nex community, and will share any updates they occur. calculating fees fees are calculated terms each asset traded transfered nex. for example, user places market price order trading nex for neo, then the exchange will collect fee nex. similarly, user transfers neo the payment service for fee gas, that fee will added the gas fee total. total nex fees are calculated simply computing the fees taken for each asset the exchange. fees are taken, proportion them are moved independent smart contract that manages the claiming process. claiming fees via staking nex tokens users can stake their nex tokens smart contract that pays out proportion exchange and payment service fees. stake their tokens, users send their nex tokens the smart contract via stake method that records the starting block and the amount sent the user. the user can then make periodic claims the contract retrieve their share nex profits since staking began. users can commit staking their tokens for longer periods time receive larger proportion fees. claim example user owns nex, and nex has generated fees tokens equivalent million dollars market value since they last made claim. assuming the user has staked nex rate they would eligible for claim worth this rate hypothetical, and will release true rates later time. the claim can received: the user claims direct cut fees across each token the exchange, nex trading neo, gas, nex, and rpx, the user would receive share each these assets. the user claims equivalent amount one preferred asset type. here nex will the conversion automatically using its trade features and corresponding fee structure. token sale nex will hold token sale plan sell million tokens the public, total pool million. will announce more details for the sale soon they have been worked out with our legal advisors. aim maximally compliant with regulators, and will attempt include many countries possible the sale. current progress and roadmap here describe the current state development nex. incorporation nex will incorporated zug, switzerland. are currently cooperating closely with swiss financial authorities ensure compliance order protect investors. technology have implemented alpha prototypes all the smart contracts described this paper, and will release these publicly have also begun work prototypes for the trading interface and matching engine. strongly believe transparent development process where possible, and will open sourcing much our early work benefit the neo community. see our github account for updates and more information: https://github.com/neonexchange. roadmap nex plans have trading neo tokens operational mid-. propose the following preliminary release schedule: smart contract examples for payment service and decentralized exchange, demo profit distribution mechanism testnet. nex token sale and release open source platform for token sales neo. payment service launch mainnet for neo and gas. also, matching engine launch testnet, supported accompanying cli. smart wallet and api for integration with tethered tokens mainnet. trading interface and matching engine launch mainnet: begin trading neo, gas, and nex. also, cross-chain demo eth and neo testnets. cross-chain launch support trading eth and eth tokens. also, support for margin trading mainnet. decentralized banking: smart contract asset management across chains. references coinmarketcap.com. http://coinmarketcap.com, etherdelta. https://etherdelta.com/, accessed etheropt. https://github.com/etheropt, accessed maker market. https://oasisdex.com, accessed neo white paper: superconducting exchange. https://github.com/neo-project/ docs/blob/edabfbcfddbbda/en-us/white-paper. md#highly-scalable-architecture-design, accessed raiden network. https://raiden.network, accessed why are building cardano. https://whycardano.com, accessed bitcoin developer guide: proof work. https://bitcoin.org/en/developer-guide# proof-of-work, accessed archived https://www.webcitation.org/ vdujjj november th, bitcoin developer guide: simplified payment verification. https://bitcoin.org/en/ developer-guide#simplified-payment-verification-spv, accessed archived https://www.webcitation.org/vdujjj november th, bitcoin developer guide: utxo. https://bitcoin.org/en/developer-guide# term-utxo, accessed archived https://www.webcitation.org/vdujjj november th, the cost decentralization and etherdelta. http://hackingdistributed.com/ ///cost-of-decent/, accessed archived http://www.webcitation. org/vffrd november th, ethereum wiki: design rationale. https://github.com/ethereum/wiki/wiki/ design-rationale#accounts-and-not-utxos, accessed archived http://www. webcitation.org/vfswqi november th, neo nep-: token standard. https://github.com/neo-project/proposals/blob/ master/nep-.mediawiki, accessed archived http://www.webcitation.org/ vfuupv november th, reconstructing smart contracts, part ii: scalability. https://themerkle.com/reconstructingsmart-contracts-part-ii-parallel-universes-and-unlimited-scalability/, accessed archived http://www.webcitation.org/vfxfbha november th, ethereum wiki: proof stake. https://github.com/ethereum/wiki/wiki/ proof-of-stake-faq, accessed archived http://www.webcitation.org/ vgyaqh november th, cme matching algorithm: fifo. https://www.cmegroup.com/confluence/ display/epicsandbox/matching+algorithms#matchingalgorithms-fifo, accessed archived http://www.webcitation.org/vgarrcz november th, high frequency trading the coinbase exchange. https://www.coindesk.com/ high-frequency-trading-on-the-coinbase-exchange/, accessed archived http://www.webcitation.org/vghnihg november th, loopring white paper. https://github.com/loopring/whitepaper/blob/master/ en_whitepaper.pdf, accessed archived http://www.webcitation.org/ vgnuz november th, castro, m., liskov, b., al. practical byzantine fault tolerance. osdi, vol. (), coindesk. the bitfinex bitcoin hack: what know (and don't know). https: //www.coindesk.com/bitfinex-bitcoin-hack-know-dont-know/, archived http://www.webcitation.org/vfwmc november th, coleman, state channels. http://www.jeffcoleman.ca/state-channels/, accessed archived http://www.webcitation.org/vfigbq november th, hertzog, e., benartzi, g., and benartzi, bancor protocol: hierarchical monetary system and the foundation global decentralized autonomous exchange, othman, a., pennock, m., reeves, m., and sandholm, practical liquidity-sensitive automated market maker. acm transactions economics and computation (), swan, blockchain: blueprint for new economy. o'reilly media, inc.", vukolic, the quest for scalable blockchain fabric: proof-of-work vs. bft replication. international workshop open problems network security, springer (), warren, w., and bandeali, open protocol for decentralized exchange the ethereum blockchain, wired magazine. the inside story mt. gox, bitcoin's million disaster. https://www.wired.com///bitcoin-exchange/, archived http:// www.webcitation.org/vfulqza november th, wood, ethereum: secure decentralised generalised transaction ledger. ethereum project yellow paper (). zhang, e., and hongfei, neo white paper. http://docs.neo.org/en-us/index.html, accessed archived http://www.webcitation.org/vfpgohz november th,