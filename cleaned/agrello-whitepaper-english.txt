self-aware agent-supported contract management blockchains for legal accountability alex norta, anton vedeshin hando rand simon tobies addi rull, margus poola, teddi rull agrello parnu mnt. tallinn, estonia hando@agrello.org,addi@agrello.org large-scale systems group, tallinn university technology, akadeemia tee tallinn, estonia alex.norta.phd@ieee.org abstract. this whitepaper addresses existing problems with conventional non-machine readable contracts. such conventional contracts (cc) are complicated set up, disconnected from ict-systems and when conflicts occur, tracking their execution restrictively slow and addition, ccs are challenging enforce. the other hand, called self-aware contracts (sac) that are similar ccs with respect legal enforceability, are machine readable and supportable blockchain-technology. sacs not require qualitative trust between contracting parties because blockchains establish instead quantitative notion trust sac-related events are immutably stored. however, currently existing machine-readable contract solutions, i.e., smart contracts, lack suitable obligation constructs for execution and enforcement. additionally, current systems not comprehend the dynamics legal relationships. important mask legal obligations with daily human conduct. this whitepaper address the gap specifying so-called agrello-framework that enables blockchain-driven self-aware agents-assisted contracts for decentralized peer-to-peer (pp) economy. key words: self aware, multi agent, blockchain, smart contract, decentralized, per-to-peer, e-governance, human readable introduction the traditional understanding conventional contract (cc) exchange commitments identified parties that are enforceable law. important prerequisite for contract that most commonly exists written document evidence, that the parties involved voluntarily engage establish consensus []. most business cases, ccs are documents that identify the contracting parties uniquely and state explicitly the commitments the latter. when those commitments are performed, their status changes over time. another problem alex norta with the traditional form setting and managing ccs that they are often underspecified and the ability manually track their status restricted. there concrete overview the cc-status, the contractual relationship between parties prone conflict. the resulting costly conflict resolutions may even collapse entire contractual relationship. also the enforcement ccs proves either too complicated, time consuming, impossible, certainly international circumstances. the authors recognize that shared blockchain technology enables business collaborations that require high-reliability and shared, trusted, privacypreserving, immutable data repositories for smart contracts. so-called business artifacts for adopting data-aware processes provide basis shared blockchains that enable business-collaboration languages such solidity ethereum. [], the authors map running case collaborative process onto smartcontract scripting language. that approach addresses the trust-issue collaborative processes that single third-party entity must monitor events. instead, the blockchain enables trustless process collaboration because single entity being control. the mapping from collaborative processes blockchains enables the monitoring process enactment and auditing related events. [], different smart-contract language choices are compared. while procedural languages are currently the norm[], also logic-based languages are alternatives. the state the art above shows that partial smart-contract approaches exist for blockchain technology. however, there lack framework moving smarttowards self-aware contracts (sac) where the latter have the ability gather information about their internal and external-contextual state and progress reason about their behavior while being artifact law. furthermore, the state the art above also does not recognize that such sacs must cater for having humans the contract loop. this paper fills the gap posing the question how make self-aware human-readable contracts legally viable? reduce complexity and establish separation concerns, deduce three further sub-questions follows. what enables contracts self aware? what enables sacs human manageable? what ensures contract immutability for legal viability? the remainder this whitepaper structured follows. section presents running case for sac management along with related literature that prepares for subsequent sections. section focuses the important relationship sacs between essential content and the mapping business processes that require monitoring. section discusses the meaningful integration humans the sac lifecycle. section explores which pre-existing blockchain-technology solutions can combined suitable way for achieving trustable management contract elements. section evaluates the results against the running case, employing proof-of-concept prototype. finally, section concludes the whitepaper and also comprises plans for future work. self-aware contracts background literature and running case section present related literature that prepares the reader for subsequent sections. section contains running contract case that stems from real-life apartment-renting contracts. note that use the terms beneficiary for creditor and obligor for debtor. related work scholarly literature about sacs exists. [], the core elements legislation are addressed, including duties and obligations that share intersecting properties. the characteristic duty the absence benefiting party (beneficiary), while the performance obligation serves beneficial result for determined beneficiary. the focus the whitepaper obligations the properties which figure informally depicts. fig. informal properties obligation. the properties figure show micro-process for obligations development using the business-process modeling notation bpmn []. the small green-lined circle denotes the start the process and the red-lined circle the end. rectangles figure are tasks and x-labeled diamonds denote exclusive-choice split and -join respectively. directed arcs connect the nodes along control flow from start end. figure shows that obligations exist either something refrain from something. further details about these so-called smart obligations are presented section fig. right-development micro-lifecycle. alex norta contract law, rights and obligations are related that one party the contract decides use his right, there corresponding obligation the other party. rights that stem from the contract are reflected obligations the other party. figure depicts micro-lifecycle rights specifications. after determining the beneficiary right, there can either right claim, right something that pertains action type and object. finally, the obligors must determined who enable right. for example, the lessee has payment obligation rental contract. case late payment, the lessor has the right claim late-payment charges. after invoking that right, the lessee has obligation pay. orchestration and choreography protocols that facilitate, verify and enact agreements between consenting parties are termed smart contracts the latter initially find application diverse domains such financial technology [], internet-of-things (iot) applications and digital-signing solutions []. essential aspect smart contracts decentralized validation transactions, initially means so-called proof-of-work (pow) []. the core technology that enables smart contracts public distributed ledger termed the blockchain that records transaction events without requiring trusted central authority. blockchain technology spreads popularity with the inception bitcoin [], peer-to-peer (pp) cryptocurrency and payment system that comprises limited set operations the protocol layer. bitcoins use pow for transaction validation that computationally expensive and electricity intensive. most proof-of-stake (pos) blockchains can source their heritage back peercoin that based earlier version bitcoin core. there are different pow algorithms such scrypt groestl equihash [], etc. the purpose launching new algorithm prevent the accumulation computing power one entity and ensure that application specific integrated circuits (asic) can not introduced into the economy. there are ongoing discussions about consensus and which platform meets the needs respective project requirements. the consensus topics most widely discussed are: pow [], pos [], dynamic pos and byzantine fault tolerance discussed hyperledger. the nature consensus about achieving data consistency with distributed algorithms. available options are, e.g., the fischer lynch and paterson theorem that states consensus cannot reached without agreement amongst nodes. the utxo model, transactions use input unspent bitcoins that are destroyed and transaction outputs, new utxos are created. unspent transaction outputs are created change and returned the spender []. this way, certain volume bitcoins transferred among different private key owners https://peercoin.net/ https://litecoin.info/scrypt http://cryptorials.io/glossary/x/ http://www.groestlcoin.org/about-groestlcoin/ http://tinyurl.com/zxgayfr self-aware contracts and new utxos are spent and created the transaction chain. the utxo bitcoin transaction unlocked the private key that used sign modified version transaction. the bitcoin network, miners generate bitcoins with process called coinbase transaction, which does not contain any inputs. bitcoin uses scripting language for transactions with limited set operations the bitcoin network, the scripting system processes data stacks (main stack and alt stack), which abstract data type following the lifo principle last-in, first-out. [], the authors define ontology that allows for rapid validation the concepts and properties existing contracting languages comprise stateof-the-art formalization means ontologies use the web ontology language owl []. the latter organizes class hierarchies and allows practitioners find common semantical understanding about problem domain. note that ontologies represent constantly evolving information the internet originating from heterogeneous data sources. the obligation ontology for this paper design with the protege tool that free, open source ontology editor for systematic knowledge acquisition. protege comprises graphic user interface with plugins for varying ontology visualizations and correctness checks. employ the hermit reasoner check the ontology consistency, identify subsumption relationships between classes, and on. since the obligation ontology static, employ coloured petri nets (cpn) graphical oriented language for covering the dynamic aspects obligation processing using cpntools informally, the cpn-notation comprises states, denoted circles, transitions, denoted rectangles, arcs that connect states and transitions but never states with other states transitions with other transitions, and tokens with color, i.e., attributes with values. arcs carry inscriptions cpn-ml expressions that evaluate multiset single element. modules cpn are non-atomic place-holder nodes for hierarchic refinements that correspond respective services system-implementation. the holistic lifecycle management sacs relevant and has been ignored far industry practitioners. consequently, [], the startup phase commences with choosing from library contract template where the latter configured with service types and roles. concrete service offers from tentative ecommunity partners populate the service offers and roles before negotiation phase either results terminating dissent only one party, counteroffer that requires restart the negotiation, consent that establishes contract. the next phase the lifecycle involves creating local contract copies for each ecommunity partner. the local contract copies are the means for deducing respective sets business policies, network monitors, monitoring agents and communication endpoints concrete technical services for the enactment phase. the latter carried out distributed way and when violation https://en.bitcoin.it/wiki/script https://steemit.com/smart/@alexbafana/smart-contract-languages-comparison http://cpntools.org/ alex norta business policy occurs, the non-violating ecommunity parties must vote the perceived severity. the outcome options are either calming for the ongoing contract enactment, disruptive. the former maintain the enactment and comprises voting outcomes, such ignoring violation, replacements business rules, service offers, ecommunity party with new one, and on. calming reactions require varying degrees destruction flowing business semantics for rolling back the remaining subset earlier contract-lifecycle stages targeted way. disruptive voting outcome leads sudden termination ongoing enactment the business-rule violation perceived too severe. the rollback results new negotiation for starting another contract, unless the business case seizes exist. the potential conflicts that occur between decentralized autonomous agents (dao), require specific modeling, management and resolution []. the management works such that first, conflict detected analyzing the exceptions reported during execution. second,the conflict type, origin and impact exception must uncovered. finally, depending the nature exception, the appropriate conflict negotiation and resolution strategy among the participating entities implemented. ontology enables modeling conflict types along with related exceptions, negotiation and resolution strategies, thereby enabling conflict management and resolution. ongoing contract enactments may also evolve orderly way. that case, the assumption that collaborating party modifies internal technical process that matches with externally exposed service offer. the latter subset the internal process that business secrets remain private. based set rules, such internal process changes may trigger varying changes process view that may cross over into the domain collaborating parties the degree affecting other ecommunity-party internal processes. the objective assure that collaboration configuration remains sound that the enactment contract reaches the desired terminal state. finally, there clear need bring different solutions from different technology and application domains together for holistic design cyberpysical systems (cps) []. cps integrates computational and physical capabilities that allow for interaction with humans through diverse means []. such novel interaction ways expand the capabilities humans correlation with the physical world through computation, communication, and control key attraction feature cps. for example, domains the design and development next-generation avionics and vehicles, smart cities, industry and on. the flexible and scalable governance cps raises the need for employing sacs where smart contracts are combined with smart objects such belief-desire-intention (bdi) agents []. jason platform for the development bdi-agent systems that incorporates reasoning cycle for interpreting and executing source code the agentoriented programming language agentspeak. the latter stems from logics programming and allows for knowledge presentation mathematical relations. http://jason.sourceforge.net/wp/ self-aware contracts running case user story depicted figure describes process making rental agreement based activities lessor and lessee. lessor person who property owner person who represents property owner and has right make rental agreement behalf owner. call him john. property this use case scenario what legal terms called immovable, i.e., plot land and anything permanently attached the plot land, such house, apartment, condo some other type premises such garage, parking lot, shed, i.e., space that can rented out. property can also movable legal terms such as, e.g., trailer, tool. lessee person who looking for property rent for long short period time. call her mary. deposit act act john mary mary john deposit rent (a) contract initiation timeline (b) contract expiry termination fig. the informal exchange protocol for (a) the contract initiation and (b) for contract expiry and -termination. for (a), the lessee pays deposit the lessor and next both sign rent contract (act the apartment keys are handed over the lessee for moving into the apartment, for which the lessee pays monthly rent. for (b), possession-retrieval act (act signed that may state the apartment the same condition for (a), the apartment keys are handed back the lessor, the lessee moves out and finally, the lessor pays back the deposit. the lifecycle rental contract divided into the following stages/phases: preparatory, negotiations, contract execution rollback and contract expiry stage. following figure the preparation phase rental contract triggered upon request from mary who looking, for example, for suitable apartment for the period months. this stage, certain standard requirements the contract have determined before john and mary can proceed negotiate terms the contract. mary needs information about the owner the property and the apartment john needs information about mary. john's and mary's names, personal identification codes, addresses (data the parties) alex norta must included the contract. the apartment has specified that its condition and status becomes colloquially apparent and formally defined for john and mary. the object the contract defined characteristics the apartment such location (address), size (square meters), intended purpose, e.g., for living, storing, work and for instance whether parking space storage room outside this apartment included. traditionally, mary looks for information about apartments for rent from the internet, she employs real estate agent negotiate terms the contract with john. this means she must spend time look for information, make calls and visits find suitable apartment rent. real estate agent would charge fee for his services. the agrello system provides innovative approach. during the negotiation phase, john has predefined essential terms the contract (characteristics the rental object, time, price and rating the lessee) and based this information looks for the best match rental request. the agrello system, contract conclusion between john and mary possible when match occurs. mary declines the offer, she indicates which factors she does consent with. based this information john modifies the search criteria for better match with the modified requirements. the conclusion the contract means that both parties the contract have expressed their will conclude it, i.e., all parties have signed it. this cannot altered any third party. the contract execution phase begins with the documentation the condition the apartment. traditionally, this refers possession transfer act that includes information about the condition the apartment, the recorded state utilities (water, electricity, heating) and the number keys given the lessee. john must hand over the keys and mary must pay the deposit for the apartment. after that, mary obliged pay the monthly rent time and keep the apartment good condition. mary fails perform her monthly rent payment then john has the right claim late payment charge. rollback situation occurs if, e.g., john can not provide the apartment any more, then john must return the rent that mary has payed front. the contract terminates the expiry date the contract arrives, the contract prematurely terminated. consequently, the apartment transferred back john. during the contract expiry phase, john expects that the condition the apartment the same upon return the point initial transferral mary. the property-transfer procedure similar the description above and the status utilities must recorded. self-awareness contracts the current smart-contract lingua franca solidity. embodies programming language that industry practitioners without it-skills not comprehend, e.g. lawyers. therefore, not possible defend such contracts front independent arbitrator due lack suitability, utility and expressiveness self-aware contracts legal context. for example, solidity does not comprise language constructs that resemble obligations and rights pertaining the parties contract. the purpose ccs establish relationships and govern the behavior contracting people, which requires sound constructs obligations and rights. with the emergence cps, smart contracts require the capability reasoning about rights and obligations, which the involvement bdi-agents enables. thus yield thereby sacs with scalable socio-technical application scenarios where humans use technology for solving problems collaboratively. ccs, lawyer has look contract check deadline was missed, obligation breached. self-awareness this sense means that both entities, the and lawyer, merge into one artifact being software agent that comprises contract logics the form machine-readable obligations. more precisely, the agent can deduce, e.g., missed deadlines from the obligations, and since perceive the agent with the obligations smart contract, conclude smart contract reasons about itself. the remainder structured follows. section discusses the ontological concepts and properties contractual obligations. section shows formal way the processing obligations agents. next, section explains the use bdi-agents managing the contracts. contract content sac must comprise important elements contracts provide metadata during the contract execution. this metadata can then used various ways informatics systems, but most importantly agents, which assist, automate and manage contract execution. mentioned above, rights and obligations must optimized for machine readability. explain rights and obligations with the running case section next, show machine-readability for rights and obligations while maintaining the capability for non-technical persons comprehend the smart rights and obligations based sac. figure depicts the class diagram the agrello-framework ontology several sub-class relationships exist capture all essential contractual elements. for example, refine obligation adding subclasses monetary obligation and nonmonetary obligation express certain remedies are only available for non-monetary obligations that can repair, replacement, while some are monetary, e.g., late-payment charges. there exist also person subclasses such obligor who must perform obligation, beneficiary who benefiting from the performance obligation and optionally, third party beneficiary from the performance obligation, e.g., utilities provider rental contract. the purpose the remedy subclasses figure eliminate negative consequences that result from breach the contract. additionally, invoking remedies, beneficiary achieves situation the obligation had been performed agrello-owl: http://tinyurl.com/lkkapvg alex norta fig. agrello-ontology class diagram. correctly. for example, the rental payment delayed, the lessor can claim late-payment interest. the right subclasses are important they reflect what beneficiary can claim. for example, lessee destroys furniture apartment, the lessor has the right claim repair, claim replacement. finally, the state subclasses figure reflect the status obligation performance contract lifecycle. fig. obligation-ontology graph. with respect class-references, focus obligations and rights. figure the depicted graph shows the main ontological relationships for the obligation self-aware contracts class. accordance with figure the depiction shows components that are integrated with the ontology. more concretely, figure comprises obligor, beneficiary, precondition, action and deadline. furthermore, remedy based obligation and third party fulfills obligation. claim, right may create and obligation and finally, the latter follows lifecycle state stages. figure precondition expression that must fulfilled order for obligation enabled. action the task obliger must carry out for the beneficiary, e.g. pay the rent. action has two properties, namely action type such pay and the action object such rent. the deadline states when obligation has performed. fig. right-ontology graph. the next ontology graph figure shows the static relationship classes related right. related figure the difference that beneficiary has rights prescribed contract and right several remedy instances contract breached. for example the apartment not returned the lessee the condition was the beginning the contract, the lessor has the right claim repair, replacement. damages can always claimed, irrespective the aforementioned rights. this can the case the lessor can not fulfill agreement with subsequent lessee due delays caused necessary repairs. obligation processing during contract lifecycle, obligations move through stages processing. according the ontology classes figure those stages are inactive, active, performed, delayed, defective and terminated. additionally, there exist the stages alex norta revised and unfulfillable, which out focus for the automation obligation processing. more precisely, discuss the respective stages below: inactive: when agent has not taken obligation into consideration, i.e., the precondition obligation has not been met. active: agent takes obligation into consideration, i.e., the precondition obligation met. that infers obligor has perform the related action before the deadline passes. performed: the action has been carried out the obligor. delayed: the obligor has not carried out the action before the agreed deadline. delayed state presumes that the amount the action object the obligation not delivered the beneficiary, not delivered the sufficient amount. defective: the action object obligation defective. terminated: the obligation can terminated fundamental breach, mutual agreement. further consideration the obligation will take place. following the cpn model figure when obligation the stages delayed, defective, contractual agent starts reasoning about breaches notify collaborating party about the rights remedy breaches, other options for conflict resolution. the delayed stage, the action object the obligation not delivered before the deadline passes, not delivered the sufficient amount. for example the rent not paid, paid less than required. defective distinction figure shows monetary and non-monetary obligations. monetary obligation includes monetary action, while non-monetary obligation includes action with non-monetary action object. for example, the obligation pay rent monetary obligation and the obligation transfer the possession apartment non-monetary obligation. only non-monetary obligation can enter into defective obligation stage. the latter requires the action object lack the expected quality compared agreement. for example when the lessee returns the possession the apartment the lessor without the apartment being the agreed condition. contrary that, obligation pay rent cannot have qualitative deficiencies, because rent the action object the obligation has only quantitative features and does not have any qualitative ones. although being the state performed, the obligation can the state defective defects are discovered the aftermath. the obligation stages delayed and defective figure initiate rights the beneficiary obligation claim remedies. the delayed stage can initiate rights claim performance, late-payment charges for monetary obligations and contractual fine for non-monetary obligations. the defective stage can only reached non-monitory obligations and allows the beneficiary claim repair, replacement while also being able claim damages. when the remedies figure not enable the beneficiary achieve the purpose the obligation performance, the obligation fundamentally breached, resulting the obligation reaching the stage terminated. this can initiate the right for the beneficiary cancel the contract. the obligation can also put into the stage terminated any time the mutual agreement the parties. self-aware contracts [nonmonetaryobligation, monetaryobligation] inactive obligation obligation activate obligation monetaryobligation delay monetary obligation precondition met/active monetaryobligation [claim_late_payment_charge, claim_performance, use_custom_right] obligation obligation obligation delayed [claim_performance, use_custom_right, claim_contractual_fine] right active obligation perform delayed nonmonetaryobligation delay non-monetary perform obligation performed obligation obligation obligation nonmonetaryobligation nonmonetaryobligation [claim_replacement, claim_repair] detect defect right [claim_replacement, claim_repair] defective performance nonmonetaryobligation obligation defective nonmonetaryobligation nonmonetaryobligation obligation nonmonetaryobligation cancel_contract cancel_contract fundamental breach delayed obligation occured fundamental breach defective obligation occured obligation obligation terminated obligation fig. transaction processing obligations. interacting contract agents the running case section for renting out apartments further refined developing uml sequence diagrams, depicting the interaction protocols agents. the first sequence diagram figure the refinement for figure (a) about the initiation rental contract while the second sequence diagram figure pertains figure (b) about the rental contract termination. figure assign fictitious public key number that comprises four characters for readability. the three entities the left represent contractual agent and two personal agents for the lessor and lessee respectively. the fourth entity denotes the blockchain into which events are registered. furthermore, assume smart-home scenario where the apartment has four agents assigned, one for the smart lock and three for the gas-, water- and electricity-smart meters respectively. alex norta fig. initiation protocol contractual agents. the sequence diagram figure commences with the contract agent sending message the lessee agent about the obligation ob(dep) being active, meaning that the deposit must paid. consequently, the lessee agent performs the payment invoking tx(dep, the blockchain, i.e., the deposit held the contract agent. note that usually deposit paid lessor's account, which problematic the lessor has the exclusive control over funds that not entitled unless there damage done the apartment. times, the deposit never paid back the lessee, even when the apartment undamaged condition. still, the case contract-agent wallet, the parties are forced find consensus about the deposit. the next message figure from the contract agent the blockchain for checking the unspent transaction output xo(a) assure the deposit transferred the contract-agent wallet onto the blockchain. the latter responds with confirmation result(-b.) indicating the payment the contractagent's public-key address the blockchain. for the formation the transfer-act act figure several types information must collected. first, the contract agent sends active obligation message ob(pt) the lessor agent for requesting pictures the apartment condition. the lessor agent responds delivering those pictures. next, value-query messages qu(value) are sent the contract agent the gas-, water- and electricity agents respectively, who respond with sending back the current smart-meter self-aware contracts counts result(value)-messages. the latter are used the contract agent combination with the pictures generate act that subsequently recorded the blockchain. next, the contract agent sends active obligation message ob(key) the lessor agent who subsequently sends another message order(transfer,x) the smart-key agent, i.e., the smart key the apartment now usable the lessee. note that using the blockchain for smart-key assignment, possible perform assignment multiple persons and the lessor aware their identity. finally, the contract agent sends active obligation message ob(rentpay) the lessee agent, after which the latter sends transaction tx(rent,m) the blockchain, i.e., the recipient the first monthly rent payment the lessor. fig. termination protocol contractual agents. the termination protocol for the apartment rental contract figure commences with the contract agent sending active obligation message ob(pic) the lessee agent who returns set pictures about the apartment conditions. next, the smart-meter values are requested with qu(value)-messages from the gas-, water- and electricity agents respectively. the latter respond with result(value)-messages from the respective smart meters. assuming the delivered pictures about the apartment condition are accepted the lessor, the contract agent invokes the command act(pic,value,value,value). the generated act recorder into the blockchain and the contract agent sends active obliga- alex norta tion message ob(key) the lessee agent, indicating the apartment smart key must returned the lessor. consequently, the lessee agent sends message order(transfer,m) the smart-key agent. the contract agent informs the lessor agent with the message right(damage claim) that there should final confirming check for possible damage compensation. assume figure that damage compensation occurs and subsequently, the contract agent sends active obligation message ob(dep) the lessor for indicating the deposit must paid back the lessee. for that, the lessor agent sends transaction message tx(dep,x) the blockchain. finally, the contract agent sends check command utxo(a) the blockchain, after which the latter responds with the message result(-b.), i.e., the deposit has successfully been returned the lessee. manageability self-aware contracts the aim the agrello-framework increase the productivity informationand value logistics. important understanding the lifecycle that must place for creating, enacting, rolling back and orderly terminating sacs. consequently, section describes the sac lifecycle, followed section that focuses the involvement bdi-agents the lifecycle. finally, section discusses human-interaction means with the sac lifecycle. lifecycle self-aware contracts for the lifecycle figure use again bpmn notation. the lifecycle commences with the need establish peer-to-peer (pp) contract collaboration between several parties. the first sub-process for preparing contract template that equipped with service types and affiliated agent roles. thus, assume library exists third-party generated rental contract templates where predefined parameters are inserted, such for the upper- and the lower bound rent that apartment should offered for. next, the service types are populated concrete service-offers from agents that fill specific roles. for the running case this paper, the roles are lessor and lessee, blockchain, the smart key, and the utility agents for gas, water and electricity. using sac approach has advantages over the traditional renting situation follows. the latter case, the lessor usually determines who the utility providers are and the lessee the receiving end paying the lessor. the case sacs, possible avail specific roles and service types for competing potential providers. for example, lessee conscious about the environment and disagrees with preset gas agent, there can provisions have environmentally friendly alternative providers compete for being gasservice providers. consequently, fine-tuned free-market competition during the rental-contract preparation phase increases the likelihood finding optimal service-provider quorum. self-aware contracts fig. the agrello-lifecycle sacs. the negotiation sub-process figure allows the agents set concrete prices within the predefined ranges. after assembling proto-contract, each agent receives copy for deciding negotiation outcome. there are three decision options that may occur during the negotiation. first, the lessee agent may disagree with set monthly rent rate and proposes different number counteroffer. this implies that new copies must assigned each agent for new negotiation round. second, agent considers the proto-contract disagreeable and collapses the negotiation. this case, the lifeycle reaches the lifecycle end. third, all agents agree and create sac agent. the initiation phase figure commences when the contract agent exists but the establishment decentralized governance infrastructure (dgi) required for the subsequent enactment well. note that the initiation phase matches with the sequence-diagram protocol figure the dgi-establishment involves the distribution obligation sets that are derived from the contract agent the respective agents. additionally, monitors are assigned together with contract-monitoring agents (cma) that observe obligations are adhered to. cases obligation breaches, cma reports the contract agent and rollback steps commence that explain below. finally, preparing for rental-contract enactment means that private processes for each collaborating agent are set technical level and communication endpoints are established where clarity exists the meaning exchanged heterogeneous data sets. during the enactment phase figure the lessee pays monthly apartment rent the blockchain. the earlier established cmas monitor the lessee agent adheres the deadlines obligations. case obligation violation voting procedure commences establish the obligation breach fundamental, merely obligation revision required. for the running case, breach occurs when the lessee pays rent late not all. assuming the rent payment alex norta includes also the payment monthly utility costs, the voting involves the lessor agent and the utility agents for gas, water and electricity. assume the voting power determined the proportional amount payment that are part the monthly rent payment the lessee. case the lessee refuses pay, the voting outcome fundamental breach. consequently, the contract renegotiated hopefully clarify issues that result not paying rent. note that renegotiation involves partial termination the flowing business semantics and targeted rollback the remaining subset into the negotiation component. still, the existing contract remains intact during the renegotiation phase. renegotiation fails, the ongoing rental-contract businesssemantics flow fully terminated and the involved agents are equally terminated. the lessee late with the monthly rental payment the blockchain, the vote outcome likely demand payment the one hand, and interest addition the other hand. assume revision the obligation takes place see possibly does not match the rental context any longer, e.g., the lessee receives salary later and consequently, can only pay monthly rent later too. that case, the obligation adjustment inserted during rollback the initiation phase and the ongoing contract continues. finally, the full rentalcontract termination phase involves takedown the dgi and follows the protocol figure thus, all agents are released from the collaboration and equally terminated. bdi-agent involvement the agents shown figure fulfill specific roles for the self-aware rental contract. the contract agent (ca) operates behalf the housing agency and coordinates the remaining agents after its creation the end the preparation stage when the other agents figure consent rental-contract establishment. the responsibilities are allow for deducing dgi that the lessorand the lessee agents comprise local sets obligations. the also coordinates the cmas that observe locally behalf the the local obligation sets are adhered to. furthermore, the has responsibilities during the initiation phase figure that follow the sequence diagram figure during the execution phase, the listens the cma and the rent payment not performed orderly way, the responsibility the former trigger voting procedure that leads earlier explained rollback results. finally, the also captures the termination request for the rental contract the lessor, lessee and triggers the overall dgi-dismantling. essential ca-constraints are that the roles the contract template must all populated the preparation stage with corresponding agents. the latter must reach consensus that instantiated for dgi-setup. important also that the data for act creation delivered requested, i.e., pictures and gas-, water- and electricity values from the utility agents. another constraint that all votes are cast required during the rollback phase. the lessor- and lessee agents both have the responsibilities populate corresponding role with affiliated service type contract template during the self-aware contracts preparation phase. next, both agents must participate the negotiation phase and provide counteroffers, disagreements, agreements for consensus formation. both, lessor- and lessee agents, have the responsibility cooperate for facts collecting that leads the establishment act and act accordance with figure and figure respectively during the initiation phase. the lessor agent has the responsibility transfer the smart key the lessee. during the execution phase, the responsibility the lessee agent pay monthly rent onto the blockchain. when the latter obligation not adhered to, the lessee agent obliged cooperate with the rollback procedure and must either agree with new obligation continue the rental contract, pay damage and compensation fundamental breach occurs. the lessor agent has the responsibility cooperate the rollback voting procedure the detects breach that cma reports. the constraint the lessee agent the ability pay the deposit during the initiation phase, the rent during the execution phase, possible damages and compensations during the rollback phase. for the termination, the constraint for the lessee agent that the delivered photos display apartment condition that similar when the lessee moved and the condition lower, the lessee agent must pay compensation the blockchain address the lessor agent. the constraint the lessor agent during the initiation phase delivering pictures the that document the apartment condition and fails transfer the smart key the lessee within acceptable time limit. during the termination phase, the lessor agent must detect damages the apartment within acceptable time limit. the utility agents for gas-, water- and electricity have the responsibility fill their respective roles the contract template during the preparation phases and must report current meter values during the initiation phase. case the lessee agent fails pay the rent where assume the utility expenses are part it, the utility agents must participate the rollback voting procedure. finally, during the termination phase, the utility agents must again deliver meter values for the finalization act (figure the constraints are, that utility agents fail adhere their responsibilities within given time limits. the smart-key agent has the responsibility accept being assigned lesses during the initiation phase and being transferred back the lessor during the termination phase. otherwise, the smart-key agent does not have any additional responsibilities during the sac lifecycle figure the only constraint for the smart-key agent immediately respond user-change commands. finally, the blockchain not agent but merely immutable event record-ledger for the rental contract lifecycle. means human interaction the organization model figure shows human involvement the collaboration for the running-case rental contract. organization model part the agent-oriented modeling notation and denotes the relationships between human- and bdi-agents. the arcs between the agents specify the relationship alex norta types. figure use controls show subordinate relationship between agents, ispeerto define equal roles and isbenevolentto relationshp between self-interested agent roles. additionally figure specify that utility agent can either gas-, water-, electricity agent. controls isbenevolentto ispeerto ispeerto lessor lessee housing company controls controls isbenevolentto controls isbenevolentto lessor agent contract agent lessee agent controls controls utility agent smart-key agent gas agent controls water agent controls ispeerto gas company electricity agent controls ispeerto water company electricity company fig. the organizational model for the rental contract. the human involvement specified figure takes place via dedicated assisting bdi-agents. for example, the lessee agent engages the rental contract behalf the lessor, who human individual. the gas agent acts the rental contract behalf utility company that provides gas the apartment. the respective assisting bdi-agents that act for human agents are under coordinating control the contract agent that are turn under the control housing company. finally, the smart-key agent under alternating control the lessor-, the lessee agent with respect shifting the human-agent ownership. trusting contract elements contract immutability and legal viability are related several problems. immutability not only implies store the machine-readable and agent-executable contract with its obligations that cannot changed. also necessary store the events, e.g., payments that affect contract-execution immutably. with conventional contracts, these events are for example receipts, emails, phone calls, e.g., from lessor lessee. immutability these events prevents situations self-aware contracts where two parties claim the opposite about whether payment performed, not. also prerequisite allow for agent-aided review the contract execution. separate contract agent fed with the contract question and connected the event-storing repository. the agent commences the past, consumes relevant events and processes the obligations the contract the present. besides immutability value, this entails that events are immutably timestamped. the remainder structured follow. section comprises essential elements for the setup sacs. section gives technical details about executing contracts. section describes additional trusted events for contract execution and finally, section explains the contextual trustworthiness for contract integration. elements trust order support the execution self-aware smart-contracts with blockchain technology, various elements are necessary. first all, the contract has signed the contract parties. essential elements for enacting blockchain enhanced self-aware smart-contracts are: identity: the contract parties must unambiguously identifiable. especially the lessor rent contract wants assurance that the flat used the person who (or who's agent) reacts the lessor's offer. assuming that one person with positive credit rating reacts flat offer while the identity used for contract signing cannot verified, the intended lessee could instead let another person with insufficient credit rating move into the flat, e.g., friend, family member. signature: conventional contracts require hand written signature. achieve comparable, better legal commitment, digital and cryptographically secure signatures are necessary. events: stated above, access external events related the contract obligations essential for automated execution. case the contract agent sense that rent happens for specific month, either has externally informed about such event with push message, must able query blockchain that stores such events pull message. alternatively, agent with blockchain connection the blockchain relays the information transitively. the different types events are not necessarily stored the same blockchain as, e.g., sensor data from smart meters, access permissions for the smart lock may require different blockchain. timestamp: the sac together with agents and obligations considers external events process obligations, e.g., payments. reason about delays and deadlines, events consumed the contract agent need time stamped. contract source code: the source code the contract contains its obligation formal and machine-readable notation. guarantee immutability, the contract source code and the corresponding hash must reside the blockchain. case contract party claims defective contract execution the agent alex norta because manipulated source code, original copy must exist resolve such conflicts. storing the hash the blockchain only sufficient least one contract party provides source code with the same hash value. edge case occurs when both parties can not provide copy the contract. contract execution regarding legal viability, has considered where the execution the contract takes place. examples for related issues are, the number independent nodes running the contract and the problem on- versus off-chain execution. unlike etherum smart contracts, sacs not require external events, the progress obligation executions stored blockchain. legally sufficient merely store transactions between contract parties blockchain. still, the current state sac execution can always derived from blockchainstored information. processing the rent-payment obligation listing requires handling logics deadlines. thus, the obligation (l.- states that the lessee (obligor) has pay monthly rent the lessor (beneficiary). the time token (l. stored the agents belief base trigger the processing the recurring obligation. agent-orient approach, the respective code provided library, module for which listing provides excerpt. l.-: the plan handles the instantiation the rent payment obligation each first day month. l.-:, acquire the date for the following month, this plan used. the plan l.-: invoked lines with the purpose create event inside the agent that triggers the creation concrete obligation the beginning the following month. thus, the event triggers plan l.- again. the event occurs, term such listing added the belief base. listing monthly rent-payment obligation. obligation lessee lessor year month pay rent date year month ,)) state new recurring timetoken )). the logic this micro lifecycle described listing based the declarative and logic programming facilities the jason agent framework comprises. integrating the agent with the blockchain leads trade-off raising the question whether run the contract agent on-, off-chain. off-chain: running the sac off-chain requires storage server for the execution the agent framework. this entails, that the agent framework provides means for communicating with the blockchain. the jason framework with its more precisely: agentspeak logic- and declarative programming language. jason agents are written agentspeak and running them means that the source code interpreted the jason framework. self-aware contracts reasoning cycle implemented java and allows for extending with handwritten code, i.e., using library for interfacing with the blockchain. for this work, the blockchain has provide up-to-date api that also introduces dependency for the agent, not speak java being involved. the offchain approach does not require any adaption, change the used blockchain, but only the api. listing instantiation the rent payment obligation each day month. obligationname timetoken enabled lessor lessee nil todo act signed key transferred payment rent rent monthly amount month lastday late_payment_interest amount precondition for the obligation listing the act must signed the lessor and lessee while the latter must have access the smart key for being able move into the apartment. the action type the payment from the wallet the lessee the lessor that constitutes the type rent. additionally, and conforming figure the action object defined the rent with the qualifiers must serviced monthly for specific amount. the rule condition that the rent payment must occur the last day month. finally, reference inserted the obligation that remedy for late rent payment exists where the lessee must transfer defined monetary amount the lessor. the right listing comprises intersecting specification elements with obligation. pointed out section the main difference with obligation the the beneficiary may waive right. assume the right example listing the hypothetical case the lessee has broken television for which the lessor the owner. the right again defined corresponding name and id. the lessor has the right waive the right e.g., case the lessee convinces the lessor the television damage not her fault even when evidence exists, the right can changed the fly and the compensation set alse the expectation full replacement the object. the right the lifecycle state enabled for immediate enactment and the parties are similarly defined listing alex norta corresponding figure the type the right set claim pertaining the lessor over the lessee for replacement the broken television. the assumed precondition again that act signed and the smart-key handover the lessee took place. the action type replacement the television that defined object brand,type and serial number. listing right example for replacing broken televsion. enabled lessor lessee nil claim act signed key transferred replace brand type serial_number deadline date te_ rep lac eme _in ter est amount assume that the replace() command must confirmed via mobile phone the lessee with photo showing the television being delivered the mobile phone the lessor. the obligation listing also has certain date set deadline for the television replacement. otherwise, the lessee must again service remedy payment certain amount the wallet the lessor. agrello user interface the objective the agrello-framework allow for intuitive development sacs that are mapped technical lower-level representations agrellolanguage that further mapped onto, e.g., solidity operate directly blockchain. the conceptual interface depiction figure template builder shows the left sac-blocks drag and drop into contract window the bottom right. the top right figure window for parameterizing the blocks shows, e.g., the amount parameter set monthly rent. the bottom left figure depicts functions that represent actions contract respective party must carry out. for example, the variables and functions are used the contract template the bottom right comprising the function self-aware contracts fig. intuitive agrello graphical user interface for sac-development. rent involving specified variables lessor and lessee over variable apartment. more concretely, the contract window shows assembled obligation which the defined lessor agrees rent the apartment the lessee during the specified period for the amount per month. conclusions this whitepaper presents novel cross-organizational blockchain-agnostic framework for peer-to-peer collaboration that based ca. years academic research stemming from the first author. with the emergence cyber-physical systems, potential arises reduce costs and time spent information- and value-transfer logistics that far humans have managed. novel blockchain technology enabled smart contracts, combined with intelligent multi-agent systems and internet-of-things devices, yield so-called self-aware contracts that allow for high degree automation for such peer-to-peer collaborations. demonstrate the approach running case for renting apartment that first presented with traditional protocols for initiating and terminating rental contract. since existing blockchain-based solutions lack essential constructs for specifying legally binding, machine-readable contracts, pragmatically formalize obligations and rights with ontology. the running case next mapped onto automated protocol where belief-desire-intention agents act behalf humans who can consequently focus decision making via mobile devices. for processing obligations and rights, high-level state-transition automata colored petri nets shows the processing semantics involving blockchain that assures event alex norta traceability. next, agentspeak code-samples indicate the way how belief-desireintention agents act behalf humans facilitate information- and valuetransfer logistics. important that the agrellolanguage constitutes high-level, cross-organizational, declarative way formulating self-aware contracts that are human readable and comprise specifications obligations and rights, which are mapped onto organization-internal smart-contract transaction-processing platforms using, e.g., solidity. discover that the combination belief-desire-intention agents together with the declarative agrellolanguage yields self-aware contracts where the former assure combined set trusted information channelled into contractbased collaborations. that way, the agents create composed oracle governed lifecycle-management layer. the latter comprises the stages for preparing self-aware contract template, initiating the setup phase collaboration, enacting contract, managing rollbacks that are caused e.g., breach obligation, the deliverance faulty information agent, and orderly termination self-aware contract collaboration. addition employing agents that provide degree artificial intelligence collaboration, human manageability the agrello framework achieve providing declarative smart-contract language that specifies crossorganizational contract-collaborations. this agrellolanguage based preexisting language that results from eu-project for initially automating crossorganizational production processes. the agrellolanguage provides extensions adopting human-readable specifications for obligations and rights, which are core concepts for lawyers establish traditional contracts for legal viability. additionally, intuitive user interface allows for assembling self-aware contracts with building blocks for subsequent parameterization. immutability for legal viability the agrello framework achieves employing blockchain capability. contracting parties must signed digitally after the parties' identities are authenticated. furthermore, relevant external events are stored the blockchain together with their respective timestamps that are critical for assuring legal traceability. also the actual contract code itself store the blockchain guarantee immutability. recognize that involving agents, possible process events off-chain and on-chain. that way, achieve fine-tuned load balancing where only important events are stored the blockchain for non-repudiable traceability. future work aim develop mapping from agrellolanguage obligations and rights lower-level so-called smart contract languages such soldity that operate directly blockchain platforms. furthermore, investigate scalable agent-based solution for solving the oracle problem pertaining blockchains where scalable approach assures trusted information channeled into self-aware contract collaboration. important that the oracle must self-healing that the fly modifications its constituents are possible cases malevolent agent behavior, contextual changes. relevant for user adoption also the design intuitive graphical user interfaces that allow for self-aware contracts laymen such lawyers, business people, and on, the development specific contracts based human readable templates. references a.m antonopoulos. mastering bitcoins, pleszka araszkiewicz, m., editor. logic the theory and practice lawmaking. springer publishing company, incorporated, edition, baheti and gill. cyber-physical systems. the impact control technology, :-, bell. uml basics: the component diagram. ibm global services, bentov, gabizon, and mizrahi. cryptocurrencies without proof work, pages springer berlin heidelberg, berlin, heidelberg, biryukov and khovratovich. equihash: asymmetric proof-of-work based the generalized birthday problem. proceedings ndssaaz, february san diego, ca, usa. isbn ---x, bisping, p.d. brodmann, jungnickel, rickmann, seidler, stuber, wilhelm-weidner, peters, and nestmann. mechanical verification constructive proof for flp. international conference interactive theorem proving, pages springer, r.h. bordini, j.f. hubner, and wooldridge. programming multi-agent systems agentspeak using jason, volume john wiley sons, bray, paoli, c.m. sperberg-mcqueen, maler, and yergeau. extensible markup language (xml). world wide web journal, ():-, bussmann. the future finance: fintech, tech disruption, and orchestrating innovation, pages springer international publishing, cham, butterin. next-generation smart contract and decentralized application platform, cachin. architecture the hyperledger blockchain fabric. workshop distributed cryptocurrencies and consensus ledgers, dannen. solidity programming, pages apress, berkeley, ca, emmadi and narumanchi. reinforcing immutability permissioned blockchains with keyless signatures' infrastructure. proceedings the international conference distributed computing and networking, icdcn pages :-:, new york, ny, usa, acm. eshuis, norta, kopp, and pitkanen. service outsourcing with process views. ieee transactions services computing, (preprints):, eshuis, norta, and roulaux. evolving process views. information and software technology, rik eshuis, alex norta, oliver kopp, and esa pitkanen. service outsourcing with process views. ieee transactions services computing, press. preprint http://is.ieis.tue.nl/staff/heshuis/tsc.pdf. glimm, horrocks, motik, stoilos, and wang. hermit: owl reasoner. journal automated reasoning, ():-, p.a. hamburger. the development the nineteenth-century consensus theory contract. law and history review, ():-, hull, v.s. batra, y.m. chen, deutsch, f.f.t. heath iii, and vianu. towards shared ledger business collaboration language based data-aware processes, pages springer international publishing, cham, alex norta idelberger, governatori, riveret, and sartor. evaluation logic-based smart contracts for blockchain systems, pages springer international publishing, cham, kurt jensen, lars michael, kristensen lisa wells, jensen, and kristensen. coloured petri nets and cpn tools for modelling and validation concurrent systems. international journal software tools for technology transfer, page kolvart, poola, and rull. smart contracts. the future law and etechnologies, pages springer, kutvonen, norta, and ruohomaa. inter-enterprise business transaction management open service ecosystems. enterprise distributed object computing conference (edoc), ieee international, pages ieee, luu, d.h. chu, olickel, saxena, and hobor. making smart contracts smarter. proceedings the acm sigsac conference computer and communications security, ccs pages masinter, berners-lee, and r.t. fielding. uniform resource identifier (uri): generic syntax. d.l. mcguinness, van harmelen, al. owl web ontology language overview. recommendation, ():, business process model. notation (bpmn) version object management group specification, http://www.bpmn.org. morten. how firms overcome weak international contract enforcement: repeated interaction, collective punishment and trade finance. collective punishment and trade finance (january m.a. musen. the protege project: look back and look forward. matters, ():-, nakamoto. bitcoin: peer-to-peer electronic cash system. consulted, ():, n.c. narendra, norta, mahunnah, ma, and f.m. maggi. sound conflict management and resolution for virtual-enterprise collaborations. service oriented computing and applications, ():-, norta. exploring dynamic inter-organizational business process collaboration. phd thesis, technology university eindhoven, department information systems, norta. creation smart-contracting collaborations for decentralized autonomous organizations, pages springer international publishing, cham, norta. establishing distributed governance infrastructures for enacting crossorganization collaborations, pages springer berlin heidelberg, berlin, heidelberg, norta and grefen. discovering patterns for inter-organizational business collaboration. international journal cooperative information systems (ijcis), norta, grefen, and n.c narendra. reference architecture for managing dynamic inter-organizational business processes. data knowledge engineering, (): norta and kutvonen. cloud hub for brokering business processes service: "rendezvous" platform that supports semi-automated background checked partner discovery for cross-enterprise collaboration. srii global conference (srii), annual, pages july self-aware contracts norta, ma, duan, rull, kolvart, and taveter. econtractual choreography-language properties towards cross-organizational business collaboration. journal internet services and applications, ():-, norta, nyman-metcalf, a.b. othman, and rull. aaijmy agent will not let talk the generalaai: software agents tool against internet scams. the future law and etechnologies, pages springer, norta, othman, and taveter. conflict-resolution lifecycles for governed decentralized autonomous organization collaboration. proceedings the international conference electronic governance and open society: challenges eurasia, egose pages new york, ny, usa, acm. aafaf ouaddah, anas abou elkalam, and abdellah ait ouahman. towards novel privacy-preserving access control model based blockchain technology iot, pages springer international publishing, cham, ragunathan, lee, sha, and stankovic. cyber-physical systems: the next computing revolution. proceedings the design automation conference, dac pages new york, ny, usa, acm. roxenhall and ghauri. use the written contract long-lasting business relationships. industrial marketing management, (): rull, taks, and norta. towards software-agent enhanced privacy protection. regulating etechnologies the european union, pages springer, rumbaugh, jacobson, and booch. unified modeling language reference manual, the (nd edition). pearson higher education, nick russell, arthur ter hofstede, david edmond, and wil van der aalst. workflow data patterns: identification, representation and tool support. conceptual modeling-er pages springer, nick russell, wil van der aalst, arthur ter hofstede, and david edmond. workflow resource patterns: identification, representation and tool support. advanced information systems engineering, pages springer, sterling and taveter. the art agent-oriented modeling. mit press, vukolic. the quest for scalable blockchain fabric: proof-of-work vs. bft replication. international workshop open problems network security, pages springer, vukolic. the quest for scalable blockchain fabric: proof-of-work vs. bft replication, pages springer international publishing, cham, weber, xu, riveret, governatori, ponomarev, and mendling. untrusted business process monitoring and execution using blockchain, pages springer international publishing, cham, wood. ethereum: secure decentralised generalised transaction ledger. ethereum project yellow paper,