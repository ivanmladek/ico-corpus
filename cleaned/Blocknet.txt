the blocknet design specification arlyn culwick and dan metcalf with contributions from alex koch and the blocknet core team. table contents version control ...................................................................................................................................................................................... introduction ........................................................................................................................................................................................... why are releasing this document.............................................................................................................................................. contributors welcome ...................................................................................................................................................................... opportunity ........................................................................................................................................................................................... about the blocknet ............................................................................................................................................................................ pain-point ........................................................................................................................................................................................... solution ............................................................................................................................................................................................... design ..................................................................................................................................................................................................... design objectives ............................................................................................................................................................................... architecture........................................................................................................................................................................................ core components ............................................................................................................................................................................ core services .................................................................................................................................................................................... blockchain components ................................................................................................................................................................. blockchain services ......................................................................................................................................................................... project phases ..................................................................................................................................................................................... production mvp ............................................................................................................................................................................... phase ............................................................................................................................................................................................. phase ............................................................................................................................................................................................. phase ............................................................................................................................................................................................. technical specification........................................................................................................................................................................ message sequences ........................................................................................................................................................................ api reference.................................................................................................................................................................................... use-cases ............................................................................................................................................................................................. document version march page version control date version number contributor comments arlyn culwick initial (conceptual) sketches arlyn culwick first draft arlyn culwick modified structure for conceptual clarity arlyn culwick removed low-level documentation, improved focus arlyn culwick arlyn culwick articulated the design space for blockchain routing; rewrote and organised material service nodes. completed draft service node material; completed the protocol sketch for the order system, added section the order matching system, drafted protocol sketch for order history. arlyn culwick added registry service section; made many minor edits. hanni abu copy editing and correction typographical errors. alex koch added several use-cases for inter-chain infrastructure. arlyn culwick final signoff for the first public version. document version march page introduction this document intended for both nontechnical and developer audience, provided the reader has least general understanding what blockchain is. the blocknet's design and architecture are introduced largely nontechnical way, with the aid diagrams, and through step-by-step exposition what inter-chain services are and thus what inter-chain infrastructure service must provide minimum. with increasing frequency the document progresses, the discussion turns from what inter-chain services would like specifications what the blocknet is. combining matters design with those implementation and integration, the intended result systematic design specification the blocknet. why are releasing this document believe that there better way design solutions than communicate and gain insights our work from multiple perspectives. also believe that not keeping our work private, stand gain enormously from people's engagement with and with our code. thirdly, infrastructural project, paramount importance engage those who would use and build upon our technology. some may concerned about the perceived risk that competitors could copy our work and gain the advantage, especially because our design both first-to-market and has yet achieve major traction. that may, the combined insights the crypto and enterprise architecture communities are resource that cannot afford isolated from, and the risk-reward ratio leaves unconcerned. contributors welcome the blocknet neither company nor exclusive team, infrastructure, and believe that infrastructure ought publicly owned and freely available all. this document currently draft and not final design. fact, the notion final design has clear place project that practices continuous development. welcome contributions and discussion this document. the blocknet's code open source, and anyone may contribute the blocknet project. project such this stands benefit the most when variety perspectives and skills come bear its design and implementation. welcome collaboration every variety. contact the blocknet, email contact@blocknet.co. document version march page opportunity about the blocknet the blocknet infrastructure for the coming "inter-blockchain era," emerging technology epoch characterised primarily the superseding the current api ecosystem with decentralized and intrinsically monetized "token ecosystem." this will occur when its enabling technologies (specifically, smart contracts and "dapps") mature the point possessing practical inter-blockchain interoperability. the time writing, the blocknet the technological leader the provision inter-chain infrastructure for use dapps and smart contracts. believe that the emergence the inter-blockchain era will have disruptive implications for two sectors, that software-as-a-service, and practical blockchain usability. from the perspective software-as-a-service (saas), the token ecosystem embodies two fundamental advancements: (a) the comparatively frictionless monetisation digital services, and (b) the leveraging the unique robustness, decentralization, and security properties blockchain technology. from the perspective blockchain technology, blockchains are achieve their true potential, then broad, generic interoperability between blockchain services required. without inter-chain interoperability, blockchain-based services will (a) either deliver services only within the confines the limited customer base that runs its nodes, sacrifice the unique security properties blockchains delivering centralized entities, and (b) face enduring problems with chain bloat and, relatedly, the market-related pressure build further features onto single chain. creating "internet blockchains," the blocknet positioned enable the frictionless monetisation apis, and doing so, empower blockchain technology converting its thousands isolated chains into token ecosystem. pain-point traditional internet-based services are faced with perennial insecurity their technology stack. furthermore, they typically require the centralization functions and data, placing high trust-burden upon their customers. contrast, blockchain technologies enable one exploit cryptographic proofs deliver "trustless" services, where each participating entity may prove itself the certitude given outcome, and thus radically reduce the amount trust required business with another party. this systematically enlarges the range ways doing business, enables many new business models, and may provide clearly defined security guarantees, lowering costs and better protecting brand value. yet blockchains cannot immediately achieve their true potential, for the primary reason that they are not interoperable. there are thousands blockchains existence, yet they currently function like lans disconnected from the internet, and have yet create the circumstances that will foster the era-defining disruption that generic interconnectivity brings scale similar how the internet enabled the emergence facebook and google. document version march page solution the blocknet foundational infrastructure for the token ecosystem. provides true peer-to-peer interoperability between nodes different blockchains, order enable the following: the delivery potentially any kind digital service from node any blockchain another. the ability for any given blockchain service function not "appcoin" but "protocol service," that is, consumable any other dapp any blockchain, for open-ended purposes, instead only the purposes its creators' dapp, greatly enlarging the service's market reach and revenue stream. the ability for smart contracts' tokens function not merely monetise "dapps" but "protocol tokens," logically placing them layer lower the technology stack, where their potential utility greater order magnitude. additionally, services' code quality may benefit from broad contributor-base developers from diverse communities, exploit their combined learnings, prevent chain bloat and code duplication, save labourtime, and deliver services the entire blockchain-consuming market, instead just the set users its blockchain. the ability for dapps simple orchestrations inter-chain services instead difficult hand-coded creations from the ground up. the primary development tasks thus become api integrations, not the difficult and highly specialised role coding new and "bulletproof" smart contracts. the building dapps with microservices architecture, where each blockchain may deliver single service, integrated with many others modular fashion, providing simpler component design, easier bug fixing, and easier upgrading. the ability effectively bypass the (currently-difficult) matter choosing which blockchain build upon and not only the start project, but later points its lifecycle, when various microservices may become better-implemented different blockchain. the monetisation inter-chain and multi-chain services, using their intrinsic tokens value. the full exploitation new, cryptoeconomically-driven business models ushered blockchain technology. for example, businesses may extract value from "better than free" model, from monetary policy directly (icos, transaction fees, deflationary economics, block rewards, and superblock self-funding systems), and from marketplace for its monetized apis. the blocknet shall achieve the above through architectural and protocol-based approach, the documentation which the subject this paper. document version march page design design objectives the following features shall designed for, descending order priority: interoperability first and foremost, the blocknet inter-blockchain infrastructure. such, its most direct design objective shall interoperability with overwhelming majority existing and future blockchain implementations. additionally, shall interoperable with centralized entities order make traditional server-based services available within the token ecosystem. decentralization decentralized is, essentially, for one entity exercise control over other entities system. for example, perhaps bitcoin's major achievement broad terms the decentralization money, which one entity controls (a) the currency's value, (b) the transferral funds, (c) the keeping records account, and (d) its monetary policy. yet bitcoin currently exists ecosystem that largely centralized, nullifying many its benefits practice. little value offer centralized ecosystem for the delivery decentralized services, since (a) this exists already, the form the api ecosystem, and (b) the property interest, namely decentralization, would largely lost during servicedelivery. for example, one buys bitcoin using centralized exchange, the purchase not "trustless" because one must trust the exchange, and the purchase subject all the usual friction traditional payment infrastructure (bank fees and delays, payment gateway fees, visa and mastercard fees, fraud risk, kyc requirements, the requirement trust many intermediaries with one's money and personal information, and forth). hence, order for bitcoin and every other decentralized technology achieve its potential, decentralized ecosystem required, where entities may business without compromise the technologies' disruptive power. security decentralized and monetary services characteristically require high security and high determinacy operation level comparable aeronautical applications, because (a) not generally possible alter take offline service that runs the edges its network, its users' devices, and (b) money were found stealable system not subject central rectification, then would very quickly lose most its value. for these reasons, the blocknet requires the highest level security and determinacy operation. trustless service delivery the context blockchains, frequent and desirable consequence decentralization that not necessary trust counterparty act honestly over the course transaction. for example, with bitcoin, one does not need trust middleman transfer funds recipient report honestly whether the payment was received what its amount is, since middleman involved and counterparties may independently verify payment's status with extremely high degree confidence. the case inter-chain service delivery, equal degree "trustlessness" required when payments for services are made between blockchains, order that the service may rendered and paid for without requiring participants act honestly, thus preserving this unique feature blockchain-based payments inter-chain context. document version march page simple integration (no coding required) maximize interoperability and reduce friction, integration the blocknet and access the token ecosystem shall not require modification stock wallets nodes. note that consumption some third party service which leverages the blocknet for its delivery may require coding, but the use the blocknet itself shall not. decentralized integration maximize security and foster open, internet-style ecosystem, integration the blocknet and access the token ecosystem shall not require the mediation any central entity (even us). deliver consume services over the blocknet, consumers shall not required (a) use the blocknet's blockchain, (b) use any specific service, (c) use any service that has centralizing effect. (here "centralizing" taken denote range scenarios, from control central agent sidechains-style centralization networks around its network. the latter describe "inter-chain centralized.") note that consumption some third party service delivered over the blocknet may require the mediation some central party, but the use the blocknet itself shall not. composability far possible, the blocknet shall built with composability and modularity mind, the same pattern which inter-chain microservices are envisaged above. specifically, the key principles microservice design maximise composability while being mindful which services will always consumed together, order avoid building "distributed monolith." these are preserved unchanged the context token ecosystem. monetisability the token ecosystem, additional key principle added the principle composability: that service intrinsically monetizable. not, then suggest bundled into monetizable service's api, else the people who would run the service's nodes may lack reason to, since they'd not able derive revenue stream from it. furthermore, service's revenue stream required secured via some trustless protocol via cryptoeconomic incentives, else value not likely captured. monetisability much question whether consumer your service will willing pay for question whether they are unable forcibly consume for free. the blocknet shall monetise its core services where feasible, offer others for free, and shall provide various means which services delivered over the blocknet may monetized securely. mobility and small footprints several scenarios, from mobile apps embedded iot devices the insurance, health, supply chain, agriculture, automotive telematics and security industries, stand leverage the token ecosystem. many the use-cases expect emerge will require dapps with very light footprint, which would thus unable host even single blockchain. the blocknet shall provide access the token ecosystem for such devices, order that they may harness blockchain-specific security properties which feel are mission-critical reducing the attack surface iot services. specifically, the blocknet shall enable applications with small footprint consume (and pay for) inter-chain services without hosting blockchain locally. see the blocknet's business overview february for details. available upon request from contact@blocknet.co. document version march page architecture general purpose inter-blockchain interoperability achieved the integration three core components, which together function deliver three core services, accompanied any number blockchain services and blockchain components. these serve enable the building unlimited number inter-blockchain services token ecosystem all which may orchestrated into inter-chain applications. aid the reader this novel territory, these shall introduced with the help series diagrams, which articulate the relations between components and services. the diagrams shall progress from one the next follows: document version march page the components shall introduced first, followed the services. prior this though, the general nature inter-chain architecture shall introduced. what does inter-chain architecture look like? general, inter-blockchain architecture will always involve least two blockchain networks, and some additional entity function deliver interoperability between them. since blockchain networks are decentralized and distributed, the interoperability component(s) ought not placed some central location; preserve decentralization, they are required either run on, locally interface with, nodes the edge each network. figure idealised pair networks, disintermediated delivery service from one node another. various projects have proposed solutions the following kinds: traditional technology: centralized intermediary (e.g. poloniex.com) maximalists: decentralized network which functions, logically centralized intermediary (e.g. bitcoin sidechains context) proprietary code (i.e. wallets, smart contracts, bolt-ons wallets) that achieve blockchain interoperability only between nodes running this code (i.e. btcrelay) walled gardens: inter-chain protocols only between instances some custom blockchain, which locks developers into building upon (e.g. aion). none the above varieties inter-chain technology are both generic and decentralized. that is, they either not provide support for open-ended variety services (including those existing blockchains), they fail provide such support without centralizing control way that betrays given service's dependency upon being decentralized. per the blocknet's design objectives, satisfactory solution must both generic and decentralized. approach this "first principles," that is, remaining faithful the nature the inter-chain scenario itself. document version march page distributed network architecture firstly, unambiguous importance that any inter-chain component(s) must exist the edges the networks they interoperate with. this distributes the service across each blockchain network that delivers consumes services. additionally though, the inter-chain components must deliver services from the edges their own network too, without requiring central action, else will function yet another centralized intermediary. figure suitable inter-chain service must exist the edges both its network and the network(s) using it. decentralized actors secondly and relatedly, act delivering consuming inter-chain service must self-sovereign, that is, not subject control third party. architecturally speaking (that is, apart from protocol design), the most direct and secure means achieve this for nodes the inter-chain service component and either the network consuming delivering it, both, exist the same local machine. the extent which this necessary and which impacts the footprint inter-chain service will vary, ranging from requirement run full nodes, spv nodes, merely signing transactions, through to, minimum, querying blockchain explorer website other centralized oracle lowsecurity applications. the latter shall considered limit-case for the applicability the term "inter-chain." such, the full range local architecture requirements evinced. every case other than the limit case, some manner direct participation both delivery and consumption network required for each actor participate decentralized fashion. this may graphically indicated iterating upon the previous diagram: document version march page figure decentralized inter-chain infrastructure blue areas denote varying combinations consuming, delivering, and inter-chain nodes. (nodes outside blue areas not support interchain services.) blockchain lock-in while every inter-chain service must delivered from nodes some chain, inter-chain infrastructure must not limit which blockchain given service may run upon, else all that achieved essentially kind distributed client-server model, which fact the default architecture for centralized applications today. for example, blockstream's implementation sidechains would require that every user interact with the bitcoin blockchain order consume any other chain's service. term this pitfall "inter-chain centralization." avoid it, true internet blockchains and one that can support token ecosystem must enable services delivered consumed from any blockchain. this chain-agnostic notion motivates for the careful minimising integration requirements and app footprint. for example, the blocknet were require that every consumer inter-chain service maintain copy the blocknet's blockchain, possibly addition the service provider's blockchain, then its usefulness would rather limited and the user-friction would very high. this aspect inter-chain infrastructure design will come bear chiefly upon the monetized delivery service, since, firstly, peer-to-peer network, actors are untrusted and necessary for payment and service-delivery atomic. secondly, node must paid its native token node with different native token, and they will have exchanged, and decentralized exchange requires high degree security and code quality. yet required that two even three blockchains are downloaded and maintained order consume the service, unlikely that will see widespread adoption. hence, the blocknet shall provide means avoid this. document version march page summary the above considerations yield three guiding principles for the design the blocknet's components: inter-chain infrastructural services must run the edges both their network(s) and any service-delivery and consumption networks. architecturally speaking, service-decentralization most easily achieved running components required for either the delivery the consumption service the same local machine. inter-chain infrastructural services must limit their integration requirements and footprint where possible. document version march page core components the blocknet comprises three core components, which function together the foundation general-purpose interchain service infrastructure: xbridge, inter-chain network overlay xname, blockchain router xchat, data transport these three components are defined "core" because, intuitively, any inter-chain interoperability solution will necessarily require some means networking between nodes different underlying networks, some means which nodes may discover where route service requests, and some protocol for communication once suitable node located. aid the reader remembering and visualising the complex components and services the blocknet, diagram shall constructed progressively elements are introduced. the following diagram shows just the blocknet's three core components. figure first iteration: the blocknet's three core components. the necessity, order for triangle exist, for there three sides joined their apexes, signifies the joint necessity these components for the delivery inter-chain services. document version march page xbridge: the inter-chain network overlay the blocknet features xbridge, serverless dht-based peer-to-peer network. given local machine, nodes this network are integrated with nodes other networks, making our network inter-chain network overlay. this enables lookup, location, and broadcast between nodes any blockchain network. context diagram figure network components local machine. for technical documentation, refer the technical specification section. implementation current: the network overlay code implemented both xbridgepp.exe and the blocknet wallet. not monetized. future: this may modularised the codebase, though unlikely released standalone application, since will interoperate with other components deliver core services. document version march page xname: the blockchain router ecosystem inter-chain services requires means routing messages the correct blockchain, which, the blocknet, shall achieved via inter-chain address system. blockchain routing its elementary stages and requires exploration and agreement the broader crypto community, but, fundamentally, requires inter-chain standard for designating blockchains such uport's mnid, way committing routing data registry, and lookup function. key outstanding question the optimal price-to-truthfulness ratio routing results. for example, services may benefit most from free registry service and tolerate certain degree bad lookup results eliminating the possibility dishonesty after lookup, immediately prior payment and delivery. alternatively, some services may require provably truthful lookup results and would tolerate microfee for this. xname shall take agnostic approach registry service design, and its mature solution shall provide for diverse integrators' needs necessary including the possibility the emergence competitive marketplace for registry services. such, logical router design direction offload matters the truthfulness and cost (a) lookup and (b) the committing routing data dedicated registry services including lookup the chainids registry services. xname's function would thus invoke registry services' apis and, after service delivery completed, store locally cache routing results. ameliorate circularity (that is, having look registry service before one can look service up) initial launch, nodes may bootstrap themselves either (a) querying hardcoded chainid for provably truthful registry service, (b) querying their peers over xbridge with dedicated getregistryservice call, and then querying each registry service returned, thus exploiting whatever truthfulness guarantees each service may provide order build truthful local list registry services (and other inter-chain services). return the question how commit and look inter-chain services, see both the service lookup and the registry service sections. for technical documentation, refer the technical specification section. implementation current: the blockchain router implemented both xbridgepp.exe and the blocknet wallet, along with the other core services. future: this component likely always interoperate with other components deliver core services, and will not necessarily made deployable independently. however, may be, sufficient progress made render blockchain routing monetizable, since its monetisation will enable the service reflect its own running costs, allow competition between routing services, and incentivise the technological advancement the service. monetized, the router component may additionally integrate with other components their own blockchain network. document version march page xchat: peer-to-peer data transport the delivery digital services requires means sending and receiving both messages and the service's payload itself. such, the blocknet features xchat, end-to-end-encrypted, peer-to-peer messaging module that supports both oneto-one messages and group messages. (broadcast messages are already supported xbridge: the inter-chain network overlay.) the requirements for communication and for digital service delivery vary with the nature the service. privacy, bandwidth, latency, persistence, and the absence presence intermediaries are all variables. such, this service may mature into several data transport technologies. this very early stage though, supremely private, fast, peer-to-peer solution appears adequate. technical documentation available the technical specification section. implementation current: the data transport implemented both xbridgepp.exe and the blocknet wallet along with the other core services. future: this may modularised the codebase, and monetizable standalone application, may released such. document version march page core services monetizable inter-chain services require three core infrastructural services: service lookup: way discovering peers deliver consume service inter-chain messaging: way delivering digital service decentralized exchange: way monetising the delivery the service these services are orchestrations the core components, and such may represented the apexes the previous diagram's triangle, follows: figure second iteration: the blocknet's three core services and components. since the apexes triangle are where its sides come together, positioning the services here serves signify their nature orchestrations the core components. service lookup inter-chain service lookup orchestration the xbridge, xname, and xchat components, and invokes any given registry inter-chain services the blocknet. may abstracted into api facade the blocknet matures. like the traditional internet, parties need look and locate each other order interoperate. thus, analogue the domain name system (dns) required. unlike the traditional internet though, services are delivered peer-to-peer and generally any node network, rather than from servers addressable from single address, and order request service will characteristically only required locate any node given blockchain network. hence, "chain codes" are the primary requirement, along with other secondary properties. assumed that services shall generally delivered specific node and that node only. significant feature registry service over peer-to-peer network untrusted nodes that, unlike circumstances which the service provider may reasonably trusted, anyone with any intention (malicious otherwise) may provide it. document version march page depending the design strategy, either the truthfulness the data returned from service lookup shall not guaranteed, and therefore guarantees the service's integrity must provided later stage, service lookup must conducted such way cryptographically guarantee the truthfulness the data regardless the intentions the node providing the service. the blocknet's design intended agnostic which approach registry design taken. message steps the former design assumption, the typical steps for service lookup are: find peers xbridge retrieve service's chainid and servicelist over xname query peers over xbridge find peer the chain designated the chainid switch xchat; get list the services the specific peer supports request service (and proceed construct proof the truthfulness the service) the latter design assumption, service lookup may trivially accomplished (that is, with original contribution from this project) employing blockchain consensus algorithm (e.g. proof-of-work) and for the node looking service host locally blockchain containing the chainid data and simply query for free. but this imposes significant storage and uptime burden upon user, and not expected typical way using the blocknet. outside context where users maintain service registry blockchain, spv nodes, described the original bitcoin whitepaper, may employed. for greater scalability and smaller app footprint, the time writing, alternative proof systems are being explored. see the trade history and registry service sections for design patterns. context diagram the above steps imply the following high-level architecture: figure context diagram indicating relations core components local machine utilising service lookup. technical documentation available the technical specification section. document version march page implementation current: service lookup currently implemented either part xbridgepp.exe embedded into the blocknet wallet. the blocknet's current stage development, the only application implemented decentralized exchange, which requires only that nodes filter currency pair. such, more generalpurpose lookup service remains built. future: upon suitable exploration and consensus those the blockchain ecosystem, development generic lookup service planned. furthermore, simplify consumers' integration with the underlying components, service lookup may become embodied api facade. whether this will single facade for all the core services, distinct facade specifically for lookup, probably function time, maturity, and consumer demand. inter-chain messaging inter-chain messaging orchestration xbridge and xchat, and matter service provider and consumer locating one another, communicating, and the service being delivered. this service specified under the assumption that consumers shall actively find services, while service providers shall passively locatable. public peer-to-peer networks cannot assumed that every entity presenting itself service provider consumer will act good faith, and for most services, will necessary both prove that the service's payload legitimate prior making payment, and that the consumer cannot receive without also making payment. other words, services must function both trustlessly and atomically. planned way achieve "trustlessness" this context through the use zero-knowledge proof system. the notes bip- state, "[v]arious practical zero-knowledge proving systems exist which can used guarantee that hash preimage derives valuable information. example, zero-knowledge proof can used prove that hash preimage acts decryption key for encrypted sudoku puzzle solution. (see pay-to-sudoku for concrete example such protocol.)" note, for the sake clarity, that simple digital signature scheme set prove that the service provider fact who the consumer thinks constitutes zero-knowledge proof, the sense that the service provider's private key not revealed, yet the consumer may prove itself the identity the service provider. the actual proof-schemes implemented one service another can expected vary with the particulars what needs proved for the "trustless" delivery the service. atomicity this context achieved through decentralized exchange, the following section. message steps typical steps the inter-chain messaging service are: find service over the network overlay and request service, per the preceding section document version march page over xchat, the service provider supplies materials for zero-knowledge proof the payload's legitimacy that is, for creating proof over some set assertions that sufficiently ensures the payload's legitimacy (see the trade history section for elementary example) the consumer accepts the service the service provider proceeds the decentralized exchange service commence service-delivery the interest minimising app footprints for simplifying consumption, inter-chain messaging may demand distinct api facade. use-cases where this seems pertinent are where services are free and where chain lookup can hardcoded, for example, decentralized chat app. context diagram the above implies the following high-level architecture: figure context diagram indicating relations core components local machine utilising the inter-chain messaging service. implementation current: developers may (a) embed xchat into their applications, and (b) exploit the network overlay, either through the xbridge standalone application its embedded form the blocknet wallet. future: components shall modularised and apis written, and addition, potentially api facade abstracting and orchestrating the two components into explicitly defined service. decentralized exchange decentralized exchange trustless, atomic means exchanging currency for either another currency for service. orchestration xbridge, xchat and least two wallets blockchain nodes generalised implementation noel tiernan's atomic exchange protocol. this protocol exploits the creation secret, the knowledge which required for the spending funds, and which cannot fail disclosed when funds are spent. thus, its creator spends counterparty's funds, then the counterparty possesses the secret and may spend the creator's funds return. note: the decentralized exchange service distinct from the decentralized exchange application, block dx, which consumes this service additional several blockchain services. document version march page preceding work the first version the protocol was shown vulnerable malleability-based extortion attack, and later rectified, the bitcoin-and-clones ecosystem, with the introduction the opcode op_checklocktimeverify. design utilising the latter detailed kay kurokawa's blog the subject. finally, support not only atomic swaps cryptocurrencies and tokens, but also any digital payload, add this protocol the use decryption key secure hash function the secret. such, the revealing the secret enables the immediate consumption previously-supplied encrypted digital good, the verification some truth-claim. this, conjunction with the use zero-knowledge proofs the preceding section allow consumer verify the credibility digital good advance receiving it, achieves the trustless consumption monetised goods and services. such, general monetised service protocol. protocol steps conceptually, the protocol steps are follows: the service provider creates either decryption key (for digital goods), digital signature cryptographic hash some file (for truth-claim verification), random number (for coin trading), and uses the protocol's secret. the service provider creates "bail-in" transaction with the rule "this transaction may either spent the consumer (s)he supplies the secret, both the consumer and service provider sign the transaction." (if digital good being offered, rather than coins, then only quantity coins sufficient cover network fee required.) the service provider creates fallback mechanism the form second, "refund" transaction, with the rule "send the bail-in transaction's output the service provider's address, but not earlier than (x) amount time from now." the service provider requests that the consumer sign the refund transaction, order meet the second requirement the bail-in transaction that may redeemed both consumer and service provider sign it. the consumer signs the refund transaction and returns the service provider. note: this enables the service provider reclaim its coins (if any) after the specified time period, the event that the consumer abandons the exchange another factor causes fail complete. the service provider broadcasts the exchange transaction. the consumer creates her own "bail-in" transaction, step for coins her own blockchain. note: the consumer may now "spend" this transaction (s)he given the secret. note: this transaction requires the same secret revealed order for spent which only the service provider possession this stage. the consumer creates her own "refund" transaction, step the consumer requests that the service provider sign her refund transaction, step the service provider signs the refund transaction and returns the consumer. note: this enables the consumer reclaim her coins the event that the service provider fails redeem them, since otherwise the secret would not revealed the consumer and she would thus not able consume the service receive coins trade. the consumer broadcasts her bail-in transaction note: the service provider may now spend the consumer's coins, since possesses the secret. document version march page note: spending the consumer's coins, the service provider reveals the secret publicly, and thus the consumer may now consume the service. note: the service provider would prefer cancel the exchange, may wait until time step and broadcast its refund transaction. the service provider spends the consumer's exchange transaction, revealing the secret. note: the service provider fails spend her bail-in transaction, then the consumer may broadcast her refund transaction and receive the coins back after the specified time period. note: the service provider must spend the consumer's bail-in transaction within the time period specified her refund transaction, else the consumer free refund herself. the consumer uses the secret either spend the service provider's bail-in transaction, decrypt file, verify fact. note: the case coin trade, the consumer must spend the service provider's exchange transaction within the time period specified its refund transaction, else the service provider free refund itself. note that the above protocol shall include additional supplementary steps which service nodes are updated the state the atomic swap, order for spv nodes and "light" clients, which depend upon their peers relay transactions and messages, reliably updated. message steps implemented the blocknet's components, decentralized exchange typically involves the following steps: after the consumer accepts service per the steps the inter-chain messaging section, the service provider takes protocol steps and then, over xchat, step the consumer takes protocol step over xchat the service provider takes protocol step over its native blockchain network the consumer takes protocol steps and then, over xchat, step the service provider takes protocol step over xchat the consumer and service provider take protocol steps over their respective native blockchain networks note that these steps only concern the decentralized exchange service. the decentralized exchange application, block dx, like most applications, requires several additional (that is, non-core) services order function exchange, specifically, order broadcast, order matching, anti-spam measures, anti-dos measures, and trade fee collection. document version march page context diagram the above steps imply the following relations between components local machine: figure context diagram indicating relations components local machine utilising the decentralized exchange service. implementation current: the decentralized exchange service embedded the blocknet wallet, and the standalone xbridgepp.exe (however, development will resume the latter later stage). api available, concurrently supporting the decentralized exchange application. future: the service shall abstracted from the various blockchain services that block consumes, and api facade built orchestrate xchat and the blockchain services. document version march page blockchain components given local machine, the three core services introduced the preceding section may interact with any one combination the following component-types, which may several blockchains: full nodes: "regular" full-featured nodes and wallets light nodes: spv nodes and those which are even lighter (e.g. those that merely sign transactions) service nodes: nodes with special features provide given service over and above regular blockchain work these component types are generally third-party integrations not built maintained the blocknet. nonetheless, they provide necessary function the blocknet, namely interacting with their native blockchains, without which the blocknet would not achieve interoperability without duplicating its own components which would untenably inefficient approach. the three core components and services, plus any additional node-types consuming delivering inter-chain service, are thus representable follows: figure third iteration: the blockchain components relation the three core services and components. since the blockchain components consume the core services, their relations are represented originating from the apexes the triangle. document version march page blockchain services blockchain services supplement the general-purpose core services support specific use cases. since there limit the number inter-chain services that may created the blocknet, there definable limit the number blockchain services that third parties may build. block dx, the first inter-chain dapp the blocknet, requires several blockchain services. these shall introduced, both order document them, and illustrate something the nature blockchain service. overview block blockchain services function exchange requires several services over and above atomic swap between counterparties. fact, any exchange (centralized decentralized) must provide four key functions: capital storage order broadcast order matching settlement since block decentralized exchange, follows necessarily that all four these functions must decentralized (in addition some broader aspects pertinent decentralization, like maintaining fully open source codebase and virtually anyone being able list coin). with atomic swaps, the decentralized exchange service decentralizes both capital storage and settlement priori. however, atomic swaps not amount exchange their own; order broadcast and matching must decentralized addition. these that are supported blockchain services: order broadcast decentralized leveraging the service lookup service, which entirely peer-to-peer throughout. order matching performed locally each trader's dapp, which are orchestrations the core components and one more blockchain components. the principal design consideration for order broadcast and matching that, like other peer-to-peer systems, they are naturally vulnerable dos (denial-of-service) attacks. analogous manner how bitcoin functions electronic cash system that solves the byzantine generals' problem, workable solution must amount quality-of-service guarantee about orders the book. secondly, one the design considerations the token ecosystem how monetise service, since decentralized ecosystem, business models are not cryptoeconomically sound, they are not sound all. what follows introductory discussion that frames these problems, and the blocknet's solution them. decentralizing order book note: the following sections detail the blocknet's candidate order system. while other systems are under consideration, the current one included order introduce the design space which decentralized order systems exist, and encourage comment and contribution this new area. order book analogous notice board upon which traders may add liquidity posting bids asks, and from which other traders may take liquidity consuming bids asks. along with the acts posting orders the book taking them come commitments settle accounts once match made. now decentralized context, order book becomes essentially public notice board, upon which anyone free post order, where central party controls people posting, and whose intentions need not trade non-maliciously. document version march page such, decentralized order book requires (a) means ensuring that only good orders are posted (that is, must prevent order spam), and (b) that order matched, the counterparties are compelled honour their commitments settle (that is, must prevent order-dos). now, surprisingly, blockchain not good technology use for order book, for two reasons: firstly, order books need operate extremely quickly the very least, supporting realtime user experience but blockchains require transaction (generally put, truth-claim) least several blocks deep the chain before its truth sufficiently established. secondly, since blockchains require mining staking establish truth, this opens opportunity for miners gain privileged access order information, and potentially frontrun, favouring the matching their orders they mine the next block. result, different system required decentralize orders. final novel fact about order book that, because orders are commitments future settlement act, funds are sent risked throughout the order broadcast and matching process, parties using order system are exposed far lesser degree risk than that payments settlement. this offers advantage the design order system, not necessary accept the crippling performance penalty that the use blockchain would impart; the system may function successfully while tolerating certain degree untruthfulness. such, the design requirement is, minimum standard, prevent illicit activity from scaling beyond isolated acts. specifically, the blocknet solution: supports utxo verification, that is, that coins offered order are spendable. renders order spam unscalable, specifically via hashcash-style trade fee that has minimal impact upon honest traders but makes spam significantly costly. renders order-dos unscalable, the same manner (b). renders service node collusion economically infeasible (see special properties service nodes). supports partial order matching, enabling several counterparties consume order without the abandonment one trade locking the entire order until the refund transaction becomes spendable. this can supplement trading strategy that avoids the opportunity cost counterparty abandoning single high value trade spreading capital over several orders across price range. what decentralized orders look like? self-sovereignty hold that decentralization, the context orders, amounts preserving self-sovereignty between actors the decentralized exchange. decentralization not well-understood term, and frequently conflated with "distribution" and muddled with notions pertaining reaching consensus. decentralization, vitalik buterin explains clearly, fundamentally about control: decentralized system places party under the control another, except where the matter under concern shared resource, which case all parties participate equals. distribution, contrast, simply spreading task role between several parties, regardless whether any one party controls this. finally, consensus between parties strictly pertains the reaching agreement about fact action, not whether work distributed control decentralized. this does not imply, though, that decentralize bitcoin does not require the reaching consensus about which transactions are legitimate, and that work not distributed over the edges its network. these factors are necessary but not sufficient the decentralization bitcoin. decentralizing currency analogous decentralizing orders where self-sovereignty encountered the former: the same way that any holder bitcoins may send coins without third-party control, any trader may add liquidity the order book take liquidity from it; the same way that bitcoin users may prove themselves that given coin was sent given time, counterparties may verify the validity orders and order-acceptance messages their own. however, the analogy with cryptocurrency ends upon consideration the fact that orders are offers send coins, which require future counterparty consume them, and involves matching process. because match requires the parties document version march page involved mutually sign order-acceptance message, and because other entities need required establish that order matched, peers network may determine and discover the state orders purely self-sovereign basis, without requiring consensus algorithm (e.g. proof-of-work). propose entirely self-sovereign order system design, involving three parties. below cursory overview, which shall developed upon the discussion progresses: before order broadcast, market maker privately sends the order and anti-spam fee transaction service node, which can broadcast the latter, spending the coins network fee and costing the maker money act maliciously. upon validation the fee transaction, the service node signs the order, which would-be market takers use validate the order. when order broadcast, traders may verify, their own, that (a) the order backed real coins, and (b) that has been signed service node (signifying that trade fee has been paid). when one more traders attempt accept order, the market-maker adjudicates between these requests (standardly accepting the first valid request) and, its own, selects its counterparty. when counterparty selected, the maker's interest that the counterparty will not dos the trade, and awaits verification service node that trade fee was paid. once service node broadcasts signed acceptance-message, the rest the market updates its order books removing the order from the book. such, block dx's order book functions decentralized state machine. the following diagram represents the state machine high level (the sections that follows introduce certain details the diagram): document version march page figure decentralized state machine for orders document version march page separation roles: service nodes the blocknet's order system three-party system, rather than simply being between the two counterparties trade, and this perhaps surprising. however, comes the result considering the impact the users experience precisely when fee charged. for example, would possible implement simple decentralized fee solution users were required pay trade fee prior placing order, yet this would result their being charged even they were cancel order, and even their counterparty were abandon trade. order obtain the desired behaviour (that is, for users only charged trade fee the trade completes they cancel), yet simultaneously for fees paid upfront, prior placing order, three-party system implemented. the result separating the incentives offer liquidity, take liquidity, check that one's counterparty has paid fee, and earn trade fees without (a) being tempted broadcast trade fee transaction maliciously while (b) not charging trade fees unless order accepted. again, the overriding intention self-sovereignty, and this preserved separating and aligning each party's incentive behave particular ways. this complex system, and for simplicity only few considerations shall discussed time; this stage the discussion, the point merely that service nodes are required charge trade fees without requiring them charged when party cancels before order accepted (see the detailed protocol sketch below for the exact roles and sequence the order system). special properties service nodes support reliable mechanism for accepting but not spending trade fees (anti-spam and anti-dos fees) the party cancels the order before accepted, service nodes have several novel properties. limited number and easily identifiable because trading counterparties rely trade fees anti-spam and anti-dos measure, necessary for them easily identify whether fee was paid, and this requires the ability differentiate orders (and order-acceptance messages) signed service node from other nodes' signatures. achieve this, require service nodes hold block. that way, any trader may easily scan the blockchain for block utxos and compile list service nodes. then, one address containing block validates order's signature, has been signed service node. expensive act maliciously service nodes shall required hold block for least blocks before they may begin earning trade fees and block rewards. service node acts maliciously that is, broadcasting trade fee when user cancels order legitimately then the trader involved may submit blacklist proof-claim the network about the service node. escape the blacklist, the block would need moved new address, which case the service node would lose out very many trade fees and block rewards while waiting blocks. profit from acting maliciously addition the high opportunity cost acting maliciously, service node cannot directly predictably profit from illicitly spending trade fee, because trade fees are awarded the next winning staker, which occurs probabilistically and thus indeterminate with respect the winner. such, service nodes have practical profit motive act maliciously. supportive cryptocurrencies and tokens interoperable with the blocknet validate order order acceptance message, service nodes are required verify that the address(es) the order contain enough coins fund the order. such, they have significant hardware requirements, they are required document version march page maintain full node wallets each blockchain interoperable with the blocknet. this requirement further equips service nodes relay messages and transactions for spv and light nodes where necessary. opportunity practice insider trading because any service node may sign orders, not practicable for service node owner privilege the orders any one trader (for example, her own trading node), because delays signing the orders (or order-acceptance messages) others, they may trivially obtain good service from any other service node. result the above properties, traders have (a) "good reason" trust the testimony service node, (b) the ability inflict income-loss upon service node the event that does not act truthfully, order magnitude greater than the loss trading fee. (c) observed above, the low level risk that traders are exposed during order process, and the severe performance penalty that would imposed obtain higher degree certitude, does not warrant their obtaining higher degree certitude about orders. order system protocol assuming the preceding discussion the general nature and realities decentralized order book correct, the following protocol sketch its natural solution. please note that this solution area active research contributors the blocknet and may further refined. maker prepares trade fee maker wants buy ltc with btc maker calculates fee (payable block): priceblock note: priceblock the average buy price for market-buy block the time posting the order. ii) note: block should bought advance placing order (advisable for speed), e.g. upon starting the app but only when the app's block supply decreases below, say, block. step (a) above simply calculate the quantity block spend. maker creates but does not broadcast txspamfee, trade fee, charged market makers, order prevent order spam: block ii) with its network fee set the correct (.%) trade fee, iii) and the output the maker's address. maker posts order maker creates order buy ltc with btc. fields: value ii) value iii) btc address(es) funding the order iv) ltc address receive coins maker's xchat contact details (address, pubkey) vi) [other useful data: expiration, etc.] vii) txid txspamfee maker sends both the order and txspamfee the service node over xchat document version march page service node validates the fee against the order: txid txspamfee identical with the txspamfee txid field the order ii) txspamfee network fee note: service node must check block's price the calculate the correct fee; account for volatility, fee must within the correct value. iii) txspamfee block address holds sufficient block cover fee. iv) txs the mempool spending the same block address. service node signs the order. both the service node and the maker broadcast the order signature. service node holds txspamfee memory and does not broadcast immediately. taker prepares trade fee taker wants buy btc with ltc note: from perspective, the taker will most likely place market limit order for different quantities; this scenario assumes that matching protocol exists pair specific quantities between counterparties and thus partially fill orders. taker calculates fee (payable block): priceblock note: priceblock the average buy price for market-buy block the time accepting the order. ii) note: block should bought advance placing order (advisable for speed), e.g. upon starting the app but only when the app's block supply decreases below, say, block. step (a) above simply calculate the quantity block spend. taker creates but does not broadcast txdosfee block ii) with its network fee set the correct (.%) trade fee, iii) and the output the taker's address. taker accepts order taker sends order acceptance message the maker over xchat. fields: ltc address funding the order ii) btc address receive coins iii) txid txdosfee iv) signed using privkey for btc address maker validates the acceptance message: validly signed maker's privkey corresponding maker's btc address ii) btc address contains sufficient balance iii) txs the mempool spending from the btc address trust note: even though the maker can validate the acceptance message, should not proceed until txdosfee also validated the service node, because otherwise the taker may dos the swap for free. maker signs the order acceptance message service node validates the order acceptance message: trust note: the maker must validate the acceptance message before the service node does, else the service node will (a) obtain information about buy interest given price prior counterparty being found, and (b) may privilege validating any one acceptance message over another (c) may block/filter acceptance messages using arbitrary criteria. ii) txid txdosfee identical with the txdosfee txid field the acceptance message document version march page iii) txdosfee network fee note: service node must check block's price the calculate the correct fee; account for volatility, fee must within the correct value. iv) txdosfee block address holds sufficient block cover fee. txs the mempool spending the same block address. service node signs the acceptance message both service node and taker broadcast acceptance message. each trader's order book parses the message, signed both maker and service node, order state change from "open" "filled," and removes the order from its book. proceed bail-in setup per the atomic exchange protocol. conditions broadcast trade fee transactions service node shall not broadcast trade fee transaction if: the order expires. the payer closes the app without anyone accepting the order. the order cancelled prior being accepted (step above). the counterparty fails broadcast its bail-in transaction. order matching system the blocknet requires decentralized system for (a) translating standard order-types exchanges (market, limit, etc) into basic liquidity-consumption events, and (b) for matching quantities one coin with quantities another coin specified prices. adopting the decentralized order state machine presented above that is, where parties adopt selfsovereign roles either maker taker order matching consists takers requesting consume liquidity from makers, and the case limit orders, the presence absence orders certain threshold functioning determine the trader's role maker taker. the behaviour market order follows: consume orders the book, beginning from the best-priced order, moving the next-best-priced, and forth, until the market order completely consumed. the market order consumes all orders the order book without being completely consumed, then cancel the remaining amount the order. the behaviour limit order follows: the order sell and the price the order lower (or buy and the price the order higher) than the highest (lowest) counteroffer the order book, then consume orders the book until either the user's order becomes the lowest (highest) offer, completely consumed. the former, then add the remainder the trader's order the order book. avoid issues with change utxo-based cryptocurrencies and the resulting need wait for the change confirm before the rest order can traded xbridge shall automate the distribution trading wallets' coins into small, regular amounts separate addresses, order maximise the number outputs that are completely consumed counterparty and minimise change trivial levels. additionally, minimum trade size shall imposed that corresponds the size the amounts per address, prevent the malicious creation change. document version march page trade history service history trades between coins required for charting and other technical analysis tools, and general for traders obtain information about market upon which make trading decisions. the truthfulness trade history paramount importance, because considerable advantage over other traders may gained one were fabricate it. such, the trade history any given currency pair shall provided "trustless" manner blocknet service. the solution sketch that follows somewhat idealised, for reasons simplicity and order present the leading idea rather than the detailed technical solution; production-ready solution would considerably more succinct (mostly due not including the trade history data itself one the the atomic swap transactions), and instead would employ more sophisticated zero-knowledge proof scheme like, for example, bulletproofs. "trustless" dataset would require (a) suitably truthful means committing trade history data it, and (b) equally truthful means retrieving data from it. the solution follows: trade history blockchain would created, and its nodes' work establishing consensus would amount committing trade transaction data from other blockchains the trade history blockchain. typical data committed would include: coin coin quantity coin quantity coin price coin coin time that the first bail-in was spent the data committed must sufficient for consumers the data synthesise into many forms. for example for tradingview charts, the following data would required: period candle start time candle open price close price, high low and forth commitment proof data commit trade data, nodes the trade history blockchain must submit proof data: coin coin txid spent bail-in transaction chain txid spent bail-in transaction chain (or mark absent) txid spent trade fee transaction for market maker txid spent trade fee transaction for market taker timestamps all transactions timestamp for the transaction which the proof data submitted proof data submitted node then verified the network searching the blockchains the coins involved trade and validating the proof data against the the coins' blockchains. nodes would also engage deduplication document version march page exercise similar mining with respect the fact that the network must determine the first node submit proof data for given trade, and discard proof data submitted other nodes. data retrieval methods there are multiple way retrieve trade history data. traders may either: download the trade history blockchain, and thus retrieve the data for free store local memory all completed trades which would require running block continually (in practice, this would only useful for updating chart realtime) request trade history from node the trade history chain, for fee: for specified coin pair over specified time supply trade history data supply trade history traders, nodes the trade history blockchain must submit: hash all txids for coin coin and trade fees within the time range specified the trader the node's address with this data, the trader constructs simple zero-knowledge proof (though see the note above) the truthfulness the data requesting trade history from many nodes the trade history blockchain, and verifying that the supplied hashes are identical. the results are identical, then this amounts low probability that the data untruthful, because the nodes have good reason trust one another and are thus not strong position collude maliciously. the trader wishes obtain greater certainty about the truthfulness the data (s)he may request trade history from mode nodes, download the blockchain herself. nodes may further monitor each others' responses traders and punish dishonest nodes submitting proofs how their response unfaithful the record the blockchain; this basis trivial for the network reach consensus about the dishonesty node and blacklist it. the trader satisfied with the response(s) from the trade history nodes, would pick the first node supply the hashes, and commence atomic swap with the following properties: bail-in transaction only spendable using private key corresponding the address the node provided, and the trade history data corresponding the hash provided (in other words, the trade history data functions the secret the atomic swap) such, the trade history node spends the bail-in transaction, then must reveal the trade history data, and the trader receives it. simultaneously, the trade history data cannot revealed without the trader paying for it. the current (and simplistic) sketch has few properties worth noting: the size the requested dataset may limited the maximum field length for the secret the transaction format. this, then, drives revenue for trade history nodes requiring traders submit more than one request they desire trade data over longer timeframe. the fee per dataset may dynamically adjusted against the trade volume, since greater volume per unit time would reduce the time span dataset certain maximum size. mild obfuscation trade history data provided against other traders intercepting the requested trade history data once the trade history node reveals it: because they neither the trading pair nor the timeframe included the dataset, will not obviously useful them and would expensive and complex synthesise. document version march page strong obfuscation trade history data would afforded being sent encrypted over xchat, and the secret the atomic swap functioning also decryption key for the data. this, however, would require more sophisticated zero-knowledge proof that the one this sketch (see above). registry service the trade history service above appears generalisable provide workable registry service for inter-chain services. intuitively, where the trade not for coin but for digital good instead, the commit and lookup phases blockchain routing remain unchanged. what would required addition for trade history nodes filter their blockchain's record trades for the most recent record which chainid appears, and compile the resulting list chainids and their associated serviceids. this list would delivered, instead trade history, using the protocol the preceding section. document version march page project phases the following section broad outline the long term course the project, intended for gauging overall scope, and not series commitments development milestones. shorter-term roadmaps, with well-defined milestones, are published necessary. production mvp monolithic client/node blockchain router xchat protocol service monetisation mechanism trade fee distribution mechanism decentralized exchange dapp frontend market, limit, and stop orders order book order history user open orders tradingview charts integration uses each user's account api credentials setup wizard: automatic wallet api and charting api configuration risk control (over number confirmations acceptable) document version march filters order book allows you place orders sooner change handling: order accepted; change returned change unspendable for minutes goes into appropriate risk bracket order's risk bracket auto-updates with coin age page phase modularise xbridgepp blockchain router module xchat module coin exchange module decentralized exchange client apis for all modular components support for data payload exchange protocol easy interoperability between exchange protocol and xchat transport protocol (controlled via your own dapp) phase support for further order types: trailing stop, oco support for leaving orders book after closing app (orders committed blockchain) phase protocol enhancement: derivative market for swaps (pp margin lending) protocol enhancement: generic derivative markets document version march page technical specification for easier maintenance, and order retain single source truth for low-level documentation, this section has been moved github. message sequences forthcoming. see https://github.com/blocknetdx/blocknet-docs api reference see https://github.com/blocknetdx/blockdx/blob/master/doc/dx/dxapi.md document version march page use-cases infrastructure for not-yet-existing ecosystem presents some difficulties the imagination. "what this for?" the single most common design-focused question asked, and the correct answer something like "anything that can benefit from token ecosystem" which most things. for less abstract answer, here short list use-cases for the blocknet: decentralized exchange the decentralized exchange crypto-tokens fact core service the blocknet, since necessary for the monetisation any other service. this, within easy-to-use dapp ui, also the blocknet's first consumer product, since fulfils real need the crypto-community for decentralized trading technology. the prevalence hacks, fraud, failure, and theft from centralized crypto exchanges has resulted alarming bitcoins being stolen. workable decentralized exchange will thus provide vital enabling function the fledgling token ecosystem for the safe, secure exchange coins and tokens. blockchain router blockchain routing also core service the blocknet, since inter-chain traffic must routable its intended destinations. that said, also consumable valuable service, which any node may require order either deliver consume inter-chain service. the blocknet's incipient router, xbridge, currently delivers free service, and this may remain for the indefinite future. inter-chain messaging whether used chat app data transport, inter-chain messaging indispensable service for the token ecosystem. with decentralized exchange and blockchain routing, this core blocknet service, and goes the name "xchat." end-to-end encrypted, peer-to-peer, and may used for the ultra-secure delivery digital goods and messages. currently free service, and (currently) packaged alongside the blockchain router xbridge. mobile app exploiting multiple chains mobile app, with its small footprint, would most likely have only one spv node and its native blockchain token. such, would consume services, not other coins various blockchain services consumes shall run blocknet components when the app requests service, the service shall generate "secret" which also decryption key for the digital goods the service shall send data enabling the app construct zero-knowledge proof that the goods are legitimate the shall shall create bail-in transaction atomic swap the service shall spend the bail-in transaction and later trade for another coin, preferred document version march page the app thus receives the secret and may consumes the service near-perfect coin mixer private currency such zcash, zcoin, monero may integrate xbridge, and script the automatic trading any currency for the private currency and back again into the original currency. since the decentralized exchange does not require any third party trusted with users' data, and since the atomic swap involves counterparty risk, the result nearly perfectly private mixing service. decentralized marketplace app marketplace app would typically require the following services: (a) customer reputation and info, (b) payment processing, (c) image storage, (d) item listings. microservices architecture advisable for the reasons given above, gaining the advantages utilising multiple blockchains. thus, one chain may store encrypted customer info (see item this list), use the xbridge accept payments any cryptocurrency, store images server, and use third chain and in-wallet code for the item listings and elements. the result scalable, composable set services that are easier bugfix, upgrade, replace. fuel-converter for ethereum smart contracts using the decentralized exchange, any ethereum contract may supplied with "gas" other coins. truly decentralized stablecoin stablecoin may maintain its peg exploiting the fact that trade records decentralized exchange are onchain. such, provably truthful dataset available for determining whether mint burn coins (or freeze and unfreeze them) order maintain peg. self-sovereign and personal information manager personal information service may records encrypted personal metadata given blockchain equipped with revocable permissioning system. users thus acquire self-sovereignty over their personal information. from this point, one may integrate this blockchain any website app requiring sign-in, users can voluntarily sell their metadata advertisers for micropayments, can support passport/identity systems. emerging technologies positioned exploit this use case are bitnation and microsoft's coco framework. supply chain solution blocknet infrastructure well-suited function "supply chain backbone. parties typically find themselves different blockchains, with need interoperate, and may exploiting blocknet services. multichain apps will thus able read data from several chains, whether they are specialized shipping data like bill lading, product manufacturing data like bill material, financial dat, and forth. comparing metadata from several sources, the blocknet could empower companies limit attack vectors like invoice spoofing and certification counterfeiting. iot infrastructure some perennial iot security issues may solved exploiting blockchain technology, and then interoperating between thousands blockchains over the blocknet. diverse opportunities for granular monetisation present themselves too: for example, one may accomplish transaction batching several chains once using spv wallets. the data stream may thus tokenized, and nodes may incentivised engage pattern finding company's big data. document version march page in-app service mobile app may earns its users tokens screening ads delivered the app blocknet service. tokens could then used power inter-chain service consumption for the app, delivering "free" service for the user, but monetised one for the service providers. decentralized storage solution blockchain-based storage solution, such storj, may have its user base significantly enlarged and monetized via inter-chain service delivery. permissionless ico platform anyone may offer token sale over decentralized exchange, with permission required. business case tool for distributed budget management crypto projects are typically launched big crowdsourced business case (ico), where budget negotiated with the market. however, the actual account balance fluctuates the price the cryptocurrency the crowdsourcing was conducted in. changes value. using the blocknet, developers may manage the distribution tokens and accounts across chains. furthermore, with the use smart contract, disbursements and investments other coins may managed and, general, the project's business plan coded and automatically executed the contract with perfect transparency. integration erp, crm, plm systems across companies the blocknet's simple api-based integration enables interoperability either directly indirectly with consortiumtype and private blockchains, like those oracle and sap. infrastructure for the internet value the blocknet's inter-chain infrastructure shall function increasingly over time create "internet value" that inherently truthful, transparent, and fairly available. companies' general- and sub-ledgers come gradually interface with other companies' ledgers through blockchains, the resulting network blockchains will become full representation value streams and given system's value. this enables advanced and deep awareness value across entire systems, with correspondingly powerful and far-reaching consequences for the financial system. document version march page