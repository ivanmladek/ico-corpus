torpath torcoin: proof-of-bandwidth altcoins for compensating relays mainak ghosh, miles richardson, bryan ford and rob jansen yale university, new haven, {bryan.ford, mainak.ghosh, miles.richardson}@yale.edu u.s. naval research laboratory, washington, rob.g.jansen@nrl.navy.mil abstract. the tor network relies volunteer relay operators for relay bandwidth, which may limit its growth and scaling potential. propose incentive scheme for tor relying two novel concepts. introduce torcoin, "altcoin" that uses the bitcoin protocol reward relays for contributing bandwidth. relays "mine" torcoins, then sell them for cash any existing altcoin exchange. verify that given torcoin represents actual bandwidth transferred, introduce torpath, decentralized protocol for forming tor circuits such that each circuit privately-addressable but publicly verifiable. each circuit's participants may then collectively mine limited number torcoins, proportion the end-to-end transmission goodput they measure that circuit. introduction the tor network suffers from slow speeds, due shortage relay nodes from volunteers. this well studied problem, but despite many attempts, there not yet widely-adopted mechanism for compensating relay operators while retaining anonymity clients [-]. this paper outlines one possible solution, embodying two complementary novel ideas: torcoin alternative cryptocurrency, altcoin, based the bitcoin protocol []. unlike bitcoin, its proof-of-work scheme based bandwidth rather than computation. "mine" torcoin, relay transfers bandwidth over the tor network. since relays can sell torcoin any existing altcoin exchange, torcoin effectively compensates them for contributing bandwidth the network, and does not require clients pay for access it. torpath secure bandwidth measurement mechanism that utilizes decentralized groups "assignment servers," extending tor's existing "directory servers," assign each client tor circuit that publicly verifiable, but privately addressable. this mechanism allows torpath "sign" newly-minted torcoins, that anyone can verify torcoin checking the blockchain. motivation and related work solving the problem compensating tor relays attractive that might immediately improve the scalability the tor network. prior research has not arrived fully satisfactory design for such incentive scheme, however. now outline what believe the key requirements for such scheme, while noting that more extensive discussion these requirements and the architectural tradeoffs they entail available elsewhere []. requirements incentive system incentive system must retain anonymity but verifiably measure bandwidth and reliably distribute payment the nodes that provide it. the system must resilient adversaries attempting identify clients fake bandwidth transfer. preserving anonymity: among tor's existing properties that torcoin must preserve, tor client can recognize another, and relay can identify the source and destination any packet flow. proposed incentive schemes like tortoise and gold star may compromise clients' anonymity allowing their traffic identified []. proportionally differentiated service like lira [], speed-monitoring adversary can potentially partition the anonymity set into clients that are paying for higher speeds, thus reducing anonymity. torcoin should least preserve the anonymity the current tor protocol, and ideally improve attracting more clients and relays. verifiable bandwidth accounting: torcoin needs measure bandwidth such way that anyone can verify its measurements. optimally, will not require self-reporting centralized servers, unlike eigenspeed opportunistic bandwidth monitoring []. the system should robust attackers groups attackers colluding misreport bandwidth measurements, and the entire network should agree all measurements. rather than relying reported network speeds, torcoin uses onion-hashing scheme push bandwidth probe packets through tor circuits measure their end-to-end throughput. anonymous payment distribution: once torcoin measures the bandwidth given relay has contributed the tor network, torcoin must distribute payment that relay way that preserves anonymity. specifically, one should able associate bandwidth payment measurement with specific relay. since torcoin also requires verifiable accounting, the problem becomes how verify bandwidth without identifying its provider. reliable transaction storage: torcoin must store sufficient records previous payments avoid rewarding relay twice for the same bandwidth transfer. prior incentive schemes like lira use trusted central bank assign coins and track spending, making the incentive scheme dependent the central authority. torcoin avoids relying central authority using the bitcoin protocol's distributed ledger track transactions and avoid double spending []. incremental deployment: simplify deployability, torcoin should require minimal changes the tor codebase, and should not significantly increase latency requests. good incentive scheme should also scalable accommo- client torpath client trusted node assignment server torcoin miner torcoin wallet tor client relay torpath client torcoin miner torcoin wallet tor tor relay fig. high level torcoin system architecture for clients and relays. torpath client assigns tor circuits clients via the torpath protocol, described the next section. torcoin miner mines torcoins and stores them torcoin wallet. each tor client and tor relay operates usual, but circuits assigned via the torpath protocol. date large number users and relays operating concurrently. torcoin pursues deployability and scalability through its decentralized structure and small transaction overheads supported existing technologies such bitcoin. key technical challenges illustrate the key challenge this paper addresses, envision naive bandwidthmeasurement scheme using blinded cryptographic tokens signify bandwidth transfer. suppose this scheme, client able give each relay token for given amount bandwidth the relay provides. relays are then able convert these client-signed tokens into some form currency. such scheme would vulnerable colluding groups clients and relays, however, who can simply sign each other's transfer tokens without actually transferring any bandwidth. address this challenge via the torpath scheme described below. torpath restricts clients' ability choose their own path, ensuring that most paths include least one non-colluding participant (the client least one the three relays). assignment servers bundle large groups clients and relays into groups that collectively choose paths. even the relatively rare event that path constructed this way consists entirely colluding clients and relays, upper bound the number coins each path can mint rate-limits potential loss these few, probabilistically rare, entirely-colluding paths. torcoin architecture the torcoin architecture consists two protocols, torcoin and torpath. brief, the torcoin protocol bitcoin variant that mines coins, while torpath protocol assigns circuit (entry, middle, and exit servers) each client, thereby "authorizing" the minting torcoins through verifiable proof-of-bandwidth. torcoin runs standalone service, requiring little modification the tor bitcoin codebase. tor clients and relays operate usual, except clients receive circuit assignments from assignment servers, instead choosing relays arbitrarily from the tor directory. separately, torcoin miner each machine mines torcoins monitoring the throughput the local tor tls tunnel, and communicating with its circuit neighbors via the torcoin algorithm. figure shows basic overview this architecture. adversary model are primarily concerned here with adversary who wishes obtain torcoins without contributing useful bandwidth the tor network. assume the adversary able control number clients and relays. assume that malicious clients and relays know about each other and are able collude. also assume that the adversary able control minority assignment servers the network, and that other servers are honest-but-curious. the torpath protocol the torpath protocol assigns tor circuits clients, replacing the usual tor directory servers with assignment servers, which form decentralized consensus groups. the protocol guarantees that participant circuit can identify all other participants, and that each circuit includes publicly verifiable signature. use torpath "sign" each torcoin, that anyone can verify torcoin's validity comparing its signature global history consensus groups. requirements: the torpath protocol adheres the following constraints: client can generate its own circuit. every circuit has unique, publicly-verifiable signature. client can know the circuit another client. protocol outline: the torpath protocol consists three sequential steps: group initialization. assignment servers form consensus group. clients and available relays provide public keys join the group. verifiable shuffle. the consensus group performs decentralized, verifiable shuffle all the public keys, resulting circuit assignment for each client. path lookup. the assignment servers publish the result the shuffle, such that each client can identify only its entry relay, and each relay can identify only its immediate neighbor(s) the circuit. assignment server group assignment server group entry keys group pub keys client key group pub keys middle keys exit keys onion encryptor client onion encryptor relay (a) (b) fig. both relays and clients use onion-encryption encrypt their own temporary public keys with the public keys all the assignment servers the group. (a) each client generates one keypair, and sends its public key onion-encrypted the server. (b) each relay generates multiple keypairs, support multiple clients and/or circuit positions within consensus group, instructed the assignment servers. stage group initialization: consensus group formed when suitable quorum assignment servers come together assign circuits recently registered clients. for example, there are assignment servers the network, might require least them participate forming each consensus group. the assignment servers can modulate the size and hence anonymity represented each consensus group, waiting until there are some configurable number clients registered before proceeding the next stage. different categories consensus groups might use different values allowing clients trade anonymity for wait time. groups with larger values would provide larger anonymity set, the expense longer circuit setup times. consensus group forms three steps: each assignment server shares its public key with its group members, and broadcasts these public keys all clients and relays connected it. each client connects one assignment server the group. the client then generates temporary private and public key pair. the client onion-encrypts its temporary public key with the public keys all assignment servers the group, resulting ciphertext that each server can only partially decrypt. the client submits this ciphertext its assignment server. each relay can act entry, middle, and/or exit relay, and chooses which position(s) service. the number available relays available for given position (especially exit relays) may often less than the number clients the group needing circuits. ensure parity between clients client entry middle client exit entry middle exit shuffle fig. example matrix shuffle with clients and and relays (purple, blue, green, red). each relay generates number public keys kpi for each circuit position instructed its assignment server. here, each client assigned the circuit represented the row the shuffled matrix. and relays for each position, each assignment server instructs its relays generate sufficient number temporary keys for each position. the relay server uses onion-encryption generate ciphertexts from temporary public keys. the relay packages these ciphertexts position and sends them its upstream assignment server. figure illustrates steps and can represent the temporary keys matrix for clients, where each row corresponds client and its three relays (see figure stage verifiable shuffle: the consensus group now shuffles each column the temporary key matrix independently, using verifiable shuffling algorithm such the neff shuffle []), and jointly decrypts the shuffled keys. each row the public result matrix now contains random -tuple temporary public keys representing one circuit: namely the client and the three relays serving that client. the assignment servers collectively sign and publish the resulting matrix public log, accessible all clients and relays. although everyone learns which four temporary public keys represent the participants each circuit, the verifiable shuffle prevents anyone except given key's owner from learning which participating client relay owns each these temporary keys. sender message tuple client (kc {ipci entry relay (ke {ipei {ipei middle relay exit relay (km {ipm {ipm (kx {ipx table each participant circuit sends its message tuple onion-encrypted the server. {x}y denotes encrypted with stage path lookup: the final step the algorithm, each client obtains the address its entry relay, and each relay obtains the address its neighbor(s) the circuit. the path lookup algorithm ensures that each client and relay can obtain only the addresses its neighbors the circuit. each client encrypts its own using the public key its neighbor. the client forms tuple (public key, encrypted ip) shown table the client onion-encrypts this tuple and sends the assignment servers. each relay follows the same procedure, for every key the matrix belonging it. the assignment servers shuffle this new list tuples. each client and relay now finds its neighbors the matrix locating the tuples containing the public keys needs. finally, each participant decrypts the relevant cells using its private key, revealing the address its circuit neighbor(s). now all clients the consensus group have usable tor circuit. each circuit formed consensus group obtains unique circuit identifier, which ordered pair consisting the hash the matrix and the row number the circuit within csi (hash(m i). this identifier will used the torcoin algorithm, together with signatures using the four anonymous temporary public keys comprising that row prove that torcoins were minted circuits assigned consensus groups. security considerations anonymity: the torpath protocol guarantees that single relay knows any client's entire circuit. malicious clients relays collude, they may able shrink the anonymity set the set honest relays and clients the consensus group. groups can have varying sizes, however, allowing clients choose desired balance between anonymity threshold and circuit assignment delay. group formation: the torpath protocol's random circuit selection mechanism prevents colluding clients and relays from deterministically placing themselves the same circuit, provided not too many participants each group collude. even half the temporary keys matrix are held colluding participants, for example, only the assigned circuits will compromised and able mint limited number of) torcoins without performing useful work. could add further protection against "flash mobs" colluding participants randomizing group assignment across longer time periods, instead using temporal locality the only grouping criterion. circuit diversity: torcoin's neff shuffle could assign the same relay one circuit multiple positions: e.g., choose the same physical relay both entry and middle relays. with reasonable number participating relays, however, should extremely unlikely that one relay gets assigned all three positions the same circuit. any case, the risk accidental relay duplication one path should not substantially greater than the risk tor users already face randomly placing multiple relays owned the same operator circuit. anticipate that privacy-preserving independence testing techniques could adapted detect and reject circuits which the same relay (or operator) appears multiple times, but leave this challenge future work. persistent guards: the assignment process above picks three relays afresh for each circuit, contrary tor's practice keeping entry relays persistent for longer periods. the circuit assignment mechanism could adapted for persistent entry relays combining the first two columns matrix into one column representing each client together with its choice entry relay, the cost slightly increasing the chance forming all-compromised circuits. torcoin mining contrast with bitcoin's reliance proof computation, mining torcoin requires proof tor bandwidth transfer. torcoin, all participants circuit assigned torpath may collectively mine limited number torcoins, incrementally, based the end-to-end goodput they observe the circuit. proof bandwidth each client and relay creates temporary key and its hash hash(r* where coin# every tor packets, the client sends tuple (coin#, the number torcoin packets previously sent this circuit. each relay similarly adds its own temporary hash the tuple and and forwards the tuple the next relay the circuit. the exit relay forms the coin commitment blob (coin#, the exit relay then signs the blob with its temporary public key for this circuit create signature then opens its commitment reveal and sends the tuple (b, the middle relay. each prior participant the circuit turn, similarly signs the blob create sib adds its signature and opened commitment the tuple, then forwards the tuple the previous participant the circuit. the client forms bandwidth proof (b, which anyone may verify against the four temporary public keys the appropriate row matrix for this circuit. (c#, client (c#, (c#, relay relay relay (c#, yes (b, (b, (b, fig. torcoin proof bandwidth algorithm. the upper part the cycle, the relays add their hashes the tuple. the lower part, they add their temporary keys and sign the tuples. check torcoin has been mined, the client checks the lower-order bits hash(csi so, the client adds the full proof-of-bandwidth tuple the blockchain validate the new torcoin. valid, the coin# within must one greater than that the last torcoin the blockchain mined from circuit and must less than the well-known limit the number torcoins per assigned circuit. finally, the client uses the standard bitcoin transfer protocol pay each relay the circuit one third the mined torcoin. this protocol leaves all information necessary for verifying proof-of-bandwidth the blockchain. any interested party can verify that the circuit identifier refers valid consensus group referring the public log. they can also verify that the blob was signed the correct participants verifying the signatures against the temporary public the consensus matrix and verify that the openings correspond the corresponding commitments because the low-order-bit test step depends only values secretly committed the "forward path" steps then revealed only the "return path" steps proper subset the circuit's participants can unilaterally recompute order mine torcoins out proportion measured circuit goodput. security considerations enforcing packet rate: all honest relays and clients enforce the standard torcoin packet rate any relays clients that deviate from this are reported the assignment servers and the circuit terminated. enforcing circuits: relays know their neighbours' addresses and will refuse connections from any other address. even malicious relays connect each other, they will not able sign torcoins unless they own complete circuit. compromised circuits: colluding clients and attackers needs control all four components circuit mine torcoins fraudulently. even adversary controls half the network, only assigned circuits will fully colluding. practice, hope and expect that gaining control even half all tor clients and relays would difficult. limit the impact occasional colluding circuits, torcoin also limits the number coins each circuit can mine. this coin number included the blockchain, easily verified. the impact compromised circuits can further reduced ensuring that consensus groups expire regular intervals, requiring clients either form new circuits cease obtaining new torcoins from old circuits. bitcoin anonymity: this paper focuses adapting bitcoin's mining scheme measure tor bandwidth instead computation, and not bitcoin's transaction mechanism. since torcoin also needs protect the anonymity clients they make transactions, must also account for well-known concerns about the limited anonymity the basic bitcoin transaction protocol offers []. any the recently proposed approaches such zerocoin [], mixcoin [], coinshuffle should offer suitable solution this orthogonal challenge. deployment: the torpath network not backward compatible with the existing tor network, due the fundamental differences route assignment and access control, which are missing tor but necessary for the torpath and torcoin schemes work. however, any given physical server could run both services the same time. torcoins are, course, generated only from torcoin traffic. preliminary results the torcoin protocol adds small amount overhead tor traffic. evaluate this overhead, set series servers using the python twisted framework simulate the passing torcoin generation and verification messages through set relays. assuming that the keys, hashes and signatures are all bytes length, the total overhead from one round successful torcoin mining (i.e., one entire round trip from client through all the relays and back again) results total torcoin packet overhead bytes. this can broken down into: the first packet from client entry relay: bytes. packet forwarded from entry middle relay: bytes. packet forwarded from middle exit relay: bytes. packet from from exit middle relay: bytes. packet from from middle entry relay: bytes. packet from from entry relay client: bytes total: bytes percent overhead fig. torcoin packet overhead each round torcoin generation and verification happens only after tor packets have been sent. each standard tor cell bytes long, each round trip the network requires transmission bytes. thus, the torcoin protocol overhead around the value can calibrated further experimentation and needed order achieve the sweetspot transmission efficiency and incentive maximization for relay providers. the system might decrease the value when load high, incentivizing relay operators provision more relay bandwidth such times. while the neff shuffle complex and requires several communications between the servers, expect the assignment servers will few (less than and well-provisioned, and not expect the shuffles major bottleneck. since this one-time cost connecting the network, hope users will accept this setup time gives them access higher-capacity relays. for impatient users, the torcoin client could use conventional tor circuits immediately startup, then transition torcoin circuits they become available. conclusions have introduced torpath, novel scheme assign paths tor clients securely and anonymously. torpath motivated the need verifiably mine torcoins, bitcoin variant based measured bandwidth over the tor network. the torcoin protocol robust malicious relays and clients colluding mint torcoins without transferring bandwidth. acknowledgments this material based upon work supported the defense advanced research agency (darpa) and spawar systems center pacific, contract no. n-c-. this work was supported the office naval research. references androulaki, e., raykova, m., srivatsan, s., stavrou, a., bellovin, s.m.: par: payment for anonymous routing. borisov, n., goldberg, i., eds.: privacy enhancing technologies: international symposium, pets leuven, belgium, springer-verlag, lncs (july chen, y., sion, r., carbunar, b.: xpay: practical anonymous payments for tor routing and other networked services. in: proceedings the workshop privacy the electronic society (wpes acm (november ngan, t.w.j., dingledine, r., wallach, d.s.: building incentives into tor. sion, r., ed.: proceedings financial cryptography (fc '). (january jansen, r., hopper, n., kim, y.: recruiting new tor relays with braids. keromytis, a.d., shmatikov, v., eds.: proceedings the acm conference computer and communications security, ccs chicago, illinois, usa, october acm moore, w.b., wacek, c., sherr, m.: exploring the potential benefits expanded rate limiting tor: slow and steady wins the race with tortoise. in: proceedings annual computer security applications conference (acsac'), orlando, fl, usa. (december jansen, r., johnson, a., syverson, p.: lira: lightweight incentivized routing for anonymity. in: proceedings the network and distributed system security symposium ndss', internet society (february johnson, a., jansen, r., syverson, p.: onions for sale: putting privacy the market. in: financial cryptography and data security. springer nakamoto, s.: bitcoin: peer-to-peer electronic cash system. consulted jansen, r., miller, a., syverson, p., ford, b.: from onions shallots: rewarding tor relays with tears. in: hotpets. (july blake, s., black, d., carlson, m., davies, e., wang, z., weiss, w.: architecture for differentiated services dovrolis, c., ramanathan, p.: case for relative differentiated services and the proportional differentiation model. network, ieee snader, r., borisov, n.: eigenspeed: secure peer-to-peer bandwidth evaluation. in: iptps. snader, r., borisov, n.: tune-up for tor: improving security and performance the tor network. in: ndss. volume karame, g., androulaki, e., capkun, s.: two bitcoins the price one? doublespending attacks fast payments bitcoin. iacr cryptology eprint archive neff, c.a.: verifiable secret shuffle and its application e-voting. in: proceedings the acm conference computer and communications security, acm zhai, e., chen, r., wolinsky, d.i., ford, b.: untold story redundant clouds: making your service deployment truly reliable. in: workshop hot topics dependable systems (hotdep). (november meiklejohn, s., pomarole, m., jordan, g., levchenko, k., mccoy, d., voelker, g.m., savage, s.: fistful bitcoins: characterizing payments among men with names. in: internet measurement conference. (october miers, i., garman, c., green, m., rubin, a.d.: zerocoin: anonymous distributed e-cash from bitcoin. in: ieee symposium security and privacy. (may bonneau, j., narayanan, a., miller, a., clark, j., kroll, j.a., felten, e.w.: mixcoin: anonymity for bitcoin with accountable mixes. in: financial cryptography and data security. (march ruffing, t., moreno-sanchez, p., kate, a.: coinshuffle: practical decentralized coin mixing for bitcoin. in: hotpets. (july twisted matrix labs: twisted framework. https://twistedmatrix.com/trac/