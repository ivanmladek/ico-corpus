gulden improving the blockchain malcolm macleod malcolm@gulden.com gordons bay, south africa abstract "great engineering the art intelligent compromise" dan watts the release bitcoin and the blockchain technology that powers has ushered exciting new era for digital currencies and distributed computing, seemingly bringing into existence what many had thought impossible; trustless decentralised currency. however like many great inventions the past, this progress was achieved not breaking any rules nature limitations that people imagined stood the way, but rather taking long hard look the requirements and then coming with clever new compromise. most inventions any significance contain many compromises and bitcoin exception, with most groundbreaking new systems, would naive and unrealistic expect that the first iteration would get everything right. stands reason that there room for improvement. has been over years since bitcoin burst onto the scene and numerous competitors have since come and gone, some them bringing some minor improvements the table, but overall very little meaningful progress has been achieved core areas. belief that sober and proper reflection the current shortcomings, well real solutions some them are necessary, this promising new technology may easily falter while still its infancy. this article attempts pinpoint what believe are the shortfalls and compromises current blockchain technology, and analyse them search ways improve the system, with the goal implementing these improvements our virtual currency gulden. keywords: blockchain, gulden, bitcoin, distributed consensus, hashcash, proof stake, proof work, pow introduction the blockchain the blockchain represents, date, the best (partial) solution very complex problem known computer science trustless distributed consensus. perfect trustless distributed consensus would the ability for multiple computers agree and keep record order events/information, manner that permanent (cannot tampered with forged after the fact) but without having central authority the system that decides controls this order, where all peers the system are essentially equal and none them have any special control over the system. the blockchain not perfect trustless distributed system, but trustless distributed system. achieves this compromise relaxing one the criteria slightly, namely instead history being incorruptible/unforgeable settles instead for history that would incredibly difficult tamper with forge with the assumption that when applied monetary system this requirement sufficient. will touch more this later the paper, first want focus the great benefits that this allows: centralized point failure, there single piece infrastructure that can taken down that can cause interruption service loss history. traditional alternatives are very susceptible this, and have seen numerous cases history banks losing peoples transaction history e.g. the visa network going down and being temporarily unusable. centralized control, nobody can control the network and tell what do, everyone must play the same rules. this eliminated the possibility for corruption and embezzlement that has plagued the banking industry the past. oversight required most countries today not possible open new bank payment service without complying mountains legal requirements and oversight from government, and not without good reason. without such oversight the central authority can easily make off with everyone's money due and (), blockchain based service bypasses the need for all this legislation, allowing for services rolled out internationally, faster and cheaper. while blockchains are certainly not limited payment systems, currencies, and there has been late many attempts use the same concept for numerous other use cases, this paper written from the perspective gulden digital currency and therefore everything that follows the specific context decentralised virtual currencies and specifically gulden, and should therefore read such. the problems unfortunately current blockchain implementations fall short the ideal that people would like from them, the expectations that people have from currency and what they expect such currency offer. some these problems not uncommon thing when one looks for instance pension funds, and even with the oversight this can still problem. with most new technologies their first incarnations, indeed even most established technologies. double spends have already become visible/obvious the public larger currencies like bitcoin and some them may only become obvious later date many these problems are inherent side effect the distributed nature blockchain and therefore may best mitigated, while others are only limitations the initial implementations and could potentially overcome. the first step course identify these problems. below not comprehensive list all possible problems, but list problems that the gulden team considers the most important look at, this point time. double spends simplified description how this works: the attacker creates transaction that sends funds recipient the 'target' the attack. creates second transaction that sends the same funds different recipient revealed first the network, the recipient becomes aware the transaction and acts upon the receipt assuming that the attacker has made payment and everything order. however, then also revealed the network the attacker. the network can only accept valid but not both, ensuring that the network accepts instead the attacker has effectively stolen from the original recipient. ideal payment system this would not possible, however this unfortunately one the side-effects that the decentralized nature the blockchain brings. some more depth analysis the subject can found rosenfeld ... zero-conf double spend the zero-conf double spend the easiest way perform double spend. the easiest/cheapest attack perform terms technology, but the hardest terms finding victim. the victim will know relatively soon that they have potentially been ripped off attacker, the attacker would have exercise some caution how/where they did such attack order able make escape without being captured. the number users grow and/or the blockchain transaction numbers grow scaling problems may become more obvious end users most likely, but not necessarily, address under his own control. the exact mechanisms play here differ slightly depending whether are attacking -conf transaction one that has already entered the blockchain, more information the various methods the subsections that follow. straight after the next block mined, even soon the conflicting transaction reaches them. online targets like exchanges are ideal targets they are foolish enough accept -conf. double spends essentially relies finding merchant who accepts transactions before they have even entered block the blockchain. then possible double spend simply either (a) mining the next block yourself (b) convincing miner the next block include your second malicious transaction instead the first transaction this could done paying the miner, putting higher fee the malicious transaction, luck, various other means. the reality that zero-conf transactions are completely unsafe for various use cases (the exception being cases where the merchant capable physically tracking down any double spenders and prosecuting for instance). the general reaction this place the blame the merchants and claim that further education can solve the issue. while this valid extent, the reality that many merchants will continue accept zero-conf even after being educated their business model simply can't tolerate waiting long periods time for even single conf. the inevitable losses that such businesses make once somebody manages rip them off are harmful the ecosystem whole and ideally need stopped. ... short chain double spend this the most feasible attack for attacker with more funds, terms finding victims etc. the attacker makes payment and waits for included block, then immediately begins mining private side chain that has his second conflicting transaction instead. carries mining (at faster rate than the main network) until ahead the main network, has received the goods from the merchant and confident his escape, which point unleashes his longer chain. merchant accepts -conf, then attacker needs mine blocks row pull this off. for -conf, blocks etc. this why recommended that people wait for confirmations which makes attack with anything less than hash rate unlikely and usually would require >%. however confirmations long time period and discussed above this huge problem for merchants. the reality that the vast majority merchants are working -conf. the chances success here are determined how much hash power the attacker has, how many blocks needs make and element luck. obtaining hash rate (>% attack) can almost guaranteed success, however attacks with lower hash rate can also done. this particularly large problem for newer coins, especially their infancy they don't have the luxury being first, they share hashing algorithm with larger coin attack against them much more feasible. most the 'good' algorithm choice are already taken and because there now more interest the sector, picking creating new algorithm does not automatically protect against this either. bitcoin and other early coins their infancy essentially relied benefitted from the fact that nobody actually wanted attack them that point time, which helped defend them from this weakness. new virtual currencies now enjoy much more attention than before and face much more competition with slower growth, they not attacks have the same luxury. for younger virtual currencies like gulden more viable solution needed here than pretend that everything okay and hope that grow past the point where issue. ... long chain double spend these are the most expensive, and easiest defend against, won't deal with them much this paper. essentially this the same short chain spend, except over much longer period time, day, month even all the way back the start the coin. because the long periods time involved these are the most costly pull off however they would completely devastating the coin question they were happen. fortunately these are relatively easy defend against and are notably one the exceptions where the bitcoin team has conceded that some decentralization good. having checkpoints (basically snapshots the blockchain) built into each wallet release certain blocks that are expected present are hard-coded. this prevents attack from before the last checkpoint. various other defenses are possible, some them with some downsides their own (e.g. .). attacks the largest attack vector against blockchain the attack, attacker can gain more the networks hash rate then this gives him various capabilities. brief description some these below, most them are discussed more detail their own section. censorship; the attacker can deny specific transactions access into the blockchain not mining acknowledging any blocks that contain the transaction. denial service; the attacker can mine empty blocks (..) thereby denying service the network. double spend; the attacker can out mine the network with relative ease and thus execute double spends (.) will. thus relied upon that all times obtaining more the hash rate should difficult impossible achieve. for bitcoin which the most famous and largest blockchain based currency this easy achieve but for other newer coins this can difficult. selfish mining when miner mines block, generally assumed that will immediately broadcast the network this how honest nodes operate. however there isn't really any such restriction, can delay broadcasting the network for actually even much can problem after factors like selfish mining are taken into account. side chains long wishes but can immediately start mining second block that refers the currently found block even though has not broadcast yet. this process known selfish mining, the simplest cases can used large miner gain slight advantage, delaying broadcast all blocks found even few seconds miner increases his chances finding blocks compared the rest the network. however this can also abused more sinister ways miner with approximately hash rate engaging selfish mining could theory (with bit luck) obtain enough advantage execute attack i.e. attack does not necessarily actually require the hash rate. eyal and sirer garay al. side chains related the above, possible for miner mine multiple blocks secret without sharing with the network. such can work attack private with risk being exposed should the attack fail, only once his side chain already successful side chain then shared with the network which point too late for anyone much about it. this characteristic can utilised those wishing perform double spends. centralisation mining real world experience has shown that over time the mining blocks concentrates more and more toward small number individuals pools. this weakens several parts the system making easier attack. examples include: ddos against larger mining pools order gain temporary advantage execute double spend (or simply cause problems for the coin) malicious pools these can mine empty blocks (discussed denial service), aid people with double spends cause various other problems for the network. jump pools discussed more detail below (erratic block times) erratic block times ... block target for various reasons block intervals can very erratic. though ideally block meant come once every minutes reality they often come much quicker slower than this. not unusual for smaller coins see five blocks come the space few seconds and then the next block the only restriction being that somebody else might get block out first. 'side-chain' for the purposes attack really way just specialised form selfish mining. one that larger than the main chain. brief details the subsections below. for gulden minutes, minutes for bitcoin. transaction capacity limitation take minutes, hour. this best major inconvenience for new users and huge cause support queries. worse can show stopper for some merchants accept the currency waiting this long for safe transfer funds just won't work for them, and the absolute worst case this becomes incentive for merchants turn accepting -conf transactions. ... inaccurate block times result decentralisation, there real way enforce accurate times blocks. while it's possible restrict blocks coming from the future the same cannot done reverse, not possible restrict blocks with timestamp the past via hard limit. the only restriction here that the median the timestamp the last blocks should always increment. this allows lot room for miners mess around with the timestamp when mining block, which might done for one several reasons: machine genuinely has the wrong time. hopes gaining more money tricking the targeting algorithm into yielding easier blocks. part malicious attack the system. for example time-warp attack that allows miner mine abnormally large amount blocks abnormally short amount time tampering with the timestamps. result the miner engaging selfish mining. possible tighten the forward drift allowance quite bit and gulden already has, but ultimately this only limits the inaccuracy the timestamps little bit doesn't solve the problem. ... 'jump' pools newer coins that are starting out, and that not have unique hashing algorithm there the added problem that lot miners will constantly switch their miners between coins further maximise their mining profit. this can and does lead situations where the hash rate suddenly spikes and/or drops drastically and the next block can take much longer time come result. transaction capacity limitation ... block size limit the system has inherent limit how many transactions can process. each block only allowed certain size and the difficulty adjusted which are provably unsafe and ultimately sad story waiting happen. clients reject any blocks that have timestamp more than hours the future. timestamp limited minute future, and median the last blocks. which brings with its own unique problems that will discuss later the paper. blocks the difficulty algorithm slow adjust. for gulden/bitcoin mb. bitcoin sybil attack they come fixed interval leading overall limit how many transactions can actually fit into the blockchain given time period. the limit exceeded transactions may take very long before they enter the blockchain which can lead difficulties for users. there has been lot press coverage this over the last few years for bitcoin where this has become quite regular occurrence. there has been quite some fighting/controversy over what about see: bitcoinwiki []. while the target interval and block size limit can both adjusted some extent there hard limit imposed the infrastructure which the network operates that cannot exceeded, attempting allow larger blocks than this limit can catastrophic for the network. decker and wattenhofer ... denial service/empty blocks another factor, that strangely mostly overlooked all the debates over the fact that there minimum block size. that miners can mine empty block block with single transaction it, even there are thousands hundreds thousands 'uncleared' transactions waiting the system enter block. this not just implementation detail, but rather part how the system works, setting minimum number transactions per block not something that could properly enforced, and even could miners could just generate transactions their own meet the minimum. few reasons miners might mine empty blocks: attack the system, hold ransom, otherwise make political statement. gain mining advantage. even the worst points where over unconfirmed transactions were pending the network, some miners were still mining completely empty blocks blockchain.info long miners can this there the possibility that service can denied simply mining empty blocks. while there were some arguments the past that the network could just refuse empty blocks (for instance) the reality that this problematic opens other possible ways attack the network. what certain that any coin that scale larger and succeed the long term needs address this design flaw. sybil attack attacker can surround another target node with only nodes controls then can prevent the target node from seeing the true blockchain, and feed only blockchain his own the target. this, however, more something for average, impossible course for them actually come fixed interval. gulden every minutes, for bitcoin every minutes. there small but not negligible speed/resource advantage had for miners who not add any transactions their blocks. for stalled blockchain people who implement blockchain based systems aware of, rather than serious underlying issue with blockchains themselves. more depth information the concept can obtained the following paper: douceur stalled blockchain there exists the possibility for blockchain stall, the difficulty driven too high, followed sudden absence miners the existing miners may struggle even completely fail find new blocks. the effect this can range from major inconvenience the best case, death spiral the currency the worst case. what has been tried far, and how has failed various attempts have been made various virtual currencies attempt solve some the above problems. there time space, nor necessarily productive enumerate talk about all these, but the ones that consider more relevant are briefly discussed below. note that this intentionally kept brief, that lot details are simplified and/or intentionally left out they are not deemed relevant this paper, the below not comprehensive and should not read such. alternative hashing algorithms relatively common idea the virtual currency world use different new hashing algorithm. the idea that having unique algorithm that other virtual currency has used before you are longer susceptible and that because all hash rate for this algorithm pointed your coin attacks are harder execute there not large surplus hash rate that can easily rented bought. this, course, does hold true extent, can seen with litecoin which initially introduced the scrypt algorithm, and though there have been multiple other coins released since that also use scrypt has managed for now retain enough dominance scrypt hash rate that attack would incredibly expensive pull off. however, the exception does not prove the rule, litecoin was one the earliest virtual currencies fork from bitcoin and managed gain large market share/value and hash rate before virtual currencies became well known they are now, and before they were well researched they are now. when some better thought out and implemented than others, which might said more based wishful thinking than any sound reasoning. perhaps because how easy do, and how easy market people with little understanding big change. the pool suitable hashing algorithms the computing world rather small, this often means inventing new algorithm, process that difficult correctly. least this what people like think. with bitcoin itself. alteration block target litecoin was its infancy there were fewer people with the knowledge required execute attack and less financial motivation there was lot less capital being thrown around. this 'early mover' advantage, therefore, means that the same can't necessarily work for other virtual currencies, and real world experience has shown that indeed for most doesn't. there are several other problems that new algorithm brings which need considered: the pool existing hashing algorithms that have been verified randomly distributed and secure small and almost all not all them have already been used one more coins. picking existing hashing algorithm from existing computer science literature that not yet used for hashcash (back []) based virtual currencies impossible know for sure how much existing hash power out there. virtual currency could have users mining using cpus gpus with users all under the belief that their funds are secure, meanwhile attacker who has secretly obtained asic, fgpa botnet could out mine them all with ease and perform one multiple attacks. the only way ensure this does not happen develop asics especially for the virtual currency rapidly possible something which huge expense and impractical for most coins. inventing brand new algorithm, the new algorithm could have flaws that can exploited. the hash not completely randomly/evenly distributed for example attacker could manipulate the input blocks gain advantage. flaw were found attacker could exploit hash significantly faster rate than anyone else. make new hashing algorithm that proven reasonably secure and randomly distributed proper way huge undertaking one that usually involved multiple experts over large period time something out the reach most not all virtual currencies terms budget and practicality. alteration block target another very common idea that seen among virtual currencies the idea using faster block target than that bitcoin which minutes. there are two main arguments that are usually given for this: assuming the same block size limit more transactions per second can processed blocks occur more frequently. allegedly solving the average time user has wait have their transaction confirmed lower blocks come more frequently. skeincoin, usually qubitcoin etc. done competition format involving peer reviews from multiple experts. alteration block target these arguments hold true extent, the faster user's transaction enters block the less likely users/merchants are resort trusting -conf transactions. block every minutes instead every minutes does imply four times the transaction capacity limit. however, there are limitations how far this can pushed; block takes certain amount time propagate all nodes the network based latency between the nodes, the time takes verify the block before can passed on, and the time takes transfer the data. this time fluctuates depending the cpu speed nodes, the bandwidth between nodes, the number nodes the network and various other factors. more in-depth analysis decker and wattenhofer []. long block propagation times can have very negative consequences for the network; the best case can lead higher orphan/fork rate which turn can lead centralisation mining with likelihood this increasing the propagation time rises, the worst case the propagation time can start exceed the block target which point the entire decentralised network can begin splinter and consensus breaks down. comfortable margin should allowed that occasions where the network operates slower than normal problems not occur result. more frequent blocks also mean lower difficulty target per block and therefore lower security per block, combined with the increase forking this means the number confirms users should wait for much more than the recommended that users should usually wait for bitcoin transaction. another side effect with faster block times the increased overhead all the extra header data. while sounds like small thing the size few million headers quickly starts add and bloats the blockchain size, this can have very negative impact mobile spv wallet users that have fetch all the headers. can also have impact people trying use full nodes more hard-drive space required and longer chain download, inevitably this means less full nodes are available which turn has further detrimental effects the network. sadly many virtual currency authors have opted for faster block targets than this, makes for good story sell and good press their currency can make claims such "we can handle many transactions per second visa", what adds this problem that the problems are not immediately obvious users, long the network only receives small amount transactions per block the propagation times will remain fast will appear everything works fine. only later the currencies life if/when the transaction volume grows will revealed that the claims are essentially bogus. this not say that minutes the optimal time and that there room for changes all, gulden operates with .-minute target which depending who you ask. out lack deep understanding the problems involved, for more nefarious reasons deception. which the case for most virtual currencies other than bitcoin. either proof stake good compromise. minutes gives faster -conf and more regular confirms without massively increasing the number confirms user should wait for and leaving enough room that propagation times should not become issue, though with less margin for error than what bitcoin has. belief that there not room lot lower than this, minutes should still okay, below this starts head into dangerous territory cases where the network operates slower than normal and anything below minute disaster waiting happen. any block target faster than minutes should come with technological advances that improve propagation time order sustainable, and even minutes propagation improvements are definitely the agenda for future gulden development. proof stake popular solution that many virtual currencies have switched proof stake. proof stake similar that replaces the hash algorithm with different one, however goes one step further and instead relying solely raw compute power instead involves unspent outputs part the hashing process. i.e. order mine miner needs own certain amount coins for the currency question, with the chances successfully mining block altered some way the quantity coins and sometimes other factors. the surface this sounds like fantastic solution, few the supposed benefits: attacker would need all staking coins instead computing power perform attack. attacker disincentivised from attacking, why would you attack coin which you hold significant stake. more energy efficient. currency controlled people with vested interest it's health instead miners that only want profit. however upon closer inspection, becomes apparent that this not good sounds. not all these claimed benefits hold scrutiny and pos suffers from various new problems its own. some the major ones are addressed below. ... the 'unlocked wallet' problem problem that most pos implementations face that order stake the private key needed, thus the majority pos wallets allow (or require) the user leave their wallet unlocked state with all private keys sitting unencrypted memory. this makes users pos coins more susceptible attack and theft coins via remote exploit well trojans/malware etc. the ssl age the coins commonly plays role. heartbleed style attack for instance. proof stake ... the 'nothing stake' problem pos has potential flaw that has been described the 'nothing stake' problem, commonly misunderstood and therefore many think myth. sadly this not true. essence the problem follows: distributed consensus has real concept 'the present' only chain that constantly moves forwards with each new block representing step forward time, relies the concept work move the chain forward manner that emulates time, unlike the real world the virtual blockchain world possible back into the 'past' and rewrite history, creating new different chain that consists more work than the original. ignoring various possible flaws/attacks this works because miners use real world resources order build the chain, build new attack chain would also require real world resources and the attack were succeed the miners who built the first chain would lose the value they earned exchange for the resources they expended. pos, the other hand, makes use virtual resources secure the chain, building second chain can done with the exact same resources that built the first chain, the second chain succeeds the miners who mined the first chain only stand lose the profit they made but their resources are still there, nothing has been expended. and this where the phrase "nothing stake" comes from. due this there very little incentive stop even honest miners from mining multiple chains, and for attackers the incentive course even greater. ... bribing due becomes possible for attacker bribe otherwise 'honest' miners participate their attacks, paying the miners slightly higher fee than they would earn otherwise. ... stake grinding there are many different ways implement pos however one thing that they have common that there needs selection process competition process via which the person people 'mining' each block selected, this process needs take place deterministic and distributed way must draw the blockchain history some way determine this. the two common implementation methods are: which discuss elsewhere e.g. attack. time travel not yet possible. even multitude chains. least theory, though there may some hurdles practice. many them frustratingly complex making them difficult properly analyse, what amounts 'security obscurity' where proof stake select eligible miners via deterministic 'lottery' like algorithm, where the blockchain acts 'random' entropy and winner (or winners) selected using algorithm based this entropy. let eligible miners compete mine hash for the block, regular pow like manner, with their stake giving them 'discount' the difficulty the hash that they need find. this process becomes the obvious point for attacker try and find exploit advantage. stake grinding one such flaw, which works follows, attacker uses processing power repeatedly alter/generate vast amount 'alternate' histories going back one more blocks, until finds one for which his stake will win more often, attacker can generate multiple alternate chains this manner for 'free' limited only his processing power. worst one party does this allows that party the potential gain huge advantage and thereby attack the chain desires, best all miners this and the pos has now essentially degenerated into somewhat difficult use and erratic pow that best 'as good' pow but realistically worse not designed operate this manner. ... quantity staking coins attacker only needs currently staking coins, not all coins the network, impossible tell how many coins are actually available for staking and thus impossible tell how hard for someone get >%. due many users don't stake stake erratically reducing the overall security the coin whole. ... use old private keys related the problem that the private keys wallets now hold value even after the wallet emptied. use example, assume have the private key for address put coins into this address and leave them there for two weeks, then send them exchange where swap them for euros. the assumption this point that the account empty, therefore can longer stake using the coins longer belong but the recipient the transaction. unfortunately this only half true, while the present the account empty the past not; therefore attacker can, after selling his coins for euros, rewind the chain point where still owned the coins and proceed try stake new longer chain, one which the sale the coins never takes place... attacker might use further aid his chance success this case. the worst part, however, that need not even the attackers own coins the above example, people tend careless with the security once again revolving around time which important and difficult issue distributed computing. proof stake things that they are longer using, and also are unlikely understand care that their empty accounts may still have value attacker; such they are unlikely maintain proper security erase old wallet copies that held money the past but are now empty. attacker can gain access such wallet they can use this perform attack while expending almost upfront resources their own. ... stake build attack most pos algorithms implement concept called 'coin age' whereby the longer output has gone unspent the larger its staking weight becomes, the reason that this usually done is: claim that this solves because 'coin age' now the 'something stake' these claims are however dubious. claim that this makes mining more fair that people with fewer coins have larger chance eventually staking, thereby allegedly avoiding situation 'centralisation' whereby the 'rich' generate more income staking and eventually come dominate all coins result. that users can only log occasionally stake instead trying work constantly, working around the problem described here: unfortunately while 'coin age' sounds like nice idea, and some the stated benefits are nice, introduces unexpected flaw into the system. worth remembering that order perform attack attacker does not need out mine the system constant basis, but only for period time long enough carry out the attack, attacker who ordinarily would only have the hash can temporarily somehow gain larger weight can perform attack regardless. coin age unfortunately allows exactly this, carefully creating several addresses and then leaving the coins them build weight attacker can slowly 'build up' his attack capacity and then wait for the right moment attack. second possible problem with coin age that users are deterred from using their money they they lose their coin age and thus cannot stake, often argued that this leads situation whereby all users pos coin 'hoard' their coins leading poor liquidity, poor distribution and ultimately undesirable currency. ... problems with spv wallets another relatively large problem with pos that not possible verify the validity block without the full chain history. the chain history required see the stakers signature actually valid and/or eligible the the worst case the old wallet large exchange for instance. specifically technical problem but economic one, however the case blockchains the two overlap. not combined pos/pow winning one. this has the side effect that spv wallets, the wallet implementation used most lightweight mobile wallets can not used conjunction with pos. order have functioning mobile wallets for pos based coin necessary make use and/or other potentially not desirable trade-offs. combined pos/pow some coins like peercoin combine pos and pow the theory being that this makes the coin twice secure. however, reality, this doesn't hold true, the problem that the pow and pos miners are competing with each other generate blocks. this, turn, means more orphans and fewer profits for miners, which means reduced hash rate. this best means the gains are much less than expected and worst means that actually makes the security worse. multiple pos blocks row common sight then only pos required perform attack, and vice-versa multiple pow blocks row common sight then only pow required perform attack. short instead being strong both; instead only strong the weakest the two, thus opening the coin more attacks and not less. multi-algorithm another concept implemented some coins use multiple hashing algorithms instead just one, miners the different algorithms compete mine blocks, with the difficulty for each algorithm adjusted independently when blocks are found attempt balance things such way that each algorithm finds blocks. though there are real papers that provide thorough analysis the supposed benefits this the claimed benefits from proponents tend follows: improves decentralisation. reduces the impact 'jump' pools block times. improve blockchain security more overall hashing power available, five algorithms are five times the hashing power. various other claims, many them rather outlandish. while this sounds good paper, when examined closer seems these claims don't really hold up, non-exhaustive list problems: taking quick look block explorer for peercoin shows cases where more pos blocks are mined before pow one various new pos attacks like grinding become possible combination with normal pow attack. multi-algorithm overall hashing doesn't actually increase. the reason for this follows, the incentive for miners mine coin financial gain, usually external currency e.g. selling the mined coin immediately the market for usd. when there algorithm consider the amount hash power will reach equilibrium based the price people are willing pay whereby mining profitable for the miners, otherwise they would stop mining. when you introduce more algorithms; for example, introducing more algorithms make total, the price people are willing pay not going magically increase. the result, therefore, that for each algorithm the price people are willing pay will become x/, miners the original single algorithm will earning /th what they earned before meaning that all likelihood /th the hash rate will remain and the rest will stop mining, likewise for four new algorithms each will attract /th the hash rate they would the coin used only that algorithm, leading situation where the equivalent hash rate the same just one algorithm were used. difficulties 'balancing' the algorithms. people often make the mistake assuming that the quantity hash mining blockchain the measure what secures it; this understandable mistake half true more hash is, course, more secure after all. however the truth bit more complicated, the true measure blockchains security more along the lines 'network hash rate for hash algorithm total worldwide available hash rate for algorithm' i.e. our network mined hashes second makes big difference whether there only exists the world the capability mine hashes second whether there exists the capability mine hashes second, the latter not being very secure all. for 'normal' single algorithm coin like bitcoin, this distinction not that important. only matters that the network has much hash possible, the more hash the more secure the network always accepts the block that adds the most work the chain. however, once introduce multiple algorithms the distinction becomes important. the network needs able deterministically pick between blocks mined the three different miners and this required decide which most beneficial for the chain. the block mined hashes second, the block mined hashes second the block mined hashes second the algorithms all have different performance characteristics longer enough simply pick the 'largest' hash instead the optimal way decide take max(/ otglobalhashrate(a) otglobalhashrate(a) otglobalhashrate(a) sadly this impossible even for human determine for any given point except with increased orphaning and other loses explained the following points that could actually lead loss hash rate. where totglobalhashrate the total hash rate that exists for this algorithm the master nodes time, never mind deterministically reproducible way with the world constantly changing. and compromise made, static weighting assigned code each algorithm and max( staticwa eight(a) staticw eight(a) staticw eight(a) used decide, unfortunately depending how accurate these weightings are best leads inefficiencies the system and worst opens the system easier attack. users also tend perceive too many blocks going one algorithm 'imbalance' and therefore developers tend try weight the selection such way that all the algorithms get 'fair' share the blocks; unfortunately, this further weakens the security the system now the selection criteria for blocks has become matter 'perceived fairness' opposed 'which block actually secures the system more against attack'. more attack vectors. for each algorithm added there are now more attack vectors the code, five times the hashing algorithms which find weakness, more complex difficulty adjustment code which find weakness etc. master nodes dash has introduced 'instant payment' that supposedly secure, uses system 'master nodes' handle the instant payment. the 'master nodes' act extra control layer top the network, communicating among one another. the problem that order function these 'master nodes' must either act centralised way must solve the same problems that make blockchain necessary the first place. follows reason and speculated that there are likely variety ways which such system can attacked, however, have yet find proper analysis showing the details necessary determine this. for the sake brevity, won't into much more detail this concept except say that the lack proof that master nodes can fact function claimed enough rule them out serious solution for now from gulden perspective. checkpoint server many coins ourselves included, have resorted checkpoint server help prevent double spends. this extremely effective method, having checkpoint server run set depth possible prevent attacks any transaction that has block depth beyond the checkpoint, making these transactions safe from double spend. there are however some downsides the system: world/universe. not always picking the best block and thereby not obtaining optimal network security. one the weightings incorrect then attacker can gain huge advantage focusing his attack mainly that algorithm. blocks for instance. difficulty adjustment algorithms the checkpoint server compromised, the person running has ill intentions the checkpoint system itself can misused help perform double spends attacks; essentially cost the attacker. other malicious uses like transaction censoring exist. some have concerns that government authority could therefore force the developers censor transactions. because this and its centralized nature, use checkpoint server may render coin illegal and/or subject further regulation some jurisdictions. the checkpoint server centralized point failure and can attacked brought down disrupt the network. while this works well solution for -conf more and can used ensure that larger targets like exchanges are operated safely from attack does not provide solution for regular users who need faster confirmations, users who don't understand the risks involved. despite the downsides see running checkpoint server absolute necessity for any smaller virtual currency this point, any small virtual currency that does not this not acting responsibly and putting their users large risk, however hope can remove our checkpoint server the near future and this one the primary purposes this paper. difficulty adjustment algorithms many coins ourselves included, have resorted increasingly advanced difficulty algorithms try keep the block times more stable the face jump pools. have made great progress here with our own difficulty adjustment algorithm which has brought out block times which were previously very erratic into much more stable/controlled state. this algorithm incorporates several heuristics help improve prediction capabilities well fallback mechanism that detects block taking too long and lowers the target difficulty thereby reducing the effects despite this success, still not stable would like, ultimately there are limitations what can achieved. difficulty adjustment algorithm attempts predict the future based information that imperfect and thus will always wrong some instances. this can seen the fact that still, have the occasional block that ends taking minutes instead the assuming you are willing accept the decentralised aspect it, and depending the depth the checkpoint code name delta, some statistics the improvements can seen here: nlgstats.nl []. even coins like litecoin with far more hash power their disposal struggle keep their block times stable what ours are now, with their blocks per day wildly swinging between and cryptoid.info this difficulty drop done careful manner that cognisant the maximum block drift time allowed, avoid any consensus issues. .-minute target. while complete accuracy obviously never possible due the statistical nature the process, the larger problem the imperfect timestamp information the blocks which self-reported the miners (see ..) and subject fairly large allowance for adjustment either forwards backward time, this leaves little room for further improvement and huge usability problem. proposed solution many the problems above after much consideration the various issues above, and much trial and error, have come with what consider the most viable/ideal solution the various issues above, least many the issues possible. belief this represents giant leap forward the area decentralised virtual currencies. this solution being implemented for gulden our next release which due out shortly after this paper and where the solutions presented this paper have been trialed. pow improved successor pow ... the naive/basic concept despite the various problems listed with pos and combined pos/pow the core idea behind pos interesting/enticing one, and surprise therefore that has captivated many people. though the current ideas/implementations involving are flawed various ways, this doesn't mean that the idea itself not good one; perhaps just needs applied differently. after much thought the issues involved, i've come with alternative way re-use this idea different way, one that brings more benefits and fewer problems. pow works follows: there are two distinct class block generators the network; pow miners and currency based generators who will from here referred witnesses. mining blocks done pow miners the usual manner that everyone used from pow systems. when miner finds block submitted the network. nodes validate, accept and relay the block usual however does not yet get added the tip the chain. drastic improvement from before when had times hour blocks (for instance) but means perfect. the best times, utterly wrong others. code-name, prime for those who have been awaiting it. involving the stake that users the system have the process securing the system order better emphasize the role, they play the system. pow improved successor pow this block this point what will call pre-witnessed state. when receiving pre-witnessed block eligible witness will sign the block using his private key converting into witnessed block. the first step witnessing involves adding additional data the block, this includes witness timestamp any additional transactions (subject the existing block size limit) and transaction pay out the witness fee. the witness then attempts sign the block. soon valid witnessed block created rebroadcast the network. once peers receive witnessed block they add the tip the chain usual and everything proceeds normal from here, pow miners attempt mine new block top the new tip the chain, and the cycle repeats. the above relatively simple change how things work currently, however has larger and more important impact than one might think first read through. below the key impacts the system: witnesses can add transactions empty non-full blocks and get fees for it. unlike pow miners, witnesses must actively hold portion the currency and result they have vested interest healthy network; this acts additional incentive keep witnesses honest. witnesses are therefore highly incentivised add transactions blocks they witness whenever possible. this means that the network will almost always able operate full efficiency terms transaction capacity/throughput and will not hampered empty blocks cases where transactions are waiting added blocks. like legal document that has been drawn but not yet signed constant-time; near instant process, near instant possible. allowing for massive improvement acting countermeasure which includes also the transaction fee for any transactions added the witness. manner that can best compared similar existing pos systems, except using witness selection system that has some unique properties including: constant time, minimal latency/delay, deterministic note that isn't really necessary rebroadcast the pow part the block peers that already have it, only the additional witness portion needs broadcast. there additional overhead here, the block doesn't have sent between all peers twice. true that empty blocks are still possible, but would require both the miner and the witness participate not adding transactions. for both them chance manage mine the same block, without conspiracy among huge majority miners and witnesses, the probability this incredibly small. pow improved successor pow when witnessing block pow miner can longer immediately mine second block that follows this one, necessary have witnessed first. result selfish mining longer feasibly possible without controlling substantial percentage both the hash rate well coins circulation. this also provides good resistance toward private side chains attack pow miners becomes incredibly difficult. achieve probability controlling specific block regular pow coin one 'merely' requires the hash rate. using the formula (x) (y) can see that with pow achieve chance controlling specific block approximately the hash rate well the coin supply hash rate and coin supply coin supply and hash rate required. this substantial increase overall network security, even when factoring likely drop pow hash rate due the reward for witnesses. see appendix page for further analysis this. this point the question self-interest becomes relevant i.e. whether somebody with between and the coin supply going attack network which they themselves hold such large stake. attackers are likely disincentivised from attacking the coin some extent well. the practical implication here that even transaction with only confirmation pow coin can treated relatively secure and confirmations incredibly secure standard pow coin where least confirmations are generally considered desirable. the level security here displayed further appendix page which produced using modified source code that taken from the satoshi whitepaper (nakamoto []) the source code also displayed appendix page course, nothing perfect, and any system especially its naive implementation comes with least some down sides, the case pow: more complex code base. the extra code implement pow does introduce some extra complexity order have block witnessed the miner will first need broadcast the network which point everyone will know about it. while true that miner could theoretically witness his own blocks will detail later why this not realistically possible. for the same reason above, and with the same caveat. actually little the intersection disjoint probabilities and equal the probability multiplied the probability assuming well-distributed coin, enough coin holders willing participate the witnessing process and few other things that can guarded against proper client implementation enough connected peers that are not spoofed for instance. thereby helping reduce instances ... pow improved successor pow into the system, and extra complexity always means more room for error. however the added complexity not great, the functioning the system still simple and elegant enough that can properly reasoned about and evaluated, not feel like this cause for concern. unlike for instance with some the pos solutions out there. extra chance blockchain stalling. having two types block generators involved the system means that there are now two possible points failure; the blockchain can now stall either due lack witnesses lack pow miners, however long are conscious this possibility not difficult design the system such way mitigate this risk. security risks for wallets that are witnessing with pos implementations, (..) witnesses need private key order sign and this can security issue not adequately addressed. this however something that can and addressed through proper system design which deal with elsewhere the paper. difficulties with spv wallets pos implementations have difficulty with spv mode for mobile wallets (..). pow partially inherits this problem; however unlike with pos this does not prevent spv implementation. spv nodes are capable verifying the pow part the block but not the witness portion it, due the witness algorithm requiring the full blockchain order calculate who the valid witnesses are. this adequate for them function secure way with the security slightly downgraded from fully validating pow node. worth noting that this 'degraded' security essentially worst par with what would have been for pow spv node and implemented right quite possibly still more secure than the pow spv node, though spv does not directly gain much from pow full verifying node not harmed either and the contrary still benefits. therefore necessary refine the process further try and address minimise some these downsides. ... the optimised/full concept there are several opportunities further improve the initial naive concept. opt-in participation usual pos implementations everyone the network able stake, this has some unfortunate implications. namely impossible tell how many coins are actively protecting the network e.g. coins that are cold storage, have been lost, are sitting which anyway the case with spv node. pow improved successor pow exchanges, whose owners never open their wallets, are otherwise not available. without the ability measure the total number staking coins becomes harder gauge the expense possible attack and thus impossible really know how secure the network any given moment. worse people who have intention staking might selected stake leading erratic block times result. improvement can therefore had changing opt-in system for witnessing, whereby only coins 'special' addresses can selected witnessing, the total number coins securing the network can then easily enumerated, suspicious activity monitored for and witnesses selected only from the eligible pool. time-based participation two arguments often leveled against pos that gives too much power large coin holders and that unlike pow (which burns electricity) nothing value "at stake" pos system. there expense staker when signs block what stop him from signing competing blocks? one way dealing this, which ties with opt-in participation above introduce time concept staking accounts. when placing coins staking account user can pick time period for which the funds will locked (similar how regular banking systems you have fixed period savings accounts), the user will unable spend coins from the account until the lock time has expired but will able stake, doing this the user now has something real "at stake" namely the liquidity his money. the time period factored into the equation determining the stake weight for the account, users who choose lock their funds for longer periods time will stake more frequently, this gives opportunity for users with fewer coins out-stake those with more coins, helping level the playing field some extent. this also beneficial for the network, users who are willing lock their coins for long periods time are more likely have the long term health the network mind and therefore are less likely attack the network, allowing such users stake more frequently the security the network therefore improved. for attacker succeed attacking the network would likely have lock his coins for long period time which not desirable for attacker and acts yet another obstacle for attacker contend with. finally with users tying portion their wealth for fixed term, the decrease the number coins that are liquid should bring positive impacts for the currency whole. users are unable rapidly exchange all their coins moments panic hysteria, this should lead slightly more stable market with currency that much less prone giant spikes and dumps price and attract users with more long term mindset. the reward well balanced and not excessive these the case 'follow the satoshi' style implementation. pow improved successor pow benefits can had without achieving the undesirable effect drastically decreasing overall market liquidity and absence users who actually use the coin day day basis. double-key based participation changing the staking address system use two instead one private/public key pair possible solve the security issue staking wallets. each staking address will have two keys associated with it, the first will call the spending-key and the second the staking-key. spend funds from the account signature from both keys required. stake only signature from the staking-key would required. the wallet can therefore keep the spending-key safely encrypted and leave the staking-key unencrypted allowing the wallet stake without any concern that might stolen; the staking-key stolen attacker cannot steal any funds, all can stake behalf the victim. this improvement should allow more users participate staking, and therefore beneficial network security. witness selection algorithm carefully adjusting the witness selection algorithm ways that might put potential attacker disadvantage possible improve further the security model and make attack even harder. there exist some other interesting possibilities that pow can offer, e.g. the possibility that witnesses could allowed temporarily increase block sizes certain situations help address high transaction traffic periods safe way and thereby address scaling, however, these sorts ideas are best discussed later will not into further detail them now. ... implementation details for gulden gulden will making use optimised version pow with the following details. witnessing will opt-in, users will create and transfer funds into 'witness account' order participate the process. these accounts will use special address scripts the blockchain that serve indicator the network that they are intended participate witnessing, special network rules will apply these addresses facilitate the process witnessing. more details appendix page witness addresses will derived from two key pairs instead one, the network will allow only normal spend operations with the first key and only special witness related operations with the second. thereby allowing wallets always witness blocks when their wallet open without exposing their funds any risk theft having enter password any point. spending-key remains encrypted memory, all other wallet keys normally would pow improved successor pow this also allows for set special backup witnessing devices/software ensure witnessing continues their wallet offline. this theoretically also allows for third party services that witness behalf the user, using their witness key. however the reward portion the operation can paid out any address, allowing such services take some all the reward fee, this along with the ease witnessing their own hardware/servers should ensure that witnessing service ever obtains overly large portion addresses. witness addresses will upon creation have fixed 'maturity' time period which set using future block number which the address will mature, the maturity period determined the user and must between the maximum and minimum period that the network allows, the network will not accept any spends from the address until such time the time period has expired however will allow the address used for witnessing during that time. the algorithm via which the witness selected will include both quantity coins well the fixed time period selection factor. thereby putting attackers disadvantage they would have lock their money for long periods time order compete with legitimate holders. minimum cool down period blocks will apply after signing block before address becomes eligible sign again, this ensures that even with large weighting user cannot dominate the network any significant way with single address. more details appendix page the weighting will slightly biased towards accounts with more coins and longer time periods such that address with coins would have higher chance winning any given block than two addresses with each would (given the same time period). this further penalizes attacker who order succeed with attack would require multiple addresses thereby reducing the impact his coins and increasing the expenditure needed order succeed. the algorithm will not implement any sort coin weight concept this unnecessary its functioning and would only introduce flaws. instead, the maturity period will allow those with fewer coins 'fair' chance compete opting take longer maturity period make for their lack coins. via custom script commands. month years, see appendix for more details. chosen match the same block maturity period that imposed pow miners. attack depth blocks for instance attacker would require least addresses, thereby splitting his funds thereby avoiding flaws like roughly pow improved successor pow the algorithm via which witnesses are selected will random but deterministic lottery style system, and not competitive system (like regular pow pos) the latter prone grinding attacks. more details appendix page witness addresses that have not witnessed for certain period time will temporarily removed from the pool eligible addresses and will required perform 'refresh' transaction (at fee) order become eligible again. this will prevent build non-participating systems that could cause the system stall. the block reward for pow miners will lowered from with the remaining allocated witnesses, thereby leaving the overall reward unchanged, this can potentially lead slight drop the overall mining power available for pow mining the network. only transactions included pow portion block will considered having confirmation, transactions witness portion will considered wallets having confirmations until such time subsequent pow block mined. for some purposes may worthwhile consider transactions the witness portion having confirmation, however, will not implement this concept yet something for consideration later date. spv wallets will also only recognise transactions having confirmation once they have been verified pow portion block, note that this anyway the case with normal wallets but for spv this for different reasons spv wallet cannot confirm the witness portion they don't keep full blockchain. due the fact that potential witnesses are only drawn from the last blocks and there fixed upper bound memory/complexity the process, may possible for some spv peers verify the witness portion well future; though more development still required that area and will not pursued for the initial launch. additional concept 'trusted peers' will also introduced into our spv wallets future which will aid with both this well general protection against sybil attacks (.). proportionate their weighting. the chaotic nature markets, and the effect this has mining hash rate isn't possible predict the impact with certainty. while the choice reward split here some degree arbitrary there are some overarching factors that determine the selection. maintaining high overall pow hash rate crucial the functioning this system the pow reward needs attract much hash rate possible from theoretically infinite ever growing pool global hash rate. the witness reward the contrary only needs high enough attract enough witnesses from finite coin supply participate, doesn't need attract infinite amount. overly high witness reward can also detrimental market effects like hoarding, the pow portion acts important means coin distribution and liquidity. more information why ... due pow improved successor pow the difficulty adjustment algorithm will make use the timestamp from the witness portion instead the pow portion enable better accuracy and remove from pow miners the ability tamper with the pow difficulty. more detailed explanation/analysis the witness selection algorithm can found appendix page ... analysis pow against the known flaws/attacks faced existing algorithms attacks (.) network resistance against attacks greatly increased, the point that -conf transactions are secure enough for most purposes. selfish mining (.) possibility selfish mining substantially reduced, essentially not possible. dos via mining empty blocks (..) difficulty achieving this greatly increased, essentially not possible. erratic/inaccurate block times (.) accuracy block times greatly increased time now controlled the pos miners and not the pow miners, which turn allows for better functioning difficulty adjustment algorithm. pos insecure private keys (..) private keys secured all times. nothing stake issue (..) substantial pow hash power involved, pow hash stake. pos stake buildup (..) coin age involved the process the system immune this. pos stake grinding (..) grinding can only achieved via mining new pow blocks, substantial pow hash rate involved grinding becomes infeasible. pos old private keys (..) old private keys effectively hold attack value, the amount pow hash power required perform attack with old keys would substantial. ... consideration new flaws/attacks there exist two new possible 'weak points' the system: the timestamp from both will used for block acceptance but the witness timestamp only for difficulty adjustment. pow improved successor pow the witness algorithm selects only one winner there exists the likelihood that times the winner will not available perform his witness duty. the obvious way address this introduce multiple winners into the system redundancy, this would more similar what other previous systems have tried, and unfortunately vastly weakens the system opening grinding attacks and other vulnerabilities. instead, rely the pow miners. when pow miners find block they not stop mining but continue attempting create competing blocks until they receive news witnessed block, each new block mined will randomly select new single witness this provides the variation required overcome stalling without introducing the vulnerabilities that come with multiple witnesses. ordinarily, there would concerns about how long this process might take. for example witnesses row were not present and each block takes minutes then have -minute wait, witnesses row are missing minutes etc. would seem that there potential here both for accidental stalls well perhaps deliberate dos attack. however, our difficulty adjustment algorithm; delta, not ordinary and already has special mechanism built into safely lower the difficulty cases where block times are overly long. this assures that the wait becomes longer the quantity pow blocks mined will become more and more frequent, thereby minimising the delay such situations. this reduces the stalling worst minor inconvenience instead major attack vector. the opt-in nature the system, the various mechanisms that make having large percentage chance being selected difficult/expensive, well the fact that non-participating witnesses are regularly 'pruned' from the system and need pay fee re-enter the system. all work together ensure pool the 'fittest' witnesses and would make any long-term sustained attempt achieving dos attack this way impractical and costly. the selected witness does not need perform any expensive work perform the signing, the possibility exists for witness attempt dos attack the network signing multiple blocks all with varying transactions/data and sending them out different peers. worth noting that this not specifically unique pow but could also conducted normal pos coin simply using more powerful hardware like asic miner. the case here that existing flaw has just been made bit more obvious. thankfully, not overly difficult deal with this situation simply putting some network rules place. clients should not request witness blocks when the headers contain the same base pow block those header/block they have this subtle detail turns out one the important puzzle pieces that make this concept possible, and the lack this feature previously quite possibly what prevented pow from appearing sooner. ready received. clients should not forward multiple headers containing the same base pow block. clients should assign misbehaviour score for each subsequent header containing the same base pow block. clients should eventually ban peers after multiple such blocks. the case where different nodes end with different witness block, the network will quickly come consensus again when the next pow block mined. secure -conf solution (code name prime ii) the existence the "two-layered" network brought about prime allows for some further interesting possibilities. the most important which potential mechanism whereby secure -conf transactions can had, price, where desirable. the mechanism would work follows: occasional brief forking part how blockchains work should not cause for alarm. let evaluate the chances success, order succeed attacker will need the following: the probability this brings valuable additional capability the network, this capability opt-in and comes price, transaction costs for secure -conf transactions will always higher than those normal transaction, however for those who require the functionality the cost would worth only specific subset transactions needs absolutely instant confirmation. addition the obvious benefit that secure -conf there are some less obvious benefits, one which the new possibilities brings terms network scalability which (as mentioned earlier this paper) very hot topic the moment and very important problem solve. conclusion this paper has looked various the challenges faced gulden well other virtual currencies, the strength and weaknesses the blockchain its current form well the various solutions that have been offered some possible ways counter these weaknesses. have looked both the positive aspects these solutions, where such aspects exist, well their shortcomings. based this have proposed exciting new way forward pow, which consider the next generation step, building top these solutions something that while simple description manages not only significantly improve many the weaker aspects traditional pow blockchain but also drastically enhance the network security; doing way that feels natural and does not introduce massive complexity new failure modes. have also briefly touched some exciting future possibilities that pow enables, including way allowing secure -conf transactions enabled the network. the suggestions this paper will implemented into gulden over the coming months starting first with the pow and secure -conf following shortly afterward. appendix witness selection algorithm the most critical part pow the algorithm that determines the selection the witness for mined block. the process has the following requirements: needs random. needs deterministic, i.e. should not rely additional network communication. should resistant grinding attacks, not possible gain mechanical advantage. should not possible gain any advantage having multiple accounts. should not possible predict the winner advance. should light resources possible. should lead few forks the blockchain possible. needs fast and efficient and should not exhaust huge amounts memory, should introduce little delay into the system possible. have discarded the possibility hashcash (back []) based system this fails meet criteria and aside from hashcash the remaining possibility some kind random selection using the blockchain seed, existing computer science literature has algorithm that perfect for the task, used mostly genetic algorithms and known 'roulette wheel selection' (back []) perfect fit for the task. see image page for brief understanding how such selection works. the algorithm will thus work follows note that all program arithmetic done using appropriate sized integer types and appropriate basing keep precision while avoiding floating point other inprecision that can source indeterminism between different architectures.in this paper not deal with this aspect things keep the math simpler follow and understand: valid witness input any unspent output constructed using special witness script, that included any the last blocks the chain. witness inputs are subject the following restrictions. must locked for minimum blocks from creation. (approximately calendar month) must locked for maximum blocks from creation. (approximately years) must have minimum coins and minimum weight constant time requirement scan backward the chain does not prohibit pruning the utxo. subject adjustment future. witness inputs that have been newly created, are the result previous witnessing operation within the last blocks are excluded. witness inputs are inserted into the array deterministic fashion, first age and second the quantity and finally block order. witness inputs are assigned weighting based their quantity and the amount time (in blocks) that they are unspendable. the weighting designed such way that most cases more financially beneficial for user gather more their coins into single account than would for multiple accounts and needs accomodate the fact that larger accounts are more heavily penalised the block wait than smaller ones are order this, there are many possible weighting formulas that could used for this each with various pros and cons under various situations (large coin participation, small coin participation and forth. the formula settled for gulden is: eight ((quantity+(quantity /))x ime see appendix page for the rationale behind this formula. second pass through all values done, any inputs that are older than eight max(( otalnw eworkw eight are removed from consideration. third and final pass through all values done, any witness whose weight exceeds the overall weighting taken from the second pass, reduced this weighting. the sha hash the pow block converted -bit seed integer. the use the normal scrypt pow hash for this deliberately avoided prevent any theoretical manipulation that could attempted means varying the difficulty within certain ranges. roulette wheel selection then done select the winning witness from the array, with the spin always starting from allow for more efficient calculation. the case identical age the case identical quantity this set the user address creation. ideally until least network weight keeping mind the maximum weight rule. this important diminish the effect attacker can have the network actual code implementations, calculation must rebased avoid floating point and therefore the implementation bit more complex than this, however left here for clarity. this prevent stale inactive witnesses from stalling the chain repeatedly. this change affects the final overall weighting the actual result will slightly different than but this fine attempt made adjust for this. even though this unlikely and the only legitimate case can think when the difficulty gets very high. algorithmically just take the modulus, seed%t otalw eighting and then binary search the array for the appropriate place. this meets all our requirements, completely random and deterministic there opportunity for grinding there maximum cap algorithm complexity and resource usage, splitting coins into multiple accounts always give less overall weighting thereby weakening attackers, impossible predict winner advance the block arriving, there almost time delay accepting witness. only one witness selected forking takes place this part the algorithm. long take care avoid floating point the pow generation, but address that elsewhere the paper. except appendix block format version previous block hash merkle root hash time *** bits *** nonce *** coinbase transaction *** transaction *** transaction appendix attack probability [naive] pow combines regular pow along with the witnessing power coin holders, way that should lead minimal drop pow hash rate while the same time substantially enhancing the blockchain security and also bringing some other desirable properties the table. difficult grasp how significant the change is, best have proper visualisation. illustrate this i've taken code from nakamoto (see appendix c), modified slightly for our purposes and run generate visualisation page for this process, using the following figures, taken the time writing, they are not accurate but for our purposes are more than sufficient: gulden network hash rate (scrypt) gh/s. the cost rent scrypt mining rigs, gh/s for four hours rental i.e per gh/s. the cost purchase scrypt mining rigs per gh/s. gulden price nlg gulden availability the largest exchange, nlg. gulden circulation biased toward pow. core equation unchanged. all prices for this appendix are usd. original the following assumptions are made: only coin holders participates witnessing (so total coins), quite likely but impossible say for sure that real implementation more coin holders would participate, which would further increase the number coins required perform attack and therefore further increase the costs attack. will overlook the possibility renting hash, attacking the current hash rate with rented hash would simply too cheap even compare against ($) but also because for larger hash rates (or coins with different algorithms) rental may not option more constructive ignore rental here. though should noted that the fact that rental attack possible against gulden makes the case for pow even stronger, when rental attack considered the gap between pow and pow even larger... will assume reduction network hash rate for pow accommodate the fact that portion the reward will pos miners, there are legitimate reasons believe that the drop hash rate may actually less than this. however, for the sake comparison want make things bad for pow possibly can. will ignore the market effect that buying larger amounts coins, order, attack pow would have the coin price. this would drive the cost acquiring further coins for the attack, well affect the network hash rate. therefore the cost estimates for the various pow attacks, especially the ones involving larger amounts coins are likely vast underestimates and would cost drastically more reality. attack probability conclusion: the chart page clearly illustrates that even with the comparison done favour pow every possible way, pow vastly outperforms pow terms security for any given attack price, and that further even scenario where vastly more money thrown attack pow continues offer protection where pow would not. even pow remains secure while with only possible gain complete control over the equivalent pow network. even hash rate and coins there only risk confirms and with few more confirms low enough risk good enough for most transactions. though currently protected against using checkpointing. hash rate ultimately dictated the market price the coin. largest exchange has only coins available for sale the moment, any purchase more than coins likely have measurable impact the market price the more coins are worth the more network hash rate attracted. and this actually underestimate the price this many coins would really cost far more acquire. network for the same attack price point attack the pow network, the pow network yields less than chance success the attacker, leading what terming 'secure -conf' transactions for most purposes and confirmations being reasonably secure for all but the most sensitive transactions. appendix analysis attack probability with grinding the astute will notice that have course ignored possibility above. instead opting for e.g. the pow hash and the witness coins attacker could instead attempt grinding attack. could aim have four times the network hash rate and the coins total cost somewhere around mining times the pow blocks will give him four chances being selected the witness for each block instead the probability follows: (signingblock) (notsigningblock)numattempts (-signingblock) (.) roughly chance signing single block, instead the his coins would normally entitle him to, however substantial expense compared plain attack. while grinding possible extent with pow, resilient the point that not likely effectual when reasonable network hash rates are involved; this particular case the grinding attempt costs slightly more than the pow/% witness" attack and has lower probability success. which reality would likely cost even more. secure relative has always been, common for instance for bitcoin users refer conf 'secure' but the security relative can seen the probability analysis graph below. for the hash rate for the coins the costs, however, will fluctuate based all factors involved. coin price, witness supply, network hash rate and forth; may vary which the two cheaper any given time. where appendix attack probability analysis graph[naive] pow and pow attacks similar costs paired together colour for comparison $usd pow hash $usd pow hash $usd pow hash and coins $usd pow hash $usd pow hash and coins $usd pow hash $usd pow hash and coins $usd pow hash $usd pow hash and coins only pow worth evaluating beyond this point $usd pow hash and coins $usd pow hash and coins $usd pow hash and coins $usd pow hash and coins probability attack success $usd pow hash and coins number blocks with transaction biased favour pow. appendix attack probability source code the below code (borrowed and adapted from nakamoto []) calculates function attackersuccessprobability the chances success attacker has when attacking chain depth for probability for pow feed the percentage hash rate the probability, for pow use itness) itness). ignores that witness cannot witness various blocks row, further reducing the probability for each subsequent block well various other enhancements discussed the paper, therefore results are biased favour pow. double double double double pricepergh networkhashrate pricepercoin networknumcoins double double double lambda sum int networknumcoins hashcost slightly naive but still useful way. printpowattack [pow] hash "\n ++){ printpowattack percentagepow percentagepos pow percentagepow hash percentagepos percentagepow percentagepos "\n ++){ percentagepow percentagepos main printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack printpowattack appendix weighting formula the weighting formula plays important references nomenclature hashcash hashcash proof-of-work system used limit email spam and denial-of-service attacks, and more recently has become known for its use bitcoin (and other cryptocurrencies) part the mining algorithm. pos proof stake. pow proof work. pow proof work (or proof work squared). the name for our new system that achieves massive security gains multiplying together the security proof work and the witness signatures. scrypt cryptography, scrypt (pronounced "ess crypt") password-based key derivation function created colin percival, originally for the tarsnap online backup service. spv simplified payment verification, lighter/faster method used most mobile wallets. nakamoto witness the context pow witness holder the coin who places his coins into special time locked account and then uses these locked coins sign pow blocks valid. references back. hashcash, may hashcash/. url http://www.cypherspace.org/ thomas back. evolutionary algorithms theory and practice: evolution strategies, evolutionary programming, genetic algorithms. oxford university press, oxford, uk, isbn ---. bitcoinwiki. block size limit controversy bitcoin wiki. url https: //en.bitcoin.it/wiki/block_size_limit_controversy. blockchain.info. bitcoin blocks height blockchain.info/block-height/. url https:// blockchain.info. bitcoin blocks height blockchain.info/block-height/. url https:// cryptoid.info. litecoin explorer. url https://chainz.cryptoid.info/ ltc/#!overview. references decker and wattenhofer. information propagation the bitcoin network. ieee proceedings, pages sept doi: ./pp... john douceur. the sybil attack. revised papers from the first international workshop peer-to-peer systems, iptps pages london, uk, uk, springer-verlag. isbn ---. url http://dl.acm.org/citation.cfm?id=.. ittay eyal and emin gun sirer. majority not enough: bitcoin mining vulnerable. corr, abs/., url http://arxiv.org/abs/ juan garay, aggelos kiayias, and nikos leonardos. the bitcoin backbone protocol: analysis and applications, pages springer berlin heidelberg, berlin, heidelberg, isbn ----. doi: ./----_. url http://dx.doi.org/./ ----_. satoshi nakamoto. bitcoin: peer-to-peer electronic cash system. may url http://www.bitcoin.org/bitcoin.pdf. nlgstats.nl. nlgstats.nl, url http://nlgstats.nl/historical_ mining_stats.html. meni rosenfeld. analysis hashrate-based double spending. abs/., url http://arxiv.org/abs/.. corr,