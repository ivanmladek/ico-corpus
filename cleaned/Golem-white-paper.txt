the golem project crowdfunding whitepaper final version november table contents overview the golem project grand vision and core features golem ecosystem supply infrastructure demand for computing resources software microservices the first use case: cgi rendering long term vision: golem building block web golem network token (gnt) application registry transaction framework resilience roadmap brass golem clay golem stone golem iron golem future integrations crowdfunding crowdfunding summary budget and levels funding golem team managers key developers developers business development and communication overview the golem project grand vision and core features golem the first truly decentralized supercomputer, creating global market for computing power. combined with flexible tools aid developers securely distributing and monetizing their software, golem altogether changes the way compute tasks are organized and executed. powering decentralized microservices and asynchronous task execution, golem set become key building block for future internet service providers and software development. and, substantially lowering the price computations, complex applications such cgi rendering, scientific calculation, and machine learning become more accessible everyone. golem connects computers peer-to-peer network, enabling both application owners and individual users ("requestors") rent resources other users' ("providers") machines. these resources can used complete tasks requiring any amount computation time and capacity. today, such resources are supplied centralized cloud providers which, are constrained closed networks, proprietary payment systems, and hard-coded provisioning operations. also core golem's built-in feature set dedicated ethereum-based transaction system, which enables direct payments between requestors, providers, and software developers. the function golem the backbone decentralized market for computing power can considered both infrastructure-as-a-service (iaas), well platform-as-a-service (paas). however, golem reveals its true potential adding dedicated software integrations the equation. any interested party free create and deploy software the golem network publishing the application registry. together with the transaction framework, developers can also extend and customize the payment mechanism resulting unique mechanisms for monetizing software. golem ecosystem golem's business case boils down the fact that, due relatively recent technological advances, the market for computing resources can organized according entirely new principles. contrast, the compute market today dominated heavyweight players such amazon, google, microsoft and ibm, who leverage their market power and assets ensure hefty margins, resulting inefficiently priced compute services. luckily, the market not doomed function this way forever. with golem the supply computing resources based contributions individual and professional providers, combined with array dedicated software solutions via golem's application registry itself operating single and competitive market with nearly complete information market. scaling the compute market enabled golem requires onboarding three groups: suppliers computing resources ("providers"), task creators ("requestors") who submit their tasks computed the network, and course, software developers. these three groups comprise golem's unique, interdependent ecosystem. group golem features incentive participate requestors golem offers tools execute compute-intensive tasks. requestors get access affordable and scalable solutions, which combine hardware and software. providers golem combines and utilizes (almost) any kind existing computing hardware. hardware providers get paid for renting out their hardware. software developers golem flexible platform deploy and monetize software. software developers use golem distribution channel, associated with access hardware. supply infrastructure the supply computing power the network comes from providers. this could anyone, from individual renting out idle cpu cycles gaming pc, large datacenter contributing their entire capacity. providers have the incentive join golem because they receive payments from requestors for the completed tasks. course, golem's user interface will easy use, giving providers clear way set prices and decide what fraction their own idle resources they are willing rent out. demand for computing resources order reward providers for contributing their resources, golem needs attract requestors seeking additional computing resources. the market golem creates will highly competitive due nearly complete information, and the ease deploying tasks any hardware. this will not only make using golem simple, which will attract requestors highly competitive setup will also increase efficiency the market, very likely resulting much more comprehensive and advantageous pricing compared the existing cloud computing platforms. one important feature that golem's marketplace will enable requestors become providers: because most them will need additional resources only occasionally. they will able rent out their own hardware and earn extra fees. addition, financial aspects are not going the sole incentive use golem: one its key features will the availability diverse software running the golem network, accessible from the application registry. software microservices although some initial use cases (such cgi rendering) are going developed and implemented the golem team, essential engage other software developers develop their own ideas for golem applications. the number and quality such applications one the key factors golem's future success. for this reason, the application registry and transaction framework are among the most important features the entire ecosystem, and will front and central the development process. once introduced, they will provide developers with flexible and efficient tools deploy, distribute, and monetize software running golem. this going perfect solution for microservices and some the forthcoming decentralized applications (dapps), but could also become interesting way distribute existing proprietary and open source software. the first use case: cgi rendering golem alpha release: cgi rendering using blender public, follow the link test golem. cgi rendering the first and very illustrative case real golem usage. rather than using costly cloud-based services waiting ages for one's own machine complete the task, cgi artists can now rent compute resources from other users render image quickly. the payment from requestor (in this case, cgi artist) sent directly providers who made their resources available. addition, when the artist's machine idle, can itself accept tasks from other users. long term vision: golem building block web believe the future internet will truly decentralized network, enabling users securely and directly exchange content, without sharing with corporations other middlemen. accordingly, golem will useful not only compute specific tasks, but also bulk-rent machines order perform operations within self-organizing network. course, this will require the simultaneous development other technologies, many which have gained significant traction recent years. better data-sharing technologies are necessary, but taking into account the ongoing development ipfs/filecoin and swarm, the appropriate solutions seem within reach. eventually, the ethereum network will become more scalable, more efficient, and include fully functional network micropayment channels. once these technologies become available, easy imagine golem primarily platform for microservices, allowing users run both small (e.g. note-taking app) and large (e.g. streaming service) applications completely decentralized way. although ambitious, this vision seems the ultimate argument for golem's long-term potential. golem network token (gnt) the golem network token ("gnt") account core component golem and designed ensure flexibility and control over the future evolution the project. gnt created during the crowdfunding period (described this whitepaper) and, following the first major release golem, gnt will attributed variety functions the golem network. payments from requestors providers for resource usage, and remuneration for software developers going exclusively conducted gnt. once the application registry and transaction framework are implemented, gnt will necessary for other interactions with golem, such submitting deposits providers and software developers participation the process software validation and certification (as described the application registry section). the general conditions for using gnt will set the transaction framework, but specific parameters these interactions will possible define within each software integration. the supply gnt will limited the pool tokens created during crowdfunding period. creation the gnt and initial gnt account functionalities the golem network token token ethereum platform. its design follows widely adopted token implementation standards. this makes easy manage using existing solutions including ethereum wallet. maximum number tokens created during crowdfunding period: total: (%) crowdfunding participants: (%) golem team (%) golem factory gmbh (%) sending ether the gnt account will create gnt token creation, minting mining after the crowdfunding period. tokens will transferable once the crowdfunding successfully completed. the crowdfunding section learn the details and see how support the golem project via crowdfunding. application registry the application registry ethereum smart contract, which anyone can publish their own applications that are ready run golem network. the goal the application registry to: give developers way publish their integrations and reach out users decentralized manner; give requestors place look for specific tools fitting their needs; give providers full control over the code they run because the security concerns. since the golem network fully decentralized, also want the application registry driven the community. golem allows requestors execute the code application someone else's computer. this code sandboxed and executed with the minimal required privileges. but software bugs are everywhere, and once while people defeat sandboxes, manage execute malicious code host machine, and sometimes even take over. that's why can't rely only sandboxing. could try automatically evaluate whether not the code safe, but this literally impossible vide halting problem). the process code review and validation cannot fully automated and left the autonomous network. the other hand, impossible assume that one will ever publish malicious software run top golem network. solve these problems splitting application registry users into three categories: authors, validators and providers. authors publish applications, validators review and certify applications safe and trustworthy adding them their own whitelist. validators may also mark applications malicious adding them their own blacklists. providers are also given the right choose whom trust selecting validators whose lists are used the particular instance golem running their nodes. apart from that, providers may maintain their own whitelists blacklists. this gives each provider lot flexibility deciding exactly what software run, and what amount work put into software curation. what more, this system does not exclude any party, and there always room for new validators emerge. default golem runs using whitelist trusted applications. since empty whitelist problem for someone just trying golem out for the first time, will add number verified entries the whitelist part the initial distribution. provider can take advantage this mechanism, managing her own whitelist, simply using whitelists validators she trusts. the other hand, provider running computing farm may wish rely entirely blacklists. this option tailored for administrators dedicated machines, who want maximize their profits and who are willing ride the bleeding-edge. this scenario, blacklist used banish any known troublemaking applications. again, the provider can maintain her own blacklist, use the blacklists validators she trusts. transaction framework when creating something new and exciting, it's hard not impossible predict all the opportunities which the new artifact will suddenly make possible. golem generalized global supercomputer, and such, will doubt find its niche with vastly varied applications. they might need very diverse remuneration models. are not able design one-size-fits-all payment system for golem, nor will attempt force one upon application authors. when developer integrates her application with golem, she has the freedom decide which transaction model she implements, long compliant with golem's transaction framework. the transaction framework will take the form set requirements follow; basic requirements may include: entry the application registry; use open source and/or deterministic environment, such evm; community approval rating transaction model; use gnt for remunerating software and resource providers. are building the transaction framework top ethereum. ethereum gives expressive power, which much-needed when implementing advanced, trustless schemes. example transaction framework components: diverse payout schemes such nanopayments batching off-chain payment channels custom receipts payment software developer per-unit use software (per-node, per-hour, etc.) the future, this might evolve into community-reviewed template code used the implementation custom transaction models. also possible introduce more sophisticated components into the transaction model design, meet specific goals not related payments. for example: requestor escrow for tasks where higher level commitment required (high price because specialized hardware long running subtasks); the requestor may create two-party escrow account and require providers take part it. provider deposit: the requestor may require control some amount timelocked gnt. requestor deposit: the provider may accept tasks only from requestors who are control some amount timelocked gnt. registration task anchor for truebit-style conflict resolution fallback mechanism. resilience golem fully decentralized, open source network which resilient censorship, and free from single point-of-failure. consensus important for resilience and another reason why ethereum utilized for transactions, well replicating some shared state and metadata. golem tasks rely integrity and consensus mechanisms for deployment, task execution, validation, and transactions. naturally, golem inherits byzantine fault tolerance properties from ethereum. for task execution and validation, golem will initially rely redundant validation and ethereum state. research and development progresses, optimizations will implemented reduce costs, increase throughput, and improve resilience. optimisations will result improvements integrity and consensus validation schemes, network formation, asynchronous transactions, and off-chain state transitions. the golem network will built continuation the devpp protocol series, which was spearheaded the ethereum foundation, and which will see improvements confidentiality, robustness, latency, modularity, and the inclusion pertinent libpp and ipfs standards. additional means achieve resilience: signed and encrypted messages inside the golem network ensure authenticity, which protects against man-in-the-middle attacks and passive data collection. computation takes place isolated environments with minimal privileges and lack external network connectivity. whitelist and blacklist mechanisms allow providers build trust networks and run only applications prepared trusted developers. reputation system helps detect malicious node and mitigate them and additionally evaluates metrics assist secure, efficient and correct task routing. together, the application registry and transaction framework mitigates sybil and whitewashing attacks providing incentive participate, introducing economic and computational cost participation, and providing metric for reputation order maintain optimal connectivity. the ethereum integration and transaction framework makes possible custom payment-based security mechanisms, eg. escrows, deposits, insurance and audit proofs. security audits will conducted for every release, performed external contractors. roadmap this section present planned milestones for golem development. you will find nontechnical description golem's architecture this post our blog, some thoughts about challenges ahead here and course you can examine the code github the successive versions golem's software are split into milestones. this plan should considered preliminary, golem using bleeding-edge technologies, and itself very complex project. each milestone should preceded with research, with results described technical whitepapers. every stage new functionalities are added, but the scope deliverables every milestone depends the level funding raised. the description milestones presented below, these functionalities have been assigned four indicative funding scenarios: are implemented regardless the level funding, while with (), and will implemented the adequate level funding reached. have codenamed concurrent versions golem using descriptions from the long list d&d's golems the analogs might not perfect, but these are e-golems after all. go-to-market strategy for every milestone there corresponding go-to-market strategy (gms). each them focused value propositions developed respective milestones and specific needs golem's ecosystem: software developers, requestors and providers. the long run, software developers are pivotal elements the gms, especially starting from the stone release onwards with golem architecture being mature enough allow developers integrate their own solutions, further growth the entire ecosystem will depend innovative and widely-adopted software running golem. apart from creating state-of-the art technical infrastructure for such third-party integrations, the gms include appropriate marketing activities and incentives. requestors are the main focus the gms brass and clay releases the efforts will include facilitating integrations widely-needed and commercially viable use cases, combined with dedicated marketing activities and eradicating barriers for potential requestors join the network. providers are most likely respond economic incentives offered golem and simply join the network order earn tokens exchange for their computing resources nevertheless, the gms assume communication with this target group, that every stage the demand matched with sufficient supply. note: each the gms assumes the full level funding (i.e. the crowdfunding cap reached). other scenarios, the gms will adjusted deliverables particular funding level. brass golem ...these are created fulfill one goal, set the time their creation, and wait with absolute patience until activated perform this task. brass golem where are the moment with our proof-of-concept, alpha testing now. this current version golem only focused rendering blender and luxrender, and although will useful cgi artists, consider cgi rendering proof concept primarily, and also training ground. brass golem should frozen within months after end crowdfunding period and full battery tests. even though not expect that blender cgi rendering will create enough turnover justify all the work have put into the project, this will the first decentralised compute market. list proposed functionalities: basic task definition scheme that allows prepare first task definition; basic application registry first version ethereum-based application registry which allows save tasks defined with basic task definition scheme; ipfs integration for coordinating task data and content delivery, e.g. deliver files needed compute task, deliver the results back the requester; docker environment with golem-provided images for sandboxing the computations; local verification: probabilistic verification system based the calculation fraction the task the requestor's machine; basic and cli; basic reputation system; implementation blender and luxrender tasks. brass golem: go-to-market strategy objectives create user-base requestors attracting customers interested applying golem cgi rendering using supported open-source software. [target group: requestors attract matching supply computing power [target group: providers value proposition cgi rendering solution based luxrenderer/blender, which cheaper, more reliable and offer user experience superior existing cloud-based solutions, notably render farms. requestors cgi artists and other users open source rendering software: targeted marketing: artists' portals, social media etc. incentives for initial purchases computing resources golem (subsidies, vouchers, etc.). providers software developers first pool providers: golem community, alpha/beta testers and first requestors (prosumer model). targeted marketing: owners data centers, mining rigs etc. (if needed) broader marketing aimed software developers not targeted this release. referral schemes. users high-end pcs. clay golem there chance (...) that clay golem will possessed chaotic evil spirit. this happens control lost and the golem attacks the closest living creature. clay golem big leap from the brass milestone. clay milestone introduces the task api and the application registry, which together are going make golem multi-purpose, generalized distributed computation solution. developers now have the means integrate with golem. this advance, however, may come the cost compromised stability and security, this version should considered experiment for early adopters and tech enthusiasts. prototype your new ideas and solutions clay. clay golem should delivered within months after end crowdfunding period. list proposed functionalities: basic task api: interface that allows user define simple tasks; initial transaction framework model with hard-coded payments schemes; redundant verification: verification scheme based the comparison redundant computation results; basic subtask delegation: mechanism for more fined grained subtasks distribution (e.g. can used help with creation ad-hoc proxy delegating tasks more efficient manner) basic tutorials for software developers; support for virtual machines sandbox for computation; set extended tutorials for developers explaining how implement their own tasks for golem network; example computational chemistry use case implementation; example machine learning use case implementation. clay golem: go-to-market strategy objectives broaden the user-base requestors extending the rendering use case (integration commercial rendering engines) and implementing new use cases (computational chemistry, machine learning). [target group: requestors stimulate first experimental independent integrations with golem [target group: developers attract and retain matching supply computing power [target group: providers value proposition cgi rendering use case extended popular commercial software solutions. additional use cases implemented golem team (computational chemistry, machine learning). basic rudimentary platform for software developers implement first experimental integrations with golem. requestors cgi artists and other users open source and commercial rendering software: targeted marketing: artists' portals, social media etc. economic incentives for initial purchases computing resources golem (subsidies, vouchers, ect.). referral schemes. providers software developers targeted marketing: owners data centers, mining rigs etc. tutorials for software developers (experimental integrations with golem api). broader marketing aimed users high-end pcs. small-scale communication with different communities developers. similar means applied attracting users for the computational chemistry and machine learning use cases. stone golem stone golems not revoke their creators control like (...) clay golems. stone golem will add more security and stability, but also enhance the functionalities implemented clay. advanced version the task api will introduced. the application registry will complemented the certification mechanism that will create community-driven trust network for applications. also, the transaction framework will create environment that will allow golem used saas model. clay golem should delivered within months after end crowdfunding period. list proposed functionalities: full task api: interface that allows users define tasks; application registry where developers publish applications ready run golem; transaction framework that allows choice remuneration models for task templates; basic certification support for software: mechanism that allows users whitelist and blacklist applications, building decentralized trust network; support for saas: the possibility add support for proprietary software which can used tasks. payments for task creators should also implemented the application; application registry and transaction framework tutorials for developers; saas tasks examples example use cases that shows developers how create tasks available saas model; stone golem: go-to-market strategy objectives stimulate first wide-scale independent integrations with golem [target group: developers retain and further broaden the user-base requestors facilitating marketing efforts independent requestors and continuing promotion existing use cases (rendering, computational chemistry, machine learning). [target group: requestors attract and retain matching supply computing power [target group: providers value proposition much more advanced platform for developers, including fully functional api, application registry and transaction framework well basic version the certification mechanism and support for saas. requestors customer retention and further acquisition: continuous development and marketing rendering, computational chemistry, machine learning use cases. first wide-scale third-party integrations: independent marketing attracting additional groups requestors, however golem team will facilitate and coordinate these marketing efforts. providers targeted marketing: owners data centers, mining rigs etc. broader marketing aimed users high-end pcs. software developers tutorials for software developers (application registry, transaction framework). demonstration saas implementations golem. economic incentives for the most successful and innovative third-party integrations. iron golem iron golems are made iron and are among the strongest type golem. they never revoke the control the wizard that created them. iron deeply tested golem that gives more freedom developers, allowing them create applications that use internet connection applications that run outside the sandbox. course, the decision accept higher-risk applications will still belong the providers renting their compute power. iron golem should robust, highly resistant attacks, stable and scalable. iron will also introduce various tools for developers that will make application creation far easier. finally, the golem standard library will implemented. assuming that maximum financing will reached, iron golem should delivered within months after end crowdfunding period. list proposed functionalities: external data link: enables golem use resources and interface with software outside the golem network; host-direct mode: trusted mode for explicitly whitelisted applications invulnerable environments, where golem runs computation outside the docker/vm; certification support for environments; network status dashboard public website displaying basic stats about golem network; additional security mechanism tasks that uses public data link host-direct mode are particularly challenging for security. additional means may necessary make running those tasks safer for providers (eg. central audit oracles, agreements contracts code-execution observers may implemented); golem web client: web interface for golem nodes alternative the native gui console interface; golem developer toolkit: set diagnostic and test tools make creation process applications for golem even easier; reputation-system: reputation protocol that allows the node effectively supervise network behaviour; advanced transaction system: system that automatically tries match requestors with providers way that most profitable all participants; golem developer toolkit tutorial provider dashboard providing stats, graphs and more advance settings management for providers; devpp integration changes and network protocols using new version devpp; mapreduce and topological sorting tasks: add the next abstraction layer, allowing users define more generic tasks that are interdependent; golem standard library (golem std): language agnostic functionality providing access the low level core components required interact with golem from within programming language. special attention will paid i/o functions exposed tasks and subtasks related functionalities. each supported programming language will have bindings golem std. these bindings will serve means extending the default standard library the language question (custom extensions provided developers programming languages will also possible). with golem std automatic task definition, independent from the operating system, will possible. golem std will allow users create golem applications using different programming languages, which shall significantly increase the number potential use cases and simplify task creation process. golem std tutorial for developers iron golem: go-to-market strategy objectives stimulate successful and innovative integrations with golem [target group: developers manage and facilitate the user-base requestor providers attract and retain matching supply computing power [target group: providers value proposition fully-functional for developers, including the api, application registry, transaction framework, support for saas, golem development toolkit, devpp well array functionalities interact with golem from with programming language (golem standard library). requestors customer retention and further acquisition: continuous development and marketing existing use cases. marketing the entire golem network, coordination marketing efforts independent software developers. providers targeted marketing: owners data centers, mining rigs etc. broader marketing aimed users high-end pcs. software developers tutorials for software developers (golem development toolkit, devpp, golem standard library). targeted marketing: software developers from outside the crypto-world (in order attract ideas with the largest potential for wide-scale adoption). future integrations there are numerous ethereum dapps and future platforms currently under development alpha release. see great opportunities this environment, not mention solutions that could potentially used part golem's ecosystem, either directly extensions. the following systems will considered for integration and their implementation will dependent upon the release production code and complexity integration: payment channel solutions based routing and transactions, eg. raiden multi-party payment channels external decentralized identity services, e.g. uport external solutions for task verification reputation, eg. truebit external solutions for storage, eg. filecoin, swarm crowdfunding the crowdfunding golem and the corresponding token creation process are organised around smart contracts running ethereum. participants willing support development the golem project can sending ether the designated address. doing they create golem network tokens (gnt) the rate gnt per eth. participant must send ether the account after the start the crowdfunding period (specified the block number). crowdfunding ends when the end block created, when the amount ether sent the account reaches the maximum. crowdfunding summary gnt created per ether gnt minimum ether eth maximum ether eth tokens generated golem team tokens generated golem factory gmbh approximate date start (startblock) november gmt approximate date end (endblock) december gmt maximum number gnt generated gnt which crowdfunding participants gnt which golem team and golem factory gmbh gnt the crowdfunding address will announced the crowdfunding start through the following channels: project webpage: golem.network official twitter: twitter.com/golemproject official slack: golemproject.slack.com (you can join here official blog: blog.golemproject.net reddit: reddit.com/r/golemproject please, double-check the address before sending eth. for security reasons, advise confirm the address using least two different sources above. the project webpage, you will also find detailed guide how participate the crowdfunding using popular ethereum wallets. crowdfunding implemented smart contract with few simple parameters: golem factory gmbh: controls the contract and the address which gathered ether will sent (implemented multisig address); percent pre-allocated tokens golem team, golem factory gmbh); startblock, endblock: these block numbers indicate the start and the end the crowdfunding process; mintarget: minimum cap for this crowdfunding, crowdfunding fails not reached; maxcap: maximum cap for this crowdfunding, denominated gnt; gnt creation rate, denominated eth. the crowdfunding contract conforms few important rules: before the crowdfunding starts, ether can sent the crowdfunding contract; after the crowdfunding (either maxcap was reached the crowdfunding deadline passed), ether can sent the contract; during the crowdfunding, participants simply send ether the crowdfunding contract which results gnt creation; all created tokens are non-transferable during the crowdfunding; only after the crowdfunding period has ended: any user can initiate the transfer ether the specified address golem factory gmbh; the crowdfunding contract creates endowment tokens such that crowdfunding participants' tokens constitute supply, regardless the level funding; the crowdfunding contract finalizes funding which results allocation founders' tokens and unlocking the created gnt. minimum financing not reached, then after the crowdfunding period, participants can claim their ethers back from the contract. crowdfunding process leads creation gnt, backbone token for the golem network. gnt implementation follows widely adopted token implementation standards with two additional functionalities core the crowdfunding process and future upgrades, namely, token creation and token migration: create token during the crowdfunding process, the crowdfunding contract can issue new gnt (based the amount sent eth). default, created gnt locked (nontransferable). only when crowdfunding finalized are tokens unlocked and participants able transfer them. the creation function enabled only during the crowdfunding phase; does not allow the creation tokens after the crowdfunding phase over (token supply constant ever after). migrate token function which implements gnt migration another contract. does nothing default, but some point gnt upgrade required, separate migration contract can specified and recommended golem factory gmbh used transfer tokens the new contract. technically speaking, gnt upgrade required, contract implementing the migrationagent interface created and set golem factory gmbh the gnt contract (for security reasons this can done only once). following that, each gnt holder can decide whether call migrationagent.migratetokens transfer gnt the new contract, not. migrationagent can implemented only after the new token implemented and deployed. that's why only interface provided right now. migration used turns out some point that token upgrade needed for whatever reason (e.g. changes ethereum, changes golem's design). the upgrade will need action from token holders and cannot imposed golem factory gmbh. budget and levels funding the ether raised during crowdfunding will used golem factory gmbh accordance with the roadmap presented above crowdfunding code implies that level project financing might anything between minimum financing and the maximum financing (cap). the roadmap full vision completed the cap reached. golem should considered r&d project involving bleeding-edge technologies. the progress have already made while working the brass golem alpha proves the validity our general assumptions presented this whitepaper, but are also well aware the huge amount work ahead. the commitment golem team with respect the technologies presented this whitepaper full, but still ultimately depends the level success the crowdfunding. the 'minimum financing' scenario, the ultimate deliverable working stone golem with functionality enabling the creation decentralized market for computing power, well rudimentary toolbox for developers integrate their own software with golem. particular, the minimum financing will sufficient introduce basic version both the application registry and the transaction framework. the 'maximum financing' scenario, are making commitment deliver iron golem, which not only gunning for total disruption the market for computing power, but also dives head-first into the development some important components web particular, this level financing will make possible create flexible platform distribute and monetize innovative software solutions, notably dapps and microservices. assuming higher thresholds funding are reached, the golem team commits create integrations useful the entire community earlier releases well provide software developers with more support integrating their solutions with golem and bringing them into the market. the extended marketing effort outlined the go-to-market strategy one the crucial factors behind golem's ultimate commercial success, but will not possible put into action without sufficient financial resources. functionality funding min financing core functionality [b] basic task definition scheme [b] basic application registry [b] local verification [c] basic task api [c] redundant verification [c] subtask delegation [s] full task api [s] application registry [s] certification support for software additional features [i] certification support for environments [i] external data-link [i] host-direct mode [i] additional security mechanism [i] mapreduce [i] topological sorting [i] additional security mechanism for host-direct mode [i] reputation system [i] advanced transaction system [c] initial transaction framework model [s] transaction framework integrations [b] ipfs [b] docker sandbox [c] virtual machine sandbox [i] devpp ux/ui [b] basic gui and cli [i] web client [i] provider dashboard [i] golem developer toolkit ide [b] cgi rendering (blender, luxrender) [c] computational chemistry use case [c] machine-learning use case [s] examples saas integration [c] enhance tutorials for task developers [i] golem developer toolkit [i] golem developer toolkit tutorial [i] golem standard library (golem std) [i] golem std integration with gdt [i] golem std support for programming languages [i] golem std tutorial reputation security transaction system use cases tools for developers [b] basic reputation [c] basic tutorial for task developers [s] application registry and transaction framework tutoria go-to-market strategy [b, essential elements the go-to-market strategy levels funding (indicative thresholds): eth eth eth eth [b, all elements the go-to-market strategy focused value propositions additional features and broader expansion. milestones: [b] brass golem [c] clay golem [s] stone golem [i] iron golem budget structure for maximum and minimum financing golem team consists solely employment costs. assume that with maximum financing will able finance team people (most them developers) for period years. office and indirect costs includes costs offices both zug and warszawa, well other indirect, employment-related costs. contractors covers all third parties are willing work with. the number here high largely because security audits (four case maximum financing: one for every release). legal and accounting services are also included this category. marketing, community animation and expansion activities are strictly related golem's go-to-market strategy this includes both communication and marketing efforts get new communities board, well supporting (financing co-financing) third party integrations with golem. activities here will mostly requestor-oriented, especially brass and clay releases, ensure that there are growing number use cases integrated, with users actively using them the golem network. the complementary technologies category covers expenditures external technologies golem dependent on. this will most likely take the form financing original efforts introduce modifications needed golem. contingency fund calculated the total budget for minimum financing). golem team julian (ceo) and andrzej (coo) have worked together variety consulting projects and business endeavours since the time, julian was developing consulting branch ibs polish economic think-tank, where served vice president the board between and both julian and andrzej left ibs create imapp consulting and software development company. team, they complement each others' competences very well: julian might described extraverted leader: passionate ready enlist mars no-return-trip the drop hat (if not for his beloved family and children). andrzej the other hand more the introverted perfectionist, paying attention every detail and voicing criticisms loud-and-clear considers the business heading the wrong direction. together imapp, they have proven over the last years that they are able run profitable consulting and software development company that delivers high-quality product. brief history imapp described this blog post among the numerous consulting and software development projects have completed over the last years, the following deserve special mention: blackvision real-time broadcasting rendering engine, used internally blackburst, one the leading polish broadcasting production companies. you can see example its use here real-time rendering proficiency was good starting point for working with the photorealistic cgi rendering that are implementing brass golem. blackvision work progress and will become standalone product. work contractor for gsi chematica which gives great insight into how computing chemistry done, why this relevant business, and how perform tremendously demanding computing cloud environment. since september work for the ethereum foundation now this mostly pawel's work the evm. are also contractor omise and its blockchain lab, which gave the opportunity work with (and some cases, contribute to) many exciting blockchain technologies, including factom hydrachain and raiden are not random collection people, but strong team with proven track record delivering. most have worked together many projects over the last couple years (andrzej, julian, piotr 'viggith', aleksandra, pawel 'chfast', radek). alex and wendell heard about the project long time ago, and were always ready support us, but only recently have they begun working the project part the team. and, able ensure our delivery, have enlisted over the last couple months marek, pawel 'pepesza', magdalena, and adam. they have become golem believers well, fascinated are the work ahead us. managers julian zawistowski ceo, founder economics (warsaw school economics) leader and entrepreneur, willing change the world for the better. his first attempt was economist running think-tank and policy analysts for government, but some point realized that technology what can really make the difference. since then, julian has been running imapp, with agenda build software projects which will advance all beyond characters. with this catchy agenda, was able gather top-class team around him, complement skills definitely missing (such software development). piotr 'viggith' janiuk cto, co-founder msc mathematics, msc computer science (university warsaw) piotr experienced computer programmer interested bleeding edge technologies, and keen bringing innovative, ground breaking (in the field) projects which bring these technologies life. worked secure communicator when was used primarily for file sharing, implemented highly optimized cuda code just after the technology appeared, adding production-ready compositing software (the first the world), implemented the fastest-at-the-time software dcp encoder, including fast software jpeg codec, assisted optimization particle renderer for the witcher and the father black vision (see above). piotr implemented core components golem prototype and leads the design golem protocol and its preliminary use cases. andrzej regulski coo, co-founder economics (warsaw school economics) andrzej experienced manager and consultant. devoted his professional life running successful consulting company focused advising public authorities their attempts support innovative enterprises. with this experience, aware most pitfalls, and the "dos" and "don'ts" which tech startups are often facing. loves managing people who are smarter than him, and obsessed with increasing the efficiency organizations beyond the scope imagination. key developers aleksandra skrzypczak lead software engineer, co-founder msc mathematics, bsc computer science (university warsaw) hungry for new challenges, aleksandra decided join imapp more than two years ago, and was the first work full-time the golem project, doing r&d and generally planning the project. she's not easily disheartened difficulties, and still knows every line code the golem repository. prior joining imapp, aleksandra was intern icm, building training algorithms for automatic terrain type detection, and for detecting aptamers dna and rna code. she was also employee red ocean, software development and deployments group operating under the ministry finance and custom service. alex leverington network, adviser alex has been involved with ethereum from very early stage. famously worked ethdev, where architected and coded devpp, ethereum's underlying protocol layer. alex also made key contributions ethereum encryption and security, primarily touching the various communications protocols. remains active the protocol steering group, and presently interested developing decentralized, secure, and authenticated messaging system, which will one essential technologies golem. pawel 'chfast' bylica lead ethereum engineer msc computer science technology) (wroclaw university science and pawel experienced programmer who specializes c++, but uses other languages well, sometimes even designing new ones. currently focused ethereum and its ethereum virtual machine (evm). pawel the creator evmjit project, and still active member the ethereum c++ team. also contributor the llvm and c++ guidelines support library developers marek franciszkiewicz developer msc electronics and telecommunication (warsaw university technology) marek touches all golem's internals, but mostly works networking. was previously the lead back-end developer few commercial web services, where built and handled daemons, and also left his mark temptonik's real-time vocal assessment software. during his university years, marek worked orchestration protocols for wireless sensor networks. for his engineer's thesis, developed packet mangling engine with focus network steganography. pawel 'pepesza' peregud developer experienced programmer, crypto and security enthusiast, and console warrior, pawel's largest deployment far was system handling millions concurrent websockets with uptime, since gentleman who sometimes can't help brag about property-testing distributed protocols. adam banasiak developer msc cryptology (military university technology) this bonafide linux and security enthusiast joined the golem team find new challenges and work with newest technologies. the past, was developer samsung r&d, responsible for the tizen platform (mobile, wearable and profiles). adam also the winner the polish finals the imagine cup game category. magdalena stasiewicz, developer student computer science, astronomy and physics the university warsaw, magda fit right in, and now has almost one and half years experience with imapp during which she was primarily working golem. besides programming, magda also helps our testers with technical problems various severity. she loves learn new things, and one the main reasons she excited about golem, because there tons research done. radoslaw zagorowicz developer msc mathematics (university warsaw) with years experience c++/java/python programmer, radek head imapp's section, and led development the chematica project. along with julian and piotr, radek one the three who came with the original idea golem more than two years ago. after long day and night discussions started implementing the first prototype golem client. business development and communication wendell davis, bdm technology visionary and founder/entrepreneur both and out the blockchain space, wendell serves important role golem connective tissue between ethereum and the larger movement decentralization. some his past endeavors include hive, one the earliest easy-to-use bitcoin wallets, vizor, open source webvr development platform, splice, online music-making/mashup community, and the now-sadly-defunct kitchensurfing, which connected mobile chefs with buyers their trade.