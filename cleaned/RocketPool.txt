contact@rocketpool.net version table contents overview ......................................................................................................................................... rocket pool ..................................................................................................................................... rocket pool ............................................................................................................................. ethereum roadmap change ...................................................................................................... rocket pool ............................................................................................................................. design ............................................................................................................................................. components................................................................................................................................ smart contracts .................................................................................................................................. smart nodes ....................................................................................................................................... minipools ............................................................................................................................................ rpl token ........................................................................................................................................... proof authority network ....................................................................................................... user types .................................................................................................................................... staking users............................................................................................................................. staking durations .............................................................................................................................. staking process ................................................................................................................................. groups .............................................................................................................................................. chunking ........................................................................................................................................... infographic ........................................................................................................................................ fee structure .................................................................................................................................... node operators ........................................................................................................................ setup ................................................................................................................................................. staking process ................................................................................................................................. determining node operator reward ................................................................................................ rocket pool improvement process (rpip) ......................................................................................... cli ..................................................................................................................................................... audits ............................................................................................................................................ team ............................................................................................................................................. note: this document for informational purposes only and does not constitute offer solicitation sell shares securities rocket pool any related associated company. any such offer solicitation will made only means confidential offering memorandum and accordance with the terms all applicable securities and other laws. all figures utilised this document are for demonstration purposes only. any balances, percentages, time frames described are purely for demonstrating the concept currently under discussion, unless otherwise noted. overview rocket pool first its kind, ethereum proof stake infrastructure service. individuals and businesses who want earn interest their ether over fixed term can use rocket pool's decentralised network node operators participate staking. businesses such exchanges, staking pools, and wallets can easily provide customers with proof stake services leveraging rocket pool's api and its unique decentralised network node operators. rocket pool's unique decentralised staking infrastructure both secure and scalable. works aligning the interests two groups: stakers are individuals users from api integrated businesses. they deposit ether which automatically assigned node operators for staking. node operators maintain server infrastructure the rocket pool network running our smart node software with ethereum node client such parity geth. assigned staker deposits, node operator must stake matching amount ether (which staked fee-free). for providing the service, node operators can charge stakers predetermined percentage their interest earned while staking their node, they earn additional income interest their own ether. rocket pool composed primary elements; smart contracts, smart nodes, and minipools. all three integrate form innovative global network that automatically scales using token incentives, reduces staking risk spreading deposits across multiple nodes, and highly distributed and decentralised. rocket pool also boasts several first-to-market user features for casper staking, such backup addresses and deposit tokens (rpd). rocket pool currently beta and developing compatibility with ethereum's new consensus protocol casper, which due rocket pool rocket pool the most well-known proof stake ethereum service date. was originally designed and constructed based the mauve paper released vitalik buterin late which provided early specifications for the casper proof stake consensus mechanism. rocket pool rocket pool fully compatible with ethereum's casper ffg system. this version casper used smart contract and accepted deposits ether from full node. full node operators were rewarded with interest their deposit, return for keeping their node online and validating the ethereum blockchain. successful public beta rocket pool was run over weeks capacity with ether deposited from several hundred users. rocket pool was well received the community and feedback was incorporated refine the product further. all smart contracts for rocket pool are publicly available test our github repository. ethereum roadmap change mid-june the ethereum foundation announced significant change how casper will released. casper will become part ethereum release that delivers several dramatic scaling improvements ethereum. the new approach will combine three key projects casper, sharding, and ewasm into unified design. the casper ffg system now deprecated favour the new ethereum approach, due for release with ethereum the horizon, rocket pool will align its battle-tested platform with the new version casper. addition, rocket pool will take the opportunity add important improvements the platform, make the network even more robust. rocket pool with the extended casper release date, rocket pool will start developing rocket pool features. rocket pool will continue the design goals rocket pool incentivise robust network node operators provide security for the ethereum platform. democratise participation proof stake regardless deposit size allow users with less than ether earn interest their deposit. lower the barrier-to-entry for users and businesses become node operators and earn income, return for maintaining the network's resources and increasing decentralisation. provide seamless proof stake integration services for businesses who wish offer staking services their customers without maintaining their own staking infrastructure. the aim rocket pool the primary staking infrastructure for ethereum, providing truly decentralised, easy use staking network for individuals and businesses. the primary goals rocket pool are: ensure full compatibility with ethereum and take advantage scaling improvements. dynamically adapt network capacity efficiently match demand, using rpl token economics regulate node participation. minimise risk distributing deposits using 'chunking' system, reducing losses the case node failures malicious activity. democratise the rocket pool development roadmap through improvement proposal process, giving network participants influence over upgrades and features. ensure staking infrastructure and components are decentralised, keeping with ethereum's philosophy and security. create scalable staking network capable handling intense demand for proof stake services. design rocket pool features several large redesigns, all which are aimed increasing network utilisation, reducing deposit risk, and allowing node operators any size and any location the opportunity participate. components the rocket pool protocol defines what interactions are necessary for the rocket pool network meet its design goals. implemented set software components: smart contracts (ethereum) smart node software javascript library for interacting with the smart contracts all software components that implement the rocket pool protocol are open source will eventually open source. here overview these components and the changes made rocket pool smart contracts rocket pool has variety smart contracts that enable users deposit ether for staking, manage those deposits across multiple node operators, handle interactions with casper, allow voting improvement proposals, and much more. rocket pool smart contracts are upgradeable; this allows the network highly flexible. issue manifests within smart contract, new version the contract can deployed replacement the old contract longer authorised member the network. node operator uptime crucial requirement for reliable staking infrastructure. rocket pool requires all its node operators stake much ether themselves they receive from us, they have just much lose they provide sub-par service are actively malicious. our smart contracts will also detect when server becomes unresponsive misbehaving, then stop sending new user deposits the node. this helps minimise any penalties the network may incur due server reliability. our smart contracts also further reduce risk deposits breaking them into 'chunks' ether and distributing them various nodes. single node has issues and penalised casper, only portion each its deposits are affected, provided they were greater than ether. distribute those eggs across many baskets. the interests transparency, all our smart contracts are open source. view our github repo for more information. smart nodes participate casper proof stake, node operators are required run node software. the rocket pool network, node isn't just ordinary node, it's smart node. rocket pool's smart node software listens everything occurring the network and features full cli that allows node operators run various commands, including ones for voting new proposals the rocket pool network. the smart node also automatically checks with the rocket pool smart contracts intermittently to: report the server's health signal fee rates how much that node operator believes the network should charge additionally, the smart node software gives node operators the ability vote rpips (proposals upgrade the network). there are two types smart node operators both which require our rpl token participate the network: staking node operator staking node operator can join the network any time and requires registration approval process. staking node operator receives the following benefits: they require only ether stake (as opposed ether outside rocket pool), since rocket pool assigns them ether user deposits. they earn extra ether charging rocket pool users set percentage the interest earned their node. they stake their own ether, free from any rocket pool fees. they are always control their own node. they have say new proposals the rocket pool network. trusted node operator rocket pool user deposits are always assigned staking node operators first; any surplus assigned trusted node operators. trusted node operators are backup; they ensure the network can continue onboard new users there capacity with staking node operators. trusted node operators are not required match user deposit stakes. minipools minipool type smart contract that created rocket pool when node operator makes deposit their own ether their node. these contracts are used pool ether from various stakers until they reach enough stake with casper. node operators never have access user funds, they are handled the minipool smart contracts. minipool contracts have fixed terms and months, which give users options their staking duration. when minipool's staking time has completed, smart node will automatically start the casper withdrawal process. this withdrawal process takes time but when completed, users and businesses will able withdraw their deposit plus staking interest from rocket pool. rpl token rpl required you wish act node operator the rocket pool network. rpl not required user stake ether the rocket pool network. rocket pool rpl was used measure the resources available single node. node was required hold fixed ratio rpl:eth. for example, node held rpl, the node operator was confident could stake ether the rocket pool network. this was good approach but some shortcomings were identified, particularly with the change casper's staking requirement from ether ether. rocket pool the rpl:eth ratio dynamic and measures the capacity the entire network. regulates the network's capacity efficiently and combats potential attack vectors outlined below. network capacity the rocket pool network requires enough node operators cover spikes demand but not many suffer from underutilised nodes (see too many nodes attack). self-regulating network, uses rpl maintain optimal capacity by: increasing capacity when needed, incentivising node operators join. allowing for optimal network utilisation which still has capacity for spikes usage. when node operator joins the rocket pool network they are required deposit ether into smart contract. staking user deposits are then matched with this ether and deposited into minipool for staking. the percentage node operator ether that has been matched can thought network utilisation. demand increases, more node operator ether will matched, thereby increasing utilisation. the example below, each node operator has deposited ether, giving total network capacity ether. the amount matched ether, which utilisation. addition ether, node operator required deposit set amount rpl per ether they are depositing. this rpl:eth ratio now dynamic and dependent the network utilisation, i.e: the network has plenty capacity, then node operators need more rpl join. the network reaching capacity, then node operators need less rpl join. subsequently, node operators are incentivised join the network when needs more capacity and they are disincentivised join the network when doesn't. security attack vectors too many nodes: with the reduction ether required from casper reduced from ether ether, new attack vector was identified. whale with lot ether and rpl could prevent current node operators from ever receiving new users adding large number underutilised nodes the network. ensure fairness and decentralisation, node operators are assigned deposits from users chunks via random selection. with very high number nodes with lots capacity, users would not able begin staking for long time ever due lot idle nodes the network with excessive capacity. with the new mechanics, rpl requirements make progressively more expensive add underutilised nodes the network. incentivising nodes: earning extra income smart node the rocket pool network one the main draw cards for being node operator. but there wasn't great deal incentive join the network when its current available nodes couldn't satisfy the demand user deposits coming from the rocket pool smart contracts. imagine that huge exchange decided use rocket pool the background provide staking services for their users how would the network automatically incentivise new smart nodes join, existing ones add available capacity quickly? the new rpl formula substantially reduces the amount rpl required when the network nears capacity, reducing the cost join the network and thus incentivising new node operators join before goes back up. the rpl:eth formula the formula for calculating how much rpl required for node operator stake represented below: figure axis: network utilisation %); axis: rpl per eth required this determines the current rpl:eth ratio where: axis represents the current utilisation the network (-%) axis represents the amount rpl required stake ether ratio sweet spot approximately between %-%. the network underutilised, rpl required increases (sharply under %). this prevents several attack scenarios. the network near capacity, rpl required reduces significantly prompt new node operators come online and increase capacity. this ratio applies for each staking duration available. consequently, there are more nodes that support staking for months than months, will require less rpl stake ether for the latter due there being less capacity for that staking duration. the purpose this formula make sure the network always operates close capacity, common goal for wide area networks (wan) that allows for peak usage jumps while still making sure the network isn't wasting resources being underutilised. some examples: new node operator wishes deposit ether their smart node account for staking. the table below shows what the rpl cost will for different levels network utilisation. network utilisation rpl:eth rpl cost comments rpl ether rpl the network highly underutilised given its capacity. rpl ether rpl the network underutilised given its capacity. rpl ether rpl the network utilisation good given its capacity. rpl ether rpl the network utilisation high given its capacity. rpl ether rpl the network urgently needs more capacity on-board new users. proof authority network the introduction sharding potential order magnitude increase tx/s) does not reduce ethereum on-chain transaction fees significantly, poa network will used for node node communication. all smart nodes will sync the main ethereum chain, beacon chain and the rocket pool proof authority network sidechain. will geth poa network using the clique consensus engine with second blocks. this engine allows for new authorities voted in/out. so, over time, can let trusted node operators become authorities. this network will allow node-to-node communication (regardless where the nodes are hosted) server load metrics and current poa ether balances, and allow for bls signatures integrated between nodes for voting with casper (if this still applicable with the beacon chain). sharding makes transactions cheap and throughput the main chain good, this network may not even needed, which would the ideal scenario. user types rocket pool will feature two main types user; both have aligned interests which can help sustain and grow the network. reliance rocket pool central entity minimised greatly with this approach, and such, the network can function highly decentralised way. staking users the majority users with rocket pool with staking users. this type user wants participate proof stake, earning interest their ether but: the user does not have the minimum ether stake themselves. the user not technical does not want keep full node online and secure hours day, days week. the user from api-integrated business who using the rocket pool infrastructure earn interest for their users. the user simply wishes use rocket pool because convenient. rocket pool allows staking users earn interest little ether for fixed terms, without any hassle. staking durations the user will have the option choose from several fixed term staking durations. the options available will months, months and months. staking process the staking process very easy for staking users; they can deposit their ether: using the rocket pool website. via the api through group (exchange, wallet provider etc). directly rocket pool's smart contracts. easy that! groups staking users rocket pool are organised into groups. group can any business, corporation, pool, wallet provider, exchange, hedge fund just about any service that wishes provide their users with the ability earn interest their ether for fixed term, without worrying about maintaining extensive staking infrastructure just plug and play. groups can registered with rocket pool anyone. once registered, smart contract created for them automatically, which becomes their unique identifier. groups can set their own fees for users delivered the rocket pool network, which are collected this contract. one but the group owner can access these fees, including rocket pool. groups can register their own smart contracts which are allowed deposit to, and withdraw from, the rocket pool network their behalf, via our api. this allows companies with existing smart contracts integrate quickly registering their own rocket pool integration contracts transfer ether our network and receive once staking completes. rocket pool's staking pool itself group with its own integration contracts sitting top the rocket pool api; use the same decentralised staking infrastructure offer every other group. chunking ethereum's proof stake protocol, casper, includes penalties for node downtime and malicious behaviour. chunking new concept that reduces risk staking user's deposit distributing them over several nodes. steps: staking user deposits ether into rocket pool (for example, ether). the deposit broken into eth chunks. each chunk allocated different minipool, which assigned different node operator. from the above steps, user's deposit rocket pool now broken into chunks across multiple minipools which are assigned randomly selected nodes ensure redundancy. infographic further explain this concept, we've created this infographic below. the full version can seen here. fee structure users will incur split fee percentage their interest earned. the main part this split fee will the current fee voted the node operators the network; the smaller part fee collected rocket pool. all fees are locked when the user begins staking; they will not change for that user over their staking duration. node operators there are major benefits node operators who supply node and stake their ether with the rocket pool network, rather than solo staking. benefits users businesses will able stake using their own node the rocket pool network with little ether. after adding their node our network and installing the rocket pool smart node software, will able stake ether, and will assigned equal amount ether from rocket pool's staking users. addition interest earned their own ether, the node operator will receive set percentage the interest earned staking users their node. consequently, node operator will make more ether rocket pool than they ran their own staking node outside the rocket pool network. setup this technical walkthrough how the node staking process works for node operators. these users will have two options for setting rocket pool node: installable package approach rocket pool will provide easy install package (ubuntu) that will configure all dependencies needed for rocket pool smart node. this will include least: ethereum mainnet client (geth, parity, etc) ethereum beacon chain client installation will register rocket pool service that will: automatically start server restart automatically restart application crash globally available this option should preferred node operators not hosting node the cloud. devops playbook option for node operators who wish use the cloud pre-configured playbook that automatically configures cloud instance with all security groups, settings and daemons. these playbooks use install script that asks what cloud provider use, cloud provider credentials, and any other pertinent information required configure the node that environment. the node's mainnet coinbase account must have minimum amount ether, referred 'base ether' available all times allow for interaction with the rocket pool smart contracts. staking process the staking process automatically handled rocket pool's smart node software. this high-level walkthrough how the deposit and staking process works for node operators their server. after successful installation, the node operator will use rocket pool's command line interface (cli) make deposit and start staking: `$> rocketpool deposit $amount $duration` where $amount represents numeric value the amount ether they wish stake; they are not charged fee this ether when staking. calling deposit, the cli registers the node ready for staking: verifies that the node's mainnet etherbase account has more than the 'base ether' minimum after sending the deposit $amount. the minimum required ether for node registration ether. determines the amount rpl needed register the node's deposit based the current network utilisation. the rpl amount calculated using the rpl:eth formula above. there sufficient rpl the node's mainnet etherbase account, the operator prompted transfer the rpl with the ether deposit. not, the operator can transfer the rpl within hrs from any account lock the rpl:eth ratio received. registers the node operator with the rocket pool network creating new smart contract for the node's deposits ether rpl. the current rpl:eth ratio recorded the contract. the node operator notified the successful deposit and given their smart contract's address and details how they can manually send deposits ether/rpl needed. rpl was deposited, the operator informed they have hrs deposit the rpl amount the ratio will recalculated. determining node operator reward node operators can earn extra ether addition interest awarded casper staking their ether with the rocket pool network and running smart node. the reward calculated percentage the ether earned that node staking users assigned rocket pool. this incentive provide stable and highly available smart node. for example, ether assigned node operator from rocket pool's staking users and they earn interest from casper, the node operator's reward percentage this interest earned staking users. the specific percentage that node operators charge staking users determined all participating node operators the network. the node operator configures their smart node software with the percentage they feel fair charge. every hrs, the smart node software will automatically cast vote for that percentage. rocket pool's smart contracts will calculate the median value these votes and will apply that value new minipools that are launched. using the median value from all node operators: provides level playing field for all node operators have their say how much the network should charge staking users. whale node someone using laptop their granny's basement, all have equal say. the median value used prevent single nodes, even groups nodes, from changing fee against the wishes the majority. the fee determined has built-in limiters can only change much single day avoid large swings this similar the gas block limit ethereum. the fee should find equilibrium amongst all node operators. too low and node operators make less income; too high and staking users are less willing participate, affecting node operators' future income. rocket pool improvement process (rpip) motivation the rocket pool improvement process (rpip) gives the rocket pool community influence over the rocket pool development roadmap. will this by: collecting improvement proposals submitted the community and providing means for discussion, refinement and documentation design decisions. acquiring community consensus proposals and prioritising them for the rocket pool implementation team. the rocket pool improvement process not attempt decentralise rocket pool governance, although may possible move that direction when onchain governance techniques have matured. how works improvement proposal can submitted anyone the rocket pool community. once the proposal has proceeded through the rocket pool improvement process and reached the final status, ready incorporated into the rocket pool roadmap. below description each stage the improvement process: discussion anyone the rocket pool community can propose improvement the rocket pool network. gather community feedback the new proposal, will submitted public discussion site such dedicated discourse rocket pool reddit. the discussion phase lasts for indeterminate period, but once the idea has coalesced into form that can drafted, will submitted github the team. draft the draft proposal submitted github the team, taking the template form: summary this concise description what proposed motivation what problem are solving? why important? description detailed specification how will work accepted once the proposal has been submitted github, edited and reviewed make sure has sufficient detail for the implementation team, and readable enough for the voting quorum understand. when the proposal ready put vote, will assigned the accepted status. passed not passed the community now has the chance ratify the proposal, influencing whether not the improvement gets implemented. all node operators currently staking the rocket pool network are eligible vote the proposal. their vote weight equal the amount ether they are currently staking. the voting process two-phase voting scheme: commit reveal. during the commit period, node operators commit their vote, but hidden from others ensure votes not influence each other and true reflection intent preserved. list the current rocket pool improvement proposals, the node operator uses the rpip command: rocketpool rpip cast vote, the node operator uses the rocket pool cli the staking node. they run the vote command, providing the proposal and whether they are for against the proposal. rocketpool rpip vote $rpipid $yesno $comments after days committing votes, the process switches into reveal phase. the reveal phase, node operators can longer cast votes. the rocket pool cli runs background process when detects that the proposal the reveal phase automatically reveals the vote. check that vote has been revealed the node operator can use the following command: rocketpool rpip votes after days revealing votes, the process finished, and votes are counted. final the proposal passed tagged for inclusion the rocket pool roadmap and marked final. the proposal not passed marked not passed. cli each smart node will come with cli that will enable easy interaction with the rocket pool network. some the common commands will be: registration rocketpool register australia/brisbane registers the node part the rocket pool network. optional timezone code can supplied help provide visual map the rocket pool website the locations the nodes which make the network. the process also creates special smart contract just for the node operator, where all their deposits are made and secured. deposit auto rocketpool deposit $amount $duration creates deposit reservation for the node operator with the ether amount and staking duration specified (m, m). automatically sends the required rpl eth from the node's etherbase account create active node deposit the rocket pool network. this can then begin receiving user deposits until enough reached begin staking with casper. deposit manual rocketpool deposit reserve $amount $duration creates deposit reservation for the node operator with the ether amount and staking duration specified (m, m). the node operator then has hours send the ether amount the rpl amount required begin receiving user deposits their node from rocket pool and begin staking. rocketpool deposit reserve info displays information about the current reserved deposit: the eth amount required, the rpl amount required, the ratio for rpl:eth that was locked when the reservation was made, and the time remaining fulfil that deposit and activate it. rocketpool deposit rpl $amount sends rpl from the node's etherbase account the node's registration contract that was created when the node registered itself with rocket pool. rocketpool deposit ether $amount sends eth from the node's etherbase account the node's registration contract that was created when the node registered itself with rocket pool. requires reservation and sufficient rpl balance the node's registration contract activate the deposit reservation. deposit misc rocketpool deposit list lists all the node's current staking deposits, their status, balances, fees, expected interest and availability date. rocketpool deposit reserve cancel cancels any current reserved deposit. withdrawal rocketpool withdraw free shows the user how much free eth rpl the node's registration contract. prompts them withdraw free eth/rpl from the registration contract the node's etherbase account. rocketpool withdraw rpl $amount wwithdraws rpl from the node's registration contract back the node's etherbase account. rocketpool withdraw eth $amount withdraws eth from the node's registration contract back the node's etherbase account. fees rocketpool fee returns the percentage fee vote charge users that stake nodes the network. the fee determined calculating the median fee vote all nodes the network ensure equal participation and block cartels. rocketpool fee vote $percamount- the percentage fee vote charge users that stake nodes the network. note that this does not set the fee for this node charge individually; the fee determined calculating the median fee vote all nodes the network ensure equal participation and block cartels. node rocketpool node contract displays the address the node's registration contract. eth rpl can sent this freely from any address for convenience. rocketpool node exit signals that the node wishes exit rocket pool. will destroy their registration contract there are users still staking with the node. voting rocketpool rpip displays list the active rpips from the rpip smart contract. rocketpool rpip alert $emailaddress register email address which will notified new rpips that are polled for once day. rocketpool rpip vote $rpipid $yesno $comments casts vote for rpip with 'yes' 'no' and any additional comments the rpip contract, prompts the user double check their vote before making transaction and vote done twice for the same rpip, won't create additional vote but just change the original vote. rocketpool args passed, shows the cool rocket pool ascii logo with the above commands listed below it. audits order ensure the security and safety customer funds and the smart nodes themselves, rocket pool committing subjecting its platform comprehensive security audit before launching the ethereum mainnet. all rocket pool contracts have been open source since alpha, longer than any other casper compatible pool. well allowing the public examine the contract code, there are several planned code audits, bug bounties the contracts, and smart node penetration tests planned for rocket pool's future beta release. all audit results and applicable post mortem actions will made publicly available. team david rugendyke project founder, cto david has over years commercial experience developing high end web applications, has been featured twice australia personal computer (apc) magazine for projects he's built, and currently committed working rocket pool full time. thriving challenge and with long list software projects behind him, david has acquired very proficient knowledge cryptocurrency and devops well, unique combination skills that lead the creation rocket pool, project with scope spread across several these unique fields. david also loves homebrew beer and when not working rocket pool, can found enjoying beer brewing another all grain batch over the course day. david's favourite beer style good american wheat ale, followed closely ipa. jake pospischil senior developer jake full-stack developer with over years' professional experience. has background visual design and started his career front-end development, but quickly progressed building robust back-ends and provisioning servers. jake has had keen interest cryptocurrency for several years and has been developing ethereum applications since also proficient with number web technologies including mvc frameworks, reactive view frameworks, and various modern build pipelines. when he's not writing code, jake can usually found the gym sitting around table playing d&d with his friends. darren langley senior developer darren has over years software development experience. technical lead architect, has built exciting digital products for government, financial services, and professional services. darren has considerable ethereum experience and has delivered several proof-ofconcept projects for the public service and finance industries. with rocket pool, the cutting-edge cryptocurrency and blockchain development. when darren not sitting laptop, usually the beach with his family.