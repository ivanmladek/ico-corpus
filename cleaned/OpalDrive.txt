opal drive: modernizing digital file transfers for the decentralized frontier whit jack lead developer opal opacity security suite los angeles, whit@whitjack.me november introduction file storage and transfer has repeatedly shown its vulnerabilities both security and privacy and this problem amplified when storing one's files and information the cloud. effort find final solution this problem, decentralized cloud storage was created. highly skilled individuals and organizations are researching different solutions harness this new technology. opal developing experimental system that will allow individuals the ability to: upload, transfer, and decrypt files using the opal core wallet through the storj metadisk api. trends current file storage systems leave users with inadequate system protections. consumers must trust major sites like box, google drive, and dropbox resist appropriating user information for their own uses forfeiting that information third parties for profiy even divulging said information government entities. light recent revelations security breaches, government leaks, and outright corporate theft? business' and individual trust centralized cloud security has reached all time low. problem the issue lack reliable distribution solution store and transmit files trustless system. system currently exists that effective reaching mass adoption and protect users the same time. companies have now moved towards the installation local systems store data which are both expensive and time consuming maintain, because they simply can longer trust centralized cloud storage fulfill and support their needs. http://metadisk.org/metadisk.pdf http://www.ca.com/kr/~/media/files/industryanalystreports/securityofcloudcomputerusersfinal.pdf solution overview opal's solution build transmission layer top storj's existing metadisk infrastructure. this system will allow user encrypt file using the encryption system used with opacity allow user encrypt file with another user's private key, while only possessing their public key. this resembles pgp's public key encryption, except opacity's file transfers allow for encryption with the edcsa. once the file encrypted with the receiver's private key, the file uploaded storj distributed file sharing network that serves our offchain secure method file storage). the link download the file then sent the receiver via opacityem, which point the user can then download and decrypt the file with their private key. encryption achieve encryption using public and private keys, the sender takes the opacity public key from the preexisting database public keys opacityem stores. after that, random bytes (iv) are generated. next, generate new random key pair with private key called and public key called then you generate shared secret (p) using keys and which you use generate hash the first bytes are key_e and the last are key_m. lastly, encrypt the payload data with aescbc, using initialization vector, key_e encryption key. conclusion opacity file transfers, once uploaded are: instant, decentralized, and effortless. utilising the storj network, the blockchain bloat (that other proposals entail) avoided completely, and using opacity's existing encryption mechanism, one except for the user can know files source destination. opal constantly striving improve existing systems while providing direct benefit all those using the opacity security suite. note: white paper expanded upon with future developments.