twist: revolutionising blockchain accessibility twist developers april note: twist work progress and this project development driven nature. this paper will continually updated and new versions will appear https://twist.network. for comments and suggestions, contact contact@twist.network introduction twist blockchain based decentralised platform and ecosystem which aims increase the accessibility the blockchain through innovative services and features targeted casual cryptocurrency users and programmers interested utilising blockchain technology. features such twist strive simplify the payment process and make more familiar and friendly create and send transactions. twist data aims provide simple and clear interface allow users and programmers read and write encrypted data the blockchain. twist api will provide modern, language agnostic programming interface which can utilised developers integrate their applications with the twist blockchain. further features and services are planned and will developed the project progresses. the ultimate goal for twist achieve widespread adoption and create thriving self-sustaining ecosystem where twist coins are used pay for both blockchain based, and off-chain features, the fees which are allocated rewards node owners for providing services and for stabilising and securing the network. twist coin specification the twist coin proof-of-stake (pos) crypto-currency based the strat coin stratis. the initial supply twist was coins which were premined and predominantly distributed via airdrop. twist has fixed target block-time seconds and uniform block-reward twist per mined block. given blocks are mined every minute, with minutes day, and days year, approximately new twist are mined every year, which represents annual inflation rate about .%. distribution the twist coins that were premined, (%) were reserved development fund, (%) were reserved bounty fund, and the remaining (%) were airdropped bitcointalk forum members. eligible sign the airdrop, forum member accounts had have account that had existed for more than weeks, with post count least accounts signed the airdrop and each account received even share the coins (,, coins per participant. encoding auxiliary data into transactions blockchain based twist services will rely data being written and retrieved from the twist core blockchain. protocol has been defined facilitate this. protocol specification every twist transaction contains non-zero number output addresses. twist output address identifier alphanumeric characters, beginning with the number that represents potential destination for twist payment. normally these addresses are displayed their base format; however each address essence just byte binary string. since bytes arbitrary information can stored single address can use output addresses simple and transparent ways encoding data onto the blockchain. simply convert the data included into valid base addresses and use them outputs transaction. then after the transaction has been broadcast the network, all clients have the ability decode the addresses and retrieve the raw data utf- encoding. the encoding base process well documented online, for brevity the steps are not outlined this paper. advantages and drawbacks encoding data into output addresses has the advantage not needed lot complex code extract the payload simply iterate though each the output addresses transaction and pass them through base decode function. this also means that existing tools such block-explorers can easily adapted process and display the auxiliary data. however, the extra addresses may clutter transactions and confuse casual users. fortunately, block explorers and wallets can easily programmed hide the excess addresses maintain simplified user experience when necessary. twist twist public identifier which can assigned any valid twist address. character string consisting only alphanumeric, dash, and underscore characters (a-za-z--_). address can only have one assigned time, and ids must unique (case insensitive). the purposes twist ids are simplify and familiarise the payment process for users, allowing them send and receive transactions from recognisable recipient identifiers rather than the standard base cryptographic addresses. encryption keys when user registers twist address, elliptic curve diffie-hellman (ecdh) key pair generated and the private key encrypted with the registering address"s private key. the registration information, public key, and encrypted private key are all written the blockchain single transaction and are publicly visible. utilising asymmetric key cryptography facilitates utilities such encrypted communication between two twist users. ... key generation when user wishes register twist id, ecdh asymmetric key pair securely computed using the secpk curve. both key components are then formatted hex strings. for obvious reasons the private key component must first encrypted before written publicly the blockchain. ... key encryption private keys for every twist need stored the blockchain they can retrieved automatically the owner the id. however, since the blockchain public ledger accessible anyone with the tools read it, the private key must first encrypted such way that only the owner its associated can decrypt it. ownership twist defined having possession the private key the address the was registered to. therefore, encrypting the private key with the registering address private key, only the owner the able decrypt it. ... encryption procedure byte encryption key derived using password-based key derivation function with the address private key the password, address the salt, and sha digest algorithm with iterations. byte initialisation vector also derived using the same approach, except iterations the digest algorithm used. these derivations are deterministic nature the same result will always derived for given password and salt. industry standard -bit symmetric encryption (aes- cipher block chaining mode) then used, utilising the above key and initialisation vector, securely encrypt the private key. finally, the encrypted key converted base string, ready written the blockchain. deriving encryption key rather than using the address private key directly encrypt data has rather arcane advantage allowing for data encrypted/decrypted, with the knowledge that the encryption key compromised, funds stored the associated address are still secure, since the derivation function one-way. registration procedure twist can registered broadcasting transaction the twist blockchain with the following properties: all inputs are unsigned transaction outputs (uxto) spendable the registering address this ensures that registration transactions have provable ownership the registering address, since the registering address"s private key required sign the transaction. registration fee twist the time writing) divided and sent series data-encoded addresses. the fee acts deflationary measure for the twist currency since the coins are effect being burned. the fee also acts deter individuals from registering selfish amount ids and thus restricting the ids availability other users. exactly data-encoded addresses determined order. the first address fixed and acts indicator let the network know examine this transaction for possible registration. the second address, when decoded from base contains the registered. the following addresses contain the public ecdh key which was generated the user before registering. the remaining addresses contain the encrypted private edch key. detecting registrations valid twist registrations are discovered the network the following algorithm: procedure detect_id_registrations() for block blocks for block.txs for vout tx.vouts vout.address id_reg_address then startindex tx.vouts.index_of(vout); confirm_id_registration(tx.vins, tx.vouts, startindex); break; end end end end end procedure confirm_id_registration(vins, vouts, startindex) paid id, pubkey, privkey, registrants; for startindex; id_reg_fee then idset.add(id); pubkeyset.add(pubkey); privkeyset.add(privkey); registrantset.add(registrants); end end figure twist registration discovery algorithm remarks figure every transaction every block the twist core blockchain scanned determine whether includes output the twist registration flag address. such transaction found, then inspected ascertain whether contains valid registration. each output the transaction from the flag address onwards parsed attempt retrieve the id, public key, and encrypted private key the registration. the value each output cumulatively totalled confirm whether the fee has been paid. each input address the transaction added set registrant addresses. for registration valid the parsed id, public key, and encrypted private key data must the correct format. the isvalid() functions check the length the fields are the expected range and that the fields not contain any illegal characters. idset, pubkeyset, privkeyset are global sets populated running the algorithm chronological order starting from the first block. after every successful registration, the id, pubkey, and privkey for that registration added its respective set. for registration valid, the id, pubkey, and privkey must not already use (not already member their respective set). the registrants set must singleton set since can only registered single address and there must ambiguity the address being registered. registrations address require all inputs the transaction originate from the registering address, which ensures that the owner owns the private key the address, since necessary sign the uxto. the registrants set must not subset the global registrantset (the address must not already have registered it). the total value sent the data-encoded (burn) addresses must greater than equal the registration fee. this requires that determined amount coins are burned for registration successful. since the registration successful, add its elements their respective sets. twist transactions owner twist may send transaction another twist owner such that the recipient able see the the sender, even none the coins spent the transaction originated from the sender id"s registrant address. these transactions may also contain encrypted messages, decipherable only the owners the involved ids. these transactions are syntactically identical regular twist transactions and they are also publicly broadcast the core blockchain. the auxiliary data facilitate these transactions encoded using the same protocol previously specified the paper (i.e. the data encoded into base output addresses). ... transaction structure twist transaction has the following output structure: recipient address: this the address the recipient"s registered to. the value out for this address the amount coins being sent from the sender the recipient. [optional] change address: for returning excess coins (sum all input values sum all output values the transaction) back the sender. flag address. this fixed predetermined address which acts indicator the twist network make aware that this transaction may twist transaction, and inspect further. different flag addresses are used depending whether the transaction contains message. this provides easy way for the client distinguish whether the transaction contains message without needing perform any decryption. sender address: this address contains base encoding the sender"s twist id, and necessary for the recipient know the the sender. validation/message addresses: each twist transaction contains validation string for security purposes. the transaction does not contain message, then the validation string encrypted and encoded into series addresses. the transaction contains message, then the validation string prepended the message before being encrypted and encoded into the addresses. ... fees with twist registrations, fee required for twist transactions considered valid. the time writing, the fees are twist for standard twist transaction (recipient can see sender id), and twist for transactions including message. these fees are completely arbitrary but provide deflationary mechanism the coin. small fee necessity when data being encoded into output addresses, since non-zero amount needs sent encoded address for contained transaction. ... encryption procedure messages contained twist transactions are encrypted such way that they only decipherable the owners the sender and recipient ids the transaction. this facilitated utilising the ecdh key exchange protocol described earlier. messages are encrypted first computing shared secret key from the sender"s private key, and the recipient"s public key. the message then encrypted with symmetric aes- cbc encryption using the shared secret key the encryption key. decrypting the message follows the same procedure, except the shared secret computed using the recipient"s private key, and the sender"s public key. twist transaction spoofing each twist transaction, the sender sent essentially plaintext (encoded the sender address). theoretically, transaction could spoofed appear sent from any simply replace the sender address with address containing any encoded id. ... solution prevent transaction spoofing, each twist transaction required contain encrypted validation string. the string simply arbitrary non-base character (i.e. followed randomly generated, base string characters, followed the same non-base character. the transaction contains message, then the validation string prepended the raw message content before encryption. else the validation string simply encrypted using the same procedure for messages. when client receives transaction, attempt decrypt the validation string made using the sender"s public key and the recipient"s private key. the decryption fails, the decrypted text does not contain validation string the expected format, the validation string has been seen before previous transaction, then consider the transaction invalid and ignored. this validation mechanism ensures that the sender the transaction the owner the sender id, since knowledge the sender"s private key required compute the same shared secret that will computed the recipient"s side. proof burn present, coins sent data-encoded addresses are considered satisfactorily burned since infeasible amount computing power would required generate the corresponding keys for the addresses, which are generated from input data. the flag addresses are the only predetermined addresses present twist transactions, there may concerns that the development team own the corresponding keys these addresses and can spend the coins being sent them. assure the community this not the case, the addresses, when decoded from base, contain descriptors their use (e.g. "twist reg"). could not possibly have access the computing power necessary cryptographically generate the keys for these addresses, the community can satisfied that coins sent there are being burnt. ideally, future, coins will provably burned possibly via utilising the op_return script opcode. twist data the internet undergoing fundamental shift away from centralised services and towards decentralised open ones. the popularity and hype surrounding blockchain technology well deserved, with the success bitcoin, ethereum, and other blockchain networks proving the utility and value decentralised, distributed ledgers. people are becoming aware the benefits using decentralised systems with single point failure. twist data defines simple yet robust protocol for writing small pieces information onto the twist blockchain. the data safe and secure, being maintained network hundreds computers around the world, with single points failure and possibility data losses. twist data isn"t intended means store large files, but rather tool give users easy way securing and storing small pieces information (e.g. passwords, contact information, etc.) completely decentralised distributed ledger with central point failure. protocol with twist id, the auxiliary data encoded into twist addresses and written the blockchain the form outputs transaction. two types data transactions are defined: private and shareable. private transactions, the data payload intended only decrypted the owner. shareable transactions provide the creator with unique key that can shared with others allow them decrypt and access the data. private data transactions ... encryption protocol the user given the option decide which their addresses they would like encrypt the data with. byte encryption key then derived using password-based key derivation function with the encryption address private key the password, encryption address the salt, and sha digest algorithm with iterations (iteration numbers are arbitrary but are chosen vary between different twist services enhance security). -byte initialisation vector also derived using the same approach. industry standard -bit symmetric encryption (aes- cipher block chaining mode) then used, utilising the above key and initialisation vector, securely encrypt the data. ... transaction structure for private data twist data private transaction has the following output structure: [optional] change address. for returning excess coins (sum all input values sum all output values the transaction) back the sender. flag address. this fixed predetermined address which acts indicator the twist network make aware that this transaction may twist data private transaction, and inspect further. different flag addresses are used depending whether the transaction type private shareable, allowing clients parse the transaction correctly. encryption address private key hash. this the first characters hash the private key used encrypt the data. this allows clients check whether the encryption address present the user"s wallet (and they own and can decrypt the data). validation/data addresses. these addresses contain the encrypted data and validation string protect against transaction spoofing. shared data transactions ... encryption key specification for each shared data transaction, secret key needs created which shareable others allow them access the data. such, the key should have the following properties: unique the key must only decrypt the data the transaction was created for. secure should not feasible guess bruteforce attack the key. independent knowledge the key should not expose any sensitive information about the owner. e.g. the key should not sub-section direct derivative the owner"s private key retrievable the data owner should not need remember the encryption key for their data. the key for shared data transaction should easily recreatable retrievable for the owner the data. ... encryption key generation create sharable data encryption key, base string with length characters randomly generated. this fulfils the criteria being unique, secure, and independent. also not impractically lengthy, which something worth considering the intention for shared. make the key retrievable, encrypted with the user"s private key and written the blockchain transaction, allowing for automated retrieval future. figure the chaining encryption keys used twist data shared data transactions data. new shared key then generated and encrypted and bundled along with the encrypted data into twist data transaction, shown block figure which then pushed the network. using this method, data owners are able retrieve the keys for all their shared data following the chain all their shared data transactions, starting from the initial transaction containing just the key. this technique does however enforce one per block limit shared data transactions for given encryption address. ... transaction structure for shareable data twist data shareable transaction has the following output structure: [optional] change address. flag address, specific twist data shareable transactions. encryption address private key hash. key/validation addresses. these addresses contain encrypted unique key for which following shareable data transaction, with the same encryption address, will use encrypt its data. the key also doubles validation string determine the transaction has not been spoofed duplicated. data addresses. these addresses contain the encrypted data. twist data transaction spoofing similar with twist transactions, manipulating the encryption private key hash address twist data transaction, transaction can made appear owned another address. while this does not present any security concerns, could used spam user and make their client display transactions they did not create. ensure transaction legitimate, validation strings are included each transaction. shared data transactions, the validation string simply the shared key. private data transactions, the validation string prepended the data before encryption occurs. ... encryption protocol the user designates which their addresses they wish set the owner the data (the encryption address). the private key this address used deterministically derive key which then used encrypt the shared key. fees all twist data transactions require fee considered valid the network. fees are subject change but the time writing, propose fee twist should required per characters data. the encryption address not the owner any existing shared data transactions then the encrypted shared key bundled into transaction containing special flag address and address containing the encryption address private key hash. the transaction, shown block figure pushed the network and after receiving least one confirmation, the shared key used encrypt the data and another shared key generated and encrypted. the new encrypted shared key and the data encrypted with the previous shared key are then bundled into transaction which pushed the network. this the twist data transaction, shown block figure twist api demand for blockchain based services increases, anticipated that increasing number applications both hobbyist and industrial scale will strive utilise blockchain technology. twist api will provide developers with simple yet powerful interface access twist services and write and read information and from the twist blockchain. the goal facilitate simple way for developers utilise the twist blockchain their applications, thus incentivising usage and adoption twist currency and platform. the encryption address the owner any existing shared data transactions, then the shared key retrieved from the most recent valid transaction and used the encrypt the new api functions the api will abstract the underlying implementation for all twist services (e.g. id, data, etc.), and only expose the actions the developer needs. some (but means all) the methods intended offered the first edition the api: authenticate twist i.e. confirm that the user owns the private key the address for which the registered register twist send twist transaction write data the twist blockchain read data from the twist blockchain the scope the functions provided the api will continue grow the twist platform evolves and more features and services are developed. use cases exposing the ability authenticate and register twist ids, developers can integrate twist with their applications (for example, ,,login via twist id" functionality). however, expect twist data functionality (i.e. writing/reading data to/from the blockchain) the most utilised. ... example use case video game developer may choose utilise the twist blockchain keep record each player"s score the game. each player first authenticates with their twist id, and then upon completing the game they may wish submit their score the twist blockchain. the data written the blockchain and leader board constructed reading all scores from the blockchain. using blockchain store information, such player scores, may preferable over database since the data secured with need for backups, there zero network downtime, the data has complete immutability, and the storage fully decentralised with central point failure. ... example use case university assignment submission system may wish utilise the twist blockchain verify that student has submitted their assignment time. when student uploads their assignment files, each file passed through cryptographic hashing function and the resulting hash written the twist blockchain along with the student"s id. this provides decentralised and permanent record that the file existed the time the transaction network confirmation, taking advantage the distributed irreversibility blockchain technology. students can feel safe the knowledge that decentralised, distributed ledger can provide irrefutable proof that their assignment existed and was submitted the school"s servers given time. specification the api designed language agnostic, allowing programmers working any language make requests and receive responses through standard protocols and common formats (e.g. http/json). initially, the api intended built interface run top the twist toolbox desktop application. developers running the toolbox could consequently enable and configure the api receive requests from external ip"s, allowing them run api server which can used serve their applications. twist nodes services such twist id, rely writing and reading data and from the blockchain. however, for certain purposes blockchain based data access becomes impractical blocksize limits and block-times hinder streamlined functionality. peer-to-peer messaging application for example would not well suited operating solely blockchain, there would considerable delay between sending message and the recipient receiving it, well limits the maximum size the message that can sent single transaction. twist nodes are introduced facilitator provide support for off-chain functionality such peer-topeer messaging and data storage, allowing the twist platform comprehensive and feature rich possible. requirements anyone will able run twist node provided they possess minimum amount twist (exact amount yet confirmed) used the deposit for the node. users wishing run node will need consolidate the deposit amount into single address and then make registration request the blockchain. their node will registered and will remain active long the balance the address does not drop below the deposit amount. nodes will free register and registrant"s coins are never locked and are always available them should they wish break their node. requiring minimum deposit amount ensures that each node owner has significant stake the twist ecosystem, and incentive keep the network stable and secure. functionality nodes will facilitate network parallel the twist core blockchain which will enable services such twist chat operate acting intermediary servers between the communicating parties. twist users will able send instant encrypted messages each other relying aes symmetric encryption and elliptic curve cryptography, without the need for these messages stored the blockchain. the encrypted messages will first sent and stored nodes, and then delivered the recipient when they are online and able receive them. blockchain based validation (e.g. upon sending message the sender writes the hash message payload the blockchain, which the recipient then uses validate the integrity the message they receive) could also potentially utilised assure the communicating parties that there were errors tampering involved the transmission their messages. conjunction with end-to-end encrypted messaging, nodes will also provide extensions the twist data service. envision network where large data payloads and files can encrypted and stored off-chain nodes, consequently reducing the load the core blockchain, while still maintaining distributed and decentralised data storage network. nodes may also operate api servers, exposing interface the core blockchain for application developers connect and utilise. result, developing applications upon the twist blockchain may seem more appealing and accessible developers will not need spend time money setting their own api servers serve their applications. incentives reward for running twist node, owners will earn fees twist depending usage statistics (i.e. messages served, disk space utilised, etc.) along with activity statistics such node uptime and average connection speed. nodes which are utilised more heavily have longer, more consistent uptimes will earn greater distribution fees, incentivising fast, stable, and secure network. currently envisioned that fees will collected from all twist services and distributed weekly basis amongst all node owners. large proportion the coins presently being burned services such twist id, will instead collected and used pay node operators. future, reduction the staking reward may possibly introduced the reward potentially eliminated altogether. this would limit inflation, making the coin scarcer and helping the twist ecosystem transition into sustainable fee based model, where node owners have strong incentive secure the network and provide services twist users. future developments the twist project evolves, documentation for more features and services will added this document, and additional detail will provided for existing features development progresses.