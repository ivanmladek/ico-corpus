nexus: the tritium protocol may abstract "humility the solid foundation all virtues" confucius blockchain flourishing technology that constant state change. nexus pioneering new approach blockchain technology that solves the biggest challenges faced the industry, viz. scalability, ease integration, and intuitive user experience. beginning with the tritium update, are creating innovative software stack containing multiple layers abstraction that will streamline business integration into the nexus framework, form the foundation cryptographic identity system, and make smart contracts easily accessible through feature-rich api set. each api call will developed through standardization process, with input from businesses, industry leaders and developers, focused providing well-designed interface and seamless business integration. contents introduction software stack network unicast flood networks multicast locking groups network topology ledger signature chains evolving signature scheme financial contracts identity reputation relationships twin blocks register state register object registers operation codes sanitize inputs api gateways api types standards logical state recording data chaining authorization interface decoupled daemon modular design security considerations attacking the nexthash sigchains attacking vulnerable public keys brute forcing weak secret seeds conclusion appendix: more content for those inclined update phases applications receive accounts ledger level dao tokenized data supply chains locator/id separation protocol (lisp) level indirection for addressing and routing nexus over lisp another layer security advanced level scalability open standards and open source list contributors written by: colin cantrell dino farinacci with contributions by: shea laver jules alexandra brian smith april bunje steve lackey edited by: shea laver vocem populi tritium white paper last revised june, nexus: connection series connections linking two more things. oxford english dictionary introduction the proposed architecture within this paper combines together unique set technologies increase the processing capabilities nodes distributed system. creating clear distinction between each these functional components, each layer can developed and improved independent one another, processing can shared across multiple layers, and the integration challenges can minimized for anyone who chooses build this system. software stack following year market research, the nexus software stack follows the principles modular design, making uniquely powerful for range new use cases. this software stack consists seven layers, which can seen below: the first layer considered the network layer and contains the first six layers the osi reference model network stack. this followed the ledger layer (dc) that holds the different data structures representing the distributed database. the third layer the register layer that allows application record its state, transfer write permissions another user, read the data from register that acts global network-wide address. the operation layer the fourth layer and provides processing capabilities for the register and ledger layers. the standard operation codes and series codes that act methods for the object registers will defined consensus annual conferences, ensuring consistent connection between development and users. the api layer the fifth layer the software stack and will contain standard set api calls that executes series operations, automating group actions that returns the desired result. the logical and interface layers, being the sixth and seventh layers, are the application and user space where most developers and users will interact. the intuitive design these layers distinct functions will provide premium experience developers building applications the nexus framework. network the internet built layers software called the "osi reference model network stack" []. this stack responsible for all transmission data from layer via physical link layer the application space. lay the foundation for viable scaling solutions, certain aspects the original blockchain protocol need revisited. any scaling solution needs consider how the network propagates messages and which layer can simplify down to. unicast flood networks peer-to-peer (pp) networks such blockchain require that every message relayed via unicast [], giving rise the term "flood network". for message propagate across the network, all nodes the network must first process and then relay their peers. networks gain their robust nature through large number active nodes, creating more redundancy the system. this redundancy comes the expense increased message propagation time and increased "complexity" the routing algorithm, which grows per o(n []. this termed "exponential time" and highly undesirable complexity for any algorithm other than cryptographic, because more nodes join the system, they draw exponentially more resources from it. thus, cryptocurrency networks must balance the number nodes required provide high degree redundancy and robustness against the exponential cost message complexity. multicast locking groups due the limitations inherent the basic operation flood networks, becomes increasingly clear why distributed ledgers have difficulty scaling. scalability not always determined the actual size the ledger, state required held all nodes, but also how the messages route through the network. tritium provides optimized, efficient routing system called "multicast locking groups" and the first step towards level locking multidimensional chaining structure. seen the diagram above [], multicast handles the packet replication the network layer rather than the application layer, which significantly speeds propagation time. the secondary benefit running multicast locking groups that they begin form parallelism the network layer, meaning that messages are broadcast relevant nodes whilst preserving global consensus layers. the final benefit that multicast locking groups can have access control the groups, which would mean that nodes authorized broadcast verify from each these groups could easily validated the ledger. network topology seen the diagram above [], distributed topology ideal network configuration great resilience, and while most cryptocurrency networks are assumed distributed, consensus mechanisms other protocols can become decentralized degrading into several pieces. this due certain limitations devices that use "network address translation" (nat), which allows devices within local area network (lan) share the same public address and route packets their corresponding device based port number. when nodes are behind nat, there can difficulties getting opening the nat for node accept incoming connections. this creates bottleneck, collapsing distributed network into decentralized one. solve this, the locator/id separation protocol (lisp) included support open and secure overlay where nexus nodes have their own network layer identity, which maintains distributed topology regardless connection method location. ledger the ledger layer the distributed database system the structure which transactional data organized. powered the lower level library, which contains security, database, and protocol messaging services, this layer the foundation for other applications built upon it. improvements the current blockchain-based ledger are outlined the following sections. signature chains tritium introduces new system called "signature chains" that designed increase the security and flexibility private keys, provide replay protection for account-based transactions, and prevent dust spam attacks. signature chains provide username and password functionality which further protected using pin code, removing the need for wallet.dat file access your private keys. this functionality forms the basis for digital identity system linking every event tied the signature chain. the illustration below shows the scheme more detail. evolving signature scheme signature chains are quantum-resistant evolving signature scheme developed specifically for blockchain applications. like the winternitz signature scheme, uses one-time signature (ots) that signs one message per key. the key update algorithm automatically called after signing transaction, key update required after every signature. the key update algorithm takes secret input provided the user, pseudo-random string, and non then hashes these inputs multiple times using skein-keccak (sk) form the basis for private/public key pair based the brainpool standard []. the public key then hashed using sk- create -byte exthash that then published with the transaction data. this exthash will the form of: hash (hash (hash ...))) obscuring keys and sensitive data through hash functions, and updating the key after every transaction, this signature scheme reduces the window vulnerability the period between making transaction and that transaction being included the ledger. addresses are longer tied the public key account and can reused indefinitely while maintaining maximum security, whereas conventional designs that rely multiple-use signature schemes become less secure with each use. the signature scheme outlined above extremely compact, and can adapted use almost any hash function asymmetric cryptography. financial contracts tritium transactions will longer contain the utxo sets used bitcoin and most cryptocurrencies. instead, tritium uses accounts tied financial contracts user's signature chain, which substantially reduces the disk and memory footprint running node. minimum pow will required cost when creating initial account. using signature chain decoupled structure from the account prevents the re-use key and easily detects conflicting transactions. this also prevents dust spam attacks and allows transaction fees removed. identity through its qualities immutability and transparency, distributed ledger can considered trusted platform. consensus series events information, i.e. transactions, publicly verified alongside the attached signature chain, thus can referenced determine whether certain event has happened piece data accurate. this forms the basis for identity system built the core layers the technology. linking accounts their data and enabling them verify events the ledger, users can own their own identity. through signature chains, users can access their account any device through secret information known only themselves. this sets the stage for more advanced identity markers, signature chains can configured use biometric data such fingerprints retinal scans. identity also established the osi network layer through lisp endpoint identifiers (eid). lisp eids are used give each signature chain routing identity that maintains integrity across all layers and allows users make direct connections through their "cryptographic identity". any attempts spoof identity can prevented identities can independently verified the osi network layer and the ledger layer. privacy features can also implemented encrypting data packets with lisp the network and presentation layers the osi stack. this provides robust checking and balancing the internet properly linking cryptography with network routes. reputation the mechanism "trust" established mathematical equation based upon the track record individual node. this mechanism functions primarily build digital "reputation" centered around series events that individual nodes have embarked upon, and will create reference system for more reputable nodes that node selection and bias can more accurate. allowing nodes the network verify each other through their reputation solves large issue most "proof-of-stake" (pos) consensus protocols. coupling economic incentive with greater trust, such higher returns verification, there (non-trivial) cost incurred loss reputation. the key good reputation system lies the effort required gaining reputation versus the comparative ease losing that reputation. individual must spend their time and resources supporting the network build their reputation the system. individual were oppose the collective consensus and pretend certain events have happened, they could have their trust reduced and the viability their "witnessing" decreased. relationships the reputation system added layer protection against attacks that further improves the network's "byzantine fault tolerance" []. while the reputation system can considered the public image each node, the relationship system determines how nodes engage with each other individual basis. this begins process selection bias between nodes, strengthening connections with each other similar how synapses strengthen response activity. under-performing malicious connections may pruned and replaced better, more reliable connections that strengthen the resilience the network. this adaptability allows the network optimize performance, and even measure its performance over time. eventually, nodes can form private and unique perspective with each other and determine "normal" node interactions such communications, transactions, and other behaviors. this allows nodes calculate the validity another node's "word" based past events their reputation, coupled with their personal relationships with one another. node attempts attack the network, this can measured against the established "normal" series events and distinguish the attacker. this lays the foundation what can considered immune system for the global network and consensus mechanism, whereby the network can identify attack the departure from normal behavior and neutralize before sustaining damage. twin blocks most current blockchain technologies, blocks are single channel data structure which other nodes build upon. the case two blocks being discovered simultaneously, the block accepted the majority nodes and built upon considered the valid block and incorporated into the ledger. the other block abandoned and known orphaned block. when orphaned block discovered, the work that successfully produced that block wasted. the tritium protocol will include twin blocks reduce the possibility orphan happening and increase network capacity. two blocks the same height are arranged the chain different channels, they will both accepted valid there are locking conflicts, which when both blocks contain mutually opposing transactions such attempted double spend. this begins form horizontal scaling well introducing cross-channel accountability, where multiple block verification channels such prime, hash, holding can verify blocks produced each other. register determining ownership data most modern systems depends third parties the form trusted authority. these systems are unable achieve global consensus provide immutability and are therefore prone corruption, theft and other arbitrary weaknesses. distributed ledgers solve these problems and can further improved through use data layer that acts provide incontrovertible truth delegated global consensus. understanding this, the nexus advanced contract engine will register-based and will act state recording machine. registers are self-contained objects that hold data associated with the given signature chain that published its most recent state. this can more easily understood the following diagram: the diagram above, two transactions record new states through write operation register address xea. the center transaction performing write operation address xedda with the data from read the most recent state xea. before recording state, nodes will required satisfy all validation scripts for register writes. the two read operations above are simple queries recent states the register's address and demonstrates different methods interacting with the register layer. state register state register register where the ledger deposits raw bytes write operation and returns raw bytes read operation. this gives developers the flexibility serialize data into their registers, updating the state the ledger while maintaining the interpretation these byte sequences the logical and interface layers. this ability means higher levels abstraction the ledger can incorporated without putting unnecessary strain the processing nodes. example raw state register could reference hashes specific checkpoints their private databases, allow the easy verification data states within internal systems without compromising privacy. this can especially useful for systems that require confidentiality, such medical records intellectual property. the ledger layer will responsible for ensuring that operations are authorized through access control scheme and that the register not placed into invalid state, such attempting write read-only register. object registers object registers act their own self-contained objects, similar how class functions object oriented programming. object registers can used for many things including the standardization specific class formats for metadata that can modified its methods, such transferring the rights said meta-data. object registers could also reference other object registers part template, enabling the chaining these data types. certain limitations must placed the total number operations and cycles required for each method ensure that denial-of-service (dos) attacks remain infeasible while providing unique environment for developers integrate with distributed ledgers. operation operations are byte-level instructions that can used perform basic tasks registers. the operation codes will require standardization process and will thoroughly tested before becoming deployable scripts for the api layer. these instructions can optionally compiled from domain specific languages. these languages can become part the standards process for generating series operations that interact below the api layer and perform tasks desired. codes the following codes can used describe some basic functions the operation layer: read this operation code will responsible for returning the contents register address submitting query the network that will return that register's most recent state. write this operation code will responsible for writing data register address. authors must have the correct authorizations, and the register must not read-only. debit this operation will perform basic subtraction from available balance object register. this operation will function claim ticket deduct funds from account when making transaction, and will require its counterpart add those funds the destination signature chain. credit this operation will perform basic addition available balance object register. will the counterpart the debit transaction sequence and required fully move funds from one signature chain another proving the series events leading the state balance the sending register. transfer this operation will transfer the rights register any type, moving the assigned permissions from one signature chain another. data can then transferred between signature chains simply show the chain custody specific piece meta-data, such record ownership copyright. authorize this operation will provide authorization token user's register signature chain, providing proof the logical layer that given public key valid and authorized access the services provided. gethash this operation code will responsible for hashing the data that submitted parameter it. for example, this might return the hash data held register address, providing checksum the most recent state said register. sanitize inputs object registers can contain methods such assignment operators for specific data types, which necessary for the operation layer perform the role sanitizing inputs. sanitizing inputs important requirement for registers that store specific meta-data formats, which requires each new addition fit standard template the agreed upon process. api contracts hold the key the future distributed systems, although current implementations have issues with accuracy, performance, and ease-of-use. these limitations make the implementation process needlessly complicated and expensive, which raises the barriers entry and leads inevitably obsolescence. considering this, the advanced contract engine will accessible through intuitive api set designed specifically for ease-of-use and seamless integration with existing software. apis will accessible through json-rest interface that globally accessible across the network. various apis will enable developers push/pull data from the ledger, define terms for new contracts, submit transactions, define instance contract for tokenized data. rather than using specific turing-complete language for access, the front-end can written any language preferred the developer. gateways node api gateways will provide access the api layers, with access guided the gateway's eid. any node can act gateway advertising their eid api gateway. api gateway can require authorization signature chain message signing key. developers the logical layer can implement calls through these gateways interact with the lower levels the software stack. api types there are many different industries that will require industry-specific apis, including medical, copyright, finance, and identity. each api will function according the standards set the standardization process, executing series operations through the operation layer that will interact with registers and validate states through the ledger. standards the apis, along with the processes the operational layer, will decided through standards process regular conferences. the model will similar the internet engineering task force (ietf) standards such request for comments (rfc) and internal standard organization (iso), and will allow businesses help define new operational methods for object registers, along with new api calls for industry-specific api sets. consultation considered necessary for the successful adoption distributed ledger technology, ensuring that development continues meet user needs and that the ledger can evolve the exacting new standards. logical the logical layer the core application space the software stack. applications built the nexus framework will use the api layer interact with the network, apply new states registers, execute register operation methods, authorize signature chains. some examples applications can found the appendix. state recording the logical layer could, through its abstraction layer, use the ledger state recording machine record new states its program. these would key checkpoints the main system, using the immutable ledger reference point for recent states distributed applications. arbitrary data can interpreted from the logical layer de-serializing any input data and out state register. data chaining data chaining enables full control one's own data manner that others can reference and utilize through the logical layer. this allows the creation various checks and balances, verification that data can performed one's peers. signature chains are core component data chaining each chain established with their own record events according what they publish. authorization signature chains can form the basis for access control scheme, restricting granting access specific data such contracts multi-signature accounts. the api functions, standard authorization calls can used publish access list containing specified public keys that authorizes access data private network. this will also provide the logical layer the opportunity for encrypting data with this published and authorized public key, and also record keeper the signature chains that have requested access certain components the logical layer. interface the interface layer will improve the accessibility the ledger layer interacting through api calls and operation codes. through two major areas focus viz. decoupled daemon and modular design, interface design becomes simpler yet more powerful developers can focus providing intuitive and responsive instead the intricacies blockchain design. decoupled daemon currently implemented, the qt-wallet couples the graphical user interface (gui) with the actual daemon-level operations, which creates unresponsive, poor user experience. the nexus user interface (ui) will standalone application running independently the daemon, which will run the background. this allows for seamless updates the core software, and automatic reloading and bootstrapping occur the background with minimal user interruption. modular design modular design important aspect system architecture, providing more robust and stable software platform modules run individual processes separate from the main application. modules can then developed meet future needs perform specific tasks and provides greater flexibility and extensibility. the user interface adopts this approach and grants the end-user full control over their ui, allowing them select and install modules needed. this allows developers create array new use cases limited only imagination, creativity, and available technology. this will engender the birth marketplace where developers can share and sell custom modules built for the nexus interface. security considerations this section delves deeper into the mathematical foundations underpinning signature chains signature scheme. explores the relative quantum resistance for signature chains through the combination grover's algorithm and shor's algorithm. this section uses big notation depict the number iterations required successfully attack given encryption. attacking the nexthash sigchains explained earlier this document, can determine how exthash (nh generated: hash (hash (hash ubn ))) this can reversed into the public key grover's algorithm requiring: retrieving the private key from reversed exthash signature chain would require additional iterations. therefore, one would have the very last private key that signature chain with total of: access this private key allows one claim ownership the signature chain and the associated balance nxs data. the number iterations illustrated above astronomical number and above the recommended cryptographic standard for top secret []. this makes suitable for the emerging quantum age. attacking vulnerable public keys another security consideration concerns the ability quantum computers attack vulnerable public keys. signature chains keep the active keys obscured until transaction made and only the public key ever published. this protects active keys against shor's algorithm, but once the public key published then quantum computers with approximately -qubits could attack the public key over running time o(n quantum computer were able break old public key and reveal the corresponding private key, would position attack the master base hashes. this the process generating the idhash: hash (hash (secreta hash (secretb further increase entropy, each secret input combined with pseudorandom string generated from the previous transaction. thus, the creation signature chain the result hashing data points known the user but unknown the attacker. this shows how the master secret phrases (secreta and secretb can secured above -bit quantum standard. brute forcing weak secret seeds another attack that could used known dictionary attack, where key pair generated brute forcing inputs from word list. the generated public key would then hashed and compared against the exthash see unlocks user's signature chain. someone were use weak username, password, pin, the ability attack with dictionary attacks would greatly increased the weakness the password. the figure above, variable demonstrates the relationship between the complexity your password versus the complexity the dictionary attack with secreta minimum entropy bits, and secretb minimum entropy bits. the larger the word list used the attack, the greater the chances successfully brute-forcing the seed data that generates the idhash. the greater the entropy secreta and secretb the less chance there that attacker will successfully find the idhash. conclusion the tritium protocol described this document the first three updates named tritium, amine and obsidian (tao). inspired the principles modular design, these updates represent new stage blockchain development that addresses the critical issues facing existing technology. they bring remarkable improvements efficiency, scalability, and security through the intelligent use the cryptography, architecture, and software layers that power nexus. the magnum opus the tritium upgrade the register-based smart contract engine. this engine provides the opportunity directly own, transfer, lease, publish data that can securely utilized, distributed and/or monetized. the first step towards practical and efficient distributed system that can tailored various use cases. through intuitive user interface and comprehensive api sets, tritium enables seamless integration with other applications. with the upcoming release key elements tritium, there plenty excited about. appendix: more content for those inclined you seek more details about the tritium protocol content reinforce what has been written above, please continue reading. the real danger not that computers will begin think like men, but that men will begin think like computers. sydney harris update phases the fundamental contract phases are outlined through the three stages the tao framework. with each update, new components the contracting engine will released. this reduces overall contract complexity isolating the simplest and most useful features, and allows businesses that are building the nexus software stack have input the forward development and outlines the standards for each release. this very important for streamlining the integration between consumers, businesses, and networks, every component complements one another such that none can exist isolation. applications the following sections will outline some the practical use cases posttritium development environment. these use cases build upon different aspects the network ledger such reputation, contracts, and register states. receive accounts the incorporation advanced contracts into the software stack allows the generation receive accounts with built-in smart financial instruments, such stipulations funds received and their appropriation. such instruments could prevent holder from receiving funds deposited into their account from unapproved source origin, require receive signature from the receive account i.e. receipt, prevent funds from being sent invalid address. extrapolating further, smart financial instruments such receive signatures can expanded into form multi-signature contracts, where senders funds into the receive address would required sign together for the movement any the funds. the case crowd funding decentralized autonomous organizations, contributors members are able decide together how the funds are spent, increasing accountability and transparency. ledger level dao decentralized autonomous organization's (dao) guiding principle the foundation organization-wide democratic process governing all funding proposals. industry rife with speculation and "initial coin offerings" (icos) attracting millions funding, dao provides both accountability and transparency. the following example, propose dao structure that can built the nexus framework. first, this dao would receive organizational signature chain, with other "founders" the organization the other signatories. the data chain can publish certain references by-laws simply rest the genesis transaction. when making funding proposal, they would create receive account contract with stipulations and requirement for the movement any nxs collected token vote. this collective authorization can seen the diagram below: token issuer(s) (a, and the above diagram) would required propose budget the initial fund raising event, and for their token holders ratify future movements tokens. this creates secure ledger-level series organizational contracts that allows businesses, consumers, and investors function more streamlined and connected way. nexus aims transition the nexus embassy(s) into global dao called distributed autonomous community (dac) and doing, honor its founding principles: the people, for the people. more details how this will function will delivered the obsidian white paper. tokenized data signature chains can prove ownership distributed ledger publishing meta-data representation (token data) regarding work art, logo slogan, domain name allocation, patents copyrighted material. anyone can access copyrighted material simply purchasing and holding the token from secondary market. requirements for this data are set within the parameters the copyright contract, when someone pays license fee for the use this published data, this fee then distributed the token holders. this concept will enable anyone buy sell shares representing physical objects, art, music any other agreed means, allowing anyone create, distribute and monetize single, accessible platform. supply chains signature chains and cryptographic identity can also facilitate supply chains, which are often cumbersome and inefficient. supply chains distributed ledger can trace the history products from start finish, providing trustworthy information regarding standards and certifications. advanced contracts can automate many processes, eliminating costly delays and reducing double handling. greater transparency supply chains can allow consumers make informed choices that reward sustainable and ethical practices. locator/id separation protocol (lisp) level indirection for addressing and routing lisp operates the osi network layer and architecture that decouples address identity from address location. the current internet architecture, address combines who you are with where you are connected the network. lisp extends the internet architecture incremental and compatible way allow addresses come two forms, end-point ids (eids) and routing locators (rlocs). this level indirection allows network overlays built where eids are the periphery the overlay, and rlocs are routable addresses the internet underlay routing system that operates today. the performance the underlay routing system remains unchanged, the mapping and linking eids rlocs occurs entirely the overlay. nexus over lisp the nexus applications and daemons, which run the osi application layer, send unicast and multicast packets that are sent and received eid addresses. lisp, which runs the osi network layer, finds where eids are topologically located looking eid addresses mapping system. the mapping system decentralized and distributed for security and scalability and used find one more rlocs for eid. each nexus wallet miner assigned single eid address. the nexus node has multiple network interfaces, they are assigned either statically dynamically with rloc address. lisp registers signed mapping for eid-to-rlocs the mapping system. the nexus node moves, the eid remains allocated and new rlocs are allocated and registered lisp the mapping system. this allows applications remain connected without needing deal with node mobility issues. nexus nodes can also grouped lisp multicast groups, which can addressed through multicast group addresses. the lisp mapping system tracks and authenticates the location nodes the overlay, even they change physical location connection point. another layer security the lisp overlay provides another layer security for nexus applications supporting crypto-eids, which are similar nexus wallet addresses. crypto-eids are hashes public-keys where the mapping system stores public-keys and performs lisp message verification each control-plane message. the data-plane, all nexus packets sent the overlay are encrypted and contain packet integrity checking packets are immutable and cannot eavesdropped on. the lisp overlay makes use several state the art cryptographic mechanisms. the control-plane, ecdsa and sha- are used for digital signatures with dynamic one-time key exchange. the data-plane, many ciphersuites are available for packet encryption and integrity verification such aes-cbc, aes-gcm, chacha ciphers, and sha and poly icv hash functions using elliptic-curve dynamic key exchange. for the nexus user, this level security allows your communications remain private, preventing any eavesdropping between peers. advanced level scalability since many computers and devices sold today have multiple network interfaces, they are usually only used provide redundancy. the wi-fi interface goes down then the lte interface used. when nexus and lisp run together device, each network interface assigned rloc address. remote nodes that want communicate can use either rloc address load-share traffic across all your network interfaces. the remote node can even test for "underlay distance and latency" and switch back and forth, disproportionately send one rloc versus another. the integration nexus and the lisp overlay helps achieve scalability through reduced network latency truly unique manner. furthermore, the -bit ipv address used most network protocols will unable support the future growth networked devices. nexus and the lisp overlay will use -bit ipv eid addresses that can accommodate far more devices the network. together, nexus and lisp form the world's first truly distributed, secure and scalable application and infrastructure network. open standards and open source lisp began the internet research task force (irtf) and then transitioned standards development the internet engineering task force (ietf) use case development and protocol extension work still continues the ietf lisp working group which meets times year. there are many vendor and open-source implementations available and thousands deployments enterprise and service provider environments. for more information about lisp, you can find presentations, demos, testimonials, and detail specifications http://www.lispers.net. list contributors colin cantrell architect colin@nexus.io dino farinacci protocol engineer farinacci@gmail.com shea laver writer editor shea laver@optusnet.com.au jules alexandra writer jules@nexus.io brian smith core developer brian@nexus.io april bunje writer gramalkin@yahoo.com steve lackey core developer steve.lackey@kadima.consulting written some us, given all the nexus community team@nexus.io references the osi reference model and protocols https://flylib.com/books/ en/...// unicast flood networks https://www.studeersnel.nl/nl/document/ avans-hogeschool/informatiebeveiliging/werkstukessay/ paper-deep-en-dark-web//view classification multicast routing protocols https://www.researchgate.net/figure/ classification-of-multicast-routing-protocols_fig_ big notation https://www.khanacademy.org/computing/ computer-science/algorithms/asymptotic-notation/a/ big-o-notation guru: universal reputation module for distributed consensus protocols https://eprint.iacr.org//.pdf network routing topology https://retroshare.readthedocs.io/en/ latest/concept/topology/ elliptic curve cryptography (ecc) brainpool standard curves and curve generation https://tools.ietf.org/html/rfc cryptographic key length recommendation from organizations https://www.gronau-it-cloud-computing.de/en/ cryptographic-key-length-recommendation-from-organizations/