the power connectivity the hands the people decentralized mobile mesh networking platform using blockchain technology and tokenization. technical white paper december date last updated version this draft document for open community review. subject change. this document constitutes description the rightmesh platform and the functionality the rightmesh tokens; for informational purposes only and may change the rightmesh technology develops over time. (c)--rightmesh gmbh swiss company incorporation), operating division left. technical white paper: decentralized mobile mesh networking platform powered blockchain technology and tokenization authors: dr. jason ernst, dr. zehua (david) wang, saju abraham, john lyotier, chris jensen, melissa quinn, aldrin d'souza change log date version comments/edits contributor sept v.. initial version the technical paper dec v.. updated the token model, added networking details, added some basic assumption calculations dec v.. updated legal statements dec v.. updated legal statements and global edits dec v.. minor edits (c) rightmesh version page table contents introduction meshid rightmesh system overview roles layers mobile android architecture java architecture rightmesh networking stack layered architecture similar the internet one-hop connectivity autonomous connectivity multipath, end-to-end, reliable mesh communications open whisper signal end-to-end encryption rightmesh routing internet path maintenance rightmesh token engine remote transaction executor token integration token superpeer architecture device roles for tokenization buying and selling resources, interaction with rightmesh incentivised routing rightmesh mesh token channels why involve the superpeer? granularity payments potential issues closing out channels tracking data forwarded and payouts intermediate nodes supply traffic and infrastructure temporary storage for mobility developers api end-users creating feedback loops summary technical roadmap (c) rightmesh version page this not prospectus any sort this document does not constitute prospectus any sort not solicitation for investment and does not any way pertain offering securities either canada the united states, and canadian and united states residents are expressly excluded from contributing exchange for any rightmesh tokens the public contribution offering. this document constitutes description the rightmesh platform and the functionality the rightmesh tokens; for informational purposes only and may change the rightmesh technology develops over time. disclaimer: this draft rightmesh technical white paper for information purposes only. left the dot media inc. (dba left), rightmesh gmbh swiss company incorporation), and all affiliated and related companies not guarantee the accuracy the conclusions reached this paper, and the white paper provided "as is" with representations and warranties, express implied, whatsoever, including, but not limited to: (i) warranties merchantability, fitness for particular purpose, title noninfringement; (ii) that the contents this white paper are free from error suitable for any purpose; and (iii) that such contents will not infringe third-party rights. all warranties are expressly disclaimed. left, rightmesh gmbh and its affiliates expressly disclaim all liability for and damages any kind arising out the use, reference to, reliance any information contained this technical white paper, even advised the possibility such damages. event will left, rightmesh gmbh, its affiliates liable any person entity for any direct, indirect, special consequential damages for the use of, reference to, reliance this white paper any the content contained herein. recipients are specifically notified follows: offer securities: rightmesh tokens (as described this rightmesh technical white paper) not intended constitute securities any jurisdiction. this white paper does not constitute prospectus nor offer document any sort and not intended constitute offer solicitation securities any other investment other product any jurisdiction. advice: this rightmesh technical white paper does not constitute advice contribute exchange for any rightmesh tokens, nor should relied upon connection with, any contract contribution decision. representations: representations warranties have been made the recipient its advisers the accuracy completeness the information, statements, opinions matters (express implied) arising out of, contained derived from this white paper any omission from this document any other written oral information opinions provided now the future any interested party their advisers. representation warranty given the achievement reasonableness any plans, future projections prospects and nothing this document should relied upon promise representation the future. the fullest extent, all liability for any loss damage whatsoever kind (whether foreseeable not) which may arise from any person acting any information and opinions contained this rightmesh technical white paper any information which made available connection with any further enquiries, notwithstanding any negligence, default lack care, disclaimed. (c) rightmesh version page isk warning: potential contributors should assess their own appetite for such risks independently and consult their advisors before making decision contribute exchange for any rightmesh tokens. ___________________________________________________________________________ introduction this technical paper intended supplement the ightmesh white paper http://www.rightmesh.io/whitepaper which more broadly provides overview the opportunity for rightmesh and the rightmesh token generating event. this technical white paper gives more details and assumes in-depth knowledge complex systems, networking, encryption, and cryptocurrencies. throughout each section, the general high-level architecture presented, along with justifications for design decisions. our progress date will presented, and areas where future work required will specified each section. will conclude with summary the ongoing technical roadmap which believe helps support the original paper. the document makes the technical case for tokenized mobile mesh network where the devices are mostly smartphones, iot devices, sensors, automobiles, and other devices that have had difficulty connecting traditionally since they may move into (or exist in) parts the world that are connected infrastructure poorly--and are likely remain such for some time. the token system designed incentivize devices and people join network, stay within network, and act virtual infrastructure. has been designed that can work immediately today's cryptocurrency environment. that is, the system operates under the assumption that smartphones are still not capable participating full crypto nodes. the same time, decisions "future proof" the technology have been made with the assumption that this will not always the case. (c) rightmesh version page meshid given that rightmesh able support connecting together multiple wi-fi hotspots--each with their own set addresses (both ipv and ipv), well connecting via bluetooth (with mac addresses), and the future other networks where there may even more different addressing schemes--one the first problems aimed solve how identify devices the network uniquely. while building yo! (one the company's first offline apps), this was handled the typical manner where unique ids are generated from internet-connected server. mesh where the devices may never touch the internet, may not for long period time, this makes impossible form the identity. chicken and egg problem. with rightmesh, needed generate the the device without requiring the internet so. researching this problem led the company into cryptocurrencies, where this problem had already been addressed and proven way where there almost chance ever generating the same twice. currently, rightmesh generates ethereum account using the ethereum-j library the account generated compatible with any popular ethereum client, such geth mist myetherwallet this identity generated once when the rightmesh library first launches the device, and remains the device until the user has removed manually. this means rightmesh apps are installed and uninstalled, the same identity will present unless the user removes it. all rightmesh apps that are running the same time also share the same identity, similar how your computer has the same address for your web browser, your slack client, and your games (unless you leave your house and travel work with your computer and get different address your new location). with rightmesh, despite all the movement and changing ips while you move, your rightmesh identity will stay constant. this permanence how other devices the mesh will always able deliver data the right device. the identity the mesh the public ethereum address that gets generated along with the account. the generated account encrypted using default password that rightmesh provides (as proof that the service can the encryption correctly). also contains the public and private key associated with the account ensure works the ethereum network when executing transactions. launch time, rightmesh aims have the meshid functioning such that user will (c) rightmesh version page able set their own password for the encryption that their account locked and protected the password they would expect with account generated any other client. ethereum was selected platform mainly for its smart contract capabilities which the company uses for incentivizing the mesh (more details later sections). however, ethereum could swapped for any cryptocurrency that operates similar manner. there are several drawbacks currently with using ethereum, such needing ether the account order transfer tokens (to pay for the gas), the high cost small transactions, and the scalability problems that have been seen some recent icos and tges. many these problems are actively being worked currently the ethereum community. for instance, will soon possible pay for the gas transaction with the token rather than ethereum. there are further enhancements coming that will enable microtransactions occur more affordably. there have been proposals for side chains, which initially also proposed, however, after feedback from the initial version the white papers, the community suggested that the sidechain approach were intending use was not the best option. with the sidechain intended release the full transparent chain generated the side and also allow community partners run superpeers. allowing community partners run superpeers this model would have allowed attack, would have forced run many superpeers ourselves, enforce that the community could only operate fewer than us. would also force the community trust that would run the superpeers correctly and that would "approve" new community superpeers fair way. are currently working towards version that removes the sidechain altogether address these concerns. this new version will use based uraiden and lightning whereby payment channels are used between the buyers bandwidth and the superpeers, and sellers bandwidth and the superpeers. will likely have port the python microraiden client java for the rightmesh library. this client will open sourced that the community has the benefit another type client use with raiden and will also able use the same code rightmesh that get the benefit community improvements the library becomes more widely used. initially, will operate the superpeers that can implement the approach more quickly and that can least assume that the superpeers will initially not acting maliciously. (c) rightmesh version page course, the community will have trust first that the superpeers that rightmesh will operate will not act maliciously. then quickly possible after this, will work towards the cases where the superpeers may operate maliciously, and so, the tokens tied the channel are lost punishment. have previously built some proof-of-concept apps which could perform the necessary transactions support token transfers private semi-public side-chain. these contracts have been open sourced and added git. all the portions our library that touch the cryptocurrency and incentivization side will continue open sourced, along with all the sample apps built rightmesh, the community can understand deeply how our solution works and work with build something incredible. (c) rightmesh version page rightmesh system overview figure shows the high-level system overview and tries capture all the possible layers and roles within our system from the perspective data-sharing network where there are some devices that wish sell their data for rightmesh tokens (mesh); some that wish purchase; and some that wish participate forwarding (infrastructure) nodes. the highest layer, also provide some additional infrastructure that presently cannot eliminated until more feasible run full ethereum nodes directly the mobile devices themselves (and get around things like firewalls put place existing isps). figure high-level system overview (c) rightmesh version page roles all the following discussions, the roles and layers are specific only data traffic. some cases, devices which are unwilling forward data can still earn tokens other ways such providing storage, processing, other resources. igure there are few key pieces and layers this system. there are token superpeers (labelled such), which are responsible for the routing packets between geographically separate meshes, and for relaying ethereum transactions from devices the mesh the real ethereum network. there are also app superpeers (labelled such more details follow). also possible for app superpeers and token superpeers exist the same node (although not necessary that app superpeer also token superpeer). the phones which are directly connected cell towers, wi-fi hotspots, and other internet connections are called internet sharing devices, which may may not actually share their internet access. orange are infrastructure nodes (which may also consumer nodes). grey are non-infrastructure consumer nodes. token superpeer devices are running full ethereum nodes, and execute signed transactions the ethereum network behalf the participating devices. these nodes also act the main linkage between geographically separate meshes. for instance, the far left connected the cellular network, can consider that mesh made devices canada, while the mesh connected the wi-fi router the middle could mesh formed bangladesh. since they are too far away for single mesh form, have rely existing infrastructure (isps, wires, etc.), and use token superpeers facilitate this communication. there are two ways which this can achieved. first, the method that working right now simply act forwarding node, and directly forward all traffic from one mesh another. the second method, act more lookup service. this case, the token superpeer would able determine which other internet sharing device (in blue) traffic needs routed to. after this determined, the information sent back the internet sharing device the source side where will communicate directly with the internet sharing device the destination side. this more complex since must able get around firewalls order function all networks. this second method left future exercise that (c) rightmesh version page will bring our costs down (since will lower our data costs from operating the token superpeer aws some similar service). figure "data-mule" capability linking geographically separate meshes where some lack internet connectivity addition token superpeers, also possible for app developers provide their own superpeers. this scenario, the app superpeer would act trusted device (trusted only the app which making use it). for instance, app which allows people play geocaching may also deploy geocaching superpeer. while the app lets people discover geocaching locations, where the location actually remote sensor, which relays data into the mesh eventually towards the geocaching superpeer, where the data may stored and presented normal traditional websites. this "data-mule" behaviour demonstrated igure the app superpeer would able provide some further infrastructure needs that normal mesh app could not provide. for (c) rightmesh version page instance, consider mesh app where there are remote sensors, but location where people occasionally pass (e.g., the mountains northern canada). app superpeer would used collection point where the data would stored for visualization, analysis, etc., and the rightmesh library would handle routing, despite the phones not always being connected the internet. our remote sensor example hiker passes by, would forward the collected data the next time the phone had connection the app superpeer through rightmesh automatically. note that app and token superpeers may may not exist the same, physical aws instance. internet sharing devices (supply) may connected the internet using cellular network, wi-fi, ethernet (if the sharing device router, computer, etc.), and have the ability share their internet connection through the rightmesh library. note: internet sharing this time, means that can use the internet connection link other geographically separate meshes, superpeers, but not general purpose internet access presently. general purpose internet traffic the roadmap, however. layers the app and token superpeers are directly connected the internet using more powerful devices than mobile phones (essentially what existing systems require most cases). should consider the internet connection these cases fast and stable, and the devices themselves should fairly powerful and highly available. the devices should also have the ability control firewalls and open ports. currently, these devices would likely run rightmesh itself interim basis and exist aws, azure, etc. they will also able run eventually community members with systems that match the performance requirements operate such node. the the longer run, these devices will also located smartphones with the same characteristics. the next layer down the small, blue square devices: the internet sharing (supply) devices. these devices are connected directly the internet although they don't have all the time. this internet connectivity decision left the users these devices. though the decision may depend what network they are connected to; for instance, some users may not wish internet sharers the cellular network, but they will happily using their home wi-fi network. these internet sharing devices can have any speed internet connection, and the (c) rightmesh version page capabilities the devices may much lower. they not need run full ethereum node. preferably, these devices are not moving too much since many other devices may depend them for access. however, other nodes depend them for access, moving device still better than nothing. currently the rightmesh library selects the routing path internet devices based hopcount and cost, however eventually the rightmesh library will able select which path take eventually based how mobile is, while prioritizing those that will result the best performance for the lowest cost for everyone. the next layer the orange squares. these squares indicate devices willing provide infrastructure. these nodes may also consumers (demand). the infrastructure nodes not have internet connection themselves, they wish use internet data that isn't being forwarded behalf another, they will also need pay internet seller rightmesh tokens. there also special type infrastructure device, which the orange device igure that showed interfacing with remote sensors. this device mobile piece infrastructure where providing forwarding result its mobility. these devices may have opportunity earn extra incentive due the effort physically moving provide the data delivery. this could used offset costs travel the remote location such gas, just time and effort for hiker. the final layer the light grey devices. these devices are those which not wish provide infrastructure, and they solely want consume (demand) data the network. mobile android architecture android, the rightmesh library functions service. multiple apps can make use the service the same time, provided they are all listening different mesh ports. the rightmesh developer's portal (shown igure allows developers register keys which are associated with each mesh app they build. when registering the developer key, they also pick which mesh port(s) the app will listening and verify that other apps are using the same key. the developer who created the key may share access with other developers, teams can collaborate the same app without sharing login information. one the developers leaves the project, their access generate valid keys may removed. farther down the technical roadmap, the developer (c) rightmesh version page portal will also used help developers debug mesh connectivity through visualisation, file bug reports, deploy updates through the mesh, and mesh analytics platform. figure rightmesh developer's portal when the app connects the meshservice, the service parses cryptographically-signed license key that generated compile time and packaged with the app our rightmesh gradle plugin. (an example gradle file for compiling with rightmesh can found our hellomesh project github. the signed license key file requires valid developer account with access the key compile time. inside this license the developer key, and mesh ports that the app allowed use. again, similar the meshid problem, tried design this system that apps may form meshes without requiring internet access validate the library (although make the assumption that internet access available compile time for the developers). (c) rightmesh version page figure multiple apps running the same device, using common service figure shows the rightmesh service running single phone, with three different apps running the same time. they are all running different mesh ports. each app also comes with portion our library call the androidmeshmanager, which performs all the logic connect the service, and fire events such peers joining leaving the network, data arriving, the result encryption keys being exchanged. figure mesh with three devices shown. notice that device one has three apps running. apps are only notified peers which are running the same app (the developer does not get access all the devices the mesh, even though other devices may act forwarding nodes order reach other devices). for instance, app listening mesh port will only "see" peers and app will only "see" peers and app will "see peers and well. data being sent from peer peer will sent through peer even though isn't running either the apps that peer and are using. example app which can basic user discover, send data, and receive data available our hellomesh github project. (c) rightmesh version page figure multiple devices communicate through the service, where each phone may have different apps java architecture the java architecture less developed this moment, and does not provide service architecture. such, only single mesh app can run the java device currently (although turning into service the works and the roadmap). the java architecture mostly used implement the superpeers right now, although could also used iot devices, routers, and other less mobile equipment. have also done proof-of-concepts hackathons where the java version acted internet sharing node. also quite easy for infrastructure-less node. performing tasks--such (c) rightmesh version page linking together wi-fi, wi-fi direct, and bluetooth networks somewhat platform dependent and still progress present. the roadmap aims support linux and windows the near term. version rightmesh (december now support relaying data from one geographic mesh another via the superpeer. the source the superpeer available github. have also recently added hellojavamesh java app which can communicate from computer phones running the hellomesh app android. this can work either through the superpeer, the computer connects phone hotspot mode. are still working integrating the raiden network, but expect have this completed around the same time token generating event. also support visualizing the connectivity the global mesh with the token-superpeer currently (note: the link, shows internet sharing nodes connected early version our superpeer. there also video that shows phones coming online our visualization tool). this will help the network grows debug connectivity issues. (c) rightmesh version page rightmesh networking stack figure high-level system overview layered architecture similar the internet the rightmesh networking stack shown igure builds off the success existing internet protocols. the design layered design, improvements can made iteratively each the layers without having full redesign the entire system. everywhere rightmesh, next-hop connectivity formed without user intervention. this core guiding principle rightmesh: the user should not have approve every single device connection (as one has with bluetooth pairing, for example). the only way widespread mobile mesh network will scale from user experience point view the connectivity can made without user authorization every connection. the user required approve every single connection every other device the network (how some similar libraries work), would difficult get meshes that scale beyond few devices locally and most people will inclined only form meshes with people they directly know. (c) rightmesh version page one-hop connectivity bluetooth was used starting point because was possible make connection with other peers without requiring pairing. with our wi-fi direct and wi-fi implementations, the same also possible. rightmesh makes connections programmatically using three different types next-hop links. within our design, rightmesh can add support for higher versions bluetooth figure out ways make the connectivity occur without user intervention. may able this making use some the other connectivity pathways already have way signal information between devices set the faster connections. everything below the autonomous connectivity stack can thought similar layer two protocol normal networking stack (think mac addresses being mapped addresses). instead that, our protocol maps ipv, ipv, mac, and other addresses meshid. this layer responsible for exchanging local peer information. make use clustered routing where hierarchy imposed the devices based the internal roles the devices are assigned. this means that not every device needs know the connectivity every other device, allowing the rightmesh network scale significantly higher than competing approaches. this same cluster based architecture lends itself well enabling caching the network which also our roadmap. for instance, the same nodes that are cluster heads would ideal candidates also cache common apps, ads, and multimedia content. autonomous connectivity the autonomous connectivity layer does the job assigning internal roles devices our network. this decides whether device will hotspot mode not, which devices connect via bluetooth, whether use wi-fi, wi-fi direct, both, all three. the developer does not need worry about how the autonomous connectivity works. for the developer far they know, there list meshids that are either connected, not, running the same app. the rightmesh approach autonomous connectivity something that will constantly get better, but was kept simple sort mvp state. fully-automated mode, the user will only need select whether they wish participate forwarding node, and whether they wish share their internet, not. they wish sell their internet, they will also need set the price they wish (c) rightmesh version page sell for (in mesh tokens). conversely, the user wishes consume internet, they must set the price they are willing purchase internet for (in mesh tokens). they not wish pay any mesh tokens and there are free paths, the apps will still function, but they will only able use localized version the mesh. also possible, advanced mode, for users control exactly which internal role the device should use. this capability packaged automatically with every app that uses the rightmesh library (see nd-users section). multipath, end-to-end, reliable mesh communications combined with the routing layer and the one-hop connectivity layer, multipath end-to-end reliable communication forms really unique and valuable part the rightmesh solution. this what distinguishes rightmesh from most its competition. there are few ways communication typically occurs mobile meshes: broadcast everyone (either using udp existing broadcast multicast approaches, tcp link link basis end-to-end capability single-path end-to-end tcp (with many limitations outlined below) best-effort udp communications with reliability many existing mesh approaches simply make use existing tcp provide end-to-end connectivity. however, tcp not well suited mobile mesh network for several reasons: unless rooted, mobile phones not let the user customize the version tcp being used. mobile mesh networks are made devices that frequently connect and disconnect. when this occurs, tcp connection would require end-to-end reestablishment connection, with something like -way handshake. with ipv often impossible make end-to-end tcp connection because the address one hotspot means nothing the neighbours three hotspots away. such, there mechanism exchange this information between hotspots and have the routing automatically work. this case, may possible have tcp each single-hop link, but there are still the same drawbacks from some the other bullet points aware of. the case performing tcp each link, there still mechanism prevent entire end-to-end path from being saturated with traffic (the congestion control will (c) rightmesh version page only work link-by-link basis, leaving the queues the intermediary nodes potentially overload). tcp often gets interference and congestion mixed up. may start backoff unnecessarily thinking that congestion occurring when temporarily poor network conditions due external factors (e.g., vehicle driving through the path the signal, microwave being turned on, tree being between two people who are moving, etc.). the tcp most non-rooted phones cannot handle multiple paths. this means even your device has bluetooth, wi-fi, and wi-fi direct connection available, only able use single one them for one data stream. this also applies internet connections out the mesh well. there are existing versions tcp that can this, notably mtcp; however, almost never included commercial phones. rightmesh borrows concepts from delay-tolerant network protocols such ltp and has combined them with multipath-tcp create delay-tolerant protocol when the network becomes fragmented, but high performance the cases where well connected. rightmesh also uses concepts from software defined networks overlay networks and self-* networks open whisper signal end-to-end encryption rightmesh supports end-to-end encryption using the open whisper/signal library (whispersystems.org). this library has been modified that longer involves the server portion, since that would require internet access. rightmesh offer two levels security: one where the key directly exchanged one hop (this the more secure option). the second, where the key exchange occurs through the mesh over several hops, less secure because may subject man-in-the-middle attack. rightmesh does not store any keys any server, any key exchange that occurs securely means only the recipients can decrypt the data. for the company, there way rightmesh can compelled give the keys because none are stored. are working ways improve this process (e.g., like sending the key split across multiple paths that any attacker would need compromise many devices the same time). the company also working ways improve the user-friendliness secure key exchange such with barcode nfc. compared other (c) rightmesh version page mesh platforms which broadcast every device, rightmesh only forwards directly routing path. result, fewer devices have data flowing through them, making much harder attack. rightmesh routing internet path maintenance part our peer discovery protocol, information regarding possible paths the internet are provided devices local mesh. currently, the library supports single path the internet, but because our multipath transmission support, will eventually possible also support multiple paths and from the internet simultaneously. rightmesh token engine remote transaction executor since devices rightmesh have identification based ethereum account (including the private and public key), using the ethereum-j library, possible generate signed transactions from the account and pass them through rightmesh the token superpeer. the token superpeer runs full ethereum node. when the superpeer recognizes that remotely signed transaction being passed it, the superpeer executes the transaction its local geth instance and waits for the confirmation. then passes the result back the device the network which executed the transaction. this means that any device within rightmesh network able send ether another device, query its own ether balance and execute contracts the ethereum network from potentially many hops away from the internet. best, far know, thin clients exist mobile phones which can perform similar capabilities when the device connected the internet directly (similar how the blue internet sharing devices are). however, nothing exists that allows for cryptocurrency transactions from outside the range traditional internet access. furthermore, the token superpeer able execute token transactions behalf clients. more information about this found the section: oken integration token superpeer architecture. (c) rightmesh version page token integration token superpeer architecture managing limited resources known hurdle for rightmesh, whether regards battery life, network capacity, memory and storage limits. because these constraints, currently not feasible run full crypto node the mobile phone itself. allow for ethereum transactions occur, the nodes would sign transaction locally and relay towards full ethereum nodes (i.e., superpeers), running the edges the mesh. some these nodes would run rightmesh and some community partners. this model may evolve into industry top our ecosystem since these nodes can earn tokens performing mining-like function keep the network operating. launch, these superpeers would run computers existing cloud providers spread geographically around the world. the future, mobile devices improve, believe will possible eliminate this centralized aspect, much this functionality may move directly into the internet sharing devices themselves. present, the biggest limitation hardware, not feasible for phones act full ethereum nodes. the superpeer functions proxy, hole-punching aid, translator between the ip-based internet and our mesh protocols, and ethereum full-node. all the code that makes use ethereum technology will open sourced, along with any contracts, that the community can verify and improve upon the stability the platform and encourage the users trust that things are operating correctly. rightmesh will also open sourcing some its own created apps demonstrate possible implementations the mesh sdk: https://github.com/rightmesh the company will explore open sourcing its core mesh technology once the network becomes hardened and the network established. from developer's perspective, they simply need define the transaction they wish make within their rightmesh application, and issue call our library. rightmesh will perform the transaction signing and optimize how route the packet out the mesh and into the ethereum network. the full ethereum node the edge the mesh also running java version our library. uses the local remote procedure call (rpc) mechanisms relay the transaction locally running geth client. the geth client will verify the transaction and execute it. the result the verification and execution will then relayed back the mesh node which originated the transaction. (c) rightmesh version page using similar approach, rightmesh could adapt support other cryptocurrencies well, such bitcoin. figure multiple "token superpeer" architecture support incentivization internet sharing devices figure shows rightmesh network with two participating token superpeers. the full, high-level diagram the start the document, there also may app superpeers, but these are left out this figure for simplicity. this figure, the left superpeer has two geographically separate meshes attached while the right superpeer has two different geographically separate meshes attached it. the superpeers may deployed all around the world, similar how aws instances are deployed different places based geography and demand. the left superpeer may deployed canada, and have mesh vancouver and mesh toronto, while the right superpeer may deployed bangladesh and have mesh dhaka and mesh khulna. the green line represents fast internet connection between the two superpeers. this important because the initial implementation, the data will relayed directly between the superpeers reach the farther meshes. addition, the superpeers are running full ethereum nodes. the ethereum network, the two token superpeers may also peers each other. addition, there may many public peers the ethereum network. (c) rightmesh version page device roles for tokenization recall from the system overview, that some portion the devices provide supply the network: these are the internet sharing devices. the above figure, these are the devices connected directly the token superpeers. devices which aid delivering the supply the consumers (demand) are called infrastructure nodes. the consumers may scattered throughout the mesh, and times they may both consumers and infrastructure nodes. launch, incentivization will possible when device wants send traffic from one separate mesh another through the internet sharing devices via the superpeers. when enable general purpose internet traffic, any device which relays any internet traffic will able incentivized well. buying and selling resources, interaction with rightmesh device user requesting the resources, whether client device service provider, sets how much they are willing pay consume certain number bytes traffic. this the demand side the marketplace. for instance, people around the world are fairly familiar with the concept data consumption rate whereby user may pay for their data consumption their isp mobile carrier, typically priced per data. this price set via free market with minimum floor, where the floor includes the base commission for rightmesh services and for superpeers who execute the rightmesh token transaction. (c) rightmesh version page figure example resource accounting built into rightmesh similarly, the device users which wish participate internet sharing device, caching device, mobile delivery device are able set their minimum selling price for their resources. start, likely that only buying and selling data within rightmesh will supported; however, the roadmap also includes possibility incentivize app and distribution; storage the phone (similar to, potentially partnership with filecoin like services); usage the processing (c) rightmesh version page resources (similar to, potentially partnership with golem like services); and enabling token transfers between devices the mesh. this why the word esources used instead ata incentivised routing rightmesh the rightmesh library would interact with the incentivization model such that would always searching for paths the internet minimize cost and maximize performance. local mesh, rightmesh selects routes based the least hop count path. this was chosen because was very simple implement and performs well enough for proof-of-concept network. when tokens are involved for the internet transfers, there are three strategies that are user configurable. first, local only (i.e., don't spend any tokens). second shortest path (i.e., there's both local path and internet path the same device, take the shortest one, even costs tokens). third cheapest path (i.e., the same case, take the free path, even longer). our routing protocols become more sophisticated, shortest path would replaced "best performance" which would derived metric using formula stimated erf ormance etric devices consuming data, how quickly will data consumed? after answer some these questions, there will lots opportunities improve the performance will learn significant amount about where the network weak, while helping generate ideas how improve. one the biggest challenges for the network side automated testing the library. given that much the operation the library depends complex connection topologies between groups phones, difficult simulate effectively. there some portion the library that have applied unit testing and limited offline testing to; however, some requires real device testing there are aspects that need tested specific particular android versions, the (c) rightmesh version page orientation the phones near each other, and the order which the devices discover each other. would like support phones from android present; however, with the wide range capabilities, the way android handles permissions, and other differences between devices, this means there huge scaling problem automating the whole process since the number testing possibilities grows exponentially the mesh size grows. are looking ways automate much this possible future builds are stable across wide range devices. mentioned the incentivization side, the biggest challenge going forward integrating the contracts with the mesh. don't anticipate this being particularly difficult because have already had the mesh execute remote signed transactions, and can the same with contracts. the biggest challenge here getting the sidechain part right: whether this using ethereum, lightning, ripple, some other technology. addition, getting the economics the system correct that there stability, that tokens don't end getting stuck and not used the network, etc. this where are looking for the most community feedback and advice are more mesh focused than blockchain focused, but recognize that blockchain technology the best path toward incentivizing the mesh. once the basic data sharing incentive structure place and well understood, the next step will apps for and app distribution, "data mule" incentives, storage/caching, processing, and more. are also rapidly growing our team canada, and are the lookout for more talent. whereas others are building walls, note that canada has new two-week processing program for skilled workers under new initiative invite the world. not discriminate based location, nationality, religion, sexual orientation, and are consistently recognized one the best workplaces british columbia, including winning the award two straight year from the tech association the best tech company that balances, "work, life, and play". you have experience (either academic professional), passion, and commitment doing things right, would appreciate hearing from you. (c) rightmesh version page welcome feedback via git, telegram, and more methods identified below. additional resources links rightmesh white paper: https://www.rightmesh.com/whitepaper website: https://www.rightmesh.io developer portal: https://www.rightmesh.io/developers/ corporate blog: https://www.rightmesh.io/news/ twitter: https://twitter.com/right_mesh telegram: https://telegram.me/rightmesh github: https://github.com/rightmesh careers: https://www.left.io/careers (c) rightmesh version page legal regulatory the rightmesh team aware potential risks associated with decentralized mesh networking platform and the associated tokens. the date publication this white paper, rightmesh tokens have known potential uses outside the rightmesh platform ecosystem and are not permitted sold otherwise traded third-party exchanges. this white paper does not constitute advice nor recommendation rightmesh, its officers, directors, managers, employees, agents, advisors contractors, any other person the recipient this white paper the merits participation the ublic contribution offering. participation the public contribution offering carries substantial risk and may involve special risks that could lead loss all substantial portion such contributions. not participate the public contribution offering unless you are prepared lose the entire amount you allocated contributing exchange for rightmesh tokens. rightmesh tokens should not acquired for speculative investment purposes with the expectation making profit immediate re-sale. promises future performance value are will made with respect rightmesh tokens, including promise inherent value, promise continuing payments, and guarantee that rightmesh tokens will hold any particular value. unless prospective participants fully understand and accept the nature rightmesh and the potential risks inherent rightmesh tokens, they should not participate the public contribution offering. rightmesh tokens are not being structured sold securities. rightmesh tokens not provide participation rightmesh gmbh its parent company left the dot media inc. and rightmesh tokens hold rights rightmesh. rightmesh tokens are rewarded functional good and all proceeds received rightmesh may spent freely rightmesh absent any conditions, save set forth this white paper. this white paper not prospectus disclosure document and not offer sell, nor the solicitation any offer buy any investment financial instrument any jurisdiction and should not treated relied upon one. holders rightmesh tokens assume risk when participating trading activities and such activities have inherent risks. unforeseen problems could result the loss all rightmesh token holder's funds rightmesh token value. (c) rightmesh version page all information here that forward looking speculative nature and may change response numerous outside forces, including technological innovations, regulatory factors, and/or currency fluctuations, including but not limited the market value cryptocurrencies. caution regarding forward looking statements this white paper contains forward looking statements information (collectively "forward-looking statements") that relate rightmesh's current expectations and views future events. some cases these statements can identified words phrases such "may" "will" "expect" "intend" "plan" "believe" "potential" "is/are likely to" "continue" the negative these terms other similar expressions intended identify forward looking statements. rightmesh has based these forward-looking statements its current expectations and projections about future events that believes may affect its financial condition, results operations, business strategy, financial needs, the results token generating event the value price stability rightmesh. addition statements relating the matters set out here, this white paper contains forward-looking statements related rightmesh's proposed technology and operating model; such statements speak rightmesh's objectives only, and not forecast, projection, prediction future results operation. forward-looking statements are based certain assumptions and analysis made rightmesh light its experience and perception historical trends, current conditions and expected future developments, and other factors believes are appropriate, and are subject risks and uncertainties. although the forward-looking statements contained this white paper are based upon what rightmesh believes are reasonable assumptions, these risks, uncertainties, assumptions and other factors could cause rightmesh's actual results, performance, achievements, and experience differ materially from its expectations expressed, implied perceived forward-looking statements. given such risks, prospective participants this token generating event should not place undue reliance these forward-looking statements. (c) rightmesh version page