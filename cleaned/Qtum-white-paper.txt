smart-contract value-transfer protocols distributed mobile application platform patrick dai neil mahi jordan earls alex norta qtum foundation, singapore foundation@qtum.org large-scale systems group, tallinn university technology, akadeemia tee tallinn, estonia alex.norta.phd@ieee.org abstract. blockchain-enabled smart contracts that employ proof-ofstake validation for transactions, promise significant performance advantages compared proof-of-work solutions. for broad industry adoption, other important requirements must met addition. for example, stable backwards-compatible smart-contract systems must automate cross-organizational information-logistics orchestration with lite mobile wallets that support simple payment verification (spv) techniques. the currently leading smart-contract solution ethereum, uses computationally expensive proof-of-work validation, expected hard-fork multiple times the future and requires downloading the entire blockchain. consequently, ethereum smart contracts have limited utility and lack formal semantics, which security issue. this whitepaper fills the gap the state the art presenting the qtum smart-contract framework that aims for sociotechnical application suitability, the adoption formalsemantics language expressiveness, and the provision smart-contract template libraries for rapid best-practice industry deployment. discuss the qtum utility advantages compared the ethereum alternative and present qtum smart-contract future development plans for industrycases applications. key words: smart contract, business network model, dapp, mobile, information logistics, cross-organizational, peer-to-peer, distributed system, e-governance, qtum framework introduction orchestration and choreography protocols that facilitate, verify and enact with computing means negotiated agreement between consenting parties, are termed smart contracts. the latter initially find application diverse domains such as, e.g., financial-technology [], internet-of-things (iot) applications [], digitalsigning solutions []. essential aspect smart contracts decentralized validation transactions, initially means so-called proof-of-work (pow) []. the core technology that enables smart contracts public distributed ledger termed the blockchain, which records transaction events without requir- alex norta ing trusted central authority. blockchain technology spreads popularity with the inception bitcoin [], peer-to-peer (pp) cryptocurrency and payment system that comprises limited set operations the protocol layer. bitcoins use pow for transaction validation that computationally expensive and electricity intensive. contrast bitcoins, many smart-contract systems are equipped with the turing-complete language solidity that resembles javascript syntax and targets for enactment, e.g., the ethereum virtual machine. ethereum the defacto leading smart-contract system despite being plagued several deficiencies. first, proof-of-work transaction validation diminishes scalability the point where ethereum considered not feasible for most industry applications. second, recent crowdfunding casestudy, the ethereum affiliated solidity smart contract was hacked because security flaws resulting from lack the state the art with respect tools for formal verifications []. the security flaw resulted loss ca. million. consequently, ethereum performed hardfork resulting schism yielding two separate ethereum versions yet another ethereum hardfork was caused denial service attack, and more hardforks must expected for realizing proof-of-stake transaction validation and blockchain sharding []. more reasons limit widespread ethereum industry adoption []. for example, inability automate cross-organizational information-logistics, lacking privacy protecting differentiations between external- versus related internal private contracts, secure and stable virtual machines for blockchains with better performing proof-of-stake transaction validation, formally verifiable smartcontract languages, lite wallets that not require downloading the entire blockchain, and mobile-device solutions for smart contracts with simple payment verification (spv) []. the latter means that clients merely download block headers when they connect arbitrary full node []. while qtum uses the ethereum virtual machine (evm) for current lack more suitable alternatives, according [], the evm has deficiencies such earlier experienced attacks against mishandled exceptions and against dependencies such for transaction-ordering, timestamps, and on. also desirable for smart-contract system achieve industry-scalability with employing sidechains and unspent transaction outputs (utxo) [], achieving compatibility other blockchain systems such bitcoins [], colored coins []. furthermore, adoption features from the bitcoin lightning network yields scalability via bidirectional micropayment channels. http://solidity.readthedocs.io/en/develop/ https://www.wired.com///-million-hack-just-showed-dao-human/ https://bitcoinsmagazine.com/articles/ethereum-classic-hard-forks-diffusesdifficulty-bomb-/ https://cointelegraph.com/news/ethereum-hard-fork-no--has-arrived-as-dosattacks-intensify https://forum.daohub.org/t/whats-up-with-casper-proof-of-stake-andsharding/ smart-contract information- value logistics while smart-contract systems such ethereum attract attention, widespread industry adoption does not exist for the above discussed reasons. this whitepaper addresses the gap specifying the qtum framework for smart-contract systems that answers the question how develop smart-contract solution satisfy critical customer requirements for enabling cross-organizational information logistics reduce costs and time? establish separation concerns, pose the following sub-questions. what differentiating technological performance advantages qtum smart-contract solutions provide? what are critical smart-contract requirements the qtum framework satisfies? what are the unique features cross-organizational information logistics automation the qtum framework aims support? the remainder this whitepaper structured follows. first, section focuses concrete advantages the qtum framework for achieving technologically performance increases comparison related solutions. section gives functional- and quality goals combination with involved stakeholders for sociotechnically organized smart-contract systems. section shows how the running case supported the qtum-framework value-transfer protocol. finally, section concludes this whitepaper together with discussing limitations, open issues and future development work. qtum performance advantage one the primary goals qtum build the first utxo-based smartcontract system with proof-of-stake (pos) consensus model. the latter means the creator the next block chosen based the held wealth cryptocurrency. thus, blocks are usually forged, minted instead being mined, there are block rewards addition transaction fees and forgers receive percentage "interest" for the amount funds they stake. qtum compatible with the bitcoin- and ethereum ecosystems and aims producing variation bitcoin with ethereum virtual machine (evm) compatibility. note that differently ethereum, the qtum evm constantly backwards compatible. pursuing pragmatic design approach, qtum employs industry use cases with strategy comprising mobile devices. the latter allows qtum promoting blockchain technology wide array internet users and thereby, decentralizing pos transaction validation. the remainder structured follows. section compares the advantages bitcoin utxo versus the ethereum account model. next, section discusses the consensus platform for the qtum blockchain. section shows the integration qtum contracts into the evm. finally, section describes the payment model for qtum operations. https://qtum.org/ alex norta utxo versus account model the utxo model, transactions use input unspent bitcoins that are destroyed and transaction outputs, new utxos are created. unspent transaction outputs are created change and returned the spender []. this way, certain volume bitcoins are transferred among different private key owners, and new utxos are spent and created the transaction chain. the utxo bitcoin transaction unlocked the private key that used sign modified version transaction. the bitcoin network, miners generate bitcoins with process called coinbase transaction, which does not contain any inputs. bitcoin uses scripting language for transactions with limited set operations the bitcoin network, the scripting system processes data stacks (main stack and alt stack), which abstract data type following the lifo principle last-in, first-out. the bitcoin client, the developers use isstandard() function summarize the scripting types. bitcoin clients support: ppkh (pay public key hash), ppk (pay public key), multisignature (less than private key signatures), psh (pay script hash), and op_return. with these five standard scripting types, bitcoin clients can process complex payment logics. besides that, non-standard script can created and executed miners agree encapsulate such non-standard transaction. for example, using ppkh for the process script creation and execution, assume paying .btc for bread bakery with the imaginary bitcoin address "bread address". the output this transaction is: op_dup op_hash op_equal op_checksig the operation op_dup duplicates the top item the stack. op_hash returns bitcoin address top item. establishes ownership bitcoin, bitcoin address required addition with digital key and digital signature. op_equal yields true the top two items are exactly equal and otherwise false (). finally, op_checksig produces public key and signature together with validation for the signature pertaining hashed data transaction, returning true match occurs. the unlock script according the lock script is: the combined script with the above two: op_dup op_hash op_equal op_checksig only when the unlock script and the lock script have matching predefined condition, the execution the script combination true. means, the bread signature must signed matching the private key valid bread address signature and then the result true. unfortunately, the scripting language bitcoin not turing-complete, e.g., there loop function. the bitcoin scripting language not commonly used programming language. the limitations mitigate the security risks preventing https://en.bitcoin.it/wiki/script smart-contract information- value logistics the occurrence complex payment conditions, e.g., generating infinite loops, other complicated logic loopholes. the utxo model, possible transparently trace back the history each transaction through the public ledger. the utxo model has parallel processing capability initialize transactions among multiple addresses indicating the extensibility. additionally, the utxo model supports privacy that users can use change address the output utxo. the target qtum implement smart contracts based the innovative design the utxo model. versus the utxo model, ethereum account based system more precisely, each account experiences direct value- and information transfers with state transitions. ethereum account address bytes comprises nounce counter for assuring one-time processing for transaction, the balance the main internal crypto fuel for paying transaction fees called ether, optional contract code and default-empty account storage. the two types ether accounts are the one hand, private-key controlled external and the other hand, contract-code controlled. the former code-void account type creates and signs transactions for message transfer. the latter activates code after receiving message for reading and writing internal storage, creating contracts, sending other messages. ethereum, balance management resembles bank account the real world. every newly generated block potentially influences the global status other accounts. every account has its own balance, storage and code-space base for calling other accounts addresses, and stores respective execution results. the existing ethereum account system, users perform transactions via client remote procedure calls. although sending messages more accounts via smart contracts possible, these internal transactions are only visible the balance each account and tracking them the public ledger ethereum challenge. based the discussion above, consider the ethereum account model scalability bottleneck and see clear advantages the bitcoin-network utxo model. since the latter enhances the network effect wish offer, essential design decision for the pending qtum release the adoption the utxo model. consensus management there are ongoing discussions about consensus and which platform meets the needs respective project requirements. the consensus topics most widely discussed are: pow [], pos [], dynamic pos and byzantine fault tolerance discussed hyperledger. the nature consensus about achieving data consistency with distributed algorithms. available options are, e.g., the fischer lynch and paterson theorem that states consensus cannot reached without agreement amongst nodes. https://github.com/ethereum/wiki/wiki/white-paper http://tinyurl.com/zxgayfr alex norta the bitcoin network, miners participate the verification process hash collision through pow. when the hash value miner able calculate and meet certain condition, the miner may claim the network that new block mined: for the amount miners and the mining difficulty the hash() represents the sha power with value range m], and the sha algorithm used bitcoin enables every node verify each block quickly, the number miners high versus the mining difficulty. the byte blockheader varies with each different nonce. the overall difficulty level mining adjusts dynamically according the total hash power the blockchain network. when two more miners solve block the same time, small fork happens the network. this the point where the blockchain needs make decision which block should accept, reject. the bitcoin network, the chain legitimate that has the most proven work attached. most pos blockchains can source their heritage back peercoin that based earlier version bitcoin core. there are different pow algorithms such scrypt groestl equihash [], etc. the purpose launching new algorithm prevent the accumulation computing power one entity and ensure that application specific integrated circuits (asic) can not introduced into the economy. qtum core chooses pos based the latest bitcoin source code for basic consensus formation. traditional pos transaction, the generation new block must meet the following condition: hash(blockheader) roof hash coins age target proofhash, the stake modifier computes together with unspent outputs and the current time. with this method, one malicious attacker can start double-spending attack accumulating large amounts coin age. another problem caused coin age that nodes are online intermittently after rewarding instead being continuously online. therefore, the improved version pos agreement, coin age removal encourages more nodes online simultaneously. the original pos implementation suffers from several security issues due possible coin age attacks, and other types attacks []. qtum agrees with the security analysis the blackcoin team and adopts pos into the latest qtum core. pos theoretically rewards investors that stake their coins longer, while giving incentive coin holders who leave their wallets offline. https://peercoin.net/ https://litecoin.info/scrypt http://cryptorials.io/glossary/x/ http://www.groestlcoin.org/about-groestlcoin/ http://blackcoin.co/ smart-contract information- value logistics qtum contract and evm integration the evm stack-based with -bit machine word. smart contracts that run ethereum use this virtual machine for their execution. the evm designed for the blockchain ethereum and thus, assumes that all value transfer use account-based method. qtum based the blockchain design bitcoin and uses the utxo-based model. thus, qtum has account abstraction layer that translates the utxo-based model account-based interface for the evm. note that abstraction layer computing instrumental for hiding the implementation details particular functionality establish separation concerns for facilitating interoperability and platform independence. evm integration: all transactions qtum use the bitcoin scripting language, just like bitcoin. qtum however, there exist three new opcodes. op_exec: this opcode triggers special processing transaction (explained below) and executes specific input evm bytecode. op_exec_assign: this opcode also triggers special processing such op_exec. this opcode has input contract address and data for the contract. next follows the execution contract bytecode while passing the given data (given callerdata evm). this opcode optionally transfers money smart contract. op_txhash: this opcode used reconcile odd part the accounting abstraction layer and pushes the transaction hash currently executed transaction. traditionally, scripts are only executed when attempting spend output. for example, while the script the blockchain, with standard public key hash transaction, validation execution takes place. execution and validation does not happen until transaction input references the output. this point, the transaction only valid the input script (scriptsig) does provide valid data the output script that causes the latter return non-zero. qtum however, must accommodate smart contracts that execute immediately when merged into the blockchain. depicted figure qtum achieves this the special processing transaction output scripts (scriptpubkey) that contain either op_exec, op_exec_assign. when one these opcodes detected script, executed all nodes the network after the transaction placed into block. this mode, the actual bitcoin script language serves less scripting language and instead carries data the evm. the latter changes state within its own state database, upon execution either the opcodes, similar ethereum contract. for easy use qtum smart contracts, have authenticate the data sent smart contract well its creator stemming from particular pubkeyhash address. order prevent the utxo set the qtum blockchain from becoming too large, op_exec and op_exec_assign transaction outputs are also spendable. op_exec_assign outputs are spent contracts when their code sends money another contract, pubkeyhash address. op_exec outputs alex norta fig. qtum transaction processing. are spent whenever the contract uses the suicide operation remove itself from the blockchain. qtum account abstraction layer the evm designed function account-based blockchain. qtum however, being based bitcoin, uses utxobased blockchain and contains account abstraction layer (aal) that allows the evm function the qtum blockchain without significant modifications the virtual machine and existing ethereum contracts. the evm account model simple use for smart-contract programmers. operations exist that check the balance the current contract and other contracts the blockchain, and there are operations for sending money (attached smart-contract information- value logistics data) other contracts. although these actions seem fairly basic and minimalistic, they are not trivial apply within the utxo-based qtum blockchain. thus, the aal implementation these operations may more complex than expected. qtum-blockchain deployed smart contract assigned and callable its address and comprises newly deployed contract balance set zero. there currently protocol qtum that allows contract deployed with non-zero balance. order send funds contract, transaction uses the op_exec_assign opcode. the example output script below sends money contract: transaction qtum data send using abi xbbacfbbcbafe ripemd hash exec assign the simple script above hands over transaction processing the op_exec_ assign opcode. assuming out-of-gas, other exceptions occur, the value amount given the contract outputvalue. the exact details the gas mechanism discuss below. adding this output the blockchain, the output enters the domain the contract owned utxo set. this output value reflected the balance the contract the sum spendable outputs. fig. assign funds and/or message contract tx. although figure shows sending funds contract from standard public key hash output, the method for sending money from one contract another nearly identical. when the contract sends funds another contract public key hash address, the former spends one its owned outputs. the sending alex norta contract involves expected contract transactions for the fund sending. these transactions are special that they must exist block valid for the qtum network. expected contract transactions are generated miners while verifying and executing transactions, rather than being generated consumers. such, they are not broadcast the network. fig. qtum block validation showing the expected contract transaction list. the primary mechanism perform expected contract transactions the new opcode, op_txhash that part figure internally, both op_exec and op_exec_assign have two different modes. upon their execution part the output script processing, the evm executed. when the opcodes are executed part input script processing, however, the evm not executed avoid double execution. instead, the op_exec and op_exec_assign opcodes behave similar no-ops and return either i.e., spendable not spendable respectively, based given transaction hash. this why op_txhash smart-contract information- value logistics important the functioning this concept. briefly, op_txhash new opcode added which pushes the current spending transaction's sha hash onto the bitcoin script stack. the op_exec and op_exec_assign opcodes check the expected contract transaction list during spend attempt. after the transaction passes (usually from op_txhash) the opcodes that exist the expected contract transaction list, the result spendable. otherwise, the return not spendable. this way, op_exec and op_exec_assign using vouts are only spendable when contract and thus, the account abstraction layer, requires that the vout spendable, i.e., while the contract attempts sending money. this results secure and sound way allowing contract funds spent only respective contract alignment with normal utxo transaction. specific scenario occurs contract has more than one output that can spent. each node may pick different outputs and thus, use completely different transactions for spending op_exec_assign transactions. this resolved qtum consensus-critical coin picking algorithm. the latter similar the standard coin picking algorithm used within user wallet. however, qtum significantly simplifies the algorithm avoid the risk denial service (dos) attack vectors and realize simple consensus rules. with this consensus-critical coin picking algorithm, there now possibility for other nodes pick different coins spent contract. any miner/node who picks different outputs must fork away from the main qtum network, and their blocks are rendered invalid. when evm contract figure sends money either pubkeyhash address, another contract, this event constructs new transaction. the consensus-critical coin-picking algorithm chooses the best owned outputs the contract pool. these outputs are spent inputs with the input script (scriptsig) comprising single op_txhash opcode. the outputs are thus, the destination for the funds, and change output (if required) send the remaining funds the transaction back the contract. this transaction hash added the expected contract transaction list and then the transaction itself added the block immediately after the contract execution transaction. once this constructed transaction validated and executed, confirmation check the expected contract transaction list follows. next, this transaction hash removed from the expected contract transaction list. using this model, impossible spoof transactions for spending them providing hardcoded hash input script, instead using op_txhash. the above described abstraction layer renders the evm contracts oblivious coin picking and specific outputs. instead, the evm contracts know only that they and other contracts have balance that money can sent these contracts well outside the contract system pubkeyhash addresses. consequently, contract compatibility between qtum and ethereum strong and very few modifications are required port ethereum contract the qtum blockchain. alex norta fig. spend contract op_exec_assign transaction. added standard transaction types: the following are the standard transaction types that add qtum. they are documented here bitcoin script templates: deploying new contract the blockchain requires output script follows: gas gas evm exec sending funds already deployed contract the blockchain requires the script below: gas gas data send -emd hash transaction exec assign note there are standard transaction types for spending that requires the expected contract transaction list. thus, these spending transactions are neither broadcast nor valid the network. gas model problem qtum faces with adding turing-completeness the bitcoin blockchain relying only the size transaction, which not reasonable for determining the fee paid miners. the reason that transaction may infinitely loop and halt the entire blockchain for transaction-processing miners. figure shows, the qtum project adopts the concept gas from ethereum. the gas concept, each evm opcode executed has price and each transaction has smart-contract information- value logistics amount gas spend. post-transaction remaining gas refunded the sender. fig. gas refund model. when the gas required for contract execution exceeds the amount gas available transaction, then the actions transaction and state changes are reverted. thus, any modified permanent storage reverted its original state including any spending contract funds that the latter are not spent. despite reversion, all gas transaction consumed and given the processing miner since the computing resources have already been spent. although qtum uses the gas model from ethereum, expect the gas schedule, i.e., the gas price each evm opcode, significantly differ from ethereum. the exact values are determined comparing existing prices ethereum with the amount processing and blockchain resources required for each opcode qtum. when creating contract funding-, deployment transaction, the user specifies two specific items for gas. the gaslimit determines the amount consumable gas contract execution. the second item the gasprice set the exact price each unit gas qtum satoshis. the latter are currently smaller unit the bitcoin currency that the blockchain records. the maximum qtum expenditure contract execution equates the multiplication gaslimit gasprice. this maximum expenditure exceeds the transaction fee provided alex norta the transaction then the latter invalid and can not mined, processed. the remaining transaction fee after subtracting this maximum expenditure the transaction size fee and analogous the standard bitcoin fee model. determine the appropriate priority transaction, miners consider two variables. first, the transaction size fee must match the total size transaction, i.e., usually determined minimum amount coins per kilobyte formula. the second variable the gasprice contract execution. combination, pos miners choose the most important and profitable transactions process and include block. consequently, there exists free-market fee model with miners and users optimizing for the best fee that suits their transaction speed and the price they are willing pay. refunds: using the utxo model, funds sent miners transaction fees are non-negotiable. impossible for miner partially refund fee the transaction easier for the miner process than expected. still, for the gasmodel useful, method must exist refund funds back the sender. moreover, must possible roll back the state transaction that runs out gas and return gas-fees miners. refunding gas-fees qtum enabled creating new outputs part the coinbase transaction miner. add new block validation consensus rule ensure refunding outputs are required exist the coinbase transaction. otherwise, miners may choose not refund gas. the refund given back the sender transaction fund copying the output script. for security reasons, this script currently standard pay-to-pubkeyhash, pay-to-scripthash script. plan lift the restriction after further security studies. for reference, the op_exec_assign has the following format assign contract funds: inputs: (in push order) transaction hash for spending [optional] version number (vm version use, currently just gas limit (maximum amount gas that can used this exec) gas price (how much qtum each gas unit is) data (data passed this smart contract) smart contract address outputs: (in pop order) spendable (if the funds are currently spendable) consequently, give example exec_assign below: xabcd... dbbadecbabbafaaf exec_assign smart-contract information- value logistics the execution results out-of-gas exception, this vout spent the next transaction the block using the redeem script op_txhash. the generated vout for this transaction pubkeyhash script taken from the vin[].prevout script. this early version qtum, only pubkeyhash senders are allowed for funding transactions. although other forms can accepted into blocks result execution, the msg.sender the evm and any out-of-gas, gas-refund needed results the contract keeping the funds. partial refund model: pertaining the gas model, also necessary refund the unspent portion for several reasons. the one hand, users can spend large amount funds ensure their contract executed properly. still, the unused gas returns qtum refund. the return address for gas expressed the blockchain vin[].prevout script the sending transaction. gas sent contract using the standard bitcoin transaction-fee mechanism. thus, the new fee model slightly augments this make the transaction fee: gas fee gas limit gas price vout refund used gas proposal exists for enabling miners evaluate both the tx_relay_fee and the gas_price under single "credit price" value for determining transaction priority. during contract execution, gas tokens are subtracted from the total fee, i.e., multiplying gas_price. after completing the contract execution, the remainder this gas_fee must returned the given gas return script adding output the coinbase transaction the miners use retrieve their block reward. the coinbase added vout pubkeyhash from vin[].prevout. order receive gas refund, this must spent pubkeyhash vout. otherwise, the gas refund remains with the miner out-of-gas condition and the funds sent will remain with the contract. note that currently only possible have one evm contract execution per transaction. thus, never does the case arise where two contract executions attempt share the transaction fee. this scenario may enabled after solving existing problems with multiple evm executions per transaction. the current design support multiple contract executions per transaction. important gas edge cases: miners must cautious with contract-gas, and fund-return scripts. the latter script output causes block exceed the maximum size then the contract transaction can not put into this block. instead, the gas-return script execution must take place again the next mined block. miners must ensure sufficient capacity exists the candidate block for the gas-return script before attempting execute the contract. not following this rule results contract requiring repeated execution, the refund script alex norta does not fit into the current block. there are gas funds return, vout requirement exists for returning the funds. consensus critical that the transaction fee includes the gas_fee. transaction invalid when adding block results negative gas refund, when the gas_fee lower than the transaction fee. transaction output script valid that has more than one op_exec, op_exec_assign opcode. while this limits scripting abilities, preferable potential recursion- and multiple-execution problems. consequently, static analysis suffices determine script invalid. after very blockchain-oriented qtum technicalities, next describe conceptually the management smart-contract lifecycles. note that the conceptual presentation the sequel backed scientific literature smart-contract management stipulated above, assume that lifecycle management essential for securing smart contracts that proper vetting potential collaborating parties takes place before enactment. consider real-life case from failed seafood delivery where business-transaction conflict emerges from underspecified conventional contract (cc). company (buyer) orders cuttlefish from south-asian company (seller). the cc, the liability the product quality rests with the seller until the carrier obtains the goods. the underspecification pertains the quality the goods that not specified the and the buyer does not check the goods before transferral the shipping company (carrier). the smart-contract alternative resolves the underspecification conflict that exist the cc. thus, section the presented qtum-framework goal model reflects the properties smart-contract lifecycle that fully formalized next, section gives small lifecycle example for the seafoodshipment case. lifecycle-management goals for discussing goals, use the following approach. the agent-oriented modeling (aom) method socio-technical requirements-engineering approach that takes into account that humans who may belong organizations use technology collaborate for solving problems. this section, use the aom goal-model type capture important socio-technical behavioral features for the qtum smart-contract system that supports the running case. goal models enhance the communication between technical and non-technical stakeholders increase the understanding the problem domain. note that aom goal models are also instrumental for novel agile software development techniques. http://cisgw.law.pace.edu/cases/s.html smart-contract information- value logistics fig. modeling elements for aom goal models. goal model comprises three main elements depicted figure functional requirements refer goals and are depicted parallelograms, roles depict sticky men, and non-functional requirements. the latter has two variants, namely quality goals for software-related non-functions requirements depicted clouds, and human-related emotional goals depicted ellipses. the goal model starts with central root value proposition that not atomic. consequently, the value proposition decomposed tree-hierarchy into sub-goals where each sub-goal represents aspect for achieving its parent goal and the lowest sub-goal must atomic. goals may have assigned roles, quality- and emotional goals that are inherited lower-level goals. value proposition the qtum framework: the root the goal for the qtum-framework depict figure and the value proposition crossorganizational information- and value-transfer logistics automation. split the complex value proposition into goals for smart-contract lifecycle management i.e., setup, rollout, enactment, rollback, termination. these refined goals further explore section fig. qtum value proposition with lifeycle-management refinement essential emotional goal for industry adoption figure trust the sociotechnical qtum-system reliably perform the intended behavior. this case, trust pertains the dependencies among humans who use technology achieve goals. consider economically viable and easy adopt additional emotional goals that influence widespread industry diffusion. the former means alex norta that using the qtum-system results economic return investment, while the latter means the personal barrier entry for working with qtum low. there are quality goals affiliated with the value proposition that affect all refining parts the qtum-system. these quality goals derive from reference architecture for cross-organizational business-process aware collaboration. the quality goals below are structured accordance with the following quality goals are not discernible during system execution time. odif iable means the qtum-system changes and adapts during its lifecycle the business context. additionally, harmonizes cross-organizationally heterogeneous system environments comprising regularly updating commercial software. integrable systems consists separately developed and integrated components for which the interface protocols between the components must match. hence, integrability between the components qtum must assured. next, specify the quality goals for qtum that are discernible during runtime. interoperable means qtum must interoperate runtime with systems supporting business functions such planning, logistics, production, external partner systems, and on. dynamic interoperability challenges are business-, conceptual-, and technical heterogeneity. secure refers resisting unauthorized attempts usage and denial service while providing services trusted users with good reputation. address security, trust- and reputation problems, several strategies are possible for qtum. blockchain-supported authentication service checks collaborating parties, monitors, inspects and logs network events. the communication system may encrypted, and on. highly automated collaboration requires systems must cover the entire smart-contract lifecycle. hence, qtum must provide for possibilities high degree meaningful collaboration automation that processes tedious and repetitive work while allowing humans focus the remaining creative action. lexible collaboration highly dynamic process enacting activities diverse partners exchanging heterogeneous data []. hence, qtum must enable diverse cross-organizational collaboration scenarios harmonizing heterogeneous concepts and technologies. sable means qtum must easy use for cross-organizational information-logistics automation and decomposes into three areas. error avoidance must anticipate and prevent commonly occurring collaboration errors. error handling system support for user recover from errors. learnability refers the required learning time users master the qtum-system. finally, there exist quality goals that are architecture specific. completeness the quality qtum comprising the set components for smart-contract lifecycle management. scalable refers the ability qtum combine more than two collaborating parties into one configuration. applicable means that qtum instrumental for automating cross-organizational information logistics and value transfers. ortable means qtum supports information logistics independent the industrial domain and collaboration heterogeneity with respect business-, conceptual-, and technological system infrastructure. note this also includes mobile devices. erf ormant means the computational and communicational strain low for information-logistics automation. hence, important ensure that smart-contract information- value logistics all phases smart-contract lifecycle are carried out within desirable response time and without exponential need for computing power. lifecycle management example the goal model section map into figure for projecting the running seafood case. the modeling notation figure the business process model and notation bpmn and the complete lifecycle formalized the green circle denotes start the lifecycle and the red circle the lifecycle end. the rectangles with plus signs are so-called subprocesses that correspond lifecycle stages section subprocess compound activity that hides lower-level business-process details. fig. qtum smart-contract lifeycle management. the starting point each smart-contract lifecycle figure the business case seafood transportation that requires cross-organizational information logistics automation. assuming there exists collaboration hub that serves preparation platform for the inception smart contracts, designer creates template for business-network model (bnm) into which service types are inserted together with roles. the bnm template enters the population phase. the roles affiliated respective service types are filled with organizations that collaborate the smart contract, i.e., bank, seller, ridge, carrier, ridge, buyer and bank. note that possible for several candidate organizations compete for filling specific role. order reinforce the desire fill role, potential partner organizations must match service offer into the service type role affiliated with. service consumer can evaluate the proposal and decide service offer acceptable. when all roles are filled and service-types match with acceptable service offers, the smart-contract negotiation commences. assume party from the alex norta running seafood-delivery case has desire disagree and bring the setup phase sudden end. instead, the buyer provides counter offer that introduces obligations pertaining the temperature inside containers where the seafood stored. assume the shipment containers are equipped with internet-of-things (iot) sensors that inform the shipper, seller and buyer realtime when temperature-threshold violation occurs. the counteroffer the buyer defines this case that either price reduction follows accordance with the reduced quality the seafood. the temperature change results the seafood not being fit for consumption any more, the buyer has the right reject purchasing the shipment arrival. the counteroffer accepted all other parties and consensus occurs, which the prerequisite for contract establishment. the smart contract coordinating agent from which distributed governance infrastructure (dgi) must deduced. thus, each party the running case receives local contract copy from which set respective obligations are deduced. for example, obligation for the carrier that the temperature inside seafood-shipping container must never above the obligations are observed monitors and assigned business-network model agents (bnma) that connect iot-sensors. next, all collaborating parties can assign their respective private processes into emerging (dgi). for example, assume peer-to-peer payment bitcoins that the buyer first must purchase with euros. that purchase and payment via bank involves process that comprises compliance- and reporting steps government impose regulations the use crypto-currencies. for enabling information exchanges between bank and bank the seller, the communication endpoints must established. that way, the management seller compliance data automated. assuming temperature-threshold obligation violation occurs the domain fridge, assigned bnma escalates the event and the buyer checks the breach severity. the temperature breach lasts for period time resulting diminished seafood quality that still allows successful sale for lower price that the buyer tolerates, response may the latter requests further cooling different company that slips into the role fridge. assuming the seafood severely spoiled and can not sold the target country, the buyer triggers disruptive rollback that collapses the transaction. the seafood shipment arrives with the buyer the agreed upon state and the payment the seller via bank complete, then the termination stage dissolves the dgi and releases all collaborating parties. next give the relationships between detailed collaboration elements that the lifecycle management figure coordinates. value-transfer protocol integral part the qtum-framework the notion value-transfer protocol (vtp) that orchestrates cross-organizational information logistics and value smart-contract information- value logistics transfers, line with the value proposition figure depicts. consequently, section describes the relationship process types that form vtp. section discusses the need for specific smart-contract language with the utility specify vtps. finally, section discusses the features vtp-supporting language versus solidity that ethereum uses. cross-organizational processes the vtp comprises three different types collaborating processes. figure shows simplified bnm bpmn notation for the seafood delivery that section introduces. the bnm assumes that sequence subprocesses are placeholders for service types with labels that indicate the roles organizations. seafood delivery bnm fig. qtum bnm. assume that the bnm also comprises tasks connecting service-type subprocesses for establishing choreography control flow. for simplicity, figure depicts unlabeled choreographing tasks together with and-split and -join. the bnm commences with the seafood seller informing the bank prepare for international currency transaction and next, the seafood cooled before carrier performs shipping the destination. the destination country, the seafood cooled again while local bank processes the currency transaction between both countries. finally, the buyer receives the seafood for local sales. carrier service type process view fig. externalized service-type process view. for the carrier subprocess the bnm, the assumption that several candidate organizations exist for filling the role seafood carrier. figure depicts alex norta simplified example for lower-level refinement the form service-type process view the simplified process figure assumes carrier receives the seafood from the fridge the source country and charges the bank the seller. next, three parallel branches require that temperature monitoring, preparing delivery papers and informing the cooling company the target company take place simultaneously. only candidate organization can become serviceproviding carrier that promises adhering this simplified process. note that collaboration hub can offer the service-type process views for matching the latter with corresponding service-offering organizations. local contract carrier local contract fig. local carrier contract. third vtp-element, figure shows the local contract the carrier uses internally. note that differently the service-type process view figure the local contract comprises two additional tasks with the labels inform buyer and charge bank. thus, the local contract subclass the service-type process view with respect enactment behavior i.e., all tasks the process view are experienced externally while the carrier has the option insert hidden additional steps privacy-assuring way that constitute competitive advantage, are not interest for external display, and on. qtum smart-contract language support the vtp scenario section the current smart-contract lingua franca solidity does not have the required utility level with respect contained concepts and properties. instead, the objective develop qtum smart contract language (qscl) and compiler that has comparatively better utility for vtp management. high-level qscl concepts and properties, figure depicts. the vtp scenario section resembles the esourcing framework for which dedicated language exists, the esourcing markup language (esml) that currently specified for the semantic-web domain. intend map the concepts and properties esml into the blockchain domain for creating qscl together with language compiler for novel qtum virtual machine. briefly, while refer the reader for further details, the properties figure organize along conceptual interrogatives. one qscl-instance smart-contract information- value logistics qscl company_contact_data resource_section where data_definition_section business_context_provisions legal_context_provisions exchanged_value process (conjoinment) lifecycle_definition what mapping qtum smart-contract language who party company_data lifecycle_mapping active_node_label_mapping monitorability exchanged_value fig. properties and concepts the future qtum smart contract language []. resembles bnm definition (figure the who concept qscl comprises constructs for defining the contracting parties uniquely together with involved resources and data definitions. the where concept specifies business-contextand also legal-context provisions which specific smart contract holds. the what concept allows for defining exchanged values and the service-type process views (figure together with lifecycle definitions for such process views and also for elementary tasks respectively. thus, the what part qscl instance, several service-type process views can defined comparable figure finally, conjoinment constructs are specifically defined exchange channels for cross-organizational data flow. monitorability constructs allow for flexible definition dedicated task-monitoring that either uses polling-, messaging principle. comparative discussion using the smart-contract ontology [], examine informally the suitability existing solidity versus qscl that construct for the qtum-framework. general observation, solidity language with focus mostly low-level blockchain-manipulation commands with javascript-resembling syntax. still, possible import third-party apis and perform external function calls. socalled external functions solidity are part smart-contract interface that can called from other contracts and via transactions. because the turing-completeness solidity, principle possible define cumbersome supports for all concepts and properties the smart- alex norta contract ontology that qscl embodies. however, concepts such pattern-based design, process awareness, matching processes, etc., are not adopted any way solidity. with respect inventing cumbersome workarounds, recent conference-paper publication uses solidity demonstrate the feasibility untrusted business-process monitoring and execution smart contracts. one must stress that solidity has historically not been backed formal verification means, differently the design inception qscl []. without such formally verifiable expressiveness, not possible know ahead enactment contract correct and free security issues. solidity-related security incident has triggered only very recently the development and application verification tools such why solidifier casper that likely leads shift from proof-of-work towards proof-of-stake for ethereum all together. conclusions this whitepaper presents the qtum-framework for novel smart-contract blockchain-technology solution. show the specific qtum transaction-processing implementation that uses proof-of-stake validation. furthermore, qtum integrates the ethereum virtual machine (evm) together with the bitcoin unspent transaction output protocol. note that the qtum evm constantly remains backwards compatible. additionally, the qtum-framework recognizes that smart-contract lifecycle management important for supporting proper security vetting collaborating parties. support qtum lifecycle management, the current lingua franca solidity lacks suitability. consequently, the emerging qtum-framework requires novel smart-contract language with enhanced utility. the adoption proof-of-stake into qtum constitutes considerable saving computational effort over the not scaling ethereum alternative that still uses proof-of-work. while ethereum plans also adopt proof-of-stake, unclear when such new version will released. also the use unspent transaction outputs more scalable comparison the account management ethereum. combination with simple payment verification, qtum already develops smartcontract mobile-device solution. while the not scaling ethereum solution does not allow for mobile solutions, qtum aims achieve democratized and highly distributed proof-of-stake transaction validation with its mobile strategy. the qtum-framework has clear understanding quality criteria that future developments must satisfy. with respect functional requirements, qtum plans develop application layer for smart-contract lifecycle management. most importantly, such lifecycle management important for vetting collaborating parties reduce security breaches such those ethereum recently experienced, resulting multiple hardforks the latter. https://www.wired.com///-million-hack-just-showed-dao-human/ http://why.lri.fr/ https://hack.ether.camp/idea/solidifier--formal-verification-of-solidity-programs http://www.coindesk.com/ethereum-casper-proof-stake-rewrite-rules-blockchain/ smart-contract information- value logistics the value-transfer protocol for information logistics qtum comprises business-network model for choreographing several collaborating organizations. the latter can provide services with local contracts that must match with the specified runtime behavior service-type process views the business-network model. with multi-layered smart-contract management layer, collaborating parties protect the privacy their business secrets that pose competitive advantage hiding extension steps local contracts. summary, the qtum-framework recognizes that smart contracts are sociotechnical artifacts that must also take into account essential quality requirements for achieving widespread user adoption. ongoing real-life industry projects with qtum applications result continuous empirical requirements harvesting. the mobile strategy support highly distributed proof-of-stake transaction processing aims significant advancement the state the art. still, qtum also recognizes that smart-contract lifecycle management requires applicationlayer development with sophisticated front-end user experience that current solutions not pay attention sufficiently. references a.m antonopoulos. mastering bitcoins, bentov, gabizon, and mizrahi. cryptocurrencies without proof work, pages springer berlin heidelberg, berlin, heidelberg, bhargavan, delignat-lavaud, fournet, gollamudi, gonthier, kobeissi, kulatova, rastogi, sibut-pinote, swamy, and zanellabeguelin. formal verification smart contracts: short paper. proceedings the acm workshop programming languages and analysis for security, plas pages new york, ny, usa, acm. biryukov and khovratovich. equihash: asymmetric proof-of-work based the generalized birthday problem. proceedings ndssaaz, february san diego, ca, usa. isbn ---x, bisping, p.d. brodmann, jungnickel, rickmann, seidler, stuber, wilhelm-weidner, peters, and nestmann. mechanical verification constructive proof for flp. international conference interactive theorem proving, pages springer, bussmann. the future finance: fintech, tech disruption, and orchestrating innovation, pages springer international publishing, cham, cachin. architecture the hyperledger blockchain fabric. workshop distributed cryptocurrencies and consensus ledgers, christidis and devetsikiotis. blockchains and smart contracts for the internet things. ieee access, :-, chung, b.a. nixon, yu, and mylopoulos. non-functional requirements software engineering, volume springer science business media, croman, decker, eyal, a.e. gencer, juels, kosba, miller, saxena, shi, gun sirer, song, and wattenhofer. scaling decentralized blockchains, pages springer berlin heidelberg, berlin, heidelberg, emmadi and narumanchi. reinforcing immutability permissioned blockchains with keyless signatures' infrastructure. proceedings the in- alex norta ternational conference distributed computing and networking, icdcn pages :-:, new york, ny, usa, acm. eshuis, norta, kopp, and pitkanen. service outsourcing with process views. ieee transactions services computing, (preprints):, eshuis, norta, and roulaux. evolving process views. information and software technology, frey, m.x. makkes, p.l. roman, taiani, and voulgaris. bringing secure bitcoin transactions your smartphone. proceedings the international workshop adaptive and reflective middleware, arm pages :-:, new york, ny, usa, acm. gubbi, buyya, marusic, and palaniswami. internet things (iot): vision, architectural elements, and future directions. future generation computer systems, (): kiayias, konstantinou, russell, david, and oliynykov. provably secure proof-of-stake blockchain protocol, kotonya and sommerville. requirements engineering: processes and techniques. wiley publishing, kutvonen, norta, and ruohomaa. inter-enterprise business transaction management open service ecosystems. enterprise distributed object computing conference (edoc), ieee international, pages ieee, luu, d.h. chu, olickel, saxena, and hobor. making smart contracts smarter. proceedings the acm sigsac conference computer and communications security, ccs pages luu, narayanan, zheng, baweja, gilbert, and saxena. secure sharding protocol for open blockchains. proceedings the acm sigsac conference computer and communications security, ccs pages new york, ny, usa, acm. marshall. agent-based modelling emotional goals digital media design projects. international journal people-oriented programming (ijpop), ():-, business process model. notation (bpmn) version object management group specification, http://www.bpmn.org. nakamoto. bitcoin: peer-to-peer electronic cash system. consulted, ():, n.c. narendra, norta, mahunnah, ma, and f.m. maggi. sound conflict management and resolution for virtual-enterprise collaborations. service oriented computing and applications, ():-, norta. exploring dynamic inter-organizational business process collaboration. phd thesis, technology university eindhoven, department information systems, norta. creation smart-contracting collaborations for decentralized autonomous organizations, pages springer international publishing, cham, norta. establishing distributed governance infrastructures for enacting crossorganization collaborations, pages springer berlin heidelberg, berlin, heidelberg, norta, grefen, and n.c narendra. reference architecture for managing dynamic inter-organizational business processes. data knowledge engineering, (): smart-contract information- value logistics norta and kutvonen. cloud hub for brokering business processes service: "rendezvous" platform that supports semi-automated background checked partner discovery for cross-enterprise collaboration. srii global conference (srii), annual, pages july norta and kutvonen. cloud hub for brokering business processes service: "rendezvous" platform that supports semi-automated background checked partner discovery for cross-enterprise collaboration. annual srii global conference, :-, norta, ma, duan, rull, kolvart, and taveter. econtractual choreography-language properties towards cross-organizational business collaboration. journal internet services and applications, ():-, norta, othman, and taveter. conflict-resolution lifecycles for governed decentralized autonomous organization collaboration. proceedings the international conference electronic governance and open society: challenges eurasia, egose pages new york, ny, usa, acm. aafaf ouaddah, anas abou elkalam, and abdellah ait ouahman. towards novel privacy-preserving access control model based blockchain technology iot, pages springer international publishing, cham, paja, a.k. chopra, and giorgini. trust-based specification sociotechnical systems. data knowledge engineering, poon and dryja. the bitcoin lightning network: scalable off-chain instant payments, rosenfeld. overview colored coins. white paper, bitcoil. co. il, serguei. probabilistic analysis the nxt forging algorithm. ledger, :-, sterling and taveter. the art agent-oriented modeling. mit press, tenso, norta, and vorontsova. evaluating novel agile requirements engineering method: case study. proceedings the international conference evaluation novel software approaches software engineering volume enase,, pages vasin. blackcoinaazs proof-of-stake protocol vukolic. the quest for scalable blockchain fabric: proof-of-work vs. bft replication. international workshop open problems network security, pages springer, vukolic. the quest for scalable blockchain fabric: proof-of-work vs. bft replication, pages springer international publishing, cham, weber, xu, riveret, governatori, ponomarev, and mendling. untrusted business process monitoring and execution using blockchain, pages springer international publishing, cham, wood. ethereum: secure decentralised generalised transaction ledger. ethereum project yellow paper,