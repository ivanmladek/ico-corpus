essentia .one interoperating and data for the new internet whitepaper draft version last edit: january abstract page abstract the new paradigm-shift driven blockchain technologies enables everyone access higher level decentralization and privacy further giving them the ability build and enjoy completely new ecosystem. while blockchain-enabled ecosystems grow, stabilize and mature further, users currently lack essential services and solutions that protect their privacy, data, ids assets. such solutions can unlock more complex, yet smooth, simple and powerful, levels interaction through blockchain-based and decentralized technologies/ systems. with essentia build and offer complete modular framework the user's fingertips. the framework empowers the users with the full control and ownership over their data, ids, information, privacy and assets. the essentia framework, which also works decentralized operating system, can used indifferently humans, machines, iot devices and more. integrates decentralized and centralized resources one single "place", while also safely connects and relates the user/machine's anonymous, pseudo anonymous public digital ids with their multiverse data which encrypted and stored decentralized resources locally. starting from just the seed, using the fundamental cryptographic capabilities sign/ verify/ encrypt/ decrypt, the essentia framework able bootstrap and scale from minimal headless setup full-fledged and personalized platform infrastructure. this enables the user, being human machine, seamlessly interact with decentralized resources, systems services well with traditional centralized variants. only the user has access their personal data, ids, setups, preferences, wallets and more, from anywhere the planet. empowering him easily connect and use on-chain, off-chain and cross-chain services resources secure, private and reliable environment. essentia the multi-asset and multichain decentralization swiss-knife that everyone can use and own. decentralize yourself! the essentia framework nutshell page the essentia framework nutshell essentia modular framework that bootstrapped from seed deriving its extended keys hierarchical deterministic way and associating them their related "data" that are available encrypted decentralized storage local copies/backups. such data are associated their corresponding labelled extended keys and are interpreted the system, and its components, "registry entries," configurations and content used when loading their related modules that compose the framework accordingly. the seed represents the minimum "quantity" information that necessary order always able access and use the connected data, ids, assets, information, and on, and bootstrap the framework parts it, always expecting the same identical result. all the data and communications are encrypted default. being the only one who has full control and possession over the seed, the user (or machine) the only one with full ownership, access and control over their connected ids, data, assets, and more. the essentia core the base the framework manages the cryptographic layers and executes the sign/ verify/ encrypt/ decrypt/ functions that are the base operands which the whole framework built. data and their operations are managed isolated memory-boxes that are separated from each other also order that each extended key responsible only for its associated module's data and so, can only execute operations with its pertinent data and memory-box. the framework can used for just loading and running standalone module more complex setup. one multiple instances can preconfigured, automated and orchestrated custom constellations, infrastructures setups. each time seed loaded, secure and trustable decentralized environment bootstrapped accordingly the datasets bound with it. the modules that compose the framework can on/off-chain hybrid and they are responsible for the backend, frontend and input/output components. among others, specific modules are responsible for cross-chain operations well dedicated modules available for integrating third-party decentralized trusted traditional resources. combinations the available modules are able fit wide range implementations, use cases, architectures and existing decentralized centralized systems. the essentia framework can used indifferently humans machines (servers, iot, etc.) who both have available all its resources. can fully accessed and used both via its cli (command line interface) its uis (user interfaces), independently the host system use. from user perspective, the framework works modular operating system where the kernel represented the core, which becomes unique thankfully the seed. the essentia decentralized has console, and also home panel, that allow access and use all its features and functions. can loaded almost every existing host machine architecture and os, while being also suitable run from any existing browser and low-resource hardware/software environments. the essentia framework nutshell page essentia provides "decentralized desktop/server" experience the users/machines and allows them dispose, their fingertips, and from the single place trustable, secure and private environment where they can interact with the multitude existing decentralized services and resources, well with the traditional resources, which are integrated into the framework. multiple decentralized digital ids and their sub-ids can used and managed, even concurrently, single seed. the ids can anonymous, pseudo anonymous related with real-world data, accordingly whatever the user wants with them. the ids, login, keyring, dapp centre, wallet, account-less exchange, dex, decentralized storage, prediction markets, decentralized vpn, social dapp, crypto nodes, and on, are just some the "frontend" modules that can activated inside the essentia framework with simple click. the user just needs his seed order always able load and use their own custom decentralized framework from anywhere and any kind host machine system, even virtualized environments. the seed can also stored and used dedicated thumb-size hardware device, the essentia keyware, which isolates from software risks, external environment risks and from bad actors. so, can optionally separate the kernel (seed) the framework the hardware layer, order get even more secure setup. the same time, the whole framework can deployed dedicated hardware devices, the essentia eggs, that can expanded through the essentia sense peripherals interact with real-world inputs/outputs and also connect them on-chain and cross-chain. the essentia decentralized global position system (dgps) just one the multiple implementations that allow essentia provide on-chain, off-chain and cross-chain oracles. essentia the very first decentralized modular framework suited for both humans machines which enables them fully dispose their decentralized digital ids, data and assets, even cross-chain, while granting full privacy and granular control over every and each process aspect the framework itself. the essentia framework like decentralized that can integrate on/off/cross-chain resources single place, while also giving the user/machine trustable operational environment interact with them. essentia the very first project that takes care making decentralization concretely fungible, and effectively usable, the users. for example, the user can load their multitude preferred dapps and resources and interact with them and all their respective accounts, configurations, preferences, and on, just accessing their seed that loads the user's personal, custom and powerful essentia home panel. because its peculiarities and implementation, the essentia framework cannot compared any other existing projects. essentia able integrate the other projects when necessary and, the same time, provides its services radical, decentralized way without, for example, asking the user rely intermediary applications for doing simple tasks such logins. these can instead done truly decentralized way. signing and verifying message after successful handshake/challenge between the parties. the essentia framework nutshell page essentia based simple but powerful and easily replicable cryptographic operations: sign/ verify/ encrypt/ decrypt/. this allows everybody always able access and use their "belongings" with minimum effort and any future scenario. essentia, are moving back the weighing needle the real sense decentralization. where others are trying re-centralize the decentralized resources also creating artificial, not imposed, needs intermediary the users, are moving back from this spiral-shaped paradox and are rebuilding the decentralization fungibility more radical and original layer. exactly was intended since the beginning this new drevolution! the essentia framework main properties are: highly customizable modular decentralized framework for humans and machines. decentralized digital ids for humans trust-less, trustable and secure. private: only the user has full and total single personal, custom environment and machines. backed strong cryptography. ownership and control. for managing and interacting with multiple ids, data, assets, decentralized and traditional resources, cross-chain resources and communications, and more. decentralized, always available, cross-chain, multi-chain and modular, flexible and scalable. anonymous and encrypted default. open-source and open-hardware, essentia un-stoppable. multi-protocol. privacy-focused, anti-censorship, persistent, not-corruptible. agent agnostic, head/less and automatable/orchestrable, cli, uis. has both software and hardware implementations. language agnostic, host agnostic. fault-proof and future-proof. index index abstract the essentia framework nutshell introduction actual context's risks actual context's deficiencies why essentia benefits for the user essentia design essentia framework overview essentia fundamental logics, under the hood! (how works) main components overview: ess-id, ess-home and ess-os the ess-id ess-home and ess-os modules overview additional components overview: ess-keyware, ess-eggs and ess-sense: ess-keyware ess-eggs ess-sense ess token overview essentia system properties trust-less, trustable and secure private: only the user has full ownership and control decentralized, always available cross-chain, multi-chain and multi-protocol flexible and scalable: modular privacy-focused, anti-censorship, persistent, non corruptible anonymous and encrypted default agent agnostic, head/less and automatable/orchestrable open-source and open-hardware software and hardware language agnostic, host agnostic fault-proof future-proof applications and use-cases ess legal and crowdsale general informations knowledge required risks important disclaimer representation and warranties governing law arbitration page introduction page introduction today's social and technological landscape fertile ground for new ideas, services and tools which are being developed quickly and continuously. users are presented with more choice than ever before. however, choice provided the expense privacy, security and personal data usage. often users and their data are considered the product benefit from. users' journeys are reliant trusting third parties and intermediaries with the security their data and software environments. this context, being able effectively protect users' privacy and data resembles paradox. blockchain-based technologies have the power solve the issues presented this context. yet their current state, these technologies will not sufficient nor effective until users are able easily and proficiently interact with them. decentralized solutions and intermediary-free services tools are critical importance enable users regain control over their freedom, privacy and what constitutes their digital "life pieces" including ids and data. current risks users' data including habits, personal information, locations, social relations, financial details represent the highest intrinsic value for the service providers and ill-intentioned actors. this context, users are currently exposed multitude risks which are directly and indirectly arising from their interactions with current solutions. additionally, the centralization resources and services combined with insecure data management practices pose several threats whereby the risk having single points failure with critical effects highly enhanced. today users are affected directly indirectly service interruptions, data breaches and leaks, identity and money theft, scams, surveillance, content-censorship and privacy violations independently from their location and circumstances. users are often and unknowingly giving away some, not all their rights regarding their identity, privacy, info and data. the user can feel powerless protect and control their privacy and data. current deficiencies every piece the user's digital life totally exposed and vulnerable. users don't have full control ownership over their own "digitalized life and belongings." they are forced use and rely the potentially dangerous, non-trustable and insecure existing solutions. the lack user friendly secure tools and services prevents users from effectively protecting themselves, and their data, while interacting with third-parties. users are not given disclosure how their data being used who shared with. further, they can't trust the environments which their connected information managed and stored. they don't have any other choice but always expose their data they want use interact with the wide majority the existing services. why essentia page even blockchain-based and decentralized technologies can lead the way out this disturbing reality, they haven't yet reached mature stage. blockchain technologies lack layers effective solutions enabling positive, prolific and friendly interaction for users. finally freed, users require intermediate layers that connect them directly, easily and securely with decentralized resources, tools and services, well blockchain technologies. why essentia essentia provides complete set solutions users, decentralized service providers and their technologies. essentia the multi asset swiss-army knife solution that users always have their pocket. providing gateway decentralized resources and, through them, traditional internet services, while also having exclusive, full control, over their identity, digital life and data. essentia fills the solution gap the current landscape and makes available complete and versatile multi-chain framework. its primary goal empower users with toolset decentralized solutions which seamlessly integrate with on-chain off-chain systems, services resources. essentia protects users' privacy, needs and security developing bleeding-edge and user-friendly framework. the essentia framework gives full and granular control users and enables them act anonymously, pseudo-anonymously publicly. users can decide whether not share their data part full and when, how and where that data shared. beyond the system and its connected data and metadata tools services, essentia also provides secure, trustable and decentralized software environment solutions that can run all major oss and hardware. essentia the connective tissue between the user, decentralized resources and traditional systems. enables anyone, anywhere take advantage full current and future technologies. the essentia framework the missing link that finally enables trustable, simple and powerful way interact with decentralized systems and everything that can connected with them, whether software hardware. user benefits with the essentia framework, the users' ids, data, desktop, files, accounts, software, wallets, logins and forth, are not managed third-parties centralized services. they can simply follow the user and always fully accessible and used from anywhere, trustable operating data environment. protected cryptography and blockchain-based systems, the user able instantly and securely gain access on-chain and off-chain third-party services and interact with them. each instance, deciding whether not share information data. the user's data can encrypted and maintained decentralized storage, removing any concerns regarding the persistence and content the user's data. users' encrypted data not publicly connected with their ids. data can only cryptographically accessed and used its owner and whom the owner decides give access and partial full control to. user benefits page users can not only rely upon, and access, decentralized virtualized resources and distributed computing but they are also able bootstrap and use their own personal system. they can dispose their data, and digital belongings, with the ease use consumer solution and the full power that decentralized framework can provide. essentia design page essentia design essentia built with modular architecture that can deploy, scale and configure its infrastructure fit custom, personal setups resource-intensive applications, automated iot frameworks. fits the everyday use beginner well expert users. the essentia framework can bootstrapped deployed browser, mobile platforms and operating systems, any desktop, server dedicated machine. can virtualized while eventually taking advantage distributed computing. while evolving towards being fully decentralized framework, essentia also implements hybrid solutions that integrate smart contracts and other on-chain components. they work bridges, and modules, executing the on/off-chain events and operations. the ess-id, the core the system, can used and controlled via dedicated hardware-key (wallet), offering higher level security all the operations and interactions the user. essentia's components and all user data are maintained decentralized storage and encrypted default. the user also able back them fully encrypted local storage for offline access use. this local data synchronized with the data decentralized storage the first connection opportunity. essentia's framework overview the user human machine can generate their own root ess-id (and then, eventually, the connected sub-ids) and able abstract, link, register, save their anonymous-identity, and eventually data, the blockchain and decentralized storage. the ess-id has some unique properties and full, exclusive ownership and control the user. like master-crypto-keyring that solely holds full control over the private-keys which manage the user's public identities and their operations, including data. the seed that fully recovers and restores the ess-id can exported mnemonic list words and allows the user always and easily regain control over their ids and data. the seed can backed paper and using other secure methods. can deployed and restored the ess-id, the ess-keyware well other compatible software and hardware later stage. the user now able use their decentralized ess-id access the connected services and/or link, access and use their data. the data encrypted and stored decentralized storage where becomes persistent, censorship-resistant and always available. the user can restore and recall, access and use, all some their data from any physical location and using any kind hardware enabled system. data can include wallets, documents, configurations, files and more. this made possible through the ess-home and ess-os and their compatible/integrated alternatives. essentia's framework overview page from the ess-home the enabled systems or, better, the ess-os, the user able privately, safely and securely manage his data and identities well their connected software environments and configurations. the ess-home and the ess-os create low-level (operating-system-level) trustable-data-environment which integrated with blockchain-based technologies and applications, while also being enriched many possible software modules and configurations. the essentia home and operating system are trustable, secure and user/dev-friendly operational and data environments that can highly customized the user. the user can use ess-home/os for purposes such trading, developing, managing wallets, payments and funds, contributing the network, maintaining privacy, managing sub-ids, user-data, authorizations accounts, logins and forth. the data the ess-home/os available decentralized storage and repositories, which can downloaded and deployed from anywhere. the user can also use their own personal operating data-environment setups live-versions usb devices. these can run most machines well installed dedicated systems and devices. "native" dedicated hardware for the essentia are the ess-eggs. open-hardware devices that can further extend the possibilities the ess-home/os and its underlying blockchain technologies. the ess-eggs can also connect with the real-world through sensors and peripherals. they can become "autonomous" and have some additional interesting features that will fully explored the dedicated section. the ess-home and the ess-os also represent powerful interface between the user, the blockchain world and its ecosystem. they are the native data environment where the blockchain applications and software express themselves and provide seamless way connect/interact with the real-world and with the users/machines too. through their modules, the ess-home and ess-os are able integrate specific, trusted, third-party services and dapps. these are addition the already integrated essentia dapp-store, the dex (essentia decentralized exchange) and the modules governing ids, authorizations (auths), wallets the user-space system. users can browse and interact with dapps, use and manage their wallets, and interconnect with every available service the blockchain. the ess-id can physically stored, used and managed within hardware device, the ess-keyware. the essentia keyware dedicated mini device that acts secure keyring and can safely execute operations with the ess-id private-keys without revealing exposing them any way external environments, systems bad actors. through the ess-key, users can access/use/manage their ids and any connected data. they can also use "universal-key" access/use/interact with third-party services such dapps and smart-contracts, extending any on-chain off-chain integrated resource, service third-party. root-ids can create sub-ids, managing the authorization layer these sub-ids and their possible actions. essentia's fundamental logic page essentia's fundamental logic the ess-id (hierarchical deterministic) "wallet" where the first sets derived addresses that are generated from the seed (the extended keys), correspond, and are linked low-level, with the user id(s), their data, setups and configurations, while also with the essentia framework specific infrastructure, configurations and data. from the seed, and following pre-determined derivation patterns, essentia able bootstrap its framework, completely partially, using the generated keys for building and deploying both the software operational environment and the user-space, that populated with its data, content and configurations. parts the derived extended keys are used for defining the architecture and the logic the framework. they can assimilated the system's registry entries/keys containing the operating system and application data that are then deterministically labelled, interpreted and understood the system order bootstrap deploy the framework and its components/modules. the ess-core module, that has the control over the ess-id, can execute sign, verify, encrypt and decrypt operations with the addresses (extended keys) belonging the root-id (the seed). such s/v/e/d/ operations and their combinations are the lowest-level instructions and operands the essentia framework's brain. the root-id (the user/machine who has full control and ownership over it) the unique entity that can effectively dispose the s/v/e/d/ layer the keys, while every other entity able publicly verify its signatures. the data connected the root-id stored encrypted decentralized storage and becomes accessible through the ess-smartcontracts, ess-bridges ess-nodes. the data can retrieved for bootstrapping the whole system just parts it, while the user can access and use just some its features services, depending their needs. essentia's fundamental logic page the user only requires their ess-id since everything else, including data, ids, auths, wallets, logins, setups and configurations, can fetched and/or deployed from the decentralized storage privately, securely and any time. when the first handshake between the root-id and the essentia's blockchain interfaces takes place, the low-level data the user and their personal framework setup (contained the imprinting-data packet) are fetched/downloaded, fully encrypted, from decentralized storage and are assigned their respective logical parts (the keys/addresses associated with the infrastructure) for being interpreted and used. the components, the modules, their configurations and content are initiated and populated according the user data and preferences. all this takes place the background without bothering the user. this process initiated the imprinting-data which the default bootstrap configuration that the user optionally sets among their datasets, instead the "empty" default one. the decryption the data happens locally protected software environment, the s/v/e/d/ operations connected with the keys. the essentia framework, manages only encrypted data that meaningless everyone but the user/machine whom they belong. the only entity that able decrypt them. when refer the ess-id and the user's identity identities, are referring anonymous ids that are not linked any way with real-world-ids. unless explicitly and deliberately linked the user via the optional ess-meta module, which can add additional layers data the ids/sub-ids. this allows specific use (encrypted) information for know your customer and anti money laundering requirements, examples, when and where they are necessary and explicitly requested the user. please refer the technical overview document for more detailed information these topics. summary, root-key and sets its extended keys are derived from hierarchical deterministic seed, following specific standard rules that grant and allow you expect the same identical results any access/use the same seed. the seed, all its forms, the minimum piece information needed bootstrap the whole framework, just part it, and access all its connected data. after accessing the seed, one the extended keys the first derived set used retrieve, signature/verify handshake/challenge operation with bridge, its imprinting-data packet which represents the first, minimal set data that the system needs further bootstrap the framework. this minimal set data includes the low-level configuration data such the labels deterministically associated with the derived extended keys. decrypting the imprinting-data packet, which fetched through bridge from the decentralized storage, not locally available, the derived extended keys are labelled and associated with their respective data and pointers data (links decentralized resources). the labelled keys and their related content can then understood and used the system bootstrap and configure the components and modules accordingly with the user/machine specific preferences, content and setups. so, the system uses some the extended keys its own registry-entries and associates them their "values" that consist data (local configurations) and pointers additional data/resources that are available the decentralized storage for later access/use. essentia's fundamental logic page their bootstrap/launch, the modules are injected with their respective configurations, data and content which are allocated (or linked) the "memory-boxes" associated with their labelled keys (example: the content the key labelled "home-configuration" passed the home module for initialization). reading their configuration data and the pointers contained their dedicated registry-entries/memory-boxes, the modules also know "the routes" (pointers) get access the additional user/machine resources/data. sign/verify/encrypt/decrypt/ are the low-level minimal operands that allow the whole framework execute its operations. data available encrypted locally the decentralized storage and locally decrypted secure environment, only when accessed used. some modules can also work standalone dapps/apps they can detached from the framework and used perform dedicated specific operations/interactions. for example, the ess-login module (elogin) available also standalone module which can serve dedicated login/account keyring management, both its software and hardware implementations. the essentia framework built ethereum and follows, implements and strictly adheres its protocol, its consensus rules and the relevant involved ethereum improvement proposals (or bitcoin improvement proposals), and also the other blockchain and industry specific protocols, standards and tools including swarm, ens and whisper. the essentia seeds, keys, addresses, formats and on, fully comply and integrate with the ethereum protocol and they are perfectly and seamlessly compatible with and with its implementations connected services, tools and resources. this doesn't prevent, nor affect any way, the cross-chain and multi-chain operability and fungibility the essentia framework. the aim the essentia project develop, implement and share new protocol-level solutions for the ethereum ecosystem and propose, develop and contribute new and/or existing eips, such those already inspired essentia research and development, the eip and are delighted see the ethereum community and developers already participating with the new topics that represent essentia's focus: identity, data, communication, operational environment, privacy, security and decentralization. main components overview: ess-id, ess-home and ess-os. main components overview: ess-id, ess-home and ess-os. the ess-id page the ess-id the identity core the essentia framework. works similarly wallet and can created, managed, via software dedicated hardware devices. has optional multi-signature features and capabilities. the logical level, consists root-id that cryptographic master-key able create and manage its sub-ids (public-keys) and their connected levels operations and authorizations. root-ids can also create and manage individual and groups sub-ids, including ids from other users well their auths. multiple users are able join groups not and can eventually agree specific auths operations multi-signing the agreement itself and adhering its rules. the base operations the ess-id are create/destroy/restore/backup/ the root-id, sign/verify/encrypt/decrypt/ data and generate and manage its sub-ids with the same exact properties. ess-id can owned and controlled human user, bot, machine, smart contract iot device and on, depending the setup and the specific application the framework itself. the user can share auths ids/sub-ids, create groups, set/enforce context-dependant rules, user/group depending rules and much more. the interactions the ess-ids between themselves and with the blockchain, third-party services, are initially managed hybrid on/off/cross-chain solutions, the ess-bridges/nodes. they are then translated into on-chain autonomous smart-contracts that will just use the bridges connect with traditional resources and systems when necessary requested. ess-home and ess-os page the ess-id seed that can also exported human-readable string words and can backed whatever kind support. the root-key encrypted with user-passphrase, that mandatory input for using the root-key itself for any operation, and with additional encryption step called pin. when the ess-id the ess-keyware, the passphrase can user input pad with additional physical button for common and routine operations authorized. dedicated hardware device, the ess-keyware, able operate with the ess-id native and secure way isolating, the hardware level, the sensitive/critical data the keys from being exposed the external context, environment bad actors. ess-home and ess-os the ess-home and the ess-os are the decentralized essentia data environment and operating system. while also being blockchain gateway and interface, they offer trustable and secure operating environment for the user and native context for the modules the essentia platform/framework deployed and operated. the ess-home can standalone "application" that runs inside other active operating systems (e.g. mobile) in-browser, while the ess-os "the" operating system itself which can run live-mode installed the vast majority machines and architectures available. can also installed dedicated open-hardware machines, the ess-eggs, which will fully detailed following section. the ess-home and ess-os are available through decentralized storage and repositories and they can interact with the other ess modules also during pre-boot/pre-deployment stage, order auto-configure themselves and/or download additional data, based the user's setup, for example. the ess-home component the main hub the essentia framework where the ess-modules connect with each-other and the user's interaction can happen full. the ess-os and ess-home, the complete framework, are open source and can seamlessly configured several flavours used different user-types for their preferred activities setups. the home and are "clean" and user friendly, yet very robust, secure and trustable. this while being very powerful data environment, toolset and framework for the expert users and developers who can use, access and enable the more advanced configurations, depending their needs. the ess-core implements the low-level data environment which can expanded with the ess-modules meet specific needs deploy specific frameworks/operational environments. until reaching complete home setup complete operating system setup. the ess-home and the ess-os can then run server/text (command line interface) graphical (graphical user interface/browser user interface) mode and can accessed and used locally with human interface devices (hids) through the browser/console from other machines either the local network remotely, via internet, even virtualized environments. ess-home and ess-os page the user's configuration, and eventually their data, are encrypted and stored decentralized storage through modules such ess-config and ess-data. the data can kept sync different installations which the user can run concurrently different machines. they can even run concurrently multiple instances different machines and architectures. the setups can eventually share the configurations the data and can kept in-sync automated/orchestrated through the dedicated modules. the ess-home/os results powerful and trustable modular framework that can configured/pre-configured used safe environment for executing transactions, trading, developing, blockchain browsing, dapping, mining, id-control, smart contract interaction/deployment/test, education, demonstrations, anticensorship operations, for supporting decentralized blockchain technologies, experimenting and developing with them, and much more. the essentia home and operating system are complemented and expanded their modules that, beyond connecting them with the ess-id and the rest the essentia framework, allow trusted (blockchain-based not) external services integrated, accessed and used. some modules come hardware form. the ess-sense are hardware modules that can extend the ess-eggs through their physical input/output layer enabling the ess-platform, well the connected blockchain-based applications/smart-contracts, interact with the real-world through sensor, motors, circuits, solar panels, network hardware and forth. the same time, the ess-sense modules can enable iot devices interact with each-other and use the physical/hardware layer beyond the logical/software one already enabled the ess-home/os. the ess-sense modules will fully described and detailed their section. modules overview page modules overview essentia modules are the fundamental parts constituting the essentia framework constellation. they expand the ess-id and ess-home/os functionalities allowing them interact with each-other and with decentralized resources traditional ones. each module competent for its functions and has its own properties inside the essentia framework. they can depend directly one both the ess-id and the ess-home/os. additional modules, like the hardware ones, will detailed the following sections. the main modules that compose the essentia framework are: ess-core the software hardware-implemented core-module that allows the ess-id perform its fundamental and basic operations. the ess-id destroy restore backup the root-id (seed), able sign verify encrypt decrypt data and generate destroy manage the sub-ids which have the same exact properties (s/v/e/d/). also has multi-signature creation management capabilities. ess-home the main module that connects ess-base and the core functions all the other modules and components along with the top-level user interaction. also hosts the modules that connect/integrate with the trusted third-parties. please take look the preceding section dedicated the ess-home description and details. ess-pay the module manage access encrypted crypto-wallets which can created, accessed managed the root-id only. can extended with plugins connect and manage other payment processors and/or wallets. can also connected with hardware devices such point sale solutions through its plugins. ess-base the module (strictly) connected with the ess-core that effectively functions create/manage/restore/use/ the root-id dialoguing with the core. written several languages/libraries can fit browser in-memory modules, dedicated hardware, apps, dapps plugins order adapt existing frameworks and operating systems. doesn't store user data keys but just allows the user operate the top level with the root-id and sub-ids keys that are loaded and managed the ess-core. ess-base like interface the ess-core api. only the core touches the keys and the seeds. base able bootstrap the rest the system starting with the ess-home module and its imprinting data. ess-auth/groups the module that manages the creation/editing/deletion the authorizations connected with the ids and the controlled participated (multisign) groups. this module also governs the creation, modification and deletion groups and their lists users, auths and hierarchical statuses. modules overview ess-fuel the module that takes care the ess token layer inside the system. manages the token transactions and flows within the modules/components, outside the local system and for the users. also the antispam layer and the resource-balancing the essentia framework. please refer the token overview section for further details. ess-talk/docs/stamp the messaging (pgp-style) module sign encrypt decrypt verify the data/docs/messages exchanged with other ids and third-parties. communicates with other ids, reads data, notarizes data, and encrypts data for specific ids groups, well integrating with existing on/off-chain services like whisper. ess-dns essentia decentralized name system, the module that translates and makes discoverable/reachable ids' public keys (the user's addresses accounts) into top-level/human-readable web domains blockchain resources. can connect with ethereum name service (ens) and/or bridge with other services resources. ess-data the module that manages the core data infrastructure. connects the ess-ids with its decentralized data, manages the public access and i/o the decentralized public data and storage. interconnects decentralized resources (smart contract, oracles, ids, iot, etc) with data, data-environments and between each other. data can encrypted not, depending the user service. access data granted through its plugins, that can manage the data inputs/outputs, track data decentralized resources such swarm, ipfs, and torrents while also connected with traditional resources. the ess-data module also has several other plugins that allow interact with the other modules the essentia framework. ess-meta page the module that connects ids sub-ids additional metadata layers also used interact with resources external third-party services. the metadata added ids help their use real-life applications and/or automated interactions. the user the service provider can apply additional/different/custom rules based metadata including reputation and good-payer. aml/kyc layers can enabled with the ess-meta module also. ess-pingpong the module that carries simple data-communication protocols with limited data/bandwidth. like twitter for iot devices but also for streamed inputs/outputs and link-like/real-time protocols. ess-bridges(s) the bridges are off-chain, hybrid on-chain modules that connect both decentralized resources and the traditional centralized resources with essentia. the bridges also enable and allow cross-chain and multi-chain operations with and between different blockchains and protocols. they also make decentralized resources available traditional environments and vice versa (e.g. gateways). while enabling, for example, dapp smart contract reached from the "outside" order also interact with the traditional resources input/output systems. ess-config the module that handles all the configuration data. including data used store configuration-files such software environments configs variables, customizations the data pointers and also the build-scripts other internal system's configuration. ess-config also takes care configuration files and preferences third-party services and resources. modules overview ess-automate the module that takes care the deployment, automation orchestration standalone, constellation, instances the framework. takes care all the operations that involve automated machine setups well infrastructure, iot complex and distributed setups. ess-oracle(s) the module(s) that act oracle(s) inside the essentia framework but also inside wider blockchain contexts such cross-chain environments. ess-oracles can used and accessed third-parties and they can connected sensors and traditional resources. ess-del the module that handles the deletion/reset data such all-configs, all-media, all-sub-ids and also the delete-everything function and platform-reset. with time the module will also have more granularities controls. ess-clock the module for taking into account and serving the blockchain-relative time. serves the reference heart-clock decentralized environment. example, can count the time starting from the block's numbers the reference measure-unit. serves the blocktime that used the main time reference for timestamping data events connections. ess-tools page the modules that are specifically meant for enabling smooth connection and interaction with the essentia framework develop use (or just modules/parts) from "the outside". ess-sync the module that manages specifically the synchronisation data between modules multi-devices with ess-home os, external services and others. ess-init the module that takes care the re/initialization configurations, data, files and others. also has connects default data-models for the framework components modules initializations and for setting the default configs and infrastructure bootstrap parameters. ess-proc the module that checks the state and the sanity the other modules. can eventually re-initialise them or, until further developments the platform, serves system-monitoring and health-check the system each its parts. ess-keyring the module for storing managing accessing use the additional key pairs (controlled and owned the root-id directly through its extended keys) used for s/v/e/d/ specific data/files e.g. large routine. ess-keyring data stored encrypted decentralized storage and can only accessed decrypted used its owner. modules overview ess-dgps the module that takes care connecting and making available the decentralized resources, on/cross-chain, the dataflows coming from the ess-dgps nodes. not only manages the interconnection and transport layer the data but also controls the quality and reliability them, among the other functions. ess-os-data the module for data not managed/included the ess-data module. can manage additional data including static content, backups and media-files which are then used for the essentia operating system layer itself. ess-os-config the module that enables blockchain(s) based specific code/software run through its sub-modules. can enable full-node operations, mining-node operations, mining-pool-node ops, simplified payment verification (spv) wallet-node operations, smart-contract specific api specific operations and more. ess-net the module that connects with ess-config and deploys the user-desired configurations the ess-os. connects with ess-sync, ess-data and ess-repo also download data keep the ess-os updated and sync with other systems. ess-repo the module that tracks updates and manages the repositories the ess-os and other components and modules the essentia platform. ess-make/smith ess-crypto page the os-maker module that makes build-scripts/images/isos/etc the ess-os ess-modules and that eventually configures them accordingly the user setup connecting the ess-id, ess-config, ess-data and the other relevant necessary modules. can also make regular builds that are then uploaded the decentralized storage well prepare the images deploy live/installation usb-hdd, and on. the module that enables specific network layers for the ess-home/os and that can expanded its sub-modules connect and use the tor-network virtual private networks (vpns), examples, through its plugins. the essentia framework modules can have plugins that extend their functionalities and allow the whole ess-constellation self-maintain remain active and fully operational. the specific module plugins and extensions are detailed the technical overview document. additional components overview: ess-keyware, ess-eggs and ess-sense page additional components overview: ess-keyware, ess-eggs and ess-sense ess-keyware the ess-keyware thumb-size device that allows full control and interaction with the ess-id and represents the most secure and safe way use the ess-id offers all the advantages that separate and isolated hardware device can offer critical/sensitive system like the essentia platform. the ess-keyware dedicated hardware device able operate with the ess-id native and secure way isolating, the hardware level, the sensitive/critical data the seed and the id-keys. this prevents them from being leaked exposed, the external environment bad actors. the ess-keyware enables the ess-id have the exact same features that the ess-core software module (or smart contract) offers but implemented specific and dedicated "keyring-device". allows the user fully own, control and interact with the ess-id providing the ability create/destroy/restore/backup the root-id, sign/verify/encrypt/decrypt data and generate, use and manage its sub-ids with the same (s/v/e/d/) properties. managing its ess-id, the ess-keyware device enables the user interact with the ess-platform services, with external/third-party traditional services any connected services. can simply used login somewhere, can used fully deploy system, move funds, execute payments, unlock car and start its engine and for many other applications both real-life use-cases and automated/it ones. lost destroyed, the ess-keyware internal content and keyring can easily and simply restored/recreated starting from backup-seed the ess-id. ess-eggs ess-egg open-hardware machine that specifically crafted and used for running the ess-os and its hardware/software modules. the ess-eggs are affordable but very powerful devices that can highly customized and expanded. they are power-efficient and low-power consuming while also being able have high-frequency multi-core cpus that can perform like desktop machine. they are low-weight and can easily transported users. specific ess-eggs are designed for light operations for being integrated with iot devices. these light-eggs consist "lighter" hardware specific hardware-modules that can only run, manage connect specific ess-modules (or their adaptations) low-resources environments. the ess-eggs are the native essentia and blockchain(s) hardware devices while they can also represent native blockchain iot hardware solutions and layer. thanks them, the user can always deploy trustable environment that perfectly fits their needs, allowing him rely dedicated hardware layer that executes the more critical framework operations its secure context. ess-sense page the eggs can used host mission-critical operations for more common uses, not deploy custom infrastructures architectures. they can easily and efficiently scale existing infrastructure setups and services. private public custom solutions and services can hosted them, from production environment development authoritative one. the eggs provide all the features the essentia framework but also dedicated hardware layer they can also automated, orchestrated and controlled and via the dedicated modules. real-world applications can use integrate the ess-eggs order connect decentralized resources, deploy their physical "blockchainized" infrastructure, integrate their existing services with decentralized capabilities, and on. for example, decentralized renting company can integrate specifically configured egg their door-locks order connect them the smart contracts that manage the logical layers the transactions between the user and the rented resource. ess-egg just flexible the essentia framework its possible configurations and setups. just single module, let's say the ess-crypto module that runs full ethereum node, can loaded and executed egg. custom constellations and infrastructures automatable, orchestrated eggs can deployed order meet wide range the user's needs. the ess-eggs represent another layer where the ess-oracles reside. egg can configured act oracle loading the pertinent modules and resources. the eggs can expanded with their hardware modules, the ess-sense, and when appropriate configurations and setups are applied, the oracles can also manage real-world input/output dataflows. ess-sense ess-sense are the essentia framework hardware modules that include peripherals and external devices able expand the logical/software level the essentia operating system, the ess-eggs devices, the inputs/outputs the external real-physical-world. they also enable machine-to-machine connection and communications while adding some fundamental features the iot devices and infrastructure ecosystem already empowered the ess-os and/or ess-eggs. the essentia framework main properties are: hid modules screens, touch, keyboards etc. mining modules can external units too energy modules solar-panel units, battery packs, etc. ambient sensors modules temp, pressure, light, humidity etc. network modules mips hw, lan (ev), bees, antennas, etc. movement modules gyroscope, accelerometer, compass etc. location modules gps, antennas etc. shell and fan/dissipater modules miscellaneous modules ess-sense page the ess-sense enables on-chain and cross-chain oracles become reality connecting real-world inputs/outputs the blockchain and decentralized resources. ess-nodes that are equipped with sense peripherals can link and inject their sensors' dataflows directly into smart contracts they can enable module/api access them. the identity, trust and stability the oracles are ensured, and enforced, via smart contracts that also take care the availability and quality the data from the nodes/oracles. example; infrastructure egg-nodes equipped with sense gps antenna and module can used oracle providing position data the ethereum blockchain. beyond other uses, the accuracy and the quality the data from the antennas are controlled via smart contracts that make sure that the reported position the nodes remains (for example) within meters tolerance. such infrastructure and its oracles can used have anonymous absolute and relative position data on-chain and cross-chain. so, for example, smart contract can determine anonymously user has effectively reached position (e.g. triangulating his location rented apartment) without worrying about alternate counterfeit data. position-triggered events can trustfully processed its code. welcome the essentia decentralized global position system (dgps) ess token overview page ess token overview disclaimer: this just overview for the sake continuity this document. please refer the dedicated token documents for the complete details and information about the ess token and its economics ess tokens are erc-based ethereum tokens. each and every ess token equal each other and has exactly the same qualities, properties, and characteristics. after the ico period ends, additional ess tokens will created. ess tokens, managed mainly the ess-fuel module, work like the fuel the essentia framework accomplishing several functions. the token layer and its functions will gradually introduced and implemented throughout the development the entire essentia platform. the ess token devoted the following main tasks (these will enabled step step, and made operational, the underlying infrastructure ready for them): antispam measure which prevents the abuse the resources, services, the essentia framework (or anything connected it). also protects essentia from several kinds attacks that can perpetrated against the infrastructure, the users the connected resources and parties. works the fuel that keeps the essentia platform/framework alive and provides the ability access, maintain use some specific component, feature service. used pay for extra internal resources (e.g. for more storage than the minimum included for free for more configuration slots than the free default). used pay for renting additional decentralized third-party resources connected essentia (e.g. computational power running instances the components). used pay for generic but trusted third-party services connected essentia. used pay for extra goods/services/content/fees the house ess-dapp-centre and also the integrated, and trusted, third-party marketplaces and dapp-stores. can also used for the integrated dex, the essentia decentralized exchange. when someone offers dedicated additional resources the network, they can compensated with ess tokens the users. when the project will reach more mature stage, the contribution the network through offering additional resources will incentivized. the ess-x tokens will minable and will represent the reward for contributing the network running node, offering instances virtualized resources, providing calculation power, securing the network, running specific decentralized services, tools, and other activities yet defined. this will work the incentivization system for resources specifically dedicated and connected the framework. ess token overview page ess tokens that are used system level (like for antispam mechanisms for example), well the ess tokens collected fees, will periodically redistributed the ess token owners equal proportion their stakes. this enables distributed governance layer that can involve users into project and platform related decisions. users are able make proposals, vote for them, with the ess token. they are able have significant role the evolution the ecosystem they actively use and appreciate. the token allows the user with minimum stake coins, beyond participating the governance the project, have access dedicated exclusive resources. used manage the user's reputation layer discouraging bad actors that would fear, not only eventually losing their reputation, but also corresponding part their tokens stake. part the ess tokens allocated the essentia project will serve reserve dedicated foster and promote the adoption the essentia framework and reward the active users for their involvement, participation resource-sharing. for further and more detailed information about the ess token and the token sale, please refer their respective dedicated documents. essentia system properties page essentia system properties besides the indirect properties that the essentia platform has whole, there are some direct, and inherently connected, system properties and peculiarities which are going discuss individually this section the document. trust-less, trustable and secure essentia trust-less. does not require the user's trust all because doesn't know nor manage any the user data/information the open. everything, included the code, stored and available encrypted decentralized storage resources. the user only has trust him-self and eventually the system and the environment which hosts its operations. the essentia framework agnostic system that just cares about everything going well and working perfectly smoothly. essentia trustable since provides the user with full transparency over every process, operation and component. also offers fine-grained, complete and transparent control over what happening every level. essentia secure because its code audited, community reviewed and built solid cryptographical basis well top-tier blockchain technologies, solutions and resources. implements and applies the eips, bips well other industry standards, recommendations, best-practices and protocols. private: only the user has full ownership and control the user, being human machine the only one who, having exclusive access their seed, has full control and ownership the data, privacy, content, wallets, identities, accounts any other connected resource. being the sole entity who can cryptographically execute valid sign, verify, encrypt and decrypt operations with its ess-id (the seed), the user free dispose his digital belongings the way they prefer. user free decide "how" specifically interact with particular third-party resources services. decentralized, always available the essentia platform and its resources are based and available on/through blockchain technologies. the data and the code are available through decentralized storage and the user able access them from anywhere well being able the same time store and backup them physically where preferred. the user, owning and controlling their own ess-id (the seed), doesn't need concerned with, interact with, intermediaries and third-parties when accessing, disposing, their digital belongings. the user can finally, fully decentralized! cross-chain, multi-chain and multi-protocol page cross-chain, multi-chain and multi-protocol the essentia framework can operate multiple blockchains and with multiple protocols. designed enable, and allow, cross-chain operations and transaction while also being able integrate resources from different blockchains under the same secure environment. for example, ess-oracles become cross-chain resources too. essentia nodes and bridges are responsible the interoperability between different protocols, together with the other backend modules and components the essentia framework. the user, machine, can easily and seamlessly operate different blockchains. they can select and control which services (modules) enable their custom setup the framework, which resources integrate. flexible and scalable: modular design, the essentia framework modular and highly customizable. this allows fit for the maximum variety use-cases and smoothly scale order adapt even the most exotic scenarios. the high-availability the essentia resources, which are always accessible from anywhere, together with their unique design replicable and resources-sharing modules, allows the whole framework used concurrently (possibly) infinite instances. the same time, the essentia framework and its components are able run most virtual, physical and operational environments, including distributed. privacy-focused, anti-censorship, persistent, not-corruptible from its own internal point view, essentia manages and connects only meaningless, encrypted data. the focus the user's privacy fundamental importance and absolute the essentia platform, every level. the default settings and operations are made using strong encryption and they only happen protected memory, files, not directly dedicated hardware devices. the content data, once the blockchain, cannot censored, erased modified. the data becomes persistent the decentralized cloud. where only the user can access and control the data, platform components and smart contracts. the essentia framework implements privacy-by-design approach all its layers. the framework doesn't manage any data, metadata information which can related the user/machine. the framework doesn't need this for any reason, any point its development and life. essentia fully compliant with all the european union regulations and directives privacy and data protection. essentia strictly compliant with the regulation too. anonymous and encrypted default page anonymous and encrypted default the essentia ids are anonymous design they are agnostic black-boxes that don't care about real-world identities and data relations. only the user can decide whether not eventually associate the id(s) with their real ones with sets data/metadata. therefore, multiple ids can managed, even concurrently, and provide granular control over their "state" being anonymous, pseudo anonymous reflecting real-world data. the essentia platform "simply" takes care that everything, from the components the modules, the connected resources, working like planned and secured strong encryption, cryptography and the available blockchain technologies. all data and communications are encrypted default. agent agnostic, headless and automatable orchestrable the essentia framework designed and developed used several modes, both humans and machines. has both the primary, and low-level, cli (command line interface, headless) mode and also the (user interface) modes which can conveniently, and independently, used depending the setups needs. the framework just doesn't care about "whom" using it. every component/module the framework can accessed, used and automated through the cli mode. the ids layers are agent agnostic just like the whole framework; they can used indifferently and their fullness iot agents, human users, server setups and on. the seed can configured, preconfigured, meet the custom setups configurations that will then deployed the host system(s). standalone instances, infrastructure setups, the essentia framework can fully automated and orchestrated, starting from their initial deployment the host(s). master/slave and chef/puppet logics are applied the essentia framework. while build-scripts and receipts can also embedded the seed's data sets, applied/deployed bootstrap. open-source and open-hardware software and hardware the essentia code, components and modules are open-source. everyone allowed check and review the code, adapt for their personal purposes, improve whatever they like with it. the same time, the hardware components the essentia platform are based open-hardware machines that offer the same guarantees the open-source but the hardware level. all this just part the total transparency the user absolutely deserves and that essentia delivers. language agnostic, host agnostic page language agnostic, host agnostic the essentia framework consists set protocols, sub-protocols and standards which make use low-level cryptographic operands together with other open source code, protocols and standards operate and build the framework with its functions and features. the framework modules and components can implemented and written almost any programming language that compliant and adheres the set "conventions" determined the essentia consensus. almost any language suitable for implementing the framework and for developing it. this makes essentia multi-language language agnostic platform. even the hardware level (architecture) the essentia framework compatible with almost every existing solution available today. the framework can run most host architectures and operating systems. being able scale and fully functional adapting low-resources setups, well virtualized distributed high-end setups. this trait makes host-agnostic. fault-proof the essentia framework built and based open source code, standards and implementations. moreover, essentia built the minimal set cryptographic operations sign/verify/encrypt/decrypt that are executed with (and by) the seed and its derived extended keys. these properties allow each and every user access, recover, extract use their data, ids, assets, and on, whenever they like and using any kind tool, implementation custom code. whatever scenario could appear the future, there will not any data loss and block code will sufficient have full access everything connected the seed. future-proof essentia built on, consists and develops bleeding-edge solutions and technologies which aim be, not only one step ahead the current environment, but also disruptive and revolutionary. essentia puts its efforts, and commitment, into further developing decentralized ecosystems while offering future-proof solutions which keep the user the centre their vision. applications and use-cases page applications and use-cases among the several possible applications and use-cases the essentia framework its components, picked-up the most significant them the following sparse list. this list expands the cases cited the above sections this document. the goal offer concrete starting examples, and also inspiration, for making use the essentia technologies and/or start developing them. the decentralized user becomes reality! the user can access, from single place, the multitude integrated and connected decentralized dapps, services, resources, and on, having everything their fingertips. cli (command line interface) and (user interface) experience are finally available access the decentralized ecosystems from single decentralized framework that works like operating system. multiple ids and their sub-ids, being them anonymous, pseudo anonymous linked real-world data, can created, used and managed from single place. where users can selectively use them, even concurrently, order connect and interact with the services/dapps integrated the framework. reliable and trustable oracles, available on/off/cross-chain, become reality. oracles can also take advantage connections with real-world inputs/outputs through the ess-sense components. the user can login services use and configure them without revealing their private details and data, they can use their favourite exchanges, payment services and wallets without concern. the user can connect the internet, even boot, via decentralized custom vpn services via the tor network. the user can register/access their accounts instantly and seamlessly every integrated trust-less service. the external applications can enable sub-ids kyc/aml compliant binding additional level data/metadata sub-id with the ess-meta module supplementing ess-rep the reputation model, beyond the other possible implementations. the user can organize and manage ids sets ids that are devoted to, and setup for, specific use-cases. for example, users can setup connect his bank accounts, one for web shops, one for games, and on, having each related the additional data/metadata that they decide share with the third-party services/resources. cross-chain communications and transactions become possible and can take advantage transparent and reliable transport layer. multi-protocol along with multi-chain communication and transaction solutions enable the sharing resources between different decentralized systems and environments. applications and use-cases page good can rented used without revealing data problems occur with the use with its payment. insurance and/or other external, third-party smart contracts can finally manage "decentralized-users". the user can access their ess-id and, for example, can retrieve their personal data, decrypt and deploy the data simply access/use the data from anywhere. the business man, developer, who travels, can securely restore and redeploy their systems without the need carrying device, storage solutions for content. the user can travel with empty hardware and then recover their data destination, decrypt and interact with the data, then reset the host system. the user can always utilize trusted, secure, powerful, custom, ready-to-use and user-friendly framework. the user can manage "his things" through his ess-id from anywhere, securely. for example, the user can access home controls, assign company's assets (e.g. cars), move funds, trading, dapping, access/use decentralized and third-party services and deploy their setups. the user can create/share authorizations ids and sub-ids, create groups, set/enforce context-dependant rules user/group-dependant rules. constellations machines, iot devices, any complexity level can automatically deployed, managed, setup, and orchestrated through ess-ids, the ess-components and the ess-modules. absolute relative positions the earth can retrieved using the essentia decentralized global position system (dgps). constellation nodes with sense gps antenna that are controlled during their operativity smart contracts, create on/cross-chain network that works exactly like decentralized position system. data from the gps oracles can used smart contracts interconnect with real-world inputs/outputs decentralized, trust-less way. if, for example, oracle misbehaves changes its position, smart contract would put immediately offline. the non-corruptible position machine/user can reliably used trigger events connected with real-world assets (e.g. rented resources, locks, cars, etc). the user can actively/passively involved with the network. they can participate contribute the essentia network and other decentralized systems by; mining, running nodes, offering local virtualized resources for the network, computational power, decentralized storage, and on. the user able load and run full ethereum node, other blockchains nodes, decentralized vpn nodes, even concurrently, just activating the corresponding modules the essentia framework. existing services and implementations, even hardware examples, can easily integrated into the framework and interconnected with decentralized and cross-chain resources. ess-eggs can provide perfect solution for this connectivity. applications and use-cases page smart-door lock system decentralized renting company can easily interfaced with ethereum, other blockchain, with the addition ess-egg properly configured for the scope. the user can book flight without giving their personal data the operator/website being the assignee just anonymous ticket. the user data, forwarded (encrypted) them the aero company, can only decrypted and read the relevant authorities. the user's data can eventually accessed (by the authorities) only presence alert, depending the local jurisdiction. user privacy fully respected. the user orders shipment and their data "gradually" revealed the intermediate actors during the freight trip. for example, the shop knows (is allowed decrypt) just the user's country, the central postal-service knows also the city, the local post the street, and the postman knows the door-number and the initials the recipient's name. decentralized resources can rented, paid for and accessed decentralized way! company can remotely manage the access and the use its assets, such cars, employees. the manager can enforce limits and rules based context can assign the assets while controlling their authorizations, enabled-times, and on. with ess-keyware, ess-id enabled-system, the user can use atms/poss without the need card, without leaving data the intermediaries along the way and without needing accounts them. the user, with ess-keyware dealing with ess-id enabled system, beyond being able manage doors and car locks, they can also access, use pay for third-party services and resources such as; car-sharing, energy-sharing, wi-fi sharing any service enabled/integrated for such use-cases. services like airbnb, for example, can integrate the essentia platform, just some parts it, and they can allow ess-id users directly access/use their services. the user can selectively authorized the smart-contracts that manage the locks, the payments and the insurances allow access the rented resources and use them. the completion the contract, issues have occurred, the user's data are not revealed any party. the preferences, options configurations third-party services, such logins and accounts, are accessible the user through the ess-id. the third-party will challenge the ess-id sign/encrypt configuration files that can decrypt/verify. the user the only one that can cryptographically sign (and authorize) for the configuration/preference changes. the data can stored encrypted and the third-party doesn't need store user login data, configurations other kind data. the user can access and use the integrated dapps centre module, where they can browse dapps interact with them along with other decentralized resources services. applications and use-cases page users can have hand their digital assets and they can securely, yet easily, dispose them for trading for other tasks including using them the integrated dex account-less exchange. the user able sign, verify, decrypt, encrypt, timestamp, document (or any other data) and able manage its authorizations such who can access/read/use them and when. decentralize yourself! esslegal andcrowdsale page ess legal and crowdsale general informations the ess does not have the legal qualification security, since does not give any rights todividends interests. the sale ess final and non-refundable. ess are not shares and not give any right participate the general meeting essentia one. ess cannot have performance ora particular value outside the essentia one sagl network. ess shall therefore not used purchased for speculative investment purposes. the purchaser ess aware that national securities laws, which ensure that investors are sold investments that include all the proper disclosures and are subject regulatory scrutiny for the investors' protection, are not applicable. anyone purchasing ess expressly acknowledges and represents that she/he has carefully reviewed this white paper and fully understands the risks, costs and benefits associated with the purchase ess. knowledge required the purchaser ess undertakes that she/he understands and has significant experience cryptocurrencies, blockchain systems and services, and that she/he fully understands the risks associated with the crowdsale well the mechanism related the use cryptocurrencies (incl. storage). essentia one sagl shall not responsible for any loss ess situations making impossible toaccess esss, which may result from any actions omissions the user any person undertaking toacquire esss, well asin case hacker attacks. risks acquiring ess and storing them involves various risks, particular the risk that essentia one may not able launch its operations and develop its blockchain and provide the services promised. therefore, and prior acquiring ess any user should carefully consider the risks, costs and benefits acquiring ess the context the crowdsale and, necessary, obtain any independent advice inthis regard. any interested person who not the position accept orto understand the risks associated with the activity (incl. the risks related the non-development the essentia one platform) any other risks indicated the terms conditions the crowdsale should not acquire esss. important disclaimer this white paper shall not and cannot considered asan invitation enter into investment. itdoes not constitute relate any way nor should considered asan offering securities any jurisdiction. the white paper does not include nor contain any information indication that might beconsidered recommendation that might use base any investment decision. this document does not constitute offer oran invitation sell shares, securities rights belonging essentia one any related associated company. the ess just utility token which can used only onthe essentia one platform and not intended tobe used asan important disclaimer page the offering ess trading platform done order access the company's platform, purchase services related exclusively the latter and not for speculative purposes. the offering ess trading platform not changing the legal qualification the token, which remains simple means for the use the essentia one platform and not security. essentia one not considered advisor any legal, tax financial matters. any information the white paper given for general information purpose only and essentia one does not provide with any warranty asto the accuracy and completeness this information. given the lack crypto-token qualifications most countries, each buyer strongly advised carry out legal and tax analysis concerning the purchase and ownership essentia ones according their nationality and place residence. essentia one today not financial intermediary according swiss law and isnot required toobtain any authorization for anti-money laundering purpose. this qualification may change case essentia one will offers services which are tobe considered qualifying financial intermediation activity. this case, the use essentia one services may require the positive conclusion ofanaml/kyc identification process. esss confer direct indirect right essentia one's capital income, nor does confer any governance right within essentia one; ess isnot proof ownership right control over essentia one and does not grant the controlling individual any assetor share essentia one, orin the essentia one network. ess does not grant any right participate control over essentia one's management decision-making set-up, over the essentia one network and governance the purchasers. regulatory authorities are carefully scrutinizing businesses and operations associated tocryptocurrencies the world. that respect, regulatory measures, investigations actions may impact essentia one's business and even limit prevent from developing its operations the future. any person undertaking acquire ess must aware the essentia one business model, the white paper terms and conditions may change need tobe modified because new regulatory and compliance requirements from any applicable laws any jurisdictions. such case, purchasers and anyone undertaking acquire ess acknowledge and understand that neither essentia one nor any its affiliates shall held liable for any direct indirect loss damage caused such changes. essentia one will its best launch all its operations. any person undertaking acquire ess acknowledges and understands that the company's platform will function and provide access and services asat the launching the crowdsale. depending further potential developments the company's platform, other services may released and offered the users. concluding the commercial operation, these tokens will issued technical process referred toas this isan open source protocol over which the company has rights orliability terms its development and operation. the token distribution mechanism will becontrolled smart contract; this involves computer program that can executed the ethereum network oron blockchain network that compatible with smart contract programming language. they acknowledge and understand therefore that essentia one (incl. its bodies and employees) assumes liability responsibility for any loss damage that would result from orrelate the incapacity use ess except case intentional misconduct gross negligence. representation and warranties page ess based the ethereum protocol. therefore, any malfunction, unplanned function orunexpected operation the ethereum protocol may cause the essentia one network essentia ones malfunction operate way that not expected. ether, the native ethereum protocol account unit may itself lose value similar way ess and also other ways. representation and warranties participating the crowdsale, the purchaser agrees the above and particular, they represent and warrant that they: have read carefully the terms and conditions attached the white paper; agree their full contents and accept tobe legally bound them. are authorized and have full power purchase ess according the laws that apply their jurisdiction domicile. are not u.s. citizen, resident entity (a"u.s. person") nor are they purchasing essentia one signing behalf u.s. person. are not chinese resident entity nor are they purchasing the ess signing behalf chinese resident. live jurisdiction which allows essentia one sell ess through crowdsale without requiring any local authorization and are compliance with the local, state, and national laws and regulations when purchasing, selling and/or using essentia ones. are familiar with all related regulations the specific jurisdiction which they are based and that purchasing cryptographic tokens that jurisdiction not prohibited, restricted subjectto additional conditions any kind. will not use the crowdsale for any illegal activity, including but not limited money laundering and the financing terrorism. have sufficient knowledge about the nature the cryptographic tokens and have significant experience with, and functional understanding of, the usage and intricacies dealing with cryptographic tokens and currencies and blockchain-based systems and services. purchase ess because they wish have access the essentia one platform. are not purchasing ess for the purpose speculative investment usage. governing law -arbitration the client acknowledges and accepts that the essentia one ico operation taking place within swiss legal environment that still under development. the parties agree seek amicable settlement prior bringing any legal action. all disputes arising with the with papers provided, shall resolved arbitration accordance with the swiss rules international arbitration the swiss chambers commerce force the date when the notice arbitration submitted accordance with these rules. the arbitration panel shall consist one arbitrator only. the seat the arbitration shall chiasso, switzerland. the arbitral proceedings shall conducted english.