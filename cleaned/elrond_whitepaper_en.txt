elrond highly scalable public blockchain via adaptive state sharding and secure proof stake [technical whitepaper release revision updated chapters: june the elrond team https://www.elrond.com/ abstract--the advent secure public blockchains through bitcoin and later ethereum, has brought forth notable degree interest and capital influx, providing the premise for global wave permissionless innovation. despite lofty promises, creating decentralized, secure and scalable public blockchain has proved strenuous task. this paper proposes elrond, novel architecture which goes beyond state the art introducing genuine state sharding scheme for practical scalability, eliminating energy and computational waste while ensuring distributed fairness through secure proof stake (spos) consensus. having strong focus security, elrond's network built ensure resistance known security problems like sybil attack, nothing stake attack and others. ecosystem that strives for interconnectivity, our solution for smart contracts offers evm compliant engine ensure interoperability design. preliminary simulations and testnet results reflect that elrond exceeds visa's average throughput and achieves improvement beyond three orders magnitude compared the existing viable approaches, while drastically reducing the costs bootstrapping and storage ensure long term sustainability. introduction general aspects cryptocurrency and smart contract platforms such bitcoin and ethereum have sparked considerable interest and have become promising solutions for electronic payments, decentralized applications and potential digital stores value. however, when compared their centralized counterparts key metrics [], the current state affairs suggests that present public blockchain iterations exhibit severe limitations, particularly with respect scalability, hindering their mainstream adoption and delaying public use. fact, has proved extremely challenging deal with the current engineering boundaries imposed the trade-offs the blockchain trilemma paradigm []. several solutions have been proposed, but few them have shown significant and viable results. thus, order solve the scalability problem, complete rethinking public blockchain infrastructures was required. defining the challenges several challenges must addressed properly the process creating innovative public blockchain solution designed scale: full decentralization eliminating the need for any trusted third party, hence removing any single point failure; robust security allowing secure transactions and preventing any attacks based known attack vectors; high scalability enabling the network achieve performance least equal the centralized counterpart, measured tps; efficiency performing all network services with minimal energy and computational requirements; bootstrapping and storage enhancement ensuring competitive cost for data storage and synchronization; cross-chain interoperability enforced design, permitting unlimited communication with external services. starting from the above challenges, we've created elrond complete rethinking public blockchain infrastructure, specifically designed secure, efficient, scalable and interoperable. elrond's main contribution rests two cornerstone building blocks: genuine state sharding approach: effectively partitioning the blockchain and account state into multiple shards, handled parallel different participating validators; secure proof stake consensus mechanism: improved variation proof stake (pos) that ensures long term security and distributed fairness, while eliminating the need for energy intensive pow algorithms. adaptive state sharding elrond proposes dynamically adaptive sharding mechanism that enables shard computation and reorganizing based necessity and the number active network nodes. the reassignment nodes the shards the beginning each epoch progressive and nondeterministic, inducing temporary liveness penalties. adaptive state sharding comes with additional challenges compared the static model. one the key-points resides how shard-splitting and shardmerging done prevent overall latency penalties introduced the synchronization/communication needs when the shard number changes. latency, this case, the communication overhead required nodes, order retrieve the new state, once their shard address space assignment has been modified. elrond proposes solution for this problem below, but first some notions have defined: users and nodes. users are external actors and can identified unique account address; nodes are computers/devices the elrond network that run our protocol. notions like users, nodes, addresses will further described chapter ii. entities. elrond solves this challenge by: dividing the account address space shards, using binary tree which can built with the sole requirement knowing the exact number shards certain epoch. using this method, the accumulated latency reduced and the network liveness improved two ways. first, thanks the designed model, the dividing the account address space predetermined hierarchy. hence, there split overhead, meaning that one shard breaks into two shards, each them keeping only one half the previous address space addition the associated state. second, the latency reduced through the state redundancy mechanism, the merge prepared retaining the state the sibling nodes. introducing technique balancing the nodes each shard, achieve overall architecture equilibrium. this technique ensures balanced workload and reward for each node the network. designing built-in mechanism for automatic transaction routing the corresponding shards, considerably reduces latency result. the routing algorithm described chapter iv. elrond sharding approach. order achieve considerable improvements with respect bootstrapping and storage, elrond makes use shard pruning mechanism. this ensures sustainability our architecture even with throughput tens thousands transactions per second (tps). secure proof stake (spos) introduce secure proof stake consensus mechanism, that expands algorand's idea random selection mechanism, differentiating itself through the following aspects: elrond introduces improvement which reduces the latency allowing each node the shard determine the members the consensus group (block proposer and validators) the beginning round. this possible because the randomization factor stored every block and created the block proposer using bls signature the previous the block proposer the validator the consensus group who's hash the public key and randomization factor the smallest. contrast algorand's approach, where the random committee selection can take seconds, elrond the time necessary for random selection the consensus group considerably reduced (estimated under ms) excluding network latency. indeed, there communication requirement for this random selection process, which enables elrond have newly and randomly selected group that succeeds committing new block the ledger each round. the tradeoff for this enhancement relies the premise that adversary cannot adapt faster than the round's time frame and can choose not propose the block. further improvement the security the randomness source, would the use verifiable delay functions (vdfs) order prevent any tampering possibilities the randomness source until too late. currently, the research vdfs still ongoing there only few working (and poorly tested) vdf implementations. addition the stake factor generally used pos architectures sole decision input, elrond refines its consensus mechanism adding additional weight factor called rating. the node's probability selected the consensus group takes into consideration both stake and rating. the rating block proposer recalculated the end each epoch, except cases where slashing should occur, when the actual rating decrease done instantly, adding another layer security promoting meritocracy. modified bls multisignature scheme with communication rounds used the consensus group for block signing elrond considers formal verification for the critical protocol implementations (e.g. spos consensus mechanism) order validate the correctness our algorithms. architecture overview entities there are two main entities elrond: users and nodes. users, each holding (finite) number public private (pk/sk) key pairs (e.g. one multiple wallet apps), use the elrond network deploy signed transactions for value transfers smart contracts' execution. they can identified one their account addresses (derived from the public key). the nodes are represented the devices that form the elrond network and can passive actively engaged processing tasks. eligible validators are active participants elrond's network. specifically, they are responsible for running consensus, adding blocks, maintaining the state and being rewarded for their contribution. each eligible validator can uniquely identified public key constructed through derivation the address that staked the necessary amount and fig. relations between elrond entities the node id. relations between entities the elrond protocol are shown fig. furthermore, the network divided into smaller units called shards. eligible validator assigned shard based algorithm that keeps the nodes evenly distributed across shards, depending the tree level. each shard contains randomly selected consensus group. any block proposer responsible aggregate transactions into new block. the validators are responsible either reject, approve the proposed block, thereby validating and committing the blockchain. intrinsic token elrond grants access the usage its network through intrinsic utility tokens called elronds, short erds. all costs for processing transactions, running smart contracts and rewards for various contributions the network will paid erds. references fees, payments balances are assumed erds. threat model elrond assumes byzantine adversarial model, where least the eligible nodes shard are honest. the protocol permits the existence adversaries that have stake good rating, delay send conflicting messages, compromise other nodes, have bugs collude among themselves, but long the eligible validators shard are honest/not compromised, the protocol can achieve consensus. the protocol assumes highly adaptive adversaries, which however cannot adapt faster than round's timeframe. the computational power adversary bounded, therefore the cryptographic assumptions granted the security level the chosen primitives hold firmly within the complexity class problems solvable turing machine polynomial time. the network honest nodes assumed form well connected graph and the propagation their messages done bounded time attack vectors' prevention sybil attacks: mitigated through the stake locking when joining the network. this way the generation new identities has cost equal the minimum stake; nothing stake: removed through the need multiple signatures, not just from proposer, and the stake slashing. the reward per block compared the stake locked will discourage such behavior; long range attacks: mitigated our pruning mechanism, the use randomly selected consensus group every round (and not just single proposer) and stake locking. top all these, our pbft consensus algorithm ensures finality; ddos attacks: the consensus group randomly sampled every round (few seconds); the small time frame making ddos almost impossible. other attack vectors have taken into consideration are: shard takeover attack, transaction censorship, double spend, bribery attacks, etc. chronology elrond's network, the timeline split into epochs and rounds. the epochs have fixed duration, set one day (can modified the architecture evolves), the end which the shards reorganization and pruning triggered. the epochs are further divided into rounds, lasting for fixed timeframe. new consensus group randomly selected per shard each round, that can commit maximum one block the shard's ledger. new validators can join the network locking their stake, presented chapter secure proof stake. they are added the unassigned node pool the current epoch are assigned the waiting list shard the beginning epoch but can only become eligible validators participate consensus and get rewarded the next epoch the timeline aspects are further detailed section ix.. iii related work elrond was designed upon and inspired the ideas from ethereum [], omniledger [], zilliqa [], algorand and chainspace []. our architecture goes beyond state the art and can seen augmentation the existing models, improving the performance while focusing achieve better nash equilibrium state between security, scalability and decentralization. ethereum much ethereum's success can attributed the introduction its decentralized applications layer through evm [], solidity and webj []. while dapps have been one the core features ethereum, scalability has proved pressing limitation. considerable research has been put into solving this problem, however results have been negligible this point. still, few promising improvements are being proposed: casper prepares update that will replace the current proof work (pow) consensus with proof stake (pos), while plasma based side-chains and sharding are expected become available the near future, alleviating ethereum's scalability problem least partially []. compared ethereum, elrond eliminates both energy and computational waste from pow algorithms implementing spos consensus while using transaction processing parallelism through sharding. omniledger omniledger proposes novel scale-out distributed ledger that preserves long term security under permission-less operation. ensures security and correctness using biasresistant public-randomness protocol for choosing large, statistically representative shards that process transactions. commit transactions atomically across shards, omniledger introduces atomix, efficient cross-shard commit protocol. the concept two-phase client-driven "lock/unlock" protocol that ensures that nodes can either fully commit transaction across shards, obtain "rejection proofs" abort and unlock the state affected partially completed transactions. omniledger also optimizes performance via parallel intra-shard transaction processing, ledger pruning via collectively-signed state blocks, and low-latency "trust-but-verify" validation for low-value transactions. the consensus used omniledger bft variation, named byzcoinx, that increases performance and robustness against dos attacks. compared omniledger, elrond has adaptive approach state sharding, faster random selection the consensus group and improved security replacing the validators' set after every round few seconds) not after every epoch day). zilliqa zilliqa the first transaction-sharding architecture that allows the mining network process transactions parallel and reach high throughput dividing the mining network into shards. specifically, its design allows higher transaction rate more nodes are joining the network. the key ensure that shards process different transactions, with overlaps and therefore double-spending. zilliqa uses pbft for consensus and pow establish identities and prevent sybil attacks. compared zilliqa, elrond pushes the limits sharding using not only transaction sharding but also state sharding. elrond completely eliminates the pow mechanism and uses spos for consensus. both architectures are building their own smart contract engine, but elrond aims not only for evm compliance, that written for ethereum will run seamlessly our vm, but also aims achieve interoperability between blockchains. and offers high auditability. privacy features are implemented through modern zero knowledge techniques, while the consensus ensured bft. compared chainspace, where the tps decreases with each node added shard, elrond's approach not influenced the number nodes shard, because the consensus group has fixed size. strong point for chainspace the approach for language agnostic smart contracts, while elrond focuses building abstraction layer for evm compliance. both projects use different approaches for state sharding enhance performance. however, elrond goes step further anticipating the blockchain size problem high throughput architectures and uses efficient pruning mechanism. moreover, elrond exhibits higher resistance sudden changes node population and malicious shard takeover introducing shard redundancy, new feature for sharded blockchains. scalability via adaptive state sharding why sharding sharding was first used databases and method for distributing data across multiple machines. this scaling technique can used blockchains partition states and transaction processing, that each node would process only fraction all transactions parallel with other nodes. long there sufficient number nodes verifying each transaction that the system maintains high reliability and security, then splitting blockchain into shards will allow process many transactions parallel, and thus greatly improving transaction throughput and efficiency. sharding promises increase the throughput the validator network expands, property that referred horizontal scaling. algorand algorand proposes public ledger that keeps the convenience and efficiency centralized systems, without the inefficiencies and weaknesses current decentralized implementations. the leader and the set verifiers are randomly chosen, based their signature applied the last block's quantity value. the selections are immune manipulations and unpredictable until the last moment. the consensus relies novel message-passing byzantine agreement that enables the community and the protocol evolve without hard forks. compared algorand, elrond doesn't have single blockchain, instead increases transaction's throughput using sharding. elrond also improves algorand's idea random selection reducing the selection time the consensus group from over seconds less than second, but assumes that the adversaries cannot adapt within round. chainspace chainspace distributed ledger platform for high integrity and transparent processing transactions. uses language agnostic and privacy-friendly smart contracts for extensibility. the sharded architecture allows linearly scalable transaction processing throughput using s-bac, novel distributed atomic commit protocol that guarantees consistency sharding types comprehensive and thorough introduction emphasizes the three main types sharding: network sharding, transaction sharding and state sharding. network sharding handles the way the nodes are grouped into shards and can used optimize communication, message propagation inside shard can done much faster than propagation the entire network. this the first challenge every sharding approach and the mechanism that maps nodes shards has take into consideration the possible attacks from attacker that gains control over specific shard. transaction sharding handles the way the transactions are mapped the shards where they will processed. account-based system, the transactions could assigned shards based the sender's address. state sharding the most challenging approach. contrast the previously described sharding mechanisms, where all nodes store the entire state, statesharded blockchains, each shard maintains only portion the state. every transaction handling accounts that are different shards, would need exchange messages and update states different shards. order increase resiliency malicious attacks, the nodes the shards have reshuffled from time time. however, moving nodes between shards introduces synchronization overheads, that is, the time taken for the newly added nodes download the latest state. thus, imperative that only subset all nodes should redistributed during each epoch, prevent down times during the synchronization process. sharding directions some sharding proposals attempt only shard transactions only shard state [], which increases transaction's throughput, either forcing every node store lots state data supercomputer []. still, more recently, least one claim has been made about successfully performing both transaction and state sharding, without compromising storage processing power []. but sharding introduces some new challenges like: singleshard takeover attack, cross-shard communication, data availability and the need abstraction layer that hides the shards. however, conditional the fact that the above problems are addressed correctly, state sharding brings considerable overall improvements: transaction throughput will increase significantly due parallel transaction processing and transaction fees will considerably reduced. two main criterias widely considered obstacles transforming into advantages and incentives for mainstream adoption the blockchain technology. elrond sharding approach while dealing with the complexity combining network, transaction and state sharding, elrond's approach was designed with the following goals mind: scalability without affecting availability: increasing decreasing the number shards should affect negligibly small vicinity nodes without causing downtimes, minimizing them while updating states; dispatching and instant traceability: finding out the destination shard transaction should deterministic, trivial calculate, eliminating the need for communication rounds; efficiency and adaptability: the shards should balanced possible any given time. method description calculate optimum number shards nsh epoch ei+ (nsh,i+ have defined one threshold coefficient for the number transactions block, tht variable optn represents the optimal number nodes shard, sh positive number and represents the number nodes shard can vary by. totalni the total number nodes (eligible validators, nodes the waiting lists and newly added nodes the node pool) all shards epoch while xb,i the average number transactions block all shards epoch nsh, will considered the total number shards nsh,i+ will change the number nodes totalni the network changes and the blockchain utilization needs it: the number nodes increases above threshold nsplit from one epoch another and the average number transactions per block greater than the threshold number transactions per block xb,i tht the number nodes decreases below threshold erge shown function computeshardsn function ompute hards n(totalni+ nsh,i nsplit (nsh,i (optn sh erge (nsh,i nsh,i+ nsh,i (totalni+ nsplit and xb,i tht then nsh,i+ totalni+ /(optn sh else totalni+ nsh then shard (addr and return shard the entire sharding scheme based binary tree structure that distributes the account addresses, favors the scalability and deals with the state transitions. representation the tree can seen fig. the presented tree structure merely logical representation the account address space used for deterministic mapping; e.g. shard allocation, sibling computation etc. the leaves the binary tree represent the shards with their number. starting from root (node/shard there only one shard/leaf (a), all account addresses are mapped this one and all transactions will executed here. further on, the formula for nsh dictates the necessity shards (b), the address space will split equal parts, according the last bits the address. sometimes, the tree can also become unbalanced (c) nsh not power this case only affects the leaves the will removed. for example, when going from nsh nsh two shards will merged, the shard removed the highest numbered shard (shmerge =nsh -). finding the shard number that shmerge will merged with trivial. according the tree structure, the resulting shard has the sibling's number: function ompute ibling(shmerge sibling (shmerge xor nsh then sibling xor mask sibling (sibling xor mask parent min(p, sibling) sibling nsh then sibling shard return parent, sibling, else sibling subtree with shards (sibling, sibling return parent, sibling, sibling else sibling shard return parent, sibling, shard redundancy blockchain, state sharding susceptible shard failure when there insufficient number online nodes shard the distribution localized geographically. the unlikely case when one shard fails (either the shard cannot contacted all nodes are offline, consensus cannot reached more than nodes are not responding), there high risk that the entire architecture relies only superfull nodes [], which fully download every block every shard, fully verifying everything. displayed fig. our protocol has protection mechanism that introduces tradeoff the state holding structure enforcing the shards from the last tree level also hold the state from their siblings. this mechanism reduces the communication and eliminates the bootstrapping when sibling shards are merging since they already have the data. context switching preserve security sharded public blockchains, context switching becomes crucial []. this refers the reallocation the active nodes between shards fixed time interval some random criteria. elrond's approach, the context switching represents security improvement, but also increases the complexity required maintain consistency between multiple states. the state transition has the biggest presented chapter vii cross-shard transaction processing. consensus via secure proof stake consensus analysis fig. shard redundancy across epochs footprint performance since the movement active nodes requires resync the state, blockchain and transactions alongside the eligible nodes the new shard. the start each epoch, order maintain liveness, only less than these nodes will uniformly re-distributed across shards. this mechanism highly effective against forming malicious groups. the first blockchain consensus algorithm based proof work (pow), used bitcoin, ethereum and other blockchain platforms. proof work each node required solve mathematical puzzle (hard calculate but easy verify). and the first node that finishes the puzzle will collect the reward []. proof work mechanisms successfully prevent double-spending, ddos and sybil attacks the cost high energy consumption. proof stake (pos) novel and more efficient consensus mechanism proposed alternative the intensive energy and computational use proof work consensus mechanisms. pos can found many new architectures like cardano and algorand can used next version ethereum. pos the node that proposes the next block selected combination stake (wealth), randomness and/or age. mitigates the pow energy problem but also puts two important issues the table: the nothing stake attack and higher centralization risk. proof meme envisioned constellation [], algorithm based the node's historical participation the network. its behaviour stored matrix weights the blockchain and supports changes over time. also, allows new nodes gain trust building reputation. the main drawback regarding sybil attacks alleviated through the netflow algorithm. delegated proof stake (dpos) found bitshares [], steemit and eos hybrid between proof authority and proof stake which the few nodes responsible for deploying new blocks are elected stakeholders. although has high throughput, the model susceptible human related social problems such bribing and corruption. also, small number delegates makes the system prone ddos attacks and centralization. notarization (meta) chain all network and global data operations (node joining the network, node leaving the network, eligible validator lists computation, nodes assignment the shard's waiting lists, consensus agreement block specific shard challenges for invalid blocks will notarized the metachain. the metachain consensus run different shard that communicates with all other shards and facilitates cross-shard operations. every round every epoch, the metachain receives block headers from the other shards and, necessary, proofs for the challenges the invalid blocks. this information will aggregated into blocks the metachain which consensus has run. once the blocks are validated the consensus group, shards can request information about blocks, miniblocks (see chapter vii), eligible validators, nodes waiting lists etc., order securely process cross-shard transactions. further details about the cross-shard transaction execution, communication between shards and metachain will secure proof stake (spos) elrond's approach consensus made combining random validators' selection, eligibility through stake and rating, with optimal dimension for the consensus group. the algorithm described the steps below: each node defined tuple public key k), rating (default and the locked stake. wishes participate the consensus, has first register through smart contract, sending transaction that contains amount equal the minimum required stake and other information public key derived from and nodeid that will used for the signing process order not use real wallet address). the node joins the node pool and waits for the shard assignment the end the current epoch the shard assignment mechanism creates new set nodes containing all the nodes that joined epoch and all the nodes that need reshuffled (less than every shard). all nodes this set will reassigned the waiting lists shards. represents j's shard waiting list and nsh represents the number shards. node also has secret key that nature not made public. ratingi stakei ledger, having all intra shard transactions and cross shard transactions for which confirmation proof was received; multiple mini-blocks: each them holding cross shard transactions for different shard; the consensus will run only once, the composite block containing both intra- and cross-shard transactions. after consensus reached, the block header each shard sent the metachain for notarization. selected the shard for the same round the same consensus even the nodes from the shard are malicious. that case they can propose block and sign let's call block but will not notarized the metachain. the metachain notarizes block only block built top it. order create block the next consensus group has agree with block only malicious group will agree with block the next group must have malicious super majority again. the random seed for group selection cannot tampered with, the probability selecting one more malicious super majority group exact). the probability signing two consecutive malicious blocks equals with selecting two subgroups with least members from the malicious group consequently. the probability for this furthermore, the consequently selected groups must colluding, otherwise the blocks will not signed. fisherman challenge when one invalid block proposed malicious majority, the shard state root tampered with invalid result (after including invalid changes the state tree). providing the combined merkle proof for number accounts, honest node could raise challenge with proof. the honest nodes will provide the block transactions, the previous reduced merkle tree with all affected accounts before applying the challenged block and the smart contract states, thus demonstrating the invalid transaction state. challenge with the proof not provided the bounded time frame, the block considered valid. the cost one invalid challenge the entire stake the node which raised the challenge. the metachain detects the inconsistency, either invalid transaction, invalid state root, through the presented challenges and proofs. this can traced and the consensus group can slashed. the same time the challenger can rewarded with part the slashed amount. another problem when malicious group hides the invalid block from other nodes non-malicious ones. however, making mandatory for the current consensus propagate the produced block the sibling shard and the observer nodes, the data cannot hidden anymore. the communication overhead further reduced sending only the intrashard miniblock the sibling shard. the cross shard miniblocks are always sent different topics accessible interested nodes. the end, challenges can raised multiple honest nodes. another security protection given the setup topics. the communication from one shard toward the metachain done through defined set topics channels, which can listened any honest validator the metachain will not accept any other messages from other channels. this solution introduces some delay the metachain only case challenges, which are very low number and highly improbable since detected (high probability being detected) the nodes risk their entire stake. shard reorganization after each epoch, less than the nodes from each shard are redistributed uniformly and non-deterministically across the other shards, prevent collusion. this method adds bootstrapping overhead for the nodes that were redistributed, but doesn't affect liveness shuffled nodes not participate the consensus the epoch they have been redistributed. the pruning mechanism will decrease this time feasible amount, explained section ix.. consensus group selection after each round new set validators are selected using the random seed the last commited block, current round and the eligible nodes list. case network desynchronization due the delays message propagation, the protocol has recovery mechanism, and takes into consideration both the round and the randomness seed from the last committed block order select new consensus groups every round. this avoids forking and allows synchronization last block. the small time window (round time) which the validators group known, minimizes the attack vectors. node rating beside stake, the eligible validator's rating influences the chances selected part the consensus group. the block proposer honest and its block gets committed the blockchain, will have its rating increased, otherwise, it's rating will decreased. this way, each possible validator incentivized honest, run the most up-to-date client software version, increase its service availability and thus ensuring the network functions designed. shard redundancy the nodes that were distributed sibling shards the tree's lowest level (see section iv.) keep track each other's blockchain data and application state. introducing the concept shard redundancy, when the number nodes the network decreases, some the sibling shards will need merged. the targeted nodes will instantly initiate the process shard merging. understanding the real problems centralized decentralized blockchain was initially instantiated alternative the centralized financial system systems []. even the freedom and anonymity distributed architectures remains undisputed advantage, the performance has analyzed global scale real-world environment. the most relevant metric measuring performance transactions per second (tps), seen table tps comparison traditional centralized systems with decentralized novel architectures that were validated trusted and efficient large scale, reflects objective yet unsettling reality [], [], [], []. the scalability blockchain architectures critical but still unsolved problem. take, for instance, the example determining the data storage and bootstrapping implications current blockchain architectures suddenly functioning visa level throughput. performing such exercises, the magnitude multiple secondary problems becomes obvious (see fig. architecture type dispersion tps (average) tps (max limit) visa distributed virtualization centralized paypal distributed virtualization centralized ripple private blockchain permissioned neo private blockchain mixed decentralized decentralized ethereum bitcoin public blockchain public blockchain table centralized decentralized tps comparison xii the blockchain performance paradigm the process designing distributed architectures blockchain faces several challenges, perhaps one the most challenging being the struggle maintain operability under contextual pressure conditions. the main components that determine the performance pressure are: complexity system size transaction volume complexity the first element that limits the system performance, the consensus protocol. more complicated protocol determines bigger hotspot. pow consensus architectures big performance penalty induced the mining complexity that aims keep the system decentralized and asic resilient []. overrun this problem pos makes trade-off, simplifies the network management concentrating the computing power subset the network, but yields more complexity the control mechanism. system size expanding the number nodes existing validated architectures forces serious performance degradation and induces higher computational price that must paid. sharding seems good approach, but the shard size plays major role. smaller shards are agile but more likely affected malicious groups, bigger shards are safer, but their reconfiguration affects the system liveness. transaction volume with higher relevance compared the others, the last item the list represents the transaction processing performance. order correctly measure the impact this criteria, this must analyzed considering the following two standpoints: transaction throughput how many transactions system can process per time unit, known tps, output system []; transaction finality how fast one particular transaction processed, referring the interval between its launch and its finalization input output path. ransaction throughput single chain architectures very low and can increased using workarounds such sidechain []. sharded architecture like ours, the transaction throughput influenced the number shards, the computing capabilities the validators/block proposers and the messaging infrastructure []. general, displayed fig. this goes well the public, but despite the importance the metric, provides only fragmented view. ransaction inality more delicate aspect that emphasizes that even the system may have throughput tps, may take while process particular transaction. beside the computing capabilities the validators/block proposers and the messaging infrastructure, the transaction finality mainly affected the dispatching algorithm (when the decision made) and the routing protocol (where should the transaction executed). most the existing state the art architectures refuse mention this aspect but from user standpoint this extremely important. this displayed fig. storage estimation validated distributed architectures working average visa tps fig. transaction throughput fig. where the total time required execute certain transaction from start end considered. elrond, the dispatching mechanism (detailed section allows improved time finality routing the transactions directly the right shard, mitigating the overall delays. xiii conclusion performance performance tests and simulations, presented fig. reflect the efficiency the solution highly scalable distributed ledger. more and more nodes join the network our sharding approach shows linearly increasing throughput. the chosen consensus model involves multiple communication rounds, thus the result highly influenced the network quality (speed, latency, availability). simulations using our testnet using worldwide network speed averages, its maximum theoretical limit, suggest elrond exceeds the average visa level with just shards, and approaches peak visa level with shards. fig. transaction finality ongoing and future research our team constantly re-evaluating and improving elrond's design, effort make this one the most compelling public blockchain architectures; solving scalability via adaptive state sharding, while maintaining security and high energy efficiency through secure proof stake consensus mechanism. some our next directions improvement include: reinforcement learning: aim increase the efficiency the sharding process allocating the frequently trading clients the same shard reduce the overall cost; supervision: create supervisor that detects malicious behavioral patterns; still uncertain how this feature can integrated the protocol without disrupting the decentralization; reliability consensus factor: the existing protocol weighs between stake and rating but plan add reliability, metric that should computed distributed manner after applying consensus protocol previously submitted blocks from the very recent fig. network throughput measured transactions per seconds with global network speed mb/s history; cross-chain interoperability: implements and contribute standards like those initiated the decentralized identity foundation the blockchain interoperability alliance []; privacy preserving transactions: use zero-knowledge succinct non-interactive argument knowledge protect the identity the participants and offer auditing capabilities while preserving the privacy. overall conclusions elrond the first highly scalable public blockchain that uses the newly proposed secure proof stake algorithm genuine state-sharded architecture achieve visa level throughput and confirmation times seconds. elrond's novel approach adaptive state sharding improves omniledger's proposal increasing security and throughput, while the built-in automatic transaction routing and state redundancy mechanisms considerably reduce latencies. using shard pruning technique the bootstrapping and storage costs are also considerably reduced compared other approaches. the newly introduced secure proof stake consensus algorithm ensures distributed fairness and improves algorand's idea random selection, reducing the time needed for the random selection the consensus group from seconds ms. our method combining state sharding and the very efficient secure proof stake consensus algorithm has shown promising results our initial estimations, validated our latest testnet results. references hileman and rauchs, global cryptocurrency benchmarking study," social science research network, rochester, ny, ssrn scholarly paper apr. [online]. available: https://papers.ssrn.com/abstract= "the ethereum wiki sharding faq," original-date: -t::z. [online]. available: https://github.com/ethereum/wiki/ wiki/sharding-faq gilad, hemo, micali, vlachos, and zeldovich, "algorand: scaling byzantine agreements for cryptocurrencies," proceedings the symposium operating systems principles, ser. sosp new york, ny, usa: acm, pp. [online]. available: http://doi.acm.org/./. boneh, lynn, and shacham, "short signatures from the weil pairing," advances cryptology asiacrypt lncs. springer, pp. boneh, drijvers, and neven, "compact multi-signatures for smaller blockchains," advances cryptology asiacrypt ser. lecture notes computer science, vol. springer, pp. buterin, "ethereum: next-generation smart contract and decentralized application platform," [online]. available: https: //www.ethereum.org/pdfs/ethereumwhitepaper.pdf kokoris-kogias, jovanovic, gasser, gailly, syta, and ford, "omniledger: secure, scale-out, decentralized ledger via sharding," tech. rep. [online]. available: https://eprint.iacr.org// "the zilliqa technical whitepaper," [online]. available: https://docs.zilliqa.com/whitepaper.pdf al-bassam, sonnino, bano, hrycyszyn, and danezis, "chainspace: sharded smart contracts platform," arxiv:. [cs], aug. arxiv: [online]. available: http: //arxiv.org/abs/. wood, "ethereum: secure decentralised generalised transaction ledger," [online]. available: https://ethereum. github.io/yellowpaper/paper.pdf "solidity solidity documentation." [online]. available: https://solidity.readthedocs.io/en/v../ "webj," [online]. available: https://github.com/webj "casper," [online]. available: http://ethresear.ch/c/casper "the state ethereum scaling, march highlights from ethcc plasma cash, minimum viable plasma, and more. medium," [online]. available: https://medium.com/loom-network/ the-state-of-ethereum-scaling-march--aca castro and liskov, "practical byzantine fault tolerance," proceedings the third symposium operating systems design and implementation, ser. osdi berkeley, ca, usa: usenix association, pp. [online]. available: http://dl.acm.org/citation.cfm?id=. jia, "op ed: the many faces sharding for blockchain scalability," [online]. available: https://bitcoinmagazine.com/ articles/op-ed-many-faces-sharding-blockchain-scalability/ "using merklix tree shard block validation deadalnix's den," [online]. available: https://www.deadalnix.me//// using-merklix-tree-to-shard-block-validation/ nakamoto, "bitcoin: peer-to-peer electronic cash system," "why are building cardano introduction." [online]. available: https://whycardano.com/ "constellation blockchain microservice operating system white paper," original-date: --t::z. [online]. available: https://github.com/constellation-labs/whitepaper "bitshares delegated proof-of-stake consensus," [online]. available: https://bitshares.org/technology/ delegated-proof-of-stake-consensus/ dantheman, "dpos consensus algorithm the missing white paper," may [online]. available: https://steemit.com/dpos/@dantheman/ dpos-consensus-algorithm-this-missing-white-paper "eos.io technical white paper v," original-date: -t::z. [online]. available: https://github.com/eosio/ documentation/blob/master/technicalwhitepaper.md paar and pelzl, understanding cryptography: textbook for students and practitioners. berlin heidelberg: springer-verlag, [online]. available: //www.springer.com/gp/book/ schnorr, "efficient signature generation smart cards," journal cryptology, vol. pp. jan. michaelis, meyer, and schwenk, "randomly failed! the state randomness current java implementations," topics cryptology ct-rsa ser. lecture notes computer science. springer, berlin, heidelberg, feb. pp. [online]. available: https://link.springer.com/chapter/./ ---- bernstein, birkner, joye, lange, and peters, "twisted edwards curves," progress cryptology africacrypt ser. lecture notes computer science. springer, berlin, heidelberg, jun. pp. [online]. available: https: //link.springer.com/chapter/./---- poelstra, "schnorr signatures are non-malleable the random oracle model," [online]. available: https://download.wpsoftware. net/bitcoin/wizardry/schnorr-mall.pdf decker and wattenhofer, "bitcoin transaction malleability and mtgox," arxiv:. [cs], vol. pp. arxiv: [online]. available: http://arxiv.org/abs/. maxwell, poelstra, seurin, and wuille, "simple schnorr multi-signatures with applications bitcoin," tech. rep. [online]. available: https://eprint.iacr.org// seurin, "on the exact security schnorr-type signatures the random oracle model," advances cryptology eurocrypt ser. lecture notes computer science. springer, berlin, heidelberg, apr. pp. [online]. available: https://link.springer.com/chapter/./---- itakura and nakamura, public-key cryptosystem suitable for digital multisignatures," micali, ohta, and reyzin, "accountable-subgroup multisignatures: extended abstract," proceedings the acm conference computer and communications security, ser. ccs new york, ny, usa: acm, pp. [online]. available: http://doi.acm.org/./. ristenpart and yilek, "the power proofs-of-possession: securing multiparty signatures against rogue-key attacks," advances cryptology eurocrypt ser. lecture notes computer science. springer, berlin, heidelberg, may pp. [online]. available: https://link.springer.com/chapter/./ ---- bellare and neven, "multi-signatures the plain public-key model and general forking lemma," proceedings the acm conference computer and communications security, ser. ccs new york, ny, usa: acm, pp. [online]. available: http://doi.acm.org/./. d.-p. le, bonnecaze, and gabillon, "multisignatures secure the diffie-hellman problem the plain public-key model," pairing-based cryptography pairing ser. lecture notes computer science. springer, berlin, heidelberg, aug. pp. [online]. available: https://link.springer.com/chapter/./ ---- dickerson, gazzillo, herlihy, and koskinen, "adding concurrency smart contracts," proceedings the acm symposium principles distributed computing, ser. podc new york, ny, usa: acm, pp. [online]. available: http://doi.acm.org/./. kwon and buchman, "cosmos network internet blockchains," [online]. available: https://cosmos.network/whitepaper ros, and erbanuta, "an overview the semantic framework," the journal logic and algebraic programming, vol. no. pp. kasampalis, guth, moore, serbanuta, serbanuta, filaretti, rosu, and johnson, "iele: intermediate-level blockchain language designed and implemented using formal semantics," tech. rep., hildenbrandt, saxena, zhu, rodrigues, daian, guth, and rosu, "kevm: complete semantics the ethereum virtual machine," tech. rep., "how formal verification smart contracts works blog." [online]. available: https://runtimeverification.com/blog/ how-formal-verification-of-smart-contracts-works/ "cross-shard contract yanking." [online]. available: https://ethresear. ch/t/cross-shard-contract-yanking/ merkle, certified digital signature," advances cryptology crypto' proceedings, ser. lecture notes computer science. springer, new york, ny, aug. pp. [online]. available: https://link.springer.com/chapter/./--- veysov and stolbov, "financial system classification: from conventional dichotomy more modern view," social science research network, rochester, ny, ssrn scholarly paper jul. [online]. available: https://papers.ssrn.com/abstract= "xrp the digital asset for payments." [online]. available: https://ripple.com/xrp/ "visa annual report [online]. available: https://s.qcdn.com//files/doc financials/annual// visa--annual-report.pdf "paypal reports fourth quarter and full year results (nasdaq:pypl)," [online]. available: https://investor. paypal-corp.com/releasedetail.cfm?releaseid= schwarz, "crypto transaction speeds all the major cryptocurrencies," [online]. available: https://www.abitgreedy. com/transaction-speed/ "the ethereum wiki mining," original-date: -t::z. [online]. available: https://github.com/ethereum/wiki/ wiki/mininghttps://github.com/ethereum/wiki "transaction throughput." [online]. available: https://docs.oracle.com/ cd/e /html/programmer reference/transapp throughput.html martino, quaintance, and popejoy, "chainweb: proofof-work parallel-chain architecture for massive throughput," [online]. available: http://kadena.io/docs/chainweb-v.pd "dif decentralized identity foundation." [online]. available: http://identity.foundation/ world, "blockchain interoperability alliance: icon aion wanchain," dec. [online]. available: https://medium.com/helloiconworld/ blockchain-interoperability-alliance-icon-x-aion-x-wanchain-aeaafbebdd goldwasser, micali, and rackoff, "the knowledge complexity interactive proof-systems," proceedings the seventeenth annual acm symposium theory computing, ser. stoc new york, ny, usa: acm, pp. [online]. available: http://doi.acm.org/./.