build and run decentralized software plain english. we're building the world's fastest decentralized cloud for smart software. specialized blockchain designed specifically replace cloud computing and execute tens millions transactions per second. enabling you build smart software plain english, empower you create the future. table contents premise ......................................................................................................................................................... abstract ........................................................................................................................................................ what sparkster? ....................................................................................................................................... our vision ..................................................................................................................................................... mission statement ....................................................................................................................................... selling ideas, not effort. ............................................................................................................................... problem statement ...................................................................................................................................... iterative software development lifecycle ................................................................................................ enterprise software defunct ................................................................................................................. impediments innovation ...................................................................................................................... environmental concerns ........................................................................................................................... solution: software built for you, you. .................................................................................................. background ................................................................................................................................................. we're not alone .................................................................................................................................. business overview ..................................................................................................................................... core value proposition ........................................................................................................................... scale and revenue strategy .................................................................................................................... viral growth ............................................................................................................................................ network effects....................................................................................................................................... strategic partnerships ............................................................................................................................. vertical markets ...................................................................................................................................... iot ....................................................................................................................................................... cryptocurrency smart contracts......................................................................................................... barriers entry ...................................................................................................................................... gdpr considerations ................................................................................................................................. product overview ....................................................................................................................................... sparkster platform .................................................................................................................................. sparkster decentralized cloud ................................................................................................................ smart software........................................................................................................................................... flows ....................................................................................................................................................... functions ................................................................................................................................................. documents .............................................................................................................................................. integrations ............................................................................................................................................. devices .................................................................................................................................................... gateways................................................................................................................................................. smart contracts ...................................................................................................................................... bugs ................................................................................................................................................... technical implementation the sparkster decentralized community network ................................... the road million+ tps ......................................................................................................... practical example ................................................................................................................................ the sparkster technology stack ............................................................................................................. consensus ............................................................................................................................................... privacy ..................................................................................................................................................... security ................................................................................................................................................... multi chain interoperability.................................................................................................................... consistent hashing.................................................................................................................................. and iot................................................................................................................................................ system incentives .................................................................................................................................. optimizing execution costs for clients ................................................................................................... roadmap..................................................................................................................................................... token economic value model ................................................................................................................... token purpose and intent....................................................................................................................... token distribution platform ................................................................................................................... token sale procedure ............................................................................................................................. token distribution strategy .................................................................................................................... token sale structure ............................................................................................................................... currencies accepted ............................................................................................................................... referral rewards program ...................................................................................................................... allocation token proceeds ................................................................................................................. advisory team ............................................................................................................................................ leadership team ........................................................................................................................................ sparkster warriors ..................................................................................................................................... references .................................................................................................................................................. disclaimer important disclosure ............................................................................................................. premise we're all sparksters. all see better ways doing things. with the right tools our finger tips, can finally build solutions that improve efficiency, solve meaningful problems, and bring about better world. abstract the sparkster decentralized cloud facilitate the 'decentralized execution smart software', evolution smart contracts, across network cell phones, notebooks, laptops other personal devices held our network miners. these miners are rewarded spark tokens for contributing spare capacity their personal devices the sparkster decentralized cloud. envision future which decentralized networks can far cheaper than traditional cloud computing from the likes amazon(r), microsoft(r), google(r) and ibm(r). given that cloud providers pay for: rack space, cooling, dedicated hardware, networking infrastructure, backup power, and support personnel; personal devices have near zero marginal cost per operation relative cloud providers. hence, each contributor afforded the opportunity set their own price for the use their device, over time, natural market conditions will drive the cost decentralized cloud below that traditional cloud computing. this presents opportunity collectively disrupt the billion-dollar cloud computing industry (darrow, and distribute significant portion that revenue participants the sparkster decentralized cloud through spark tokens. with traditional cloud computing, matter how many nodes are added the network, the average cost per operation remains constant, enabling one scale with near linear costs. however, with decentralized network inexpensive nodes, more nodes such cell phones are added the network, the cost per operation declines, such that the cost per operation becomes less than traditional cloud computing. companies wishing run software, will pay for the execution software the sparkster decentralized cloud spark tokens. large companies are likely adopt public decentralized cloud, like they've adopted amazon(r) aws and microsoft(r) azure, can satisfy the following requirements: privacy all data stored and accessed deconstructed into transaction fragments, encrypted and disseminated across network nodes such that cannot any meaningful value when viewed public ledger. security any devices operating the network and interacting with client data are hardened such that any form tampering access data, while being processed, prevents the device from accessing the network. performance transaction latency must comparable with traditional centralized cloud computing, but transaction throughput must exceed tens millions transactions per second. material cost savings cost savings must sufficient justify the efforts involved redesigning software architecture transparent software designed such environment must easily and automatically operate decentralized environment, without requiring any knowledge architectural design considerations for decentralized environments the software author. blockchain agnostic users must have the freedom build software that can interact with any existing blockchain their choice all plain english. today, have existing integrations with ethereum and iota, but others such neo, cardano, and stellar are our roadmap. true decentralized oracles integrate anything, whether it's ai, iot your favorite api. most importantly, integrate anything without any code plain english. the aim this paper describe purpose built decentralized blockchain design that addresses these seven concerns and presents legitimate and practical solution, using existing but proven technologies, that collectively will give rise trustable, public, decentralized cloud facilitating the future cloud computing. what sparkster? today, sparkster platform empowerment. empower you bring your ideas life building software without learning how code. use intuitive drag and drop interfaces and the ability define business logic plain english build anything imaginable. focus what you want build, and let our platform transform your ideas into working software seconds. inspired mit scratch, take the position that young children can build games with simple building blocks, then can empower everybody build enterprise grade applications similar manner. innovation the century almost exclusively dependent software development. one need not look far for plethora examples: emerging companies such uber, airbnb, and instagram are exclusively software companies. the sparkster platform aims democratize access innovation, and make innovation the century accessible everybody. the sparkster platform software what uber was the taxi industry seismic disruption. competitors such microsoft(r), sap(r), oracle(r) will have their business models fundamentally disrupted the advent user generated software, empowered the sparkster platform. present the fastest, cheapest, easiest, most democratic and personalized way build software, period. now, we're building the world's fastest decentralized cloud that enables people execute this software across network our community's cell phones. this combined packaged not only the cheapest, most democratic and fastest way build software, but run software too. high performance decentralized cloud, proposed sparkster, necessary mainstream blockchain adoption. our vision ideas are the currency the future. envision future which everybody can bring their ideas reality. doing so, they create financial independence for themselves, while contributing their society the process. mission statement aim empower the dreamer within each innovate. will achieve this democratizing access the tools necessary for innovation the century: software development. selling ideas, not effort. ideas are ubiquitous, they're not limited certain social classes, education family upbringing. ideas are not the privilege the few, but rather the prerogative everybody. our everyday lives, can all see better and more efficient ways doing things. the sparkster platform empowers you bring these ideas life, and unshackles you from the limitations your job, financial disposition, regional and cultural impediments. the sparkster marketplace empowers you sell these ideas, find patrons and fans help bring about the change you seek, and create sustainability through paying customers. the sparkster platform presents path liberation and path financial independence. problem statement enterprises, startups and individuals attempting adopt ai, iot and smart contracts are entrenched with impediments harnessing these innovative technologies. namely, that existing enterprise technologies are architecturally incompatible, departments move too slowly, and qualified people familiar with these technologies are not available sufficient supply. iterative software development lifecycle the typical process which software currently created rather convoluted. expert that understands the intricacies business process, describe their requirements member the team. the team are technicians that usually have limited understanding the actual business. the team attempt document what they understood from their meeting with the domain expert. through iterative process rejection and rework, they finally and successfully document what their customer (the domain expert) wants. then they begin process analyzing how they might achieve this, before they begin development. this point, several weeks not months have passed. after some testing they engage the customer again. they soon discover that their understanding the signed off document and their customer's perception the document are quite different. usually their dismay, they discover that they've developed something rather different what was desired. hence, once again, the iterative process perpetuates they try and close the gap interpretation the approved document. this process software development, often called the software development lifecycle (sdlc), slow and painful (berry, technology developed meet need point time, these needs change market conditions change and businesses respond with new strategy. order update the software meet these changing demands, professionals need consulted great cost make even the simplest changes software. not only there often large cost associated with this, there significant timelag requesting changes, from the initial consultation requesting change, explaining the new requirements, development, testing and implementation the changes. this inhibits technological advancement and instead make with the status-quo. enterprise software defunct the reality that almost all businesses today are running software that absolutely incapable interfacing with the technologies the future. matter who provides your business software, whether it's sap(r), oracle(r), microsoft(r), it's homegrown, integrating internet things ("iot") devices, artificial intelligence ("ai"), smart contracts into existing business processes will not possible without other technology platforms. all this software will have either ripped and replaced integrated into new technology platform for businesses continue competitive and take advantage these revolutionary technologies (clark, believe the existence sap(r) leonardo evidence our premise, that business software use today need replaced order for businesses take advantage the technologies the future, and continue competitive. for example, iot powered machinery factory cannot simply integrated into existing business processes that replenish raw material inventory production line. entirely new software architecture necessary consume the data being generated these machines, and use this data make real-time autonomous replenishment decisions. sap(r) recognize this, and hence, built leonardo platform for software developers. impediments innovation not only are traditional erp's architecturally incompatible with the technology the future, the real problem that the vast majority software developers lack the technical knowledge build these new technologies (kalla, enterprises today are struggling find sufficient talent that can help them integrate and iot into their enterprises help bring about the benefits these technologies materialize, let alone finding the talent integrate smart contracts. this presents significant challenge enterprises how they might innovate, and build new business models that harness the power ai, iot and smart contracts. similar enterprises, often, the greatest challenge that startups face not lack funding, but rather the lack software developers available make their ideas reality (aleksandrova, this too presents impediment innovation, startups struggle bring about innovative products and services that contribute value our society. individuals, the cryptic nature computer programing languages prevents the majority people from being able materialize ideas. while much has been done make technologies accessible via api's, these api's are still within the purview software developers. hence, for someone not fortunate enough versed computer programming language, manifesting their ideas most often requires significant capital, which often difficult accumulate. hence, the inaccessibility technology presents impediment innovation. developing technology has been the preserve those that had the ability write computer code and translate what are essence very simple functions into cryptic language that can understood computers. believe this inhibits technological development and stops those with great ideas truly realizing their potential, and building the future. environmental concerns greenpeace report titled make green: cloud computing and its contribution climate change, suggested that cloud computing consumed billion kilowatt hours energy and this expected increase billion kilowatt hours the associated emissions that are anticipated reach mega tonnes (schmidt, such high levels emissions are clearly unsustainable. solution: software built for you, you. what software could defined plain english? what this software was defined platform architected specifically integrate innovative technologies such ai, iot and smart contracts? what taking advantage these new technologies was simple dragging and dropping block? that the sparkster platform, and it's ready use today. empower you create the future, empower you bring your ideas reality. the sparkster platform today: the sparkster platform empowers the people running the business with the tools build the business process the future that will ultimately keep them competitive. sparkster makes software development accessible the who not know how code, and don't want learn. enterprises can yield the power their human capital, ignite new culture innovation and inclusive participation that kindles passionate tinker, passion manifest, culture continual improvement among their knowledge workers, among the very people that the know the business intimately. respond changing business circumstances instantly, build the future your terms, that's the sparkster platform. build software designed for you, you least faster, cheaper and easier than any other alternative. building decentralized software difficult and currently prohibitive because high gas prices and long execution times. what decentralized software could built without any knowledge decentralized architecture, and run cheap devices such cell phones, and iot devices, all deployed with just the click button? what "mining" with unused cell phone capacity became simple installing app? what the process making software execution cheaper and more democratic, could drastically cut emissions? that's why need the sparkster decentralized cloud. background having spent the last years working with software engineers design and build erp software for fledgling startup, sparkster was born from extreme frustration and the answer our founder exclaiming "just give the tools, and i'll myself!" hence, the idea emerged. empowering our managerial team with the tools define just business logic, without worrying about the technical coding, was the guiding principle with which the platform was developed. from there began year journey r&d find way how such platform might built. today, the sparkster platform not simply production ready, it's enterprise ready. designed with cloud principles, and utilizing managed and monitored docker containers, the platform autonomously scales horizontally support near unlimited throughput from users and devices. addition, security the forefront the design and architectural considerations the sparkster platform. implementing aes bit encryption and oauth between all container interactions, security isn't afterthought, integral the very architecture the sparkster platform. our product has garnered interest from many enterprise company, which are some the largest technology companies the world. far, have signed official partnerships with arm(r) and libelium(r). we're not alone the last few years entire market has emerged participants who share our concerns that software development the traditional sense unnecessarily complicated, burdensome, and time consuming. according gartner's magic quadrant, the low code code segment consists household names such ibm(r), microsoft(r), and salesforce(r). commend and support their efforts remove inefficiency from the process software development, but disagree with the majority the existing industry one major way: we're not trying make software development easier and faster for just software developers. rather, want see software development become accessible everybody. we're focused the where many participants our industry are focused the who are software developers. therefore, believe lead the industry the realization this vision. invite you compare our platform those that exist the "magic quadrant" and determine for yourself whose platform easiest use. addition, we're far more than platform build nice interfaces mobile apps. using our revolutionary technology, you can build ai, iot, ethereum smart contracts, and iota smart transactions, all without single line code. we're years ahead the competition. business overview core value proposition our innovative technology results two specific outcomes that form the core value our platform: empowerment team members build software based solutions, and disruptive cost reduction. disruptive cost reductions are achieved drastically reducing the amount time spent building, and refining software and the cost running software. using our innovative tools, have demonstrated that applications can built one hundredth the time relative traditional application development. addition, since knowledge specialized programming language unnecessary, the cost using skilled software developers can drastically reduced even eliminated. these factors combined lead disruptive cost reductions relative traditional software development. existing manual paper based processes and onerous spreadsheets can now replaced with custom software applications that can built in-house, minutes, not months. team members are empowered build such solutions using our innovative technology, they're able design such applications visually, and define all business logic plain english. deployments can made with the click single button, never having worry about how any the plumbing behind the scenes. this disruptive technology emancipates middle management, and gives them the power and tools improve business processes, whist bringing meaningful positive impact the organization. our marketplace brings both core value propositions together. not only does allow innovative authors publish their high-level compositions for others use, but our marketplace empowers contributors earn from their efforts selling their creations. earning income from sharing one's innovation the heart our mission. addition selling one's ideas, the future, aim facilitate decentralized execution software built our code platform. the participants whose devices these functions will execute, will compensated spark tokens. running software defined the sparkster platform the sparker decentralized network facilitates substantial reductions the cost running applications scale. traditional centralized cloud providers such amazon(r) and microsoft(r) enable you add cloud servers predictable cost per cloud server. but transitioning cost per transaction, rather than cost per node, enables company run software without having anticipate demand surges respond future demand while looking the rearview mirror. imagine having the entire aws cloud available your business whenever you need it, always on, without reserving any instances. that's the sparkster decentralized cloud. addition, what this were drastically cheaper than aws and azure because the fixed costs running such service, like rack space, cooling, dedicated hardware, networking infrastructure, backup power, and support personnel, don't exist decentralized cloud. companies pay for these transactions using spark tokens, and miners make their devices available resources the sparkster decentralized cloud exchange for spark tokens. scale and revenue strategy achieve scale, sparkster will make its platform free use personal capacity. while this will limited certain number transactions per month, personal capacity, this limit can lifted referring other users. the use our platform commercial capacity will subject ongoing fees the form user licenses, transaction fees, device fees, storage fees etc. only get paid when you do. engaging users and listening feedback, aim make our service irreplaceable, and hence ubiquitous. inspired the byod movement, anticipate that our user community will solve problems that they encounter, both their personal and professional lives, using the tools from within our platform, platform they're familiar with. the sparkster platform and decentralized cloud are complementary products. there's significant interest today from companies large and small that want generate new business models atop decentralized blockchain technology. the sparkster technology stack presents the cheapest, easiest and fastest way achieving this. software can built with sparkster least faster and easier than traditional means. hence, the sparkster platform will generate demand organically for the sparkster decentralized cloud. viral growth the sparkster platform will free use for individuals, however, there will transaction quantity limits. increases personal use limits can attained referring friend our platform, much like how one gets free ride uber increase storage space dropbox. word mouth referrals are critical component our growth plan. network effects while the sparkster platform aims provide the fundamental constructs (e.g. conditions) necessary build software applications, building applications using fundamentals not always optimal. see significant opportunity for our user community create higher level constructs (i.e. sales tax calculators) that can then utilized the other members the community build high level applications (i.e. accounting software). effect, while provide simple building bricks, members our community can use these bricks construct their own cars, houses etc. via peer peer marketplace, these innovative users can provide sell these higher level constructs (i.e. sales tax calculators accounting software) other platform users. this not only increases user engagement, presents model where the value that our platform provides users increases exponential rate. consumers these higher level constructs can compose them into applications that bring about new businesses, innovative solutions unsolved problems, and provide income generation opportunities for those willing author and publish our platform through our marketplace. one may elect execute their software our decentralized computing network. gain more participants this network, the computing cost will decrease materially, participants compete earn spark tokens from their unused cell phone and iot device capacity. not only does this democratize software execution, it's present viable and cost effective alternative services like aws and azure. the long run, given the negligible marginal cost making ones cell phone available for decentralized computing, believe this give rise disruptive software execution model relative cloud computing. addition the significant cost reductions relative cloud computing, well the democratizing software execution, there are very real and impactful implications our environment from eliminating cloud computing. strategic partnerships strategic partnerships are mutually beneficial, and much like vertical markets, they present opportunity deliver meaningful value via our platform existing community users and hence grow our user base. addition, these partnerships provide cross pollination opportunity, where each community benefits from interacting with one another, not just sharing ideas, but collaborating create solutions existing problems. also see the strength our strategic partnerships validation not only our concept, but also our technology. established organizations that would key users our technology have shared our vision and want partner with help bring this technology the masses. thus far, have signed official strategic partnerships with libellium, industrial sensor and gateway distributor, well arm (one the worlds largest computer chip designers). building deep integration with these strategic partners presents significant opportunities expand our reach, build specific integrations that serve the needs our partner's community, and hence grow our own customer base well giving access market leading specialists who can leverage. for libelium, we've built gateway software that facilitates seamless connectivity our cloud from device, well simple rules engine that facilitates local data processing determine when and what data should sent our platform. once data arrives our platform, this data can used any other application composed our platform make decisions within business process application, orchestrate actions the real world (i.e. turn sprinkler system) simply provide meaningful graphical dashboard. with arm, we've developed the ability build iot devices, without writing single line code. users have the ability use drag-and-drop blocks define device logic and hence develop specific iot devices. very simple example might device that detects the temperature greenhouse and turns warning led the temperature rises falls outside the normal operating range, and uses relay open close window. such device could programmed, controlled, and monitored without writing single line code. our platform will generate the device code produce binary, and deploy local arm, arduino esp device completely autonomously just click button. addition deploying the logic itself, also build the logic for connecting our platform using mqtt (an iot communication protocol), implement appropriate device security and generate virtual representation the device our platform. the virtual representation facilitates bidirectional secure dataflows our platform where that data can used build iot powered applications. addition powerful iot applications, dashboards can also built just few clicks. for example, you wanted monitor the temperature the greenhouse and the state the window real-time, such dashboard could built minutes, without single line code. vertical markets are developing targeted solutions for specific vertical markets based our assessment the potential for growth and the value that such vertical market may contribute our community. thus far, have identified two vertical markets, which have built deep integration: internet things (iot) and cryptocurrency smart contracts. see significant opportunities both markets, terms user growth and contribution value. iot according market participants, the iot industry represents trillion opportunity feel this transformative technology will fundamentally disrupt existing business operations, existing business process and technology are neither architected nor designed take input from devices the physical world when making decisions executing these business processes. practical example might one where machines themselves can slow-down speed-up deliveries raw materials being picked from the warehouse and delivered the production line, avoid raw material congestion the factory floor. today, erp systems are unable handle unscheduled machinery maintenance factory autonomous way. using existing technology, human intervention needed deal with such scenario many erp use today. such, we've made devices primary focus our platform fully integrated yet sufficiently generic concept that can adapted suit plethora partner integrations and implementations. cryptocurrency smart contracts whilst see the vast applications and disruptive opportunities created smart contracts, perceive fundamental problem this burgeoning industry. neither expect lawyers learn write code, nor expect lawyers entirely replaced autonomous smart contracts. such, today, smart contracts are inaccessible the majority potential users, and hence this has impacted commercial adoption. our platform uniquely positioned address this problem enabling smart contracts built plain english with focus strictly defining the actual business logic the contract expected execute; with our platform handling the translation into functioning smartcontract. such, we've integrated the ability generate ethereum smart contracts and iota flash channel transactions via our platform. once authored, our platform generates the appropriate code for such smart contract execute the respective network which means that knowledge the implementation details smart contracts completely unnecessary. we've built and tested insurance ethereum smart contract use case, which buyer purchases medical insurance, but prior the policy being issued, the request forwarded underwriter for approval. once approval granted, the client emailed copy their policy document. the entire scenario was built without single line code. note, that this scenario was simulated, and did not work with any actual medical insurance providers underwriters. we've also built smart contract that issues tokens whenever payment received. this "ico smart contract" was written plain english and executed the ethereum network. feel free check out our demo video this contract action. barriers entry aim create barriers entry patenting our technology and our innovative ideas. have engaged leading london based technology specialist law firm, bird and bird, provide opinion the patentability our technology and our ideas. based their analysis, have engaged kilburn strode llp write our patent applications which are due filed the first part being first market with such innovative technology presents its own opportunities too. aim build our community such rate that any new entrants will not able scale the point that they represent material threat. gdpr considerations gdpr concerns could addressed limiting the storage nodes that can join particular cell. suppose limitation were introduced that the address the storage node must european, this could address the regulatory requirements that sensitive data does not leave its jurisdiction. our architecture lends itself uniquely solving such problem. with regards the right forgotten, this particular challenge for blockchain environments given that data immutable. there are two solutions propose for this. since global state maintained architecturally the ordered distributed hash tables delete command would simply render historical data inaccessible applications built atop the sparkster decentralized cloud, without impacting immutability. addition, can re-encrypt this deleted data with platform key that would provide additional guarantee that this data would inaccessible the client and any applications built atop the sparkster decentralized cloud. shall wait and see how legislations evolves address blockchain environments and adjust our strategy appropriately. product overview sparkster platform the sparkster platform enables you build software without writing any code, simply dragging and dropping blocks that are plain english. snap together blocks that describe what you want create without worrying about how works. building software becomes easy playing with lego. cut the time make software from months days. easy enough that even children have built software minutes. software generated with the sparkster platform specifically architected for high volume, distributed applications. horizontally scalable, implementing streaming pipelines, the platform architected support the veracious demands iot and environments. security architected the core this platform, implementing aes bit encryption between every interaction and oauth authorization and authentication, the sparkster platform generates enterprise grade software without any knowledge concern for software design necessity for architectural awareness. software generated the sparkster platform architecturally independent, meaning that software generated the sparkster platform can compatible with the architecture the sparkster decentralized cloud. the client elects where execute their software. however, the long run, the sparkster decentralized cloud will prove far cheaper than the sparkster platform execution environment. sparkster decentralized cloud the sparkster decentralized cloud will facilitate the execution smart software defined using the sparkster code platform, decentralized fashion. miner can install the sparkster "mining" app their cell phone that will provide user generated smart software with local "sparkster runtime environment (sre)." the sre would localize the architecture necessary for the execution and decentralized coordination functions, workflows etc. companies and individuals wishing have their applications run decentralized fashion place bid the decentralized exchange and stake spark tokens accordance with the amount they're willing pay. this free market, clients are free place any bid, and miners are free ask any amount they wish. matching bids and asks (less platform access fee) will cleared and then function/workflow execution will begin. these tokens would then issued the "miners" for the use their cell phone desktop processing power. addition compute nodes, storage nodes can join our network. these nodes would responsible for decentralized data persistence (documents), and for maintaining repository the components designed our community users. the event that data needs persisted decentralized fashion, nodes would paid their appropriate fee spark tokens (less platform access fee) for long term data persistence. again, clients are free place any bid, and miners are free ask any amount they wish. matching bids and asks (less platform access fee) will cleared and then data persistence will initiate. miners, both compute and storage, stake tokens collateral ensure they operate honestly. verification nodes validate transactions generated compute nodes and persisted storage nodes. these verification nodes detect any illicit activity, they cease the stake advanced these miners bounty for detecting illicit behavior. herein lies the system checks and balances that gives rise safe and secure public decentralized cloud. all instances, compute execution data persistence, both data rest and transit will fully encrypted. neither the compute nodes nor the data nodes will able determine what they're executing persisting, nor for whom. this achievable given all execution will occur memory cell phone. all data stored storage nodes will fully encrypted and hence will private the owner the data. smart software the sparkster platform environment which software can designed drag and drop fashion, and business logic can defined plain english. smart software distinct from smart contracts that they natively incorporate abilities that smart contracts cannot easily provide. namely: html responsive interfaces that are desktop and mobile compliant default. provide rest api's facilitate integration into existing business processes and traditional software. ability call any external api and handle responses deterministic fashion through automated oracle processing layer. below will outline the various components that constitute smart software. flows the sparkster platform, flows constitute the definition piece software. these flows are assemblage other core components the sparkster platform, including functions, documents, devices, integrations, ai, etc. functions functions are single building block that performs unit work. easy way think about these that they take action. business logic can defined within function using plain english and are accompanied fully customizable user interface. functions can then plugged together (composability) create string functions that results particular business process. example this function that calculates particular discount for item when certain quantity levels are reached. this can paired with another function that calculates sales tax for your entire basket items. this demonstrates how functions can thought lego blocks that can easily plugged together create meaningful applications. addition user interface and business logic, functions also generate api automatically, this becomes critical when you want use particular function elsewhere your application. compute nodes will consist cell phones, tablets and notebooks the sparkster decentralized cloud are responsible for executing these functions. function consists many operations, actions. for example one function operation may "update field adding two existing numbers." participation the network simple installing app the device and setting the desired price per function operation execution. the device owner rewarded whenever their device selected execute function behalf client. documents documents are the basic data storage entity the sparkster platform. while they too provide interface, english language business logic and api interface. their difference function that they facilitate the persistence, retrieval, updating and deleting data from datastore. datastore needs defined, and relationships between these data storage entities (documents) can easily established plain english. these documents aim represent entity the real world. good example document might patient record, inventory item. storage nodes sparkster decentralized cloud are rewarded for storing and retrieving data. storage nodes will consist desktops and servers operated our community. since data immutable decentralized networks, when document being used the decentralized cloud, records can only created, they cannot edited deleted. hence, will maintain system for versioning records, such that updates can adopted new versions new instances record. integrations integrations are our interface the outside world. they provide simple and efficient abstraction api webservice hosted and provided external party. these integrations can defined without single line code and involve merely populating form. however, this likely beyond the scope what non-technical person would able do. hence, our build once use anywhere approach particularly valuable here. technical user can define the integration once, then publish our marketplace, where non-technical user can simply consume and use within their project application. this line with our philosophy not having understand how the plumbing behind the scenes works, rather, focusing strictly desired outcomes. good example integration might graphical user interface that provides shipping quote. simply input the weight, origin and destination zip codes, and will return shipping price directly from the fedex ups api. decentralized environments, such integrations are often called oracles. oracles have externalities which make them particularly difficult handle decentralized networks. imagine for example, that we're using integration interact with iot lightbulb device). with traditional smart contracts, the contract executed many not all the nodes the network. what would happen nodes the network tried turn the light off? side stepping the flooding problem that may occur, "turn-off" messages would arrive different times the network attempts arrive consensus. imagine, someone manually turns the light the middle this process. would quite annoying for the nodes keep turning the light off during this process. hence, today oracles are handled centralized manner requiring trust the source data. overcome this problem novel way. assign the task turning off the light one compute node (cell phone, tablet etc.) however, sure that the compute node performed the required task, the reply from the iot device sent different node. and only receive successful reply, the first node rewarded. devices devices are, you might imagine, representation physical device the real world. our virtual representation enables integrate physical devices into our applications. these devices consist two core concepts: commands and fields. fields facilitate bidirectional data transfer. example, imagine greenhouse that has iot temperature probe, the actual temperature measurement would sent back the sparkster platform via 'temperature' field. commands are how the sparkster platform instructs device take action. for example, "turn-on" command might cause led light turn on, "open" command might instruct relay controlling window would cause open. these two capabilities are exposed via specific device blocks that are available all other aspects our platform, namely: functions, documents, flows etc. gateways gateways represent group devices that are all connected the one gateway. that gateway provides the internet connectivity, all devices can share one internet connection and reduce deployment costs. through the gateway, our platform can interact with each device individually, deal with all the devices one group. for example, talk the august door lock over the internet you could use apple gateway the device. here, we're talking the individual device (the door lock) but we're not talking directly, but rather through apple gateway. example interacting with group devices aggregate via gateway might car park where not every parking space device directly connected the internet. rather they connect via appropriate protocol such xbee the gateway, and the gateway connected our platform. have implemented this system with libelium and are able provide some unique capabilities. we're able execute local preprocessing the gateway before data sent our platform. this particularly useful can significantly reduce the bandwidth consumed only sending data our platform over the internet there change status; i.e. when parking space changes from being vacant being occupied, vice versa. here, don't need worry about interacting with individual parking space devices, but rather can just interact with the limited data that need from the gateway. mentioned above, the interaction with these devices and gateways the sparkster decentralized cloud special case function execution compute nodes. smart contracts smart contracts enable our platform build, execute and adjudicate transactions that have financial consequences the real world. currently support two versions smart contracts: ethereum smart contracts and iota smart transactions via iota flash channels. traditionally, contracts have been way for parties come agreement. these contracts define the task which need accomplished and whom, well the terms and time period fulfillment. also, the event dispute, the traditional contract seeks the enforcement the terms the agreement, least theory. however, practice, resolution disputes occurs outside the contract itself, court law, and can costly and time-consuming endeavor with high legal fees, and years draw resolution (if ever). smart contracts enable the digital enforcement, verification, and facilitation traceable agreement between parties, without the need for party intermediaries. smart contracts are automatically executed soon the necessary conditions the contract are met. what this means practice that funds are released once each party has performed according the terms the contract. the release funds administered impartial entity the contract itself. adjudicating transactions one the core strengths smart contracts, that penalties can defined, and autonomously executed for party failing perform its obligations according the terms the smart contract. the smart contracts acts impartial adjudicator such case, and executes penalty clauses, defined both parties, accordance with the specific and unambiguous logic with which was created. this reduces the necessity legal involvement the event that party fails perform relative agreed upon contract. the current challenge however that smart contracts require advanced programming skills create, and still run the risk error logic programming the developer, which can lead loss vulnerability assets. with the sparkster platform, anyone can seamlessly create smart contracts without writing any code. there need hire developer; you can yourself, with only few clicks. such smart contracts can built the sparkster platform plain english, without single line code, and can easily deployed the ethereum network with the click button. believe this revolutionary for business and the missing ingredient facilitating safe and secure peer peer trade. applications built using the other core components our platform (functions, documents, workflow, devices etc.) can easily interact with smart contracts with appropriate english language blocks. addition, smart contracts for specific use cases (i.e. insurance smart contract) could authored one individual and made available for others use smart contract template. this essence would create marketplace smart contracts, all authored plain english and easily understandable everybody. from decentralized perspective, smart contract would executed client side via meta mask, and hence have bearing the sparkster decentralized cloud. however, the software built using the sparkster platform has the potential interact with any blockchain. we're not limited ethereum and iota. the future will facilitate interaction with neo, cardano, stellar, ripple amongst others. bugs software that are autonomously generated the sparkster platform have overlooked but incredibly important benefit they're bug free. while the business logic your hands, the actual code behind the scenes that makes all the magic happen rather uniform and consistent. hence, any application built our platform will entirely bug free. this can save countless hours not weeks relative traditional software development. yet another reason why traditional software development environments have hope competing with us. software can built our platform least faster than they can traditional software developers. technical implementation the sparkster decentralized community network the road million+ tps the introduction the sparkster decentralized cloud page required reading understand this section. since the sparkster decentralized cloud designed specialized blockchain used only for the execution smart software, can eliminate some the constraints imposed upon other blockchains. given that clients desire keep their company's data private, can eliminate the necessity maintaining global state. this significant, because allows shard our distributed hash tables client groups. most importantly, one shard never needs have any awareness any other shard unique benefit afforded the sparkster decentralized cloud specialized blockchain. specifically, we're afforded clients, isolation, key factor building high throughput systems. useful analogy explain what this means recall human cell division zygote. the zygote grows and develops splits and becomes embryo now have two cells instead one. the embryo continues divide matures. similarly, think blockchain cluster nodes cell. once there are sufficiently large number nodes particular cell, cell division can induced. let's take our worst case scenario transactions per second among cluster nodes. once cell division induced, transaction rates are doubled transactions per second. similarly, cell division can continue, given sufficient nodes, and transaction rates can increased linearly without any limiting factor. this possible because not need maintain any global state. practice, this means that one cell can have complete isolation from all other cells, and hence, there's performance penalty overhead attributed continued cell division. isolation node clusters one the core principles building high throughput systems. practical example let's take practical example explain why this works. imagine that ge(r) and gm(r) wanted build and run software the sparkster decentralized cloud. because ge(r) would never want their data accessed anyone but employees and maybe customers ge(r), ge's software applications would only ever need interact with their own data. the consequences here are that that the distributed hash tables that concern ge's data need not have any gm's data. the implications here are substantial. this means that the peers replicating data the distributed hash table (dht) for ge(r) (red nodes) can completely isolated from the peers replicating data for gm(r) (yellow nodes), and hence ge(r) and gm's data can replicated parallel. this fundamentally how substantial increases blockchain performance are achieved. transactions can received and processed two different cells parallel, and this case doubling throughput transactions per second. the reason that this works because each cell isolated from all other cells, eliminating the communication overhead involved maintain consistent dht between cells. can add many cells necessary, without impacting performance any one cell, but increasing throughput the overall system with each cell appended. note that our example only consists two customers, but reality, one cell would consist thousands customers. another use case, suppose one wanted build business product that will used millions customers, akin uber(r) airbnb(r). such company may opt distribute customers across cells, and benefit from throughput the millions transactions per second. suppose customers were distributed according the first letter their first name, and hence, all customers whose name begins with would one cell, another, and on. this practical given that one customer's purchase history need not seen another customer. however, also incredibly valuable company building the software allows them build software that can serve millions customer concurrently, without having architect their software necessarily so. theoretically, there's limits how many cells can create and hence, theoretically, there's limit the tps might able achieve, whether that's million transactions per second orders magnitude more. the limiting factor how many mining participants can encourage participate the sparkster decentralized cloud. hence, our system incentives becomes pivotal, and such, we've designed free market for participants independently determine how much charge for the use their resources. miners are free set their own prices, and clients are free elect how much their willing pay. the sparkster technology stack the sparkster technology stack represents set technologies that have been specifically designed facilitate decentralized cloud computing, where the smart software, evolution smart contracts, written plain english, people with prior knowledge software development and without concern for the underlying decentralized architecture. consensus today, there exists many different approaches solving the byzantine generals problem and ultimately arriving consensus amongst trustless parties. implementing proof work, bitcoin trusts whomever has the greatest hashing power (semko, whereas ethereum trusts whomever has the most money with their reliance the proof stake protocol (lacina, addition, both bitcoin and ethereum suffer from significant confirmation times that make them impractical for commercial applications without the use off-chain transactions (mitra, the federated byzantine agreement system (fbas) proposed the stellar network (mazieres, has proven easily perform transactions per second with latency just seconds per confirmation. barclays africa claimed have achieved transactions per second, processing over million transactions hour (how many transactions per second can stellar process?, this achieved forming consensus amongst slice total participants network, otherwise known quorum slice, rather than the entire network. since consensus federated, meaning, party trusts party and party approves transaction, then party necessarily approves the transaction, arrive consensus very quickly (koller, hence, rather than focusing our efforts creating consensus algorithm that meets the throughput and latency needs decentralized software execution network, have chosen implement the stellar consensus protocol (scp), commercial implementation fbas. there are some inherent limitation the stellar consensus protocol (scp) including lack intrinsic incentives for good behavior, and lack formal methodology determine whom trust when forming consensus slice (mazieres, the focus this paper resolve these two limitations with scp, create self-governing network with incentives that keep all actors honest, and give rise decentralized cloud for the execution software. propose using the stellar consensus protocol (scp) for reaching consensus between parties the network, with additional layer determine how tasks are allocated. this layer governs the earnings each participant. doing so, aim create system incentives that keeps all parties honest, minimizes the risk attack the network and minimizes wasteful work being performed participants the network. privacy privacy and security are absolutely necessary when handling transactions behalf corporate clients. company may bound jurisdictional and legal restrictions such the eu's general data protection regulation (gdpr) (czarnecki, however, legal restrictions are not the only reason company would demand data privacy they're adopt public blockchain. another reason might protect customer supplier data from being pilfered competitors. essence, are see corporations adopt public blockchain infrastructure, they've adopted the public cloud, privacy their data will major consideration. provide such privacy, propose using zero knowledge proofs (zkps) and encrypting all data persisted the sparkster decentralized cloud. zero knowledge proofs limit the number parties that are interacting with sensitive privileged data enabling the party executing transaction, the prover, not have reveal any privileges sensitive data the verifying party, while still being able prove that they have such data. addition, zpks enable ensure any publicly observable data always remains encrypted. the topic zero knowledge proofs has been discussed extensively the likes vitalik buterin, and many resources can found that explain zkps well (buterin, however, provide intuitive and oft-quoted example, consider the scenario below. suppose that peggy (purple) wants prove victor (green) that she knows the passphrase door within cave, peggy being private wishes prove that she knows the passphrase but does not wish reveal the passphrase. peggy chooses path down without victor seeing, either and victor yells out which path would like her return from. suppose this experiment were repeated times, and each time peggy emerged successfully. the probability peggy being able pull this off successfully without knowing the passphrase about million. there are several examples zkps use today, one such example zcash which has implemented zksnarks form zero knowledge cryptography. the example above, peggy and victor needed interact multiple times, back and forth, order arrive sufficient conviction that peggy does indeed have know the passphrase. zk-snarks are evolution these that they are succinct and non-interactive, meaning that the proof consists just one message sent from the prover the verifying party. addition, these messages are very lightweight, usually just few hundred bytes and can verified milliseconds. security ensure that customer's sensitive data remains secure when executed the sparkster decentralized cloud, must take steps protect against tampering the sparkster mobile app. will employ the following anti-tamper and tamper-detection approaches, some which have been outlined below: the app will compare the public key used sign the app and confirm that was indeed signed sparkster's development private key. this comparison fails, will know the app has been tampered with, and will prevented from joining the sparkster decentralized cloud. digital signatures and check sums will enable detect any possible file tampering. tampering detected, anything memory will immediately deleted the application matter protection. will ensure that any application files, libraries etc. are encrypted, significantly limit the risk tampering. input validation limit the risk injection attacks. employ third party tools detect malicious injected payloads running memory, thread execution hijacking and other attack techniques. ensuring all data sent the device using secure post with xsrf tokens. app data will cached. all transactions will executed entirely memory. securely delete data and nullify any memory after the completion each transaction. addition, force garbage collection after each transaction. all data transmitted and from the device will encrypted protect again man the middle attacks. will ensure all communication between devices protected with ssl/tls. eliminate any knowledge which customer the transaction belongs to, thereby reducing incentives hack the application mine data. multi chain interoperability given that the sparkster decentralized cloud blockchain specialized cloud computing, does not execute payments natively. hence, have necessity integrate with other blockchains and virtual currencies facilitate payments. essence, you wish create piece software that makes payments other parties, the software defined the sparkster platform will need interact with other networks. presently, the sparkster platform has native integration with ethereum and iota. generate ethereum smart contracts plain english, but also interact with any ethereum smart contract plain english. the implications are that smart software can quickly and easily developed that can interact with and make use ethereum smart contracts. addition, interact with the iota network through iota smart transactions facilitated iota flash channels. the implications are substantial. given the ability generate enterprise grade software with the sparkster platform, easily integrate these smart contracts and transactions into existing business processes with ease and simplicity. alternatively, build software that solves meaningful business problems, but pay customers the currencies they're actually using. with sparkster, there are limits. the future, will add support for other chains, specifically neo, cardano and stellar. see the roadmap for details. consistent hashing without centralized coordinator and without any global state, how compute nodes identify which cell client's data stored in? that's where smart algorithm called consistent hashing comes in. this algorithm allows hash the client's id, and extract bounded number. since this bounded, imagine the bounds represent point circle, and all cells (clusters nodes) divide this circle equidistantly. now, we're easily able assign cell client and identify its cell using the consistent hashing algorithm. most importantly, any compute node can determine, independently, where they might find client's data, without interacting with any central authority requiring any central database. hence, have network that fully decentralized. and iot being that the sparkster platform aims empower people bring their ideas reality, emerging technologies such and iot are necessary constituents the platform. however, our aim make these technologies accessible people, without having programming, let alone the complex mathematics that underpins ai. thus far, have made based facial recognition completely codeless, and will bringing other forms artificial intelligence such natural language processing, speech recognition amongst others, accessible manner the sparkster platform. sparkster has industrial iot partnerships today with arm(r) and libelium(r) and has native integration with apple(r) homekit, amazon(r) alexa, arduino(r), raspberry pi(r). the sparkster platform can thought environment architected specifically for the high throughput requirements iot, yet making all these technologies accessible without any code. our youtube(r) channel features video children aged between and years old creating iot devices, independently and codelessly with the sparkster platform. they can it, can all it. mobile world congress demonstrated the sparkster platform using facial recognition detect cleaner, and opening august(r) door lock, controlled apple(r) homekit, and execute automated payment via iota. the entire demo was built with code, plain english. you will find video this demo our youtube channel. system incentives there exist limitations with the stellar consensus protocol (scp) that must addressed for used broad capacity. namely, that scp lacks system incentives keep participants honest, and fails provide solution determine whom trust when forming consensus (mazieres, systems incentive are necessary ensure sufficient network participation. the rate participation directly proportional the rate which price per operation will decline. hence, paying participants for their participation necessary delivering decentralized cloud that significantly cheaper per operation than traditional cloud computing, and critical delivering our vision disrupting the $bn cloud computing industry. however, these incentives also provide additional positive side effects. namely, they provide with mechanism encouraging participants the network behave appropriately. compute nodes and storage nodes are rewarded spark tokens for their contribution the network. namely: compute nodes contribute their mobile, tablet notebook cpu and memory for the purpose remotely executing software components behalf paying clients. storage nodes contribute storage space and network bandwidth for the purpose storing and retrieving encrypted data behalf paying clients. clients pay network participants for the execution software and the storage data. given that marginal cost per operation are near negligible for compute nodes the sparkster decentralized cloud, quickly converge costs for clients that are significantly cheaper than traditional cloud computing from the likes amazon(r) and microsoft(r). this provides clients significant incentive adopt the sparkster decentralized cloud, which turn benefits network participants with growth network load. device owners can set the "price per function operation" for the use their device. each statement action will charged this "price per function operation" set the device owner. so, function that has been defined with many operations will cost more execute than one that only has only few operations. the reason such system required, provide disincentive for creating operations that run forever, otherwise known infinite loops, within the functions defined our clients. maximum "gas limit" will set, which maximum number operations function can legally execute. function reaches this limit, then the function execution will automatically terminate. this necessary ensure that functions are designed correctly, i.e. small units execution, and that infinite loops not impact the availability the network. this price governs how much the device rewarded per function whenever that node selected execute function behalf client customer. allocation work execution governed proof stake probability distribution wherein: where: the probability assignment some compute node are the number tokens stakes node the total number tokens stakes all nodes proof stake used provides incentive for compute nodes and storage nodes operate honestly the network. any misbehavior will result this stake being seized verification nodes that detect such misbehavior. for example, node claims have executed task, but fact has not, their stake will taken the verification node. hence, there's strong incentive for both compute nodes and storage nodes operate honestly. herein lies the natural incentive for verification nodes. they police the network the hopes capturing stakes from those who behave maliciously. while the compute nodes and storage nodes earn income proportional their stake, verification nodes earn income proportional the work they perform namely verifying transactions. here, instead wasteful effort the case bitcoin (hern, verification nodes the sparkster decentralized cloud perform useful proof work. quorum verification nodes necessary order for the detecting node receive its reward. these quorum slice participants are chosen random avoid any risk collusion. for those unwilling stake tokens, they may still participate the sparkster decentralized cloud verification nodes, earning from the use their cpu and memory. storage nodes are rewarded for storing and retrieving data. much like compute nodes, the probability being assigned persistence request function tokens staked, amongst other factors. this necessary, storage node may misbehave deleting data after has received payment. hence, this case, verification nodes request data order validate that they still retain that data. clients are able elect how long they would like their data persisted the sparkster decentralized cloud. after this time frame has expired, verification nodes will longer verify data persistence, and storage nodes are free delete this data without the risk losing their stake. pricing set storage node owners independently per record per month basis. further encourage reliability among our storage node participants, these participants are not paid one lump sum for storage agreement. rather, they're paid performance basis. namely, they're rewarded each week for storage data for the week prior. from time time, storage nodes may experience hardware failures where availability compromised. this case, the storage node not acting maliciously. mitigate the risk their stake being seized, storage node owners are able place their node maintenance mode for maximum hours. after hours their node automatically added back the network, where verification nodes will resume data requests for verification purposes. allocation persistence requests storage nodes governed probability distribution wherein: where: the probability assignment some node are the number tokens stakes node the total number tokens stakes all nodes the availability index defined below the response time variable defined below availability exponentially smoothed indexed value based the number hours the node has gone into maintenance mode. hence, here introduce incentive for storage node operators ensure their nodes remain available. exponential smoothing ensures that while the past never forgotten, recent availability performance given greater significance. therefore, problems the past can recovered from. this derived follows: for some node let for where: the number availability index for specific month the number maintenance hours month the total number hours month {xt for such that: at- for where: the current expected availability rate the smoothing factor, and response time monitored verification nodes they're verifying transactions persisted storage nodes. those nodes that fail respond within our response threshold will have their response time score impacted. similar bitcoin mining difficulty, response time thresholds will reduce automatically predictable way entice participants improve network performance over time. those storage nodes found provide response times higher than the {rn such that: ni= where: the response time variable the network threshold {rn are the node's response times determined the verification node over observations. decay the transaction threshold function transactions processed time such that: where: the rate which transactions are being processed decay constant the number transactions the target transaction quantity ln|t t(t) optimizing execution costs for clients free open market amongst network participants will facilitate competition that ultimately will drive down execution costs each network participating competes for execution opportunities. clients also have the freedom choose the amount they're willing bid for execution, and wait for offer that executes the order. free market presents the fairest way find and execute opportunities find equilibrium market. roadmap token economic value model have built global marketplace bring authors together with innovators and makers via the sparkster platform. authors can create components, for example ethereum smart contract for the automotive industry, and publish them our marketplace. innovators and makers can discover these components from our marketplace, and integrate them build custom software solutions for the problem they are trying solve. our tools enable software built faster than traditional software, but our marketplace adds order magnitude improvement efficiency and productivity. the spark token provides vehicle for consumers these authored components compensate the author for their contribution, and gives authors incentive contribute our marketplace. the spark token facilitates micropayments that are not feasible using traditional fiat given exorbitant credit card transaction fees and minimum charges imposed credit card merchant banks. hence, the sparkster token will the only currency which will accepted compensation the sparkster platform, where authors will able publish their components and software exchange for sparkster tokens. will launch our decentralized cloud where these components can executed. "miners" will make their cell phone and iot devices available decentralized compute environment for software authored the sparkster code platform. these miners will rewarded spark tokens, hence providing incentive compete and provide their unused capacity close the marginal cost this capacity near negligible. network effects result from our community's participation, such that the cost executing software the sparkster cloud diminishes over time, hence, increasing client participation the network over time. addition, network effects result from our community contributing their creations our marketplace, making faster and easier build software the sparkster platform. believe this will result sparkster being market leader the creation and development enterprise software. token purpose and intent our tokens are intended facilitate trade between members our community and provide incentive for authors and innovators contribute the marketplace. when publishing our marketplace, authors can opt charge for the use their contribution. while the author free choose the amount charge, the payment will made with spark tokens. sparkster will charge the author discretionary platform fee for any paid transactions that occur the sparkster marketplace, this will deducted automatically from any remittance the author. there are fees charged for contributions made the marketplace that are offered for free. the sparkster platform will fully functional and available for use prior any token sale. once the sparkster decentralized cloud released for public use, the spark token will used purchase execution the decentralized cloud, and miners will paid with these tokens. miners will required stake tokens collateral ensure they not cheat. verification nodes check that these miners are honest, and they're found cheating, their stakes will captured. hence, the spark token integral the efficient operation the sparkster decentralized cloud. token distribution platform our token sale will conducted the ethereum network. will using issuing standard erc- tokens. you must not use wallets from exchange such coinbase, binance etc. token sale procedure order participate our token sale, you will need to: have signed our whitelist, and received email with confirmation your allocation. complete our kyc and aml verification procedure. sign saft and token sale agreement follow instructions provided via email complete payment. anybody interested purchasing our tokens from directly will required complete kyc and aml verification. persons, defined the sec will not permitted purchase our tokens. once have verified that you qualify purchase our tokens, will authorize your ethereum account request. from that point forward, you will able buy, sell and hold our tokens. authorization will revoked the event that determine that you are engaged terrorist financing, anything else that violates the guidelines provided the sec. token distribution strategy total token supply will distributed our own charitable organization: the dreamers foundation. the mission this organization promote education and technological innovation amongst the world's poorest people, and create technology that promotes their growth, independence and enhances their sense self determination. all tokens will reserved support our current and future team. these will distributed rewards, incentives, bonuses etc. support our growth and development. all tokens will reserved for shareholders sparkster compensation for their investment over many years build the sparkster platform. tokens will retained facilitate liquidity for exchange listing. exchange listing necessary ensure that those wishing use the sparkster decentralized cloud have the ability purchase tokens order so. any unsold tokens will retained sparkster facilitate exchange liquidity. team and initial investor tokens will vested for period years. the remaining all tokens will eventually sold via token sales phases. effort ensure that everybody given chance own our tokens and not just those willing pay exorbitant gas fees those who show right the moment the sale begins, will maintaining whitelist for all sales. token sale structure presale million tokens presale will conducted allow non persons wishing purchase more than tokens so. you are interested participating our presale, please visit http://sparkster.me join the whitelist. crowd sale remaining million tokens the public crowd sale will only open non persons. the specifics the crowd sale will determined consultation with our telegram community. currencies accepted you will able pay for your spark tokens the equivalent value ethereum (eth). referral rewards program token reward referred token purchases will offered for referrals token buyers. personal referral url will offered all those who register for our token sale. the referrer will earn their bounty once referred user makes payment for their tokens. any token rewards earned will not deducted from the token allocated each phase, but rather will offered from the remaining unallocated balance. all token holders, including those who earn tokens via our bounty program will need approved via our kyc and aml process. allocation token proceeds the proceeds from our token sale will allocated follows. following salesforce's footsteps, intend allocate significant portion our proceeds sales and marketing efforts. the amounts below are just guide for how intend allocate proceeds. advisory team professor gary leavens chair computer science, ucf expert computer programming languages gary leavens professor and the chair the department computer science the university central florida, received his ph.d. from mit before his graduate studies mit, worked bell laboratories denver colorado member the technical staff. bell labs was once owned at&t but now owned nokia. professor leavens recognized expert programming languages, his research interests include programming and specification language design and semantics, program verification, and formal methods, with emphasis the object-oriented and aspect-oriented paradigms. also worked the specification for languages such smalltalk/larch and c++/larch. these languages embody insights from his work the theory behavioral subtyping. his best known work language design and semantics related multiple dispatch languages such multijava. professor leavens has been consulting with the sparkster team since juan albelo senior vice president, sap with over years sales experience the software industry with companies like peoplesoft, oracle, successfactors, sap, sungard, and peoplefluent, juan has extensive leadership, software sales, sales operations, consulting and education services experience, well multi-cultural abilities, business development expertise, and extensive upper management acumen. passionate for success and building high-performing teams. currently serving head hcm sales sap. has proven track record quarterly accomplishments, well several years sales and marketing experience, for both products and services, the highly competitive software industry. leadership team sajjad daya ceo serial entrepreneur, having co-founded several companies and divisions around the world, sajjad has been instrumental building and leading portfolio global companies that generate annual revenues excess million. his younger years, sajjad worked for cisco systems, technical capacity. sajjad has diverse hands experience building every aspect company from the ground shoestring budgets. sparkster the result his unrelenting, ferocious and passionate commitment empower the powerless. amit kumar technology professional with years experience various leadership roles the areas application database management. seasoned veteran with experience working wipro ankh software, has worked various domains healthcare, manufacturing e-commerce. has extensive practical knowledge architecting platform-as-aservice software-as-a-service development models. amit lives and breathes our cultural mindset "making the impossible possible." sajjad and amit have worked directly with one another for years. shabeer kirmani technical evangelist shabeer enthusiastic techie, researcher, public speaker, and dreamer. shabeer has diverse professional background working with many fortune firms including at&t, pfizer and nbcuniversal, sectors diverse finance, telecommunications, pharmaceuticals, informatics, consulting, and government, and most recently working data scientist the defense space sector. certified project management professional (pmp) and avid reader, shabeer, enjoys good books, thought provoking discussions, volunteering, traveling and great food. sajjad and shabeer have been friends for years. dayanie rajeev human resources dayanie true champion our human capital management function. with decade experience working organizations such citi bank and accenture, dayanie credited with building the team sparkster warriors. these are not ordinary people, dayanie has been instrumental identifying individuals that have the tenacity, passion and technical prowess overcome any technical obstacle they're presented with. dayanie also credited with leading large projects for ibm. sajjad and dayanie have been working together for over years. sparkster warriors neeru pallen when comes creative digital marketing, neeru has lot strings her bow and over decade's worth experience. having worked with companies such the times (london), her passion for hands-on online and content marketing has helped transform diverse range businesses. working closely with creative team create finely-tuned, targeted content strategies that resonate with readers neeru's happy place. she has gift for enhancing the performance and engagement levels any site she touches. munawar bijani munawar's passion for programming started the age his curiously and desire learn drove him teach himself how program. munawar both blind and visionary, used his skills programming develop games for blind people, most notably combat flight simulator. formed his own company and sold copies his games around world. munawar has worked for companies such the institute for simulation and training. the team worked with was partnered with lockheed martin develop system for firefighters navigate safely through smoked-filled buildings. today, munawar one our most prized developers and has been instrumental building many most important aspects our underlying architecture. inspiration all that meet him. nagendra obbu nagendra senior software engineer with wealth experience. has worked for wipro, infosys and capgemini. known for his diverse range experience, nagendra has worked integrative application solutions for banking projects with discover when worked for capgemini. negendra's role includes planning, researching, developing logic, coding, testing and deploying web projects with minimal assistance. highly adaptable individual with the skills participate projects with varied levels complexities and challenges. siddharth ubale siddharth software engineer that specializes data analytics and data warehousing. has years experience working for clients such hsbc and nedcor bank, where was involved large scale big data projects. known for employing latest technologies and tools for data analytics and formulating methods effectively draw business solutions from data. sparkster, involved building enterprise level data warehouse system that interactively renders reports for the statistical requests. mithun debnath software engineer with extensive experience backend technologies. has experience developing large and complex applications involving migrations, integrations and saas applications. analytical rigor and strategic thinking are critical aspects would attribute his success. he's one dive and own the end end technical implementation the case his work projects for ola and snapdeal. when he's not creating niche solutions, enjoys reading science fiction and plays badminton. prasad nadendla prasad senior software engineer who involved the research and development related technologies and solutions here sparkster. has been instrumental security, integration and iot. understands the business needs and applies artificial intelligence technology solve real-world business problems. constantly proposes and creates ai-enabled platforms that mesh multiple technologies into novel applications drive meaningful solutions for sparkster. praveen namoju praveen plays very crucial role driving and leading the project teams the analysis, design, and development applications. adds perspective that spans the disciplines software development, solution design, and project leadership. addition leading the team, great writing architectural documentation needed construct and integrate systems that are not inherently compatible through extensive modification alteration. his team monitors the platform's performance; anticipates needs and optimizations, tracks industry trends, evaluates new and alternative technologies; assists creating reports related present and future technology needs. his trip boston, usa for extended training further enhances his ability understand businesses and the need for technical automation across various domains. swarup kumar roul lead software engineer with experience solving business challenges through simple technical solutions. his specialization lies adapting innovative and current coding techniques and practices; while still maintaining the enterprise coding standards within the organization. full stack web developer, works with the business team develop user-centric software products from idea production. swarup passionate techie who also happens have indescribable affinity coffee. his team would describe him extremely friendly, sincere and ambitious nature. foodie and great cook who believes that "simplicity the key brilliance". shaik naimuddin veteran software developer and comes with experience rich workflow management. addition working our workflow project, has written the automated logging and monitoring the platform's execution. this system ensures reliable messaging which guarantees that when you click button, things happen the time. enjoys work that challenges him learn something new and stretch different direction. baggiaraj specializes designing and developing user interfaces products. always hungry for new challenges and innovations. works closely with the product team understanding and converting the design vision into prototypes and code. his ability visualize even the most unstructured information and transform them into sleek, responsive and attractive design most commendable. he's sport enthusiast who loves play cricket and badminton, when he's not working his magic with design. sethuraman babu user interface developer who demonstrates solid grasp current best-practices web and mobile design. has sharp eye for concept and execution, and has strong ability follow creative direction when required. being highly organized with exceptional attention details; and his ability prioritize while accurately completing tasks have made him stand out user experience specialist. udbhav agarwal software engineer specializing open source big data technologies. has helped firms taking systematic, disciplined and quantifiable approach building software for warehousing with sub-second latency. works closely with product managers, and functional teams build effective data products for clients drive product decisions, improve customer experience, and increase overall operational efficiency. involved designing and driving the implementation scalable and reliable data pipelines. monika krishnappa she user interface developer specializing creating interface designs. she innovative conceptual designer with impeccable skills creating interactive content and user interface design. she has extensive experience developing and designing responsive interfaces render unified experience user across multiple platforms. she can convert requirements information architecture, user flows, and wireframes times, which helps her contribute fast paced projects, where quick turn-around makes impressionable difference. abjeet dhiraj senior software test engineer with seven years experience quality assurance, design verification and testing methodologies. she has supported the holistic testing efforts for multiple projects and software releases, including integration, system, regression, performance and user-acceptance testing. her project artifact efforts include test plans, test scenarios, test cases and test scripts. interacts with product managers, architects and developers all through the project from concept implementation and ensures that the deliverables are the expected quality. kavya ravishanker user interface developer. she inclined towards strong concept development with ability design effective graphical user interfaces for cross-platform elements that includes focus layout, composition, typography, website architecture and design. she handles the design, development, integration, debugging, testing and delivering top quality, scalable, and high-performance user interface code. akshay tiwari senior developer, with over years experience. akshay's role ensures the process making application creation easier, intuitive, efficient and accurate. applying user-centered design processes develop user-flows, and reusable components. works with web developers, engineers and meeting the deliverables time. can successfully apply principles graphic design, interactive design, user-interface design, and information design improve the development responsive design for all user interfaces and their elements. abhijit kumar patel software test engineer who takes part all stages software delivery, from requirements gathering testing. he's quick thinker and suave problem solver. works closely with the development teams address known gaps the sdlc process and recommends comprehensive delivery program that lowers the ratio issues the deliverables and improves the overall quality the development environment. strong interpersonal and communication skills are his key strengths. references aleksandrova, march the biggest challenges startup founders face when building tech startup team. retrieved from eastern peak: https://easternpeak.com/blog/the--biggestchallenges-startup-founders-face-when-building-a-tech-startup-team/ berry, august the inevitable pain software development: why there silver bullet. retrieved from semanticscholar.org: https://pdfs.semanticscholar.org/ce/ebbdabaebdfecd.pdf buterin, february zk-snarks: under the hood. retrieved from medium.com: https://medium.com/@vitalikbuterin/zk-snarks-under-the-hood-baf clark, june business applications embrace iot, blockchain face future. retrieved from computerweekly.com: https://www.computerweekly.com/feature/business-applicationsembrace-iot-blockchain-to-face-future czarnecki, april blockchains and personal data protection regulations explained. retrieved from coindesk.com: https://www.coindesk.com/blockchains-personal-data-protectionregulations-explained/ darrow, february retrieved from http://fortune.com////cloud-growth-forecastgartner/ hern, january bitcoin's energy usage huge can't afford ignore it. retrieved from the guardian: https://www.theguardian.com/technology//jan//bitcoin-electricity-usagehuge-climate-cryptocurrency how many transactions per second can stellar process? january retrieved from lumenauts: https://www.lumenauts.com/blog/how-many-transactions-per-second-can-stellar-process kalla, july the moon? blockchain's hiring crunch could last years. retrieved from coindesk: https://www.coindesk.com/moon-blockchains-big-hiring-crunch-last-years/ koller, october the stellar consensus protocol: decentralization explained. retrieved from itnext.io: https://itnext.io/the-stellar-consensus-protocol-decentralization-explainedbdd lacina, may the inevitable failure proof-of-stake blockchains and why new algorithm needed (op-ed). retrieved from coin telegraph: https://cointelegraph.com/news/theinevitable-failure-of-proof-of-stake-blockchains-and-why-a-new-algorithm-is-needed mazieres, february retrieved from stellar.org: https://www.stellar.org/papers/stellarconsensus-protocol.pdf mazieres, june the stellar consensus protocol. retrieved from https://www.youtube.com/watch?v=vmwnhzmezjc mitra, december lightning protocol the raiden network: beginner's guide. retrieved from blog.springrole.com: https://blog.springrole.com/lightning-protocol-the-raiden-network-abeginners-guide-cdbc schmidt, april the dark side cloud computing: soaring carbon emissions. retrieved from the guardian: https://www.theguardian.com/environment//apr//cloud-computingcarbon-emissions semko, november decentralised cryptocurrency dead. retrieved from medium.com: https://medium.com/deviota/decentralised-cryptocurrency-is-dead-cdcefb disclaimer important disclosure important disclaimer there are risks and uncertainties associated with sparkster and their respective businesses and operations, the spark tokens, the sparkster token sale, the sparkster platform and the sparkster decentralized cloud (each referred this whitepaper). you can find description the risk related the token sale under the section legal, which should read carefully. this whitepaper, any part thereof and any copy thereof must not taken transmitted any country where distribution dissemination token sale, crowd sale initial token offering like the one described this whitepaper prohibited restricted. the spark tokens are not intended constitute securities any jurisdiction. acquisition spark tokens does not present exchange cryptocurrencies for any form ordinary shares the sparkster, ltd and holder spark tokens not entitled any guaranteed form dividend. holders spark tokens are only entitled certain rights within the token sale agreement. spark tokens are utility token and cannot have performance particular value outside the sparkster platform, sparkster marketplace and sparkster decentralized cloud. therefore this whitepaper cannot constitute prospectus offer document for investment securities. this whitepaper does not constitute form part any opinion any advice sell, any solicitation any offer sparkster ltd purchase any spark tokens give any help any investment decision. this whitepaper for information purposes only. the contents this whitepaper are not financial promotion. therefore, none the contents this whitepaper serves invitation inducement engage any sort investment activity. prospective acquirers spark tokens should carefully consider and evaluate all risks and uncertainties associated with the cryptocurrencies, sparkster, ltd and their respective businesses and operations, the spark tokens and the sparkster token sale. familiarize yourself with all the information set out this whitepaper, risk notice and the token sale agreement prior any purchase spark tokens. ensure that you are aware all the would risks prior obtaining spark. the risk statement details all potential risks that you should consider. recommend that you seek out independent financial advice before engaging any sort business endeavor. you are not eligible and you are not purchase any spark tokens the sparkster token sale (as referred this whitepaper) you are citizen, resident (tax otherwise) green card holder the united states america. this whitepaper subject change, and may updated any time without notice.