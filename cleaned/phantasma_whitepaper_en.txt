protocol for decentralized content exchange white paper phantasma protocol authors: sergio flores miguel ferreira alexandre paixao bernardo pinho version utc protocol for decentralized content exchange phantasma protocol abstract the recent advent smart contract blockchain networks like neo and ethereum opens huge opportunity for vast new array innovative decentralized services and applications (dapps). the dominant paradigm the 'cloud' (cloud computing, storage, services etc.) can now seriously challenged decentralized systems are becoming increasingly competitive giving two main advantages: ability aggregate immense set disparate small economic resources (thus gaining economies scale), and the increased transparency and freedom from not being dependent trusted third party (i.e. amazon's aws microsoft's azure). this new computational and economic environment however still its infancy, and lacks great many the basic building blocks and infrastructure required for the full development and realization decentralized applications, systems and services. one the most needed components, service for customizable communication and data sharing between dapps. tackle these issues, present phantasma new generation decentralized content sharing platform. protocol for decentralized content exchange contents abstract introduction the problem the solution unique value proposition the role decentralization why use neo? phantasma overview blockchain smart contract software development kit relay nodes distributed content storage products platform details core concepts phantasma virtual machine virtual machine implementation phantasma relay design philosophy phantasma storage overview minimum replica set proof-of-retrievability role groups content privacy storage cost failure handling specific network attacks phantasma blockchain overview smart contracts migration third-party development application and development framework available programming languages service api debugging smart contracts protocol for decentralized content exchange iii use cases decentralized email oracles digital commerce video streaming ecosystem data economy soul: phantasma network token infrastructure incentives ecosystem initiatives project funding distribution projected use contributions token metrics token distribution sale details lock-up period transparency policy roadmap planned roadmap team the phantasma team phantasma instruction instruction set states boxes data a.. opcodes core arithmetic string logical control data payments storage miscellaneous set phantasma data file system reference node protocol messages bibliography introduction the problem traditional content-sharing systems were isolated machines running small local area networks (lan). since then, the early new paradigm remote centralized services emerged. these were the so-called cloud platforms, and anything-as-a-service. this trends towards centralization and greater specialization service-providing brought along with substantial cost reductions and improved economies-of-scale. however, are currently facing the limitations such solutions. these have inherent disadvantages, such increased risks from having single point-of-failure, and being locked proprietary closed systems. brief history content distribution scour exchange was shut down. was one the first multimedia search engines. napster, extremely popular network was also shut down. soribada was shut down. was the first network gain traction asia. later reopened and was again shut down suprnova was one the first websites with focus torrent distribution disappear. piratebay, which was then the leader content distribution via torrent, was also shut down. limewire, free program for content distribution was shut down. megaupload's domain was seized, and kim dotcom, the owner was arrested. all users the service lost their files. lavabit, the email provider used edward snowden was shut down due gag order. all users the service lost access their emails. icloud was hacked, leading massive leaks celebrities' private photos. long user content owned third party, this will continue happen. the extent this problem persists even cloud storage services such apple's icloud which has faced multiple hacks over the years despite maintaining centralized system with high-end security. chapter introduction the last years, however, new computing paradigm started emerge, arising from the ubiquity and proliferation small affordable devices (smartphones, smartappliances), and increasing penetration. the widespread availability such devices, and their under-utilization, presents unique opportunity leverage enormous amount computing resources (cpu cycles, storage, bandwidth). recent blockchain projects have been launched explore this market niche, such golem (cpu), storj/sia/filecoin (storage), rightmesh/opengarden (bandwidth), etc. the same time, burgeoning ecosystem and market developing for decentralized applications (dapps) running smart-contract platforms (ethereum, neo, etc). these applications have many the same computing requirements traditional applications, compounded the more costly decentralized infrastructure and increasing architectural complexity. this climate, the demand for incresingly reliable and available resources ever present. additional critical requirement for the decentralized applications space usability and developer-friendliness. the remarkably complex logic workflows pose complex design hurdles developers and systems architects, and present one the main obstacles the expansion blockchain technology among end-users and companies. one the most challenging development spheres for decentralized applications designers how manage data how store, access and manage ((b. kramer, )). data major bottleneck dapps, accounting for major fraction transaction execution costs some popular ethereum dapps (references). storing real world data the blockchain prohibitively expensive. managing becomes impossible, considering how little infrastructural support there is. developers are faced with mounting implementation details and pitfalls when trying scale and develop more complex and inter-connected dapps the decentralized world. the solution this paper, present phantasma: innovative platform revolutionize application development the key area data management and content-sharing. unique value proposition phantasma introduces decentralized content distribution system running the blockchain, with strong emphasis privacy and security. phantasma platform where users control their own content instead relying third party entities host, secure and manage for them. relying third party services for something critical and personal like email dangerous. companies can hacked, bankruptcies can happen and government entities can force access into emails. also, for those who are content creators, such the ones creating videos, games, music and other monetized content. giving large percentage their revenue can very discouraging. not only that, content creators are fully tied the platform holders, who often enforce drastic rule changes which lowers their revenue, events over which creators have choice but accept. chapter introduction interoperability with existing systems extremely important order ease adoption. therefore, imperative that blockchain technology for end-users are created. taking email example, phantasma based-mailboxes will compatible with standard email addresses, and thus can communicate with email systems outside the blockchain. privacy also extremely important. while distributed, all data within phantasma also encrypted. this ensures total control content, with one but the content owner deciding who can access and how will distributed. other words, ownership the private keys wallet means ownership all content stored that wallet. since everything encrypted, without the private key nobody can read steal from the owners, not even the phantasma developers can access it. chapter introduction the role decentralization phantasma the new standard for seamless and secure data sharing, management and integration, across multitude communication partners, connected users and dapps the neo ecosystem. the goal phantasma provide new and adaptable framework fill the needs for data management from dapps. providing uniform, standard interface (api) with all the fundamental data access semantics that applications require, phantasma will boost the productivity dapp developers, broaden its potential and energize the entire neo ecosystem. the targeted focus access control with any desired granularity supports vast array use cases, customizable every user according their unique needs. phantasma autonomous and decentralized network running smart-contract the neo blockchain. the code executing the platform public and immutable, without any elevated permissions for the creator/admin (phantasma team). the platform de-intermediation allows for trust-less confidence the system, subject timely review and analysis community experts, isolating the health the ecosystem from any particular localized shocks. once the full set proposed software that powers the phantasma protocol production ready, the network would self-sustaining and completely detached from the original developers and deployed its own blockchain. why use neo? when considering the modern scalable blockchain infrastructure which develop phantasma, mainly deliberated between ethereum and neo, these were two production-ready available smart contract platforms. between the two, our final choice was the neo blockchain. believe that phantasma perfect match for neo, and great example showcase the best that this blockchain has offer. when deciding which platform use, came down the following factors: transaction throughput ethereum still bound proof-of-work, which limits transactions per second. while some solutions are currently development increase the throughput (eg: casper, plasma and others), most require some trade-offs, and more importantly, none yet available. the other hand, neo has fast transaction speeds, very cheap (currently gas costs, and high throughput, mainly derived from the use proof-of-stake (pos) consensus implemented with the distributed byzantine fault tolerance (dbft) algorithm; second layer scalability transaction throughput scaling current problem the blockchain space. both options propose future solutions, with ethereum having raiden and others, and neo having its own proposals for future advances scalability with the advent sharding and state-channels (trinity); ecosystem when talking about the maturity and time-tested reliability the system, both these platforms are strong. neo has extensive development environment, large and growing community developers, partner support staff, and healthy chapter introduction number applications being integrated with it. the excited and supportive user community neo believe and are looking support nascent projects which raises awareness neo's competitive advantages with regards the pioneering ethereum; neox neox cross-chain interoperability agreement. this very important feature neo and part the reason for our final decision since gives guarantee that the future, can move the project into separate blockchain while still maintaining interoperability with neo. phantasma overview the phantasma protocol composed five components that also represent different stages the project. the component structure designed such way that will possible bootstrap the network from the initial components, and then gradually expand the system developing the remaining components. blockchain initially, bootstrap the network, phantasma will exist service running top the neo blockchain. later on, will adopted use the neox cross-chain protocol and from there proceed forking phantasma into its own blockchain. this will give complete freedom take the data collected during the first phase, redesign the transactions order obtain maximum performance, avoid gas costs and reduce strain the neo blockchain. smart contract the backbone phantasma smart contract running the neo blockchain. messages the main function the contract handle the messaging protocol, which runs top small allowing mini-contracts run inside the phantasma smart contract. storage the content storage mechanism also controlled via smart contract, which allows proper regulation and distribution storage claims and data blocks integrity. tokens phantasma uses token fuel for the protocol, and this token follows the nep formal specification. distribution part the contract will dedicated token sale, including distribution interfaces and asset swaps. software development kit software development kit that will allow any developer use phantasma create their own dapps. technical terms, will allow the abstraction dapps' communication with the phantasma smart contract, exposing all available features the protocol and updated with support for new features and components they become available. chapter introduction will initially available the language, with upcoming support for other languages being added eventually (eg: javascript). besides the actual sdk, proper documentation full examples will also included. relay nodes most current blockchains are bound transaction and block confirmation speeds. while neo currently the fastest production-ready smart contract platform, the block times seconds will not fast enough for certain classes applications. the phantasma relay will secondary off-chain layer sitting between the neo blockchain and phantasma's apps, allowing not only faster delivery cryptographic signed content, but also act queue system, packing and merging content necessary reduce strain the blockchain. distributed content storage most real-world data voluminous enough make prohibitively expensive save content on-chain. there currently perfect solution for this, but rather, there are group competing standards. hence phantasma will backend-agnostic and will possible support various backend storage systems store the actual content messages. endorse and allow support for third-party data backends (eg: ipfs, bluzelle), however will also develop our own data storage mechanism, the phantasma data file system (pdfs), which will come the third phase the project and from then will the recommended storage backend. the pdfs will developed extension the relay layer, and this way gives phantasma the capacity store generic byte data its own. interaction with the phantasma smart contract will allow storage content hashes and system for distributing rewards among storage nodes. some the possible backends that would usable phantasma: core decentralized protocols like ipfs and swarm; file storage blockchains such storj and filecoin; decentralized databases for general data (bluzelle, genaro); phantasma storage: our own built-in phantasma-incentivized decentralized storage; chapter introduction all content resources saved phantasma will have unique identifier the form hash value its contents. the hash function used varies according each backend, i.e. the sha- algorithm for ipfs, kademlia hashing for phantasma storage. access resource, developer must first read the message containing the resource identifying hash value, and then second pass fetch the actual resource from the intended backend. the phantasma sdk will make those operations transparent possible. products our roadmap also include development our own products along with the sdk, since designing new technology requires the ability put ourselves the position the forthcoming developers.. only through this way that can make sure our concepts align with real world demands. decentralized email decentralized chat box marketplace oracle nodes content streaming please consult our road-map check the intended dates for the development and final releases each product. will expand phantasma into two separate teams, one responsible for the blockchain tech, and other which will develop the end user apps. platform details core concepts the phantasma platform and framework designed the basis publish-subscribe data dissemination model, which can described with the concepts presented this section. boxes they act content hubs for generalized data, responsible for providing general interface for content storage, data piping and access sharing. each box associated with specific neo address, however, for better accessibility, they will named. the allowed characters will lowercase latin letters from digits from and underscore. all other characters will not allowed the smart contract, order protect against homograph attacks. user any entity that uses the phantasma infrastructure share consume data; this could either smart contract pulling data from box, application (either mobile, desktop even web based). messages data items that can stored and shared via phantasma, optionally linking off-chain stored content, and stored inside boxes; gate permissioned gateway phantasma box. gates are defined via the programmable phantasma vm, supporting fine coarse-grained customized permissions, thus allowing for multiple access modes for each box. gates can also specify different payments models, such free-to-access, pay-once access subscription based access; since boxes are linked neo addresses, any user can create any number boxes, each box with its own customized gates. after creation, the user can immediately start pushing content the box. the access modes box can fully controlled via the phantasma opcodes, allowing emulation read-only and write-only modes, along with time-based condition-based access, and basically anything else that can programmed given the opcodes and data available inside the blockchain. tokens the access gate can verified via token permissions the soul tokens. these tokens are the fuel the phantasma network, meaning that operations inside the phantasma network will require them, including creation boxes, allocation and renewal space for storage; chapter platform details for example, access any box, user must send read write request it, which then goes through the gate script. the gate script can validate the user has the required permissions access it, and charge the predefined cost for that type access. these are the fundamental phantasma entities and primitives which the platform built. with these building blocks, keeping this well-defined and versatile interface, possible implement vast array practical applications some which are planning build showcase the protocol. chapter platform details phantasma virtual machine one the main points smart contracts immutability. however sometimes having little bit reprogrammability desired. enter the phantasma blockchain-emulated general-purpose execution environment that puts forward the capacity deploy sub-contracts neo without paying the full costs neo contract. the phantasma immediate user-friendly way add smart-contract programmability for marginal cost. with phantasma, will longer necessary pay large gas fee deploy small set rules the blockchain, instead, those programmable rules can deployed inside boxes residing our smart contract. this component what makes possible push arbitrary code phantasma boxes, creating the bridge that generalizes on-chain and off-chain storage, and enabling automatic message responses necessary for advanced use cases phantasma. the quintessential example using the phantasma programming the write and read access phantasma boxes, which something can programmed with couple operations. other examples include programming on-chain reactions when new messages arrive specific box. examples features that could programmed using the include on-chain payment with automatic delivery content decentralized box auction system. virtual machine implementation the runs inside the neo smart contract, containing large set opcodes which include opcodes for data manipulation oracle reading support opcodes. large part the opcode set direct mapping the opcodes supported the neo ((zhang, )). this decision eases the switch towards moving phantasma new blockchain with neox bridge, since neox requires neo-compatible vm. thus, the phantasma able run directly top the future blockchain, completely removing the need emulated the neo vm, allowing better performance and reduced gas costs. the phantasma not turing-complete design, that is, for any set inputs always possible compute advance when the going stop. this necessary order estimate the gas cost specified phantasma script, otherwise would possible write malicious script that consumes all gas user. nonturing-completeness achieved limiting the opcodes available the vm, removing particularly opcodes that could lead loops and recursion. note that this design choice currently specific the neo implementation the phantasma and the limits could lifted the phantasma blockchain and when deemed necessary. appendix contains proposal opcode sheet the phantasma vm. chapter platform details phantasma relay blockchain ledger system has significant advantages when compared traditional databases. however, one major disadvantage the throughput speed, which several orders magnitude slower than traditional database backends. even with neo's transaction throughput, most types applications would still prohibitively slow and costly run blockchain. the natural approach move most resource-intensive tasks off-chain: most the heavy computation, communication and storage requirements; while their locations and identities (endpoints) are preserved and accessed via the blockchain. the speed blockchain can roughly estimated function many nodes that are required participate the consensus. thus rule thumb, achieve greater scalability, need reduce the consensus set size. this what neo does using small set validators. the same idea can generalized the use applicationspecific decentralized systems with limited number nodes, limited number connections (consensus set) per node. design philosophy the phantasma relay part our solution for maximizing the protocol's efficiency, and can described second layer scaling solution, taking ideas from existing large-scale communication protocols (eg: skype protocol (s. baset, )). the following points describe the design philosophy the relay: speed prerequisite delivery data from single source ring receivers should done with maximum swiftness; ephemerality choice not all data should written the blockchain, the blockchain single shared entity that grows continually size. bloating the blockchain with data meant for single-time consumption would hindrance its performance, and therefore will allow for avoided; integrity and trust siblings for obvious reasons data should arrive intact, without partial loss content. furthermore, when leaving the expected trust blockchain one should also expect maximal trust from subservient layer. this can course guaranteed use cryptographically secure scheme, backed asymmetric key algorithms; chapter platform details the "relay" can summarized second layer sitting between neo blockchain and phantasma based applications, and capable the following operations top phantasma messages: cache data can cached the relay level, allowing extremely fast reads desired. merge data can merged necessary order minimize writes and reads the blockchain, long consistency and semantics are preserved. sign data must signed order confirm the identity message sources. the relay will operate running top udp protocol, since simple and effective low-cost protocol. does not require the establishment constant connection, nor guarantee message delivery. these are features fit for fast data delivery multiple recipients, and specifically useful for peer peer applications the case the phantasma relay. the full specifications for the relay's protocol will detailed separate technical document. chapter platform details phantasma storage the phantasma data filesystem (pdfs) decentralized data storage file system, developed the default storage backend for phantasma dapps, and implemented top the kademlia distributed protocol ((p. maymounkov, and extension phantasma relay. users (running phantasma nodes) may further contribute the network, and rewarded for it, running full pdfs node well. thus all users are incentivized participate the token economy. overview the content stored opaque byte array, subdivided into blocks fixed size, and for each block content hash calculated and added the contract, along with the metadata help retrieve the whole original file. uploading something pdfs can done either the alloc opcode the the createcontent() method. both require payment tokens based the number blocks uploaded. this payment fixed fee tokens. after successful alloc call, the user gets valid pdfs content id, which can then used upload the content the pdfs network (check appendix for protocol specifications). content upload (writes pdfs) are validated based the content hash: since the hashes are stored the blockchain, whenever someone tries upload block the network, will rejected the hashes not match. chapter platform details minimum replica set has been shown that taken the specific set consumer based devices, there wide distribution the availability the devices, defined terms fraction available computation time per day ((j. douceur, )). therefore extremely important make sure that replicas storage blocks are distributed evenly over set endpoints, taking into account that highest priority allocations remain available the network always. this does require that storage nodes certain ordering and balancing contents, but since the phantasma protocol specifies the inclusion priority flag per allocation, possible for nodes take aggressive stance pushing low priority blocks low reputation nodes they are running out storage space keep high priority blocks. the general assumption must made that one more phantasma nodes must contain certain content block for the whole content retrievable any time. there are blocks specific content, the network may require replicas that block minimum accept the block, where must greater than equal when equals single failure would signify temporary erasure the block. when and the content block still retrievable any two the four replicas offline, and grows toward the reliability the block existence grows toward proof-of-retrievability the pdfs network uses proof-of-retrievability algorithm (bowers, which someone who stores content must provide proof that they are still the have full content available for retrieval. proof retrievability area with extensive research, including the works kevin bowers, juels-kaliski and shacham-waters. the case phantasma propose model based split consensus group derived from reputation counter, which calculated via on-chain moving average. this model entities the network can start process verification other entities, which involve large chain steps consisting interactions between both two nodes and each those nodes and the smart contract running the blockchain. chapter platform details role groups each node the system can fall beneath one three roles: observer node who can only fetch content and does not store content itself; prover node who stores content blocks and does require proving the validity those blocks, with incentive receiving tokens for correct proofs. this node reputation lower equal that the current system average; validator node who stores content blocks and must validate other nodes with incentive receiving tokens compensation. this node reputation greater that the current system average; these roles are not static, instead they can change any point time, depending the moving direction the ecosystem whole and the actions the individual nodes. every time new proofs are submitted and the rewards are mined, the reputation the participants updated. the system global average threshold point calculated follows: where the previous global average, the current reputation value the last participant and the total number participants involved. the value then used the smart contract decide who can request proofs validator (those with reputation above the value) and who can submit the answer the proofs, which are those with reputation under equal chapter platform details phase verify node ("initiator") picks another node from list its connected peers. the selection scheme the node implementation. the initiator must part the "validator" set. asks the selected node list its current available contents. the selected node answers with list content ids. the initiator node selects one the content ids and fetches list blocks that form the specific content. the initiator calls startproof(this, target) via smart contract, and the same time tells the target node which (contentid blockid) was chosen from the received list. the target node must now send the full ordered bytes for the requested block. the initiator hashes the received data and the hash matches the expected value obtained the previous step, sends random bit nonce the target node. the target node should now send the received nonce the blockchain with showproof(initiator, this, nonce). the initiator calls acceptproof(this, target), and the smart contract adds both the initiator and the target the rewards queue. optionally, the slave does not provide the block provides invalid data, the master should call failproof(), which available only after minutes passed since startproof(). phase reward when proofs are accepted the verification phase, the validator participants are submitted queue, which has maximum limit participants, while the proofer participants are sent second queue with same size. forcing the flushing the proof queue done calling obtainrewards(), which can done anyone invoking the smart contract. the are few rules collect the rewards, otherwise nothing will happen until obtainrewards() called again. (i) minimum participants the queue. (ii) all signatures/addresses must ordered from lower greater (iii) all signatures must different. this allows guarantee that every participant the queue unique and helped the previous rule. (iv) all addresses the validator queue must have above average reputation the time their inclusion. chapter platform details (v) all addresses the proofer queue must have reputation less equal the reputation average the time their inclusion. (vi) enough time has passed since the last rewards (vii) every participant the validator queue has paid token validation fee the rewards are also time-based, with variable rewards times helping preventing spamming attacks. the reward wait time increases every time obtainrewards completes with success. all conditions are full, one participant selected randomly from the proofer pool and another from the validator pool. the randomization done via mersenne twister having the neo consensus pseudo-random value act the seed, concatenated with signature from address who invoked obtainrewards. once both participants are chosen winners, half the tokens are distributed each participant and new round rewards can now start. content privacy phantasma, all the data secure design, achieved via state-of-the-art encryption algorithms. all content securely stored encrypted storage backend, whose records are referenced the phantasma smart contract. access the actual content, users must have the appropriate permissions able receive the actual decryption keys for the stored content. data encryption phantasma backend-agnostic, running top layer top raw storage and using symmetric ciphers such aes. phantasma storage uses aes-ctr with sha- for key generation. distribution keys for access groups based the concept broadcast encryption ((naor, )). the algorithm behind broadcast encryption requires additional coordination between the group participants but also has the added advantage possibly sending message millions receivers, without requiring sub-linear growth the ciphertext. each write and read goes through storage node (i.e. storage-bridge full pdfs node), which responsible for encrypting and decrypting the data, and also generating and storing the data encryption keys (aes keys). ensure the privacy the data, the nodes cannot have direct access the encryption keys. therefore, the keys are kept privately only the phantasma node the creator and owner the data, which will then encrypt and send the keys every consumer/reader demand. readdata response carries with the particular aes key, encrypted under the reader's public key (neo key, ecc algorithm). the key-management layer crucial and required component phantasma nodes, responsible for interfacing with all supported data backends. chapter platform details storage cost allocating content the blockchain has fixed storage data block, and this storage valid for fixed period time (eg: one month). when space for content allocated, necessary specify both priority and storage mode. the mode simple, blocks can either read-only writable, and the latter, the associated soul value storage greater. for the former, represents integer number specifying the inherent importance the content. specifying different priority levels, possible adjust the storage cost, raising for content that should never deleted, and decreasing the cost for more volatile and violative content. the prescribed value soul for storage can upfront, meaning up-loader can submit per-determined soul for the content reside the chain for month year more, with the number required soul adjusting accordingly. also possible prescribe the minimum soul deposit first and later amend the storage allocation period additional soul installments. failure handling system like phantasma, there are two main parts that could attacked suffer from technical outages: neo network. while neo was built extremely fault tolerant blockchain, the end, neo still under development and sometimes the network gets bit stressed when certain heavy conditions are triggered. this situation phantasma could still continuing function partially, taking support from both the phantasma relay cache system and caching mechanisms neo local nodes. the failure short duration, the phantasma ecosystem can possibly withstand with minimal disruption. phantasma relays. since any device running phantasma dapp can potentially act relay node, situation where most the nodes are offline difficult imagine. however still possible that number large enough nodes are offline and turn fetching specific blocks becomes impossible. due the nature decentralized storage system, this situation that needs accounted for, and recommended that those who need access certain data blocks make sure that they are running their own relay nodes, with the specific blocks flagged for local storage. chapter platform details specific network attacks denial service distributed denial service attack has serious disadvantages when targeting distributed system, mainly because there not single point failure that can targeted. targeting specific nodes possibility, but phantasma relay nodes should able detect abnormal network activity and immediately start distributing their blocks other relay nodes, taking block priority into account. while theory would possible target every single phantasma node, the resources carry such out would order-of-magnitude higher than power available most organizations. identity hijacking due the way that kademlia exchanges messages between nodes, possible for malicious node hijack messages intended for other nodes. similar what the storj protocol does (s. wilkinson, extend kademlia encrypt the messages, using the neo ecc key pair, which allows for verification and helps avoid identity hijacking. protocol poisoning malicious entity could try have large number nodes join the phantasma network under their control, and then try manipulate the storage proof-of-retrievability brute-forcing the first phase the proof between the controlled nodes. however since tokens are only distributed the second phase, the block confirmation conditions give preference for peers with oldest minting timestamps, which pushes any puppet nodes the back the queue. creation new malicious nodes also prevented specifying minimum period from registration until first block inclusion. chapter platform details phantasma blockchain overview some the current available blockchains beyond mere currency transaction systems, and instead work platforms for distributed applications via programmable smart contracts. this the case ethereum and neo, which also supports storage mechanism used save application state. this state can described quasi-immutable storage, given that while smart contracts are free rewrite the state many time necessary, all previous states can recovered from the transactions stored the immutable blockchain. however, foster healthy growth the space required store the blockchain data, current platforms encourage frugal use the storage mechanism. the existing model all operations done inside smart contracts have associated fees the platform gas, and the cost writing the storage proportional the amount bytes stored. storing single kilobyte blockchain can extremely expensive given current gas prices, therefore currently the kind applications that done distributed way limited subset apps that have minimal storage data requirement. our main motive behind creation new blockchain platform introduce new model for storage smart contracts. phantasma proposes model where storage cost and location can offloaded distributed way the participants the network, instead forcing full redundancy the whole state every network node. not only that, but also introduce the concept ephemeral storage, the sense that smart contract can choose how the data should handled inside the network, forcing either higher level redundancy keep static content alive, dropping data that longer necessary the network. smart contracts current smart contract languages are usually turing complete, however they are still limited the way that they can operate with data. manipulating large amounts data currently out the scope existing smart contract languages. the phantasma blockchain has focus data and thus the following capabilities are supported: data manipulation order manipulate large amounts data, necessary able operate data abstracted way. high-level concepts like map-filterreduce will available phantasma smart contracts. storage phantasma smart contracts will able receive large amounts data input, and either allocate storage for them the blockchain drop necessary. encryption encryption and privacy are basic requirements distributed applications, and phantasma smart contracts will have access the underlying protocol that allows distribution encrypted content specific parties. token any smart contract platform has ability issue tokens, and with native token support the phantasma blockchain, every token first class citizen the platform. the programming phantasma smart contracts will done using the same tools used for the neo network, due adherence the neox protocol, which guarantees compatibility between contract virtual machines. chapter platform details migration since the phantasma project will initially start using neo the operating blockchain, later will necessary migrate the new blockchain when the mainnet launched. neox allows transferring tokens between blockchains, therefore this feature will used transfer user tokens. applications would have upgrade order operate the new blockchain. however, any phantasma application still running the neo blockchain would continue operate, albeit lacking access the new features introduced the new blockchain. third-party development application and development framework developers phantasma-based dapps will use our supporting software development kit (sdk) order access the phantasma features. the sdk handles the communication between phantasma nodes and the dapps, allowing the sending custom transactions the relay nodes, interfacing with the underlying phantasma smart-contract. features supported the sdk: create new boxes send and read messages from boxes opcode script builder generate logic gates deployable phantasma allocate storage for content, well upload and retrieve communication with relay nodes programmatically participation the proof-of-retrievability available programming languages the sdk will initially written the language, allowing consumed any language the .net platform. this the language where our developers have more experience. however, since phantasma defines standard for dapp protocol, later on, other developers can contribute with their own implementations phantasma library written any other programmable languages. service api api for interoperability with other languages and services essential for platform, and phantasma will provide that. the sdk will include some thin-client functionality able provide clear and complete service api, that external applications can also interact with phantasma dapps. plus the phantasma website will provide extensive api reference complete with code examples allow any developer integrate their own products with phantasma. chapter third-party development debugging the sdk will also have debugging utilities help developers easily get phantasma dapps and running, with the integrated debugger based the work our team achieved before with the neo smart contract debugger. using debugger that supports blockchain emulation allows very fast development times without requiring deploying private test network. the interfacing with the neo blockchain will accomplished using the neo-lux client library, which have also developed. smart contracts initially only sub-contracts will available, however once the phantasma blockchain test-net released later, full smart contracts will available. interoperability with these smart contracts will available via sdk, well executing transactions and transfer tokens. development smart contracts for phantasma will take advantage the tools and enviroments developed for neo, thanks the usage compatible virtual machine. use cases decentralized email with phantasma, can easily create full-fledged email-like centralized system. the phantasma-based email application has the advantage being more secure, configurable the phantasma script, with the data being completely control the inbox owners phantasma email can implemented with single box for input, with optional additional box output, where sent messages would stored. the emails are then sent the neo blockchain the destination's input box. additional behaviour for the basic phantasma email client can implemented: automatic newsletters action triggers some input messages (i.e. autoresponders), etc. phantasma-based autoresponder offers advanced level easily customizable and cheap efficiency. with familiar mailchimp-like (user interface), the powerful phantasma would allow for specific behaviour click-configurable triggers the input box, thus allowing for automatic email responses complex state transitions fraction the cost the current available solutions. another interesting application for distributing newsletters. phantasma-based newsletter could easily and efficiently implemented simple box with cost-free, permissioned gate. the recipients the newsletters would added the gate's access list, and get cost-free (in both soul tokens and gas costs) access the newsletter. finally, another important point would the communication with traditional email systems. while existing blockchain-chain email based systems exist, they suffer from being closed-system with proper communication with the exterior systems. phantasma proposes the creation "mail providers" which would run phantasma nodes bridges the smtp/imap protocol, allowing messages move from and the blockchain. course, spam the largest deterrent for this, therefore the bridges would work based mix provider-based and user-based whitelisting domains, with support for auto-inclusion pgp signed messages ((d. shaw, )). chapter use cases oracles phantasma makes very easy provide oracle-like services neo. therea are methods available oracle, depending the actual data volume and requirements: fully onchain: for low data and query volumes, fully onchain approach well suited. the data all written and read the neo blockchain. possible application this method would provider certain daily quotes (i.e. closing day quote the nyse). onchain with backend storage: similar method but when dealing with more real-world levels data volumes, application could use one the available phantasma backends store it's provided data. endpoint only with phantasma relays: this method the solution for highthroughput data flows. applications that need constantly reading writing data should use this solution. here, the phantasma box will hold only endpoint address with the actual phantasma relay providing the data. reader/client then needs have its only relay running, and connect the endpoint start receiving data. there are multiple kinds applications for this type data: trading engines, meteorological data providers, etc. the future, are planning make phantasma oracle feed source aggregator, which would work functional marketplace for data sources, allowing both new developers find and use existing contents and other developers sell access their own box contents. and course, for systems based oracle pattern, absolutely necessary that the data being pushed the blockchain comes from trustful source, reputation system the marketplace could improve the viability the concept. digital commerce digital commerce also good fit for the phantasma platform, allowing sales digital products, videos, videogames other files. taking advantage the programmable sub-contracts that can run the phantasma vm, would possible for example create box with the permissions set way that anyone could read from it, but only owner could write, and use this box product listing. they could then create second box, where anyone could write messages but only the owner could consume, allowing purchase orders sent out this box, and the content automatically unlocked the phantasma storage. video streaming you are content creator that usually releases videos for free, you can host your videos the network, allowing you decide who will see your videos. there will more days bothering your followers with unwanted ads, with phantasma you can host the videos for minimal costs and have full control how monetize your content, regardless the types videos you are creating, with demonetisation for certain types chapter use cases videos control third party. for providers who supply paid content their followers, whether the form courses specific paid videos, would also interesting for them use the phantasma network taking advantage the programmable sub-contracts automatically distribute access video content and even allowing video previews restricting access partial amount storage blocks. while platforms like udemy and teachable have business model that provides you with that capability for significant percentage your sales, with phantasma these costs are reduced tremendously due the power the blockchain, which based the amount content that you have host and can subsidized helping hosting the content yourself having the viewers participate the hosting. this provides much better scaling solution for creators with large audiences and the cost hosting the content becomes significantly lower. technical terms, video streaming supported via seekable random access the pdfs layer, possible due storage being segmented fixed size blocks. fast transfer speeds are achieved via the use the phantasma relays, which can use the caching capacity deliver pre-fetched blocks high speeds. ecosystem data economy phantasma aims create incentivized environment securely distribute and monetize data for dapps. achieve this goal, utility tokens are the critical fuel that transmits value from producers consumers keepers data, and allows any developer create application with built-in economic system. producers anyone who has valuable data provide the ecosystem, specific dapp(s). these can individuals, part coordinated team/organization, even general provider data feeds. consumers users dapps which required data function. application like email, each consumer will also producer. operators users running phantasma full nodes ensure the network's reliability, availability and speed. more details below. soul: phantasma network token the soul token the fuel the phantasma network, serving the basis for all the economic incentives binding consumers, producers and operators together. the name "soul" was chosen allegory traveling between gates. new applications and use cases are developed within the network, the soul token will provide backbone for the economy the network, that developers and users the network can use souls for future applications and use cases. phantasma encourages the natural flow then tokens between users: consumers need tokens pay for data, these tokens producers and developers, who need them pay for storage and network services. from there, the node rewards are redistributed all node operators, which should expectedly include many simple users consumers. thus the ecosystem designed foster the increasing use souls among all participants the network, with appreciating outlook for the token value. for ease-of-use and compatibility with current neo-based software this token will nep- based. for those unfamiliar with the concept, nep- defines the standard interface that these tokens conform to, and need implement, and the neo equivalent erc ethereum tokens. besides following the nep- specification, the token will also support distribution pool that essential the reward claiming functionality pdfs layer. the distribution described detail the proof-of-retrievability section. chapter ecosystem infrastructure incentives phantasma users can also contribute the healthy running the system, allowing their own device storage used partly the decentralized network and being rewarded for receiving tokens return. order support the redistribution tokens storage participants, the phantasma smart-contract includes "storage pool", which when combined with the proof-ofretrievability, allows fair stochastic distribution tokens among node administrators. the ecosystem follows token renewal system where every payment follows this split system (subject change order maintain market equilibrium): the paid tokens sent the payment target. the paid tokens sent reward pool. the payments and rewards are managed the phantasma smart contract, which records the token balances all users the system, any standard nep- implementation does. the rewards are sent instantly the addresses the participants, again following the nep- standard token transfer mechanism. specifically, the payment tokens required for createbox, allocstorage and optional for readcontent, writecontent calls. the later two calls, the amount tokens required can vary from zero any amount, and that amount determined the pre-defined code path the phantasma and can previewed using the inspectcontent call. chapter ecosystem ecosystem initiatives preparation for the official launch phantasma, will run marketing campaign with rewards stir initial interest from the crypto community, and allow raise the initial awareness about the platform. after the platform launched, there will incentivisation program for party apps developed phantasma, and community programs for organic social marketing raise awareness the platform. these initiatives will allow the team work together with the community develop phantasma. our planned activities for community growth will include competitions for poc's phantasma based-dapps (and later development those). any developer welcomed participate and pool rewards will distributed the winners each competition. intend aggressively pursue partnerships with leading blockchain developers and companies, showcasing the advantages using phantasma for the basic infrastructure. project funding distribution fund the full development the phantasma network and enable fulfil its potential, the team will single funding round, with private and public token sale. while the majority the tokens will available the public during the public sale, will required reserve soul available rewards for third-parties who contribute the development and improvement the phantasma ecosystem. projected use contributions reserved for marketing and growth marketing funds start and expand the platform, with advertising, sponsorships, partnerships, conferences, reward programs, contests. reserved for development used continuously develop the tech that powers the phantasma platform and its dapps. chapter project funding reserved for operations administrative and overhead costs for running the business. reserved for legal and contingency order maintain the desired high standards and fluidity operations the company. token metrics ico token price: usd token total supply: soul tokens available for sale: soul (of which are bonus tokens, that will burned unclaimed) token distribution available for public and private sale; reserved for team and advisors; reserved for platform growth and developer incentives; chapter project funding sale details the tokens will distributed sale done with neo smart contract. the smart contract will have support for pausing and postponing sale case adverse network conditions. order have access the sale, interested parties will have register the phantasma whitelist, and participate kyc process order get their neo address approved for sale. the smart contract will support assigning different tiers each participating neo address, order apply different rules for team members, strategic partnerships and public sale buyers. the hard cap not reached during the crowdsale, the total token supply will also lower, the remaining tokens will not minted (equivalent unsold token burn). lock-up period the smart contract will have lock-up period (also known vesting period) for each type address tier. any party with vested tokens can unlock their tokens after the vesting period was reached, calling unlocktokens via smart contract. team tokens will locked with tiered vesting period following: cliff months vesting years, with unlocked every months, for total months advisor tokens will locked with tiered vesting period following: cliff months vesting months, with unlocked every month, for total months for the addresses belonging presale contributors and strategic partnerships the following rules apply: base (non-bonus) tokens will released and transferable immediately after the token sale bonus tokens will have vesting period days, vesting linearly for roughly months, with third bonus tokens released every month for the addresses belonging public sale contributors, their token share will split into single part, and lock-up period will the following: tokens will released and transferable immediately after the token sale chapter project funding transparency policy the contribution wallets will public knowledge and can tracked through blockchain tracking platforms for neo. ongoing reports the progress and development the network will provided regularly the public, along with public access the phantasma github, which will allow developers and investors alike up-to-date with the network's development. required portion the the contributions raised will converted into fiat currency order have runway for least two years platform development. roadmap planned roadmap the phantasma project will have two separate teams, one working the core tech and the other building working products. these products will open-source and will showcase the power the phantasma tech. proposal and design phantasma. development initial proof concept. submission proof concept city zion dapp contest, where was one the top winners. website launch and team formation. initial draft the white paper. presentation phantasma neo devcon sf. continued development the core protocol. phantasma public token sale. prototype the first phantasma dapp secure email. release phantasma sdk, which will let any third-party developers start building their own phantasma based products, along with release oracle nodes, example sdk usage. phantasma relay nodes will finished and released, allowing phantasma apps break free from the transaction speed limits blockchain. the sdk will upgraded support the new feature and phantasma chat will developed showcase the relay nodes. development competition will held this point. start split phantasma from neo network into its own blockchain, using the neox protocol for cross-chain interoperability. testnet will released. release phantasma storage, expansion the relay system. the sdk will updated support storage. release main net, native tokens issued according nep- ownership. porting the sdk support native blockchain. storage nodes will start being rolled out public, that anyone can take part the phantasma network. phantasma digital commerce will released showcase how create more complex chapter roadmap logic with the programmable blockchain gates. service discover phantasma dapps will created from point, forward, once the third-parties developer support has reached critical mass. phantasma video streaming will released showcase how dapp dealing with heavy data loads. team the phantasma team the team mainly composed portuguese developers with experience blockchain, smart contracts, mobile and web development. the team based lisbon, portugal. sergio flores co-founder phantasma, city zion developer and blockchain consultant. sergio came with the idea for phantasma after extensive development work neo, when saw how cloud-hosted content were vulnerable traditional centralized servers, and how neo could support system solve this. sergio senior experienced developer with years business and customer facing software development, and track record tackling complex structural systems (filesystems, drivers, compilers, debuggers which was the case for his recent development, neo debugger). miguel ferreira co-founder, senior 'bigdata' and compiler developer and blockchain expert. miguel senior experienced developer, with years entreprises systems engineering and academic research distributed systems. crypto enthusiast deeply involved with blockchain and the dapp ecosystem, sees phantasma new frontier bringing scalable application development the people. neo and ethereum (solidity) developer. alexandre paixao marketing expert and tech enthusiast. with background management and business development, alexandre complements the team the non-technical side business growth and brings important skills like marketing and public relations the table, which are key the increasing awareness and development the phantasma platform. sergio pereira silva business developer, fiscal and legal lead economist trade, crypto lover, sergio pereira responsible for building valuable partnerships with the larger neo ecosystem, and evangelizing for phantasma real world use cases among companies worldwide. bruno freitas software developer graduated computer engineering, entered the crypto space hobby early found "antshares" (neo now) project and immediately got interested, which resulted being accepted city zion developer for his work. experienced with and .net stack technologies. specialized cross platforms applications, bruno charge the mobile development phantasma. chapter team bernardo pinho software developer, qa/tester the most recent and youngest member the team, bernardo crypto enthusiast and passionate developer. recent graduate from top engineering university, completely devoted blockchain development, with previous experience the ethereum ecosystem. rafael barbosa|| graphic designer rafael from early age began work graphic designer attending esad matosinhos, one the best schools europe, and developed projects for international companies such nos primavera sound porto and others. one his major interests the design world helping business promote themselves effectively. phantasma instruction set instruction set the uses stack-based architecture, the same vein neo and ethereum virtual machines. every instruction occupies one byte, with the exceptions being annotated. the list included here not exhaustive list, but implementation proposal that can later change. states verbs write true writing read true reading inspect true inspecting own true the caller owner box boxes this address current box being executed entry address box who started the execution data timestamp timestamp obtained from blockheader consensus pseudo-random number obtained from block header note the state changes whenever the context the changes, eg: calling pull, the context switches "read" now true and things like "own" will change. the state reverts back whenever control returns previous context. a.. opcodes core pushdata size, data pushes string bytes into the stack pushx number pushes number into the stack appendix phantasma instruction set arithmetic all arguments are interpreted bitinteger. add adds the two top values the stack. the result pushed back the stack. sub subtracts the two top values the stack. the result pushed back the stack. mul multiplies the two top values the stack. the result pushed back the stack. div divides the two top values the stack. the result pushed back the stack. mod divides the two top values the stack. the remainder the dividison pushed back the stack. min takes the minimum value the two top values the stack. the result pushed back the stack. max takes the maximum value the two top values the stack. the result pushed back the stack. string cat concatenates the two top values the stack. the result pushed back the stack. left keeps only the bytes left the top value the stack. the result pushed back the stack. right keeps only the bytes right the top value the stack. the result pushed back the stack. size puts the size the top value the stack. the result pushed back the stack. appendix phantasma instruction set logical all arguments are interpreted biginteger. equal value comparison the two top values the stack. the result pushed back the stack. not bitwise negation the top value the stack. the result pushed back the stack. and bitwise and the two top values the stack. the result pushed back the stack. bitwise the two top values the stack. the result pushed back the stack. boolean less-than comparison the two top values the stack. the result pushed back the stack. boolean greater-than comparison the two top values the stack. the result pushed back the stack. let boolean less-than-or-equal the two top values the stack. the result pushed back the stack. get boolean greater-than-or-equal the two top values the stack. the result pushed back the stack. control skip jumps forward bytes the top value the stack evaluates false. ret stops execution. stops execution and pushes the value "true" the top the stack fail stops execution and pushes the value "false" the top the stack throw throws exception the neo data push pushes new content into box (taken from the stack), puts true/false into the stack appendix phantasma instruction set depending the operation was successful pull pulls latest content from box (taken from the stack), executes and puts the result back into the stack. inspect inspects latest content from box (taken from the stack), and puts the token cost back into the stack. delete deletes the content top box (taken from the stack), puts true/false into the stack depending the operation was successful replace replaces the content top box (taken from the stack), puts true/false into the stack depending the operation was successful call executes content (taken from the stack) from box (taken from stack) and pushes the result into the stack.inputs the called box must passed the stack.the box specified input must older than the "this" box. this prevents infinite recursion. count gets amount content box. pushes result into the stack. name gets the name specified box. pushes result into stack. find finds the address the box with name taken from the top the stack, pushes the result into the stack. payments balance pushes the number balance tokens box into the top the stack. pay size, amount pays certain amount taken from the top the stack tokens the box. time pushes the amount time since last payment into the stack. payment never happened, pushes unix epoch value. storage alloc size(),zeros(), data allocates blocks phantasma storage with the indicated hashes. number blocks total size blocksize. number hashes must match. each hash bytes data. after the opcode executes, new pdfs link created, the opcode replaced memory and the execution the stops returning the link. appendix phantasma instruction set this opcode can only executed once, and this happens always "write" mode, since content always executed through push with "write" mode first, before reads pulls can done. after being executed immediately replaced the link opcode. this allows the pdfs contentid retrieved later any time, and makes impossible alloc more than once the same content. link id() puts link phantasma storage into the stack. elnk service, size, data marks link hash third party external storage specific service (eg: bluzelle/storj) size contentid returns size bytes specified content, pushed stack. write writes content from top the stack storage using key taken from stack read reads content from source taken from the top the stack from storage using key taken from stack miscellaneous sha hashes the byte contents the top value the stack with sha and pushes the result into the stack state [state] puts the value the specified state into the top the stack include box adds the box the list boxes that caller exclude box removes the box the list boxes that caller phantasma data file system reference node protocol messages here proposal the message protocol for the initial phantasma relay implementation. query allows anyone request data blocks. request (contentid, blocklist) response (contentid, blockbytes, signatures) info allows anyone request info and availability contentid. request (contentid) join allows node join the network storage node. the node must validate its own identity signing message with its neo keys. once joins, receives response containing map the network. request (identity) response (network) attach allows node attach itself master. request (target) response (ok/error) detach allows node detach itself from master. request (target) response (ok/error) upload allows anybody upload block from contentid (the hash data must match what was stored the blockchain) request (contentid, blockid, data) response (ok/error) appendix phantasma data file system reference bibliography kramer, volker (). "safety-critical real-time systems". in: book. url: https: //www.amazon.com/safety-critical-real-time-systems-bernd-kr%c%amer/ dp/. bowers, kd. (). "proofs retrievability: theory and implementation". in: ari juels. url: https://link.springer.com/chapter/./---_. shaw finney, thayer (). "openpgp message format". in: rfc url: https://tools.ietf.org/html/rfc. douceur, wattenhofer (). "modeling replica placement distributed file system: narrowing the gap between analysis and simulation". in: european symposium algorithms. url: https://link.springer.com/chapter/./--_. naor, fiat; (). "broadcast encryption". in: semantic scholar. url: https: //pdfs.semanticscholar.org/dbd/ebeebdbbbdccef. pdf. maymounkov, mazieres (). "kademlia: peer-to-peer information system based the xor metric". in: pdos-mit. url: https://pdos.csail.mit.edu/ ~petar/papers/maymounkov-kademlia-lncs.pdf. baset, schulzrinne (). "an analysis the skype peer-to-peer internet telephony protocol". in: ieee. url: http ieeexplore ieee org document wilkinson, buterin (). "storj, peer-to-peer cloud storage network". in: storj. url: https://storj.io/storj.pdf. zhang, (). "neo opcode reference list". in: neo smart economy. url: https: //github.com/neo-project/neo-vm/blob/master/src/neo-vm/opcode.cs.