enigma whitepaper (revised) february ivate ntrac eable tran sacti syste loakc abstract cloakcoin cryptocurrency designed facilitate private, secure and untraceable decentralized transfers with enigma. cloak dual pow/pos (proof work, proof stake) coin, which now the proof-of-stake (interest bearing) stage. enigma cloakcoin's private, secure and untraceable payment system, that forms the basis future development and provides the underlying transaction system for the decentralized applications running the cloakcoin network. privacy today perhaps more important than ever. the thundering pace technological advancement has rapidly broadened our horizons and connected the world like never before. thanks bitcoin's introduction cryptocurrency steadily moving into the mainstream and can now transfer digital currency securely across the globe instant, using the power the blockchain. cryptocurrency adoption becomes more widespread, increased regulation inevitable. remains seen what form this regulation will take, but many are concerned may overly draconian and designed stifle some the more libertarian aspects cryptocurrency. enigma heart decentralized, off-blockchain mixing service which allows users the cloakcoin network transmit cloak privately and securely each other. has been designed ensure the mixing process both secure and untraceable third party observers. this ensures user's cloak coins are kept safe during transfer and that the sender and receiver cannot tied associated. cloak coins are never transferred intermediate party during cloaking, coins remain safe. have also worked hard ensure the enigma system rewards users who assist cloaking transfers and will continue improve the process and further incentivize active participants. anyone with cloak coins can participate cloaking operations, which allows them leave their wallet running staking/cloaking mode allow passively assist cloaking and earn significant rewards. enigma overview enigma the first public iteration cloak's private, secure and untraceable payment system. enigma transactions are 'cloaked' other users, who receive reward for their assistance. the other users provide inputs and outputs the enigma transaction making impossible determine the true source and destination the cloak transfer. all enigma messages the network are hashed and encrypted for the recipient using cloakshield ensure data security and integrity. please see section 'cloakshield' for more details. the enigma process (for enigma enabled nodes) enigma announcements enigma nodes communicate over the cloak network and node will keep track other active enigma nodes. enigma announcement broadcasts alert other enigma nodes our public session key and current enigma cloaking balance. enigma cloaking requests when user wishes send cloaked enigma transaction, they elect series enigma nodes (with high enough enigma balance) and request their assistance cloaking. enigma node can choose assist cloaking and send acceptance response the requester indicate this. enigma node declines participate cloaking does not respond timely manner, alternate enigma node elected and contacted. ddos (distributed denial service) protection will blacklist any misbehaving nodes for the remainder the session. node deemed misbehaving repeatedly refuses sign enigma transaction refuses relay enigma messages. enigma cloaking nodes use elliptic curve diffie hellman key exchange (ecdh) derive shared secret with the enigma initiating node, which used generate shared secret key for symmetric rsa- data encryption between cloaking node and the sender node. enigma cloaking acceptance when enigma node accepts 'cloaking' request, provides list transaction inputs and outputs used for the enigma transaction. input amounts provided cloaking node must greater equal the enigma send amount (plus any fees). outputs are carefully selected that they match the true output the enigma transaction closely possible. the enigma output address has not previously been used, new change address generated the 'cloaker'. the enigma output address has previously received funds, existing address with similar activity chosen the 'cloaker' return their input funds and receive the enigma 'cloaking' reward. the 'cloaked' enigma transaction the enigma sender constructs 'cloaked' transaction using the inputs and outputs provided the enigma cloaker nodes. the enigma sender then adds their own inputs and outputs the transaction, before shuffling all transaction inputs and outputs facilitate 'cloaking'. the 'cloaked' transaction then encrypted and sent (using cloakshield) each participating cloaker. cloaker nodes check the transaction ensure the inputs and outputs they supplied are present the 'cloaked' transaction and that one more their outputs has also been rewarded with sufficient fees. the transaction checks are passed, the transaction signed (sighash_ all+sighash_anyonecanpay), encrypted and relayed back the enigma sender. once all enigma cloakers have signed the transaction, the enigma sender confirms the signed transaction valid and signs it. the 'cloaked' transaction then ready for submission the network. ... tracking enigma cloaking nodes enigma enabled nodes the cloak network broadcast announcements other nodes. these enigma announcements contain the public ec-key the node and the currently available balance for enigma cloaking operations. nodes maintain list other active enigma nodes the network that they can communicate for cloaking purposes. nodes ids are generated session-bysession basis; restarting the client will refresh the current id. each wallet creates public/secret (secpk) key pair for the session start-up. the wallet announces its public key and cloaking balance for the session periodically other nodes the cloak network. nodes keep track other active enigma cloaking nodes and can communicate with them directly indirectly (via cloakshield onion routing). ... initiating enigma transaction alice wishes send cloak bob using mixer nodes. alice broadcasts enigma request the network, containing her public enigma session key and the amount cloak she wishes send. her request securely routed through series enigma nodes mask the originator. catherine has 'cloaking mode' enabled and creates secure cloakshield encryption channel for secure communication with alice. catherine then constructs enigma response packet and sends securely alice. the response contains list catherine's inputs and outputs that alice will use 'cloak' her transaction. alice decrypts and processes catherine's enigma response and creates enigma transaction using her own inputs and outputs mixed with catherine's inputs and outputs. this encrypted and sent catherine for signing. catherine decrypts the enigma transaction and performs number integrity checks the transaction ensure the inputs and outputs supplied have been used correctly and that has been rewarded sufficiently. the enigma transaction passes the tests, catherine signs it, encrypts and transmits alice. alice performs further checks the signed transaction before signing herself. the transaction then submitted the network (securely routed through enigma nodes) for inclusion block. when the transaction finalized, bob will receive the funds from alice and catherine will receive 'cloaking' reward for assisting the enigma transaction. due catherine's inputs and outputs mirroring alice's, not possible ascertain the true sender and recipient the enigma transaction. enigma transaction example alice wants send coins anonymously bob. alice (-.) cloak (-) cloak (-.) enigma fee (-.) cloak total enigma mixer nodes begin communicating. catherine every coin holder can announce themselves mixer node, also known "cloaker". every participant remains anonymous and communicates through encrypted channel. alice's wallet now connected mixer nodes. each mixer node helps alice shuffling around the transaction. this network nodes creates decentralized anonymization similar tor onion routing. mixer nodes get rewarded for cloaking alice's transaction. (+.) cloak linear fee from coins) coins) shared amoungst all participating cloakers. the system works seamlessly ensure complete anonymity and total privacy. bob then receives alice's encrypted payment bob (+) cloak bob successfully receives cloak anonymously. cloakshield cloakshield provides secure communications between nodes the cloak network using symmetric rsa encryption backed elliptic curve diffie hellman key exchange (ecdh). this allows nodes exchange data securely, providing protection from snoopers (man the middle) and imposters (sybil attack). cloakshield designed secure both enigma and decentralized cloakcoin applications, and will ensure your data stays private possible. cloakshield allows the encrypted sending data one more recipients. when sending single recipient, the payload rsa encrypted using the ecdh shared secret. when sending multiple recipients, the payload encrypted using one-time key and the key then encrypted for each recipient using the ecdh/rsa method. generating shared encryption key order for alice and bob communicate securely, they must agree shared encryption key. cloakshield uses ecdh accomplish this: alice has enigma private key and enigma public key qa=dag (where the generator for the elliptic-curve). bob has enigma private key and enigma public key qb=dbg. alice has bob's enigma public key from the enigma announcements sends the network announce his availability for cloaking assistance. she uses her private key and bob's public key calculate shared secret daqb=dadbg (ecdh_compute_key openssl). alice then creates sha hash the secret and passes the hash the opensslevp_bytestokey method order derive encryption key and iv, which will used encrypt data for bob (using symmetric rsa encryption). alice now able create cloakshield secured messages for bob. when bob receives cloak shielded message from alice, reads alice's public key from the message header and generates the same shared secret key alice, per the steps above (with his secret key, instead alice's). the cloak wallet maintains list active cloakshield keys and will check the list for existing cloakshield key before generating one. cloakshield data cloakshield allows any cloak data objects serialized and transmitted securely one more recipients. cloakshield data packet-header contains the sender's enigma public key and the public keys hashes the recipients. cloakshield headers contain verification hash, which generated using the sender's public key and the raw unencrypted data. this hash verified during decryption cloakshield data ensure that the recipient info the header matches the encryption key, and that the data has not been altered. cloakshield onion routing onion routing technique (used tor) for anonymous communication over computer network. onion network, messages are encapsulated layers encryption, analogous layers onion. the encrypted data transmitted through series network nodes called onion routers, each which "peels" away single layer, uncovering the data's next destination. when the final layer decrypted, the message arrives its destination. the sender remains anonymous because each intermediary knows only the location the immediately preceding and following nodes. onion routing analogy the addition 'onion routing' functionality the enigma network (using cloakshield) allows nodes communicate indirectly circumvent traffic analysis. this hampers attempts determining which nodes are communicating with each other which nodes submitting transactions the cloakcoin network. when enigma node wishes communicate with another enigma node selects number other enigma nodes act relays for the communication. each encrypted layer can only decrypted the intended relay [for which the specific layer was encrypted]. after decrypting layer, the relay passes the data the next relay node. this routing continues until the data reaches its intended recipient and all layers have been decrypted turn the selected relay nodes. due the self-contained nature the enigma network, exit nodes are not required and cloakshield ensures there risk relay node reading altering the encrypted data. stealth addresses cloak uses the enigma system faclilate private/secure transactions. cloakshield node node communications startup, each cloak wallet generates [nid_secpk] keypair (cloaking encryption key cek) enable them derive ad-hoc secrets using ecdh with their private key and the recipient's public key. this communication forms the basis all node-to-node communications relating enigma. see 'src/enigma/cloakshield.h/.cpp' for more information this. this ecdh based encrypted communication also utilized for onion-routed data, which handled cloakshield. when onion routing enabled, the client will attempt construct valid onion route for the data using the list enigma peers that aware of. the node may not have direct connection the enigma peers, but that not necessary cloakdata (data packed for routing with cloakshield) packets are relayed peer-to-peer. onion route will typically consist distinct routes the destination node, with node hops per route. multiple routes are used cope with situations where routing node drops offline. nodes periodically send out enigma announcement (src/enigma/ enigmaann.h) peers advertise their services for onion routing. other nodes the network store the announcements (until they expire are replaced with update) and use them construct the onion routes. stealth address transaction example when node sends enigma transaction stealth address, the following happens: sender generates inputs cover amount sent, enigma reward and network fee coins thru and higher coins). sender generates cloakingrequest object (containing unique stealth nonce for this request). sender generates between one-time stealth payment addresses using the recipients stealth address and splits the sent amount randomly between the addresses. sender decides how many participants are going used. from participants can chosen (each participant gets equally split enigma fee). sender onion routes cloakrequest network. the request contains the 'send amount' that cloakers know how much reserve. cloaker picks cloakrequest and decides participate. cloaker supplies inputs sender and stealth address and stealth hash (for their change). cloaker sends cloakingacceptresponse sender. this contains stealth address, stealth nonce and inputs. sender waits until enough cloakers have accepted. sender creates enigma transaction using own inputs and cloaker inputs. inputs are shuffled. sender creates ouputs for all cloakers. the outputs randomly split their change and return them. this also allocates the cloaking reward cloakers. sender creates their own change returns for the enigma tx. these are one-time stealth payment addresses. the sender calculates the network fee and subtracts this from their own change return. the sender sends the enigma the cloakers for signing. cloakers check the ensure their inputs are present and correct and that there are one-time payment addresses linked one thier stealth addresses with payment that exceeds the input amount. cloakers sign reject the and send signatures sender. sender collates the signatures and transmits the finalized, signed the network. nodes scan incoming transactions for stealth payments and enigma payments and detect any payments change. keypairs and addresses are generated for any matching payments and generated keys/addresses are saved the local wallet. the future enigma further development enigma forms the core cloakcoin and will continue developed and improved move forward with cloakcoin. here are some the features planned for future revisions: improved proof-of-stake-algorithm proof stake (pos) method securing cryptocurrency network that relies upon users showing ownership coins order sign blocks. the long run, the probability signing blocks proportional the amount coins owned, someone owning total coin supply will able sign all proof stake blocks. compared proof work approach, proof stake requires significantly less computational power, and thus less energy usage. coin age and linear proof-of-stake fundamental most implementations proof stake, including that cloakcoin, the concept coin age. essentially, this measure how long coin holder has held onto coins without spending moving them. from the time transaction completed, coins that were part that transaction begin accumulate coin age (which starts zero). its simplest form, entitled "linear coin age", coins will accumulate minute/ hour/day/year coin age each minute/hour/day/year age. for example, person that holds coins for days accumulates 'coin days', approximately 'coin years' 'coin year' defined account for leap years, and thus not exactly days, but days). linear proof-of-stake designs have attracted criticism relation coin age. many argue that linear proof-of-stake encourages hoarding coins (which can have detrimental effect trade and transfer volume). another valid complaint against linear proof-of-stake relates the effect can have network security. linear proof-of-stake implementations often suffer due users periodically connecting the cloak network stake their coins and then disconnecting once all coin age has been destroyed. the user then waits until coin age has replenished before repeating the connect-stake-disconnect process. this does not provide the best security for the network, and proof-of-stake algorithm that rewards frequent constant staking would most beneficial cloakcoin and related proofof-stake currencies. ensure enigma cloakers are rewarded amply possible, coin age should removed from cloakcoin's proof-of-stake algorithm. this would ensure that cloakers receive both the full staking reward and any enigma cloaking rewards. the additional incorporation velocity component calculating staking rewards would further reward active enigma cloaking nodes, encouraging users participate enigma cloaking further increase their earned interest addition earned cloaking rewards. addition providing greater rewards actively participating users, improved proof-of-stake algorithm also provides the aforementioned improvements network security. combining and splitting enigma transactions enigma currently creates single 'cloaked' transaction per transfer. are currently working update the enigma framework that will allow multiple enigma transactions combined into enigma supertransaction. this will effectively contain multiple 'cloaked' transactions and provide even greater anonymity for cloak users. this extension will allow users select the number co-operative enigma transactions they require addition the number cloakers. this addition course remains fully decentralized, private and secure. another enigma sending enhancement currently being fleshed-out the cloak team the ability 'cloak' large amount cloak series smaller enigma transactions. achieve this, user would choose the amount cloak they would like send cloaked address. cloakcoin would then work the background create number smaller enigma transactions even amount, which can cloaked and submitted the cloak network over set period time. this batching process will compatible with 'combined' enigma transactions, providing further cloaking protection for transfers. faq how cloakers assist enigma transaction? cloakers provide one more inputs that are used 'cloak' the input from the sender. cloakers also supply series return addresses which return their input and also reward the cloaker with fee. the return addresses are chosen carefully order prioritize addresses with activity. this makes much harder for anyone performing blockchain analysis pinpoint the true output enigma transaction. the enigma system will also check the target address that 'cloaked' outputs mirror the true output closely possible. how long enigma transactions take complete? enigma transactions are currently allotted one minute complete. cloaking nodes helping 'cloak' enigma transaction will reserve the necessary funds until the enigma transaction completes the allotted time expires. the case expired aborted enigma transaction, funds are unlocked locally for re-use. how does enigma affect staking? any coins used enigma transaction (as sender cloaker) will have their coin-age reset. should noted however, that participating cloaking should provide much higher return than staking. the cloak team working revise the enigma algorithm for the upcoming hardfork release (enigma .). please see section 'the future enigma further development' for more details. need certain amount cloaks wallet balance enigma cloaker? you can offer your services for cloaking regardless the balance your cloakcoin wallet. when enigma cloaking enabled, cloakcoin will reserve portion your balance for participating enigma cloaking, for which you will earn cloaking reward. the default reserve amount ~%, but this value can adjusted the user. the chosen value with randomized order prevent linking enigma announcements advertised cloaking balance. should noted that wallets with higher balance have higher chance being chosen cloaker they are more likely have the required cloaking balance available for larger enigma transactions. how does this protect against time based attack where someone looks the blockchain for identical inputs and outputs? enigma transactions group the outputs and are ensured have multiple matching output amounts 'cloak' the recipient's output. can the originator enigma transaction determined examining the script signature determine signing order? no. during the signing process, script signature order randomized when combining the signatures. the sender and the participating cloakers this. can eavesdropper monitor the network watch for outgoing enigma transactions being submitted the network determine the true sender? no. all parties random order submit enigma transaction the network. this provides mitigation against such eavesdropping attacks. what the fee for enigma transaction? coins thru and higher coins. this used reward enigma nodes that assist with cloaking enigma transaction. the fee then mixed with the transaction and split between cloakers. not only reward for participants; but used help make determination the transaction amount impossibly difficult. each participant receives equally split enigma transaction. how the enigma fee determined? enigma fee the enigma fee charged per transaction basis these rates: cloak transaction amount amount enigma fee cloak fee does enigma require hard-fork the cloak network? no. older cloakcoin clients will handle enigma transactions without issues, but they will not able create them participate 'cloaking' them. the next revision enigma however, will require hard-fork due changes the underlying proof-of-stake algorithm, and support for additional script opcodes for market features (such block escrow). what the maximum number cloakers that can assist enigma transaction? the maximum number cloakers fixed the enigma system flexible and this number can easily extended. how does enigma protect against 'bad actors'? the enigma system features extensive ddos protection 'blacklist' nodes for the duration session. enigma node repeatedly refuses sign, they will excluded from enigma cloaking invitations for the remainder the current session. are currently researching additional methodologies for further penalizing uncooperative enigma nodes and will likely implement system that requires cloakers escrow nominal, refundable fee that could claimed penalty instances where node attempts block enigma transaction refusing sign the finalized transaction. should noted that whilst malicious nodes may attempt hamper enigma transaction, they are not able steal misappropriate any funds. how are stealth and enigma transactions detected/received? all incoming transactions are scanned. stealth transactions are scanned for first (using the default ephemeral pubkey contained random op_return output). after this, enigma transactions are then scanned for. enigma transactions also use the standard ephemeral pubkey, but payments use additional step involving further derived key. enigma outputs are generated using hash the ephemeral pubkey, private stealth address hash and the output index. when scanning for enigma transactions, the zero-index payment addresses are generated for each owned stealth address [hash(ephemeral_pubkey, hash_stealth_secret, )]. match found for the zero-index stealth address, additional addresses are generated for the remaining indexes [num_tx_outputs] and these are scanned against detect payments. see findenigmatransactions wallet.cpp for more info. similar scanning method employed cloakers prior signing enigma ensure they are getting reimbursed correctly. see getenigmaoutputsamounts wallet.cpp for more info. references http://bitcoin.org https://en.bitcoin.it/wiki/category:mixing services https://wiki.openssl.org/index.php/elliptic_curve_diffie_ hellman http://blog.ezyang.com///secure-multiparty-bitcoinanonymization https://bitcointalk.org/index.php?topic=. (coinjoin: bitcoin privacy for the real world) https://bitcointalk.org/index.php?topic=. (proof stake instead proof work) https://en.bitcoin.it/wiki/proof_of_stake https://en.bitcoin.it/wiki/deterministic_wallet https://github.com/bitcoin/bips/blob/master/bip-. mediawiki http://www.onion-router.net