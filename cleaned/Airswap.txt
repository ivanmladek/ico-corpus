swap: peer-to-peer protocol for trading ethereum tokens michael oved, don mosites june team@swap.tech abstract present peer-to-peer methodology for trading erc tokens the ethereum blockchain. first, outline the limitations blockchain order books and offer strong alternative peer-to-peer token trading: off-chain negotiation and on-chain settlement. then describe protocol through which parties are able signal others their intent trade tokens. once connected, counterparties freely communicate prices and transmit orders among themselves. during this process, parties may request prices from independent third party oracle verify accuracy. finally, present ethereum smart contract fill orders the ethereum blockchain. introduction the number digital assets ethereum over the past twelve months has increased aggressively more and more use cases are implemented smart contracts. our thesis that this trend will continue into the future; such believe this growth will augment the demand swap into and out assets users move between use cases rebalance their tokenized portfolios. exchanges based blockchain order books are not without inherent limitations, many which can mitigated the design decisions outlined this paper. seek provide alternative blockchain order books specifying set protocols that unlock asset liquidity and free the ethereum ecosystem progress without such limitations. order books order books offer highly automatable way match supply and demand given tradeable asset. traditionally, these are centralized and are combined with order execution, which allows orders created, executed, and canceled central source truth. the spirit decentralization, order books have been redesigned for blockchains. however, deploying order book blockchain presents several constraints. blockchain order books not scale. executing code blockchain incurs cost, automated order-cancel-order cycle quickly becomes expensive and defeats the strength order book high performance, automatable matching system. indeed, that matching algorithm running the blockchain, party placing orders will incur execution cost that increases substantially with the size the order book. blockchain order books are public. because the transaction create order the blockchain processed miners, those miners are privy order before its posted the book. this creates opportunity for front-running that could materially affect the original order. additionally, because the order published publicly, the order price the same for everyone, removing suppliers ability tailor liquidity. blockchain order books are unfair. physically distributed systems inherently suffer latency between their nodes. miners are geographically distributed, sophisticated parties may able colocate, detect orders, and outperform blockchain latency, effectively acting order information before other parties. this information asymmetry may very well dishearten less sophisticated parties from taking part the ecosystem all. peer-to-peer (pp) alternatively, peer-to-peer trading enables individual parties trade with each other directly. most the transactions make day day are peer-to-peer: buying coffee cafe, selling shoes ebay, buying cat food amazon. because these are private transactions between people businesses, each party knows and ultimately chooses with whom they transact. peer-to-peer trading scales. orders are transmitted between individual parties and are one and done opposed orders public exchange with guarantee completely fill. this makes cancels order book regular occurrence, whereas peer-to-peer orders are likely filled because they are provided parties that have already expressed interest. additionally, peer-to-peer supply and demand matching can solved through lightweight peer discovery opposed expensive algorithmic matchmaking regardless whether off chain. peer-to-peer trading private. once two parties have found and chosen trade with each other, third parties are required negotiate. the communication between these parties remains private for the duration the negotiation, removing the opportunity for other parties act order request behavior. only when the order submitted filled will become public knowledge. peer-to-peer trading fair. because orders are created and transmitted directly between two parties, outside participants can have advantage. long they are working with multiple independent parties, participants can get prices that are comparable better than what they would achieve exchange. additionally, those pricing orders can aggressively without fear being taken advantage automated, low-latency trading strategies. the scalability, privacy, and fairness constraints imposed blockchain order books have necessitated alternative. todays ethereum ecosystem needs open peer-to-peer solution for asset exchange. introducing swap swap protocol facilitate true peer-to-peer ecosystem for trading tokens the ethereum blockchain. the following extensible specification that supports efficient counterparty discovery and negotiations. these protocols are intended become foundation for the asset trading ecosystem and accelerate ethereum ecosystem growth. publishing this paper and opening for discussion, seek comments from ecosystem stakeholders with the aim produce high-quality protocols enable wide variety real-world applications. peer protocol with only few messages passed between counterparties, trades can negotiated quickly, fairly, and privately. for the purposes this document, maker the party that provides order, and taker the party that fills it. because each party peer, any party can assume the role maker taker any time. tokens the following specification are erc compliant and any token that implements the standard can traded using this protocol. the core protocol sequenced the following diagram. the maker and taker perform trade negotiation off-chain. the contract below ethereum smart contract, which the taker calls when ready fill order the blockchain. maker taker contract figure request, provide, and fill order taker calls getorder the maker. maker replies with order. taker calls fillorder(order) the contract. order api the following apis are transport-agnostic remote procedure calls (rpc) used communicate among peers and services. examples use token tickers instead addresses, but the actual calls require addresses erc compliant tokens. the call signatures below are for discussion purposes further technical details are published separate document. the order api off-chain and specifies asynchronous calls made between counterparties during trade negotiation. implementor may choose serve request-provide cycle synchronous request-response. because order signed the maker, the taker able later submit the smart contract filled. getorder(makeramount, makertoken, takertoken, takeraddress) called taker maker, requesting order trade tokens. example: want buy gno using bat." getorder(, gno, bat, provideorder(makeraddress, makeramount, makertoken, takeraddress, takeramount, takertoken, expiration, nonce, signature) called maker taker, providing signed order for execution. example: "i'll sell you gno for bat." provideorder(, gno, bat, quote api quotes are for indicating price information between parties and are not executable. quotes can later turned into orders the conditions are met for both counterparties. getquote(makeramount, makertoken, takertokens) called taker maker, requesting quote specific tokens. example: "how much would cost buy gno using bat?" getquote(, gno, [bat]) providequote(makeramount, makertoken, takeramounts) called taker maker, providing quotes taker tokens. example: "it will cost you bat for gno." providequote(, gno, {bat: indexer protocol indexer off-chain service that aggregates and matches peers based their intent trade: whether prospective makers and takers wish buy sell tokens. indexers are off-chain services that aggregate this intent trade and help match peers based intent buy sell specific tokens. many prospective makers can signal intent trade, and when taker asks the indexer find suitable counterparties, there may multiple results. once the taker has found maker with whom they would like trade, they proceed negotiate using the peer protocol above. once agreement reached between maker and taker, the order filled the smart contract. the interactions between maker, taker, and indexer are illustrated the following diagram. the maker, taker, and indexer all operate away from the blockchain and communicate any preferred messaging medium. indexer maker taker contract figure find counterparty and make trade maker calls addintent the indexer. taker calls findintent the indexer. indexer calls foundintent(maker) the taker. taker calls getorder the maker. maker replies with order. taker calls fillorder(order) the contract. the interaction between several makers, taker, and indexer illustrated the following diagram. each maker independently announces their intent. the taker asks find makers with specific intent, and the indexer returns list ethereum addresses and details. maker maker maker indexer taker ... maker figure makers call addintent, taker calls findintent the indexer several makers call addintent the indexer. taker calls findintent the indexer. indexer calls foundintent(maker) the taker. once taker has found suitable makers, they may use the order api request orders from each maker weigh them against each other. the taker has decided fill given order, they will make fillorder call the smart contract. maker maker taker contract maker figure taker calls getorder makers, taker calls fillorder contract taker calls getorder several makers. several makers reply with orders. taker selects order and calls fillorder(order) the contract. indexer api the indexer api manages intent trade, which signaled between peers. the following calls are made between peers and indexer. addintent(makertoken, takertokens) add intent buy sell some amount token. example: want trade gno for bat." addintent(gno, [bat]) removeintent(makertoken, takertokens) remove intent trade tokens. example: longer interested trading gno for bat." removeintent(gno, [bat]) getintent(makeraddress) list active intent associated with address. example: "list the tokens that [makeraddress] wants trade." getintent() findintent(makertoken, takertoken) find someone willing trade specific tokens. example: "find someone trading gno for bat." findintent(gno, bat) foundintent(makeraddress, intentlist) the indexer found someone with intent trade. example: "found someone selling gno for bat." foundintent(, [{makeramount: takertokens: [bat]}) makertoken: gno, oracle protocol oracle off-chain service that provides pricing information makers and takers. when pricing order prior delivering taker, maker may ask the oracle for what considers fair price suggestion. likewise, having received order, taker may ask the oracle check the price the order verify that it's fair. the oracle provides this pricing information help both the maker and the taker make more educated pricing decisions and smooth the process trade negotiation. oracle maker taker contract figure maker querying oracle before providing order taker calls getorder the maker. maker calls getprice the oracle. oracle returns price the maker. after analyzing price information, maker provides order. taker calls fillorder(order) the contract. very similar interaction happens between taker and oracle when the taker receives order. oracle maker taker contract figure taker querying oracle before filling order taker calls getorder the maker. maker replies with order. taker calls getprice the oracle. oracle returns price the taker. after analyzing price information, taker calls fillorder(order) the contract. oracle api the oracle api used makers and takers determine order prices. suggestions and are not executable. getprice(makertoken, takertoken) called taker maker oracle get price. example: "what the current price gno for bat?" prices are getprice(gno, bat) provideprice(makertoken, takertoken, price) called oracle maker taker give price. example: "the current price gno for bat .." provideprice(gno, bat, smart contract ethereum smart contract fill cancel orders. fillorder(makeraddress, makeramount, makertoken, takeraddress, takeramount, takertoken, expiration, nonce, signature) atomic swap tokens called taker. the contract ensures that the message sender matches taker and ensures that the time indicated expiration has not passed. fill orders, peers must have already called approve the specified tokens allow the contract withdraw least the specified amounts. for token transfers, the contract calls transferfrom the respective tokens. the successful completion this function filled event broadcast the blockchain. example: want fill this order gno for bat." fillorder([maker], gno, [taker], bat, [expiration], [signature]) cancelorder(makeraddress, makeramount, makertoken, takeraddress, takeramount, takertoken, expiration, nonce, signature) cancellation order that has already been communicated taker but not yet filled. called the maker the order. marks the order already having been filled the contract subsequent attempt fill the order will fail. the successful completion this function canceled event broadcast the blockchain. example: want cancel this order gno for bat." cancelorder([maker], gno, [taker], bat, [expiration], [signature]) ether orders the smart contract supports trading ether (eth) for tokens. the order includes null takertoken address (x) the smart contract will check the value ether that was sent with the function call and transfer that behalf the taker the maker. summary the swap protocol serves growing demand for decentralized asset exchange the ethereum network. blockchain-based order books, while novel and certainly within the ethos our ecosystem, have limitations that believe ultimately make difficult for them compete with currently available centralized solutions. swap provides method that both decentralized and unaffected these limitations. implementing the protocol, participants gain access liquidity scalable, private, and fair way, without sacrificing access great pricing. the protocol and apis are extensible and encourage the community build applications with us. welcome feedback and look forward pushing the ethereum community forward with you.