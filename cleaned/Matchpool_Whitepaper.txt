matchpool philip saunders, yonatan ben shimon january abstract matchpool decentralized matchmaking protocol which uses group dynamics help many participants possible find love. can also used more generic platform for any kind paid membership community which can clearly define two sides interaction market. this paper presents the elements the platform: the ethereum smart contracts which handle the trust-sensitive ownership and reward structures, well the core game logic which makes work. finally lay out two year roadmap for launching and scaling the network, including detailed specification the guppy token (gup), which will play integral role its development. contents introduction strategies participants joiners hosts pools overview matchlock finding pools fee options notebooks dapplets ownership logic arrows divs other business models privacy trust policy centralization decentralization contracts guppies the purpose having token token specification price steps roadmap appendix introduction most dating apps the market today suffer from two core flaws. firstly, there tendency rely dehumanizing profiling strategies, the exclusion more effective forms matching. secondly, eager for subscription money, many apps often allow huge demographic imbalances occur the detriment user experience. study the globalwebindex was estimated that over location-based dating apps such tinder are used men. where tinder concerned, the abundance men and the scarcity women, mixed with lack real life social cues creates environment that neither fun nor ultimately successful for most users. matchpool solves these game-theoretic problems allowing users create pools their area with custom demographic specifications. pools can visualized cross between slack channels and meetup groups- federated, invite-only groups owned and run devoted matchmakers. this paper will describe the process which matchmakers are rewarded the network's internal token for matching new entrants successfully. the quality reputation particular pools measured against whether the joiner's particular goals have been met. what makes matchpool unique the matchlock feature, which keeps ratio between and certain number users enters the pool, then the matchlock will stop more from entering until the same number y's arrive. dating context this could apply gender, but the can also parameterized any use case where any arbitrary market polarity required. also there restriction for the and side the matchlock opposites. for entrepreneurial networking any other use case the and can identical (or completely unset). for lgbt dating pools the "gender" configuration both sides could the same. the pool founder configure the matchlock according the kind community they wish create. strategies social networks have two strategies for connecting users: profiling and pooling. before the internet, typical profiling strategy for social networking would something like "classified" the local paper. this might effective for advertising products vacancies where both sides are clear about what they want. good current example where this approach works well the job marketplace indeed.com. some users advertise what they are looking for, and other users compete meet that demand. then there's twitter, the other extreme. twitter, users have profile for sure, but most activity emerges spontaneously from human interaction. this example social network geared primarily towards pooling. pooling strategies applied dating the real world include things like bars, nightclubs, dancing, well deliberate forms matchmaking like speed-dating. all these activities have underlying element ritual distraction, which people need get over themselves. this important element has been recognized and practiced throughout human history, but missing from more atomized online approaches. matchpool implements combination the two. joiners have profiles, but only for sorting into pools, after which they can participate pool chats, play dapplets and events (organized the matchmaker for the group whole) dates with other pool members. the basic philosophy pools creating the right environment and then letting nature take its course. while pools have direct interest creating many matches possible, assume singles are already motivated. once inside pool, there little unnecessary mediation. creating intentional high trust community, there subtle pressure behave better and not engage spamming low-quality mass messaging. there tendency blockchain development and systems design lean heavily boilerplate notions "reputation" and "incentives", while ignoring the fact that reputation complex, emergent property other people's subjective impressions and market decisions. groups allow for this kind unmeasured (and unmeasurable) "reputation" emerge among their members without the need for some contrived score karma count. quantified reputation only relates the quality the pool whole, not individual participants. participants there are two kinds participants matchpool: joiners and hosts. joiners joiners are self-explanatory category: anyone who want join pool with the intention meeting someone that matches their particular interest. joiners have the following rough user journey: user supplies number "factors", details about themselves: name, age, gender, interests, personality type, sexual orientation, seeking relationship type, education level, income, ethnicity, religion, fitness, etc. this data confidential and encrypted, and only used for the purpose matching people into pools. user creates wallet and has the option buy guppies, either exchange from crypto purchase directly with fiat using their credit card. this for the purpose paying the entry fee into pools. user can see the various pools which exist within geographical proximity their location. depending the values they have provided, they will see pools they are qualified for. user enters the pool their choice pays the requisite entry fee (if applicable the business model the pool and other policies which can put place). new entrants have higher reward rate for matchmakers pair them up. during this initial period dateseekers will likely matched with several people. when users date they published their "notebook", which public log activities. the process logging event involves agreement with the other person before appears. users can events, message other dateseekers, play dapplets and dates until they are relationship, which point their journey complete. they have the option remain member the pool and act matchmaker for other dateseekers (thereby earning divs) leave. joiners are billed the pool monthly for membership. all billing matchpool denominated the network's own token, guppies (gup). joiners can act "helpers" the pool host, for example matchmaker, admin greeter. hosts the host the founder the pool and sets place the specifications regarding who can become member. helper the other hand can any member within the pool who acts matchmaker for other members. helpers propose matches between two other joiners who they believe would good partners. depending the kind proposed match- date, relationship, marriage- the helper will get different number arrows. table shows sample breakdown the reward system. this not the exact number; this should found with trial and error. the process for all these "matches" steps. action date meeting relationship engagement value arrow arrow arrows arrows table action-to-value list, configured host. anyone can start pitch involving two other users with event category: bob, alice date. bob and alice are notified, and can accept reject. they both accept, the event added their public notebook, which log activity. the proposer earns arrow. the trust model this interaction assumes few things. since both bob and alice are paying for membership the pool and their identities have been verified, they have incentive accept the match fraudulently. the event also posted both their public notebooks (similar facebook relationship status update). the matchpool app there will all the functionality for scheduling and arranging events well "stories" after the event has happened. use section and subsections organize your document. simply use the section and subsection buttons the toolbar create them, and we'll handle all the formatting and numbering automatically. arrows first all entitle the matchmaker certain share divs the pool. divs entitle the owner certain share the monthly subscription revenue. once matchmakers has collected certain number arrows, they have the ability start new pools. pools love composed single soul inhabiting two bodies. aristotle overview pool the basic unit matchpool, which features slack-like public chat interface well the ability send private messages along with other features including wallet. pools are established matchmakers two ways. the first way reserve escrow certain number matchpool tokens ("guppies") which held the pool for the duration that open. the second method simply that users who have achieved certain number arrows from matching people other pools. since successful matchmaking vital component the public reputation pools and the network whole, important that new pools should started people who have successful track record. matchlock the matchlock allows the host configure the demographic details two sides the interactionx and when starting pool, the host able configure the matchlock with the required factors for each side the interaction, including gender, age-range, education level, ethnicity, religion and geographical proximity. this can broad and detailed generic. when certain number type enters, the pool becomes unavailable users type until the same number type enters. one the issues with the matchlock that people may compelled change their details order get around the matchlock, however will develop number mechanisms the platform which will allow for peer authentication and dispute factors, including social media verification. the population limit set default, which approximately dunbar's number- the number personal relationships that the human mind can handle. but the host can also configure this parameter larger smaller limit desired. table example how the host can configure the matchlock, with each field having its own set valid factors. users who are registered the protocol with that list factors can then matched their group choice, long the matchlock not activated due demographic imbalance. male some college -km gup female some college -km gup table list example demographic configurations for the matchlock finding pools matchpool will implement front-end interface which will allow users search for pools different areas, matched with different interests. this respect will somewhat similar meetup.com; users can search various factors see something fits. the on-boarding process they will also shown list pools their area which fits their particular demographics and interests. fee options the matchlock configuration also defines the entry fee the protocol's internal currency for different groups well the ongoing monthly subscription fee. the example dating pool, this important because there may great deal variation between demand coming from males than females; which case would make sense for the price more expensive for one and cheaper (or even free) for others. the lock will prevent any demographic imbalances from occurring, however, when user for whatever reason unable enter locked pool, they can "register interest" joining. based these interest indicators, the host will able see the demand level and adjust the price accordingly. notebooks the notebook kind log which all matchpool users have. this log updates events such dates, relationship status update and "stories". whenever user goes date they have the option share story how went, which added their public notebook. dapplets dapplets are add-ons created developers who want add the matchpool protocol. practice dapplets work similar slack plugins but can enhance the experience number ways. one example would dapplet which implements "tinder" functionality: users can swipe through other users. good example where this works well sites like meetme.com, which had suite mini-games like "lunch money", "blind date" etc. which helped users meet and get know each other. dapplet developers are rewarded similarly matchmakers: one their apps creates match some kind, the dapplet developer earns arrows which translate into divs. the same way that individual within group can pitch match between and can game. for example "blind date" game creates real match, then the dapplet developer will earn the same number arrows and rewarded via the same process manual social match within the pool. will develop dapplet marketplace that pools can continuously incorporate new functionality. ownership logic arrows joiners pay certain fee for continual membership pools, which payable monthly. this payment made host. the host can operate matchmaker themselves within the pool, but other members can also act helpers, mentioned earlier. whenever matchmaker achieves successful pitch- defined whether two people mutually update their matchpool notebooks reflect the event- they are awarded "arrows". the host, the owner and founder the pool automatically has share. automatic share can allocated cupids too, but for the most part this breakdown what this might look like. figure the process pitching. divs over every epoch pool makes certain amount revenue, based member subscriptions. divs decide who owns this revenue. pool makes gup over given epoch, and user holds the divs that pool, they will receive gup the end the epoch. until that point, the funds are held escrow the smart contract and cannot moved. figure perms and vars denominated one. there are two categories divs: permanent divs and variable divs. variable divs are calculated using the following formula: totalrevenue tempdivs earnedarrows totalarrows [!h] this follows few steps. get the total revenue (intake guppies) then find the amount that allocated variable divs. find the users divs calculating the number arrows accumulated percentage the total arrows created during that epoch. multiply them find the amount due the user. permanent divs are pre-determined the owner/owners the pool, who can choose grant divs anyone. the share left over from permanent divs are given over helpers who match other users the platform, described earlier this paper. this breakdown permanent and temporary divs considered seperately. figure perms and vars considered separately. other business models there are basically three business models available hosts: entry fee subscription packages pay delivery some pools may want have alternate business models, for example implement escrow contract that pays half initially and half delivery. will facilitate these business models implementing them the form dapplets: the monthly subscription facility for membership will itself dapplet, while single membership with escrow will another option. when matchpool launches will provide basic suite dapplets that hosts can configure while opening the api allow developers contribute custom models. privacy the factors that define user's demographics are private default, and only revealed other users the platform with the users explicit consent. the last few years there has been struggle between the interests internet users and the interests governments the topic strong cryptography. matchpool will incorporated territory which will best allow for complete privacy for users. will also design the platform such way avoid holding centralized databases. this important avoiding hacking users data. one the potential pitfalls that people will use the network for socially undesirable purposes such prostitution selling drugs. the end the day matchpool cannot control exactly how people use it. what can provide the software and implement tools that people are able distinguish good pools from bad. one such feature that all pools will equipped with public profile that people can review and share stories about their experience within it. pools are used for socially undesirable purposes then will become quickly apparent. ultimately the community, which has stake its success, create and join environments which reflects their values. trust policy centralization decentralization one the major themes the crypto community has been the importance the concept decentralization. the origin this theme was satoshi nakamoto's conception bitcoin "trustless" currency- which doesn't rely particular authority guarantee the truth its record. the context apps, decentralization not unlimited good and itself. therefore trust policy matchpool breaks down into three categories: decentralized. federated. centralized. the trust-sensitive aspects the cryptocurrency and arrows are decentralized and can't meddled with. this also true for the core protocol. however apps and platforms rely continual development stay competitive. continual development requires developers have permissioned access update the software constantly. the front-end will centralized and under the control matchpool organization. here the breakdown: centralized front-end federated div distrdibution pool admission pool banning arrow rewards decentralized cryptocurrency arrows div payments table matchpool's trust policy contracts the core matchpool protocol which deals with the "rules" the game are decentralized using the ethereum virtual machine (evm). ethereum programmable blockchain which can run small units code called smart contracts. blockchains have become something buzzword it's good idea explain what they are and what they're useful for- and more importantly, what they're not useful for. "blockchain" general peer-to-peer network where every member (node) holds the same copy shared record database, which can't defrauded. the case bitcoin, this shared record behaves simple ledger addresses and balances bitcoin currency. blockchains are highly useful for trust-sensitive use cases where having particular institution controlling would lead conflicts interest where there risk exploiting trust counter users. proof-of-work blockchains, new entries can only added the record solving mathematical puzzles and providing cryptographic proof that the node has solved the puzzle. when this happens, the node allowed add certain number transactions "block", which appended the blockchain, making the record one block higher. ethereum adds the core functionality ledger-based blockchains adding "turing-complete" scripting language called solidity which can compile directly into evm opcodes. turing-completeness another buzzword which basically means language where any imaginable problem could theoretically expressed and solved, although should noted that ethereum there limit this complexity imposed network charges, expressed gas. guppies the purpose having token why not simply denominate all interactions the platform terms ether some other more well known cryptocurrency, instead creating appcoin from scratch? this fair point: there are many tokens out there which can somewhat confusing navigate. there are three main reasons for adopting the appcoin strategy: have way raise enough money able develop the platform. well-implemented crowdsales with carefully defined rights, targets and accountability structures are increasingly the best way for crypto projects both find capital and build community that has stake its success. have way reward new users for joining the platform itself. provide simple and universal measure value across every pool. facilitate opening pools and paying subscriptions. the beginning, the crowdsale investment matchpool idea and commitment see its fruition. gup embedded the platform every level the means denominating fees and divs. secondly one the most essential aspects any community-based app being able encourage people join. significant portion the token will reserved for the purpose rewarding limited number new users the platform the beginning: the number will capped about users. this similar approach that paypal took the early days its existence, where new customers were awarded pool has fee set gup per month, and award new users gup (for example), then the user can member the pool for two months before they will have buy guppies continue being member. matchpool were use ether medium exchange this would not possible. token specification matchpool's platform token, the guppy (gup) will initially distributed the form pre-sale. participants may acquire gup discounted rate pledging defined sum ether (eth) into the token sale smart contract. the contract will define withdrawal policy for the duration the crowdsale well other rules around multisignature spending and milestones. for users coming from other currencies will possible use third party conversion services like shapeshift kraken acquire ether for the purpose buying gup. the total duration the crowdfund will days. the first hour the crowdsale will power hour. during this period, ether will buy gup. after the first hour, the ratio will for the first three days. after three days will change and after two weeks will until close. the crowdsale will capped million usd, terms ether. soon this amount reached, the smart contract will stop accepting funds. the end the four-week period, token transfers will locked for two months. the total supply will gup, with the smallest available denomination being mill per guppy. the following table below shows the overall specification and breakdown the token. description total supply minimum denomination sold during crowdsale new user incentive team share advisory board early stage investors amount gup mill price steps total, million tokens will sold during the crowdsale. the total amount that will exist the beginning will million. time first hour first days first weeks exchange rate gup for eth gup for eth gup for eth investors will able withdraw their investment but only the defined steps. for example, investor bought gup for eth during power hour, they try withdraw after week they will get back the ether equivalent gup. ensure that incentives are aligned properly, will set list milestones the smart contract, for which external advisor (or multiple advisors) will have voting rights. this will for releasing funds from the core contract. will also the case that the core team will unable sell their own tokens until number milestones have been reached certain timeframe has passed (for example- after year). this avoid any sudden "dumps" which could potentially upset the price. also means incentives are aligned for long term commitment building matchpool viable platform. roadmap the roadmap for the launch matchpool. date december january feburary march august end year target plan out the platform and hone vision start working the mvp prepare for crowdsale launch crowdsale and experimental pool paris release production platform worldwide distribute all referral tokens users) table roadmap for the development the platform /// /// /// appendix @title guppy: the official matchpool token @author philip saunders @dev ropsten address: xecaffdbfbebcaa abi ipfs: https://ipfs.io/ipfs/qmngcsadydqmejpzxyzjcbtjdmpkdtvxokydyakkq pragma solidity ^..; contract guppy string public name "guppy"; string public ticker "gup"; uint public denom; uint public totalsupply; uint public availablesupply; uint public icosupply; uint public referralsupply; uint public millwei; uint public epoch; uint last; address[] public core; "deploy tokens" allow members vote for one member deploy particular function. mapping(address uint) public balances; mapping(address mapping(address uint)) cheques; mapping(bytes mapping(address uint)) functions; modifier system bool found; for(uint epoch) throw; modifier limited(bytes _deploy) if(functions[_deploy][msg.sender] value value balances[msg.sender] value; balances[to] value; transfer(msg.sender, to, value); return true; else return false; function createcheque(address recipient, uint value) returns (bool) if(balances[msg.sender] value value cheques[msg.sender][recipient] value; chequewrite(msg.sender, recipient, value); return true; else return false; function getchequevalue(address origin, address recipient) constant returns(uint) return cheques[origin][recipient]; function claimcheque(address origin, uint value) returns(bool) if(cheques[origin][msg.sender] value value (balances[origin] value) cheques[origin][msg.sender] value; balances[origin] value; balances[msg.sender] value; return true; else return false; function withdraw(uint amount) interval returns(bool){ if((balances[msg.sender] millwei) icosupply) throw; balances[msg.sender] _mint; icosupply _mint; availablesupply _mint; mint(msg.sender, _mint); function referral(uint _guppies, address _user) system if(_guppies referralsupply) throw; referralsupply denominate(_guppies); balances[_user] denominate(_guppies); availablesupply denominate(_guppies); admin methods function increasesupply(bytes _sig, uint _amount) limited(_sig) system interval totalsupply denominate(_amount); last now; function newicosupply(bytes _sig, uint _amount) limited(_sig) system interval if(_amount (totalsupply availablesupply)) throw; icosupply _amount; function newepoch(bytes _sig, uint span) system limited(_sig) epoch span; last now; function addcore(bytes _sig, address _core) limited(_sig) system core.push(_core); function removecore(bytes _sig, address _core) limited(_sig) system for(uint _amount) return _to.send(_amount); else return false; function corecall(bytes _sig, bytes _args) limited(_sig) system returns(bool) if(this.call(_sig, _args)) functions[_sig][msg.sender] return true; else return false; function coredelegate(bytes _sig, address _core) system returns(bool){ if(functions[_sig][msg.sender] functions[_sig][msg.sender] functions[_sig][msg.sender] return true; else return false; function corepropose(string _funcsignature) system bytes sig bytes(sha(_funcsignature)); for(uint core.length; i++) functions[sig][core[i]] function() msg.sender.send(msg.value);