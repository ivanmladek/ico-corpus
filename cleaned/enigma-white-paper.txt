originally published june for info enigma's current implementation please visit: https://www.enigma.co/developers enigma: decentralized computation platform with guaranteed privacy guy zyskind nathan alex 'sandy' pentland* abstract peer-to-peer network, enabling different parties jointly store and run computations data while keeping the data completely private. enigma's computational model based highly optimized version secure multi-party computation, guaranteed verifiable secret-sharing scheme. for storage, use modified distributed hashtable for holding secret-shared data. external blockchain utilized the controller the network, manages access control, identities and serves tamper-proof log events. security deposits and fees incentivize operation, correctness and fairness the system. similar bitcoin, enigma removes the need for trusted third party, enabling autonomous control personal data. for the first time, users are able share their data with cryptographic guarantees regarding their privacy. motivation since early human history, centralization has been major competitive advantage. societies with centralized governance were able develop more advanced technology, accumulate more resources and increase their population faster []. societies evolved, the negative effects centralization power were revealed: corruption, inequality, preservation the status quo and abuse power. turns out, some separation powers necessary. modern times, strive find balance between the models, maximizing output and efficiency with centralized control, guarded checks and balances decentralized governance. the original narrative the web one radical decentralization and freedom[]. during the last decade, the web's incredible growth was coupled with increased centralization. few large companies now own important junctures the web, and consequently lot the data created the web. the lack transparency and control over these organizations reveals the negative aspects centralization once again: manipulation [], surveillance [], and frequent data breaches []. bitcoin and other blockchains (e.g., ethereum) promise new future. internet applications can now built with decentralized architecture, where single party has absolute power and control. the public nature the blockchain guarantees transparency over how applications work and leaves irrefutable record activities, providing strong incentives for honest behavior. bitcoin the currency was the first such application, initiating new paradigm the web. the intense verification and public nature the blockchain limits potential use cases, however. modern applications use huge amounts data, and run extensive analysis that data. this restriction means that only fiduciary code can run the blockchain []. the problem is, much the most sensitive parts modern applications require heavy processing private data. their current design, blockchains cannot handle privacy all. furthermore, they are not well-suited for heavy computations. their public nature means private data would flow through every full node the blockchain, fully exposed. guyz@mit.edu, oznathan@gmail.com, pentland@mit.edu there strange contradiction this setup. the most sensitive, private data can only stored and processed the centralized, less transparent and insecure model. have seen this paradigm lead catastrophic data leaks and the systematic lack privacy are currently forced accept our online lives. enigma enigma decentralized computation platform with guaranteed privacy. our goal enable developers build 'privacy design', end-to-end decentralized applications, without trusted third party. enigma private. using secure multi-party computation (smpc mpc), data queries are computed distributed way, without trusted third party. data split between different nodes, and they compute functions together without leaking information other nodes. specifically, single party ever has access data its entirety; instead, every party has meaningless (i.e., seemingly random) piece it. enigma scalable. unlike blockchains, computations and data storage are not replicated every node the network. only small subset perform each computation over different parts the data. the decreased redundancy storage and computations enables more demanding computations. the key new utility enigma brings the table the ability run computations data, without having access the raw data itself. for example, group people can provide access their salary, and together compute the average wage the group. each participant learns their relative position the group, but learns nothing about other members' salaries. should made clear that this only motivating example. practice, any program can securely evaluated while maintaining the inputs secret. today, sharing data irreversible process; once sent, there way take back limit how used. allowing access data for secure computations reversible and controllable, since one but the original data owner(s) ever see the raw data. this presents fundamental change current approaches data analysis. design overview enigma designed connect existing blockchain and off-load private and intensive computations off-chain network. all transactions are facilitated the blockchain, which enforces access-control based digital signatures and programmable permissions. code executed both the blockchain (public parts) and enigma (private computationally intensive parts). enigma's execution ensures both privacy and correctness, whereas blockchain alone can only ensure the latter. proofs correct execution are stored the blockchain and can audited. supply scripting language for designing end-to-end decentralized applications using private contracts, which are more powerful variation smart contracts that can handle private information (i.e., their state not strictly public). the scripting language also turing-complete, but this not important its scalability. code execution blockchains decentralized but not distributed, every node redundantly executes the same code and maintains the same public state. enigma, the computational work efficiently distributed across the network. interpreter breaks down the execution private contract, illustrated figure resulting improved run-time, while maintaining both privacy and verifiability. the off-chain network solves the following issues that blockchain technology alone cannot handle: storage. blockchains are not general-purpose databases. enigma has decentralized offchain distributed hash-table (or dht) that accessible through the blockchain, which stores references the data but not the data themselves. private data should encrypted the client-side before storage and access-control protocols are programmed into the blockchain. enigma provides simple apis for these tasks the scripting language. public opi blockchain enigma :x-y private figure code execution model. privacy-enforcing computation. enigma's network can execute code without leaking the raw data any the nodes, while ensuring correct execution. this key replacing current centralized solutions and trusted overlay networks that process sensitive business logic way that negates the benefits blockchain. the computational model described detail section heavy processing. even when privacy not concern, the blockchain cannot scale clearing many complex transactions. the same off-chain computational network used run heavy publicly verifiable computations that are broadcast through the blockchain. off-chain storage off-chain nodes construct distributed database. each node has distinct view shares and encrypted data that the computation process guaranteed privacy-preserving and fault tolerant. also possible store large public data (e.g., files) unencrypted and link them the blockchain. figure illustrates the database view single node. shares encrypted data public data figure node's local view the off-chain data. network level, the distributed storage based modified kademlia dht protocol with added persistence and secure point-to-point channels, simulated using broadcast channel and public-key encryption. this protocol assists distributing the shares efficient manner. when storing shares, the original kademlia distance metric modified take into account the preferential probability node. privacy-enforcing computation this section, describe enigma's computational model. begin with brief introduction publicly verifiable secure mpc based state-of-the-art advances cryptography. then, describe series performance improvements secure mpc that makes the technology practical even when the network large: hierarchical secure mpc, network reduction and adaptable circuits. use enigma, developers write high-level code, where public parts are executed the blockchain and private parts are run off-chain, enigma's platform. call these private contracts, since they are smart contracts that can handle private information. overview secure multi-party computation privacy (passive adversaries) yao introduced the first solution secure two-party computation protocols []. the same paper, yao suggested the popular millionaire problem, describing two millionaires interested knowing which one them richer, without revealing their actual net worth. the decades since, the two-party problem has been generalized mpc, which refers the n-party case. for generalpurpose mpc, which every protocol could composed from circuit elementary mpc gates, two major approaches have been developed over the years: yao's garbaled (boolean) circuits and mpc based secret sharing. the latter has been more commonly used production systems (e.g., and []) and our focus well. threshold cryptosystem defined threshold, where the number parties and the minimal number parties required decrypt secret encrypted with threshold encryption. secret sharing example threshold cryptosystem, where secret divided among s.t. least are required reconstruct any subset parties cannot learn anything about the secret. linear secret-sharing scheme (or lsss) partitions secret shares such that the shares are linear combination the secret. shamir's secret sharing (or sss) example lsss, which uses polynomial interpolation and secure under finite field []. specifically, share secret select random degree polynomial q(x) q(x) the shares are then given [s]pi q(i). then, given any shares, q(x) could trivially reconstructed using lagrange interpolation and the secret recovered using q(). since sss linear, also additively homomorphic, addition and multiplication scalar operations could performed directly the shares without interaction. formally reconstruct({c[s]pi }t+ ]pi }t+ reconstruct({[s ]pi multiplication two secrets and somewhat more involved. each party would attempt locally compute the product two secrets, they would collectively obtain polynomial degree requiring polynomial reduction step t). for information theoretic setting, this result adds honest majority constraint (i.e., this true for the inputs, well any interim variables computed while the code evaluated. observant reader would notice that function evaluated from inputs outputs, the interim results generally become less descriptive and more aggregative. for simple functions functions involving very few inputs, this may not hold true, but since these functions are fast compute additional steps are needed. however, for computationally expensive functions, involving many lines code and large number inputs, can dynamically reduce the number computing nodes progress, instead having fixed for the entire function evaluation process. specifically, design feed-forward network (figure that propagates results from inputs outputs. the original code reorganized that process addition gates the inputs first, followed processing multiplication gates. the interim results are then secret-shared with nodes, and the process repeated recursively. scripting previously mentioned, end-to-end decentralized apps are developed using private contracts, which are further partitioned on-chain and off-chain execution. off-chain code returns results privately, while sending correctness proofs the blockchain. for simplicity, the scripting language similar syntax well-known programming languages. there are two major additions the scripting language that require more detail. private data types developers should use the private keyword specify private objects. this automatically ensures that any computation involving those objects remains secure and private. when working with private objects, the data themselves are not locally available, but rather reference them. addition layer mult. layer addition layer mult. layer output layer input input input output input input figure feed forward flow the secure code evaluation. data access there are three distinct decentralized databases living the system, each accessible through global singleton dictionary. specifically public ledger. the blockchain's public ledger can accessed and manipulated using for example, l[k] would update key for all nodes. since the ledger completely public and append-only, the entire history stored well and (read-only) accessible using l.get(k, t). dht. off-chain data are stored the dht and accessible the same way the public ledger is. default, data are encrypted locally before transmission and only the signing entity can request the data back. otherwise, using dht.set(k, p), where the key, the value and predicate, namely sets accessible through and only satisfied. supply several built-in predicates the language such limiting access list public keys. encryption turned off, the default predicate p(x) the data are public but distributed off-chain. mpc. syntactically, using mpc equivalent dht, but the underlying process differs. particular, executing c.set(k, secret shares the shares are distributed potential computing parties that store their shares their local view. now can used specify who can reference the data for computation using vref c[k], without revealing default, only the original dealer can ask for the raw data back running c.declassif y(k), which similar the sharing process, collects shares from the various parties and reconstructs the secret value locally. addition, any other entities belonging the same shared identity can reference the data for computation. for details about shared identities see section note that for simplicity, addressed all keys dht and dictionaries using single namespace, whereas practice finer granularity available, that they can segmented databases, tables, and finer hierarchies. blockchain interoperability this section show how enigma interoperates with blockchain. specifically, detail how complex identities are formed using digital signatures, which are automatically compatible with blockchains. then continue describe detail the core protocols linking enigma's off-chain storage and computation blockchain. identity management recent survey paper divided blockchain-inspired technologies into two: fully decentralized permission-less ledgers (e.g., bitcoin, ethereum) and semi-centralized permissioned ledgers (e.g., ripple) []. the paper, the author argues that there inherent trade-off between having pseudo-anonymous system, where one trusted and all information must remain public, and having somewhat centralized system with trusted nodes that can verify true underlying identities. with off-chain technology linked blockchain, this trade-off can avoided while the network remains fully decentralized. for this work, define extended version identities, one that captures shared identities across multiple entities and their semantic meaning. formally, the pseudo-anonymous portion shared identity )-tuple sharedidentityp (addrp pksig pksig pksign where denotes the number parties. should clear that for revert the special pseudo-identity case. complete our definition shared identities, incorporate the idea meta-data. meta-data encapsulates the underlying semantic meaning identity. primarily, these include public accesscontrol rules defined the same predicates mentioned earlier, which the network uses moderate access-control, along with any other public private data that relevant. for example, alice may want share with bob her height, but not her weight. alternatively, she may not even want tell bob her exact height, but will allow him use her height aggregate computations. this case, alice and bob can establish shared identity for this purpose. alice invokes private contract that shares her height using alice height alice height, which bob can reference for computations, without accessing alice's height value directly. the default mpc predicate establishes that alice's pseudonym the owner the shared information and that bob has restricted access it. the predicate, shared identity's list addresses and reference the data are stored the blockchain and collectively define the public meta-data, other words information related the identity that not sensitive but should used publicly verify access rights. any additional meta-data that private, other words that only alice, bob and perhaps several others should have access could securely stored off-chain using the dht. should now clear how our system solves the need for trusted nodes. always, public transactions are validated through the blockchain. with shared identities and predicates governing accesscontrol stored the ledger, the blockchain can moderate access any off-chain resources. for anything else involving private meta-data, the off-chain network can act trustless privacy-preserving verifier. link protocols now discuss the core protocols linking the blockchain off-chain resources. specifically, elaborate how identities are formed and stored the ledger; and how off-chain storage (dht) and computation (mpc) requests are routed through the blockchain, conditional satisfying predicates. access control protocol describes the process creating shared identity and protocol implements the publiclyverifiable contract for satisfying predicates. store and load storing and loading data for direct access via the dht are shown protocol for storing data, write permissions are examined with the given qstore predicate. the storing party can provide custom predicate for verifying who can read the data. this the underlying process that abstracted away using the dht singleton object the scripting language. algorithm generating shared identity input: {pi parties, olicypi }i= output: ledger stores reference the shared identity. addrp acl for (pksigi sksigi gsig addrp addrp pksigi acl[pksig a[pi end for (addrp acl) send signed tx(m) the network procedure tore dentity(addrp acl) l[addrp acl end procedure algorithm permissions check against the blockchain input: pksigi the requesting party signature, addrp the shared identity's address, predicate verifying has sufficient access rights. output: procedure heck ermission(pksigi addrp l[addrp then acl l[addrp q(acl, pksigi then end end return end procedure algorithm storing loading data (x) input: pksigi addrp (data), qread predicate for verifying future read access. output: successful, returns the pointer the data (predicate), o.w. (x) procedure tore(pksigi addrp qread checkp ermission(pksigi addrp qstore true then h(addrp (x) l[ax qread dht [ax return end return end procedure input: pksigi addrp the address the data (predicate) output: successful, returns the data o.w. procedure oad(pksigi addrp (x) qread l[ax (x) checkp ermission(pksigi addrp qread true then return dht [ax end return end procedure share and compute share and compute, illustrated protocol are the mpc equivalent store and load protocols, since they enable processing. internally, they store and load shares from the dht and allow working with references the data while keeping the data secure. algorithm secure computation and secret sharing protocols (x) input: pksigi addrp (data), xref reference for computation, qcompute predicate verifying computation rights. output: successful, returns pointer xref for future computation, o.w. (x) procedure hare(pksig addrp xref qcompute [x]p ss(n, peers sample peers for peer peers (peer) send [x]p peer secure channel end for (x) return store(pksigi addrp xref qcompute end procedure input: pksigi addrp axref reference data address, unsecure code rewritten secure protocol. output: successful, returns (x) without revealing o.w. procedure ompute(pksig addrp axref xref load(pksigi addrp axref xref then generate secure computation protocol from return (xref end return end procedure incentives since enigma not cryptocurrency blockchain, the incentive scheme based fees rather than mining rewards, where nodes are compensated for providing computational resources. full nodes are required provide security deposit, making malicious behaviour punishable. security deposits possible attack mpc protocols takes advantage the lack guaranteed fairness the protocol. under certain conditions, malicious party can learn the output and abort the protocol before other parties learn the output well. while this attack, when carried out majority, cannot prevented, can penalized. using bitcoin security deposits for punishing malicious nodes mpc has been investigated several scholars recently use similar model, and extend penalize other malicious behaviors such breaking correctness, which validated the spdz protocol (see section ..). participate the network, store data, perform computations and receive fees, every full-node must first submit security deposit private contract. after each computation completed, private contract verifies correctness and fairness were maintained. node found lie about their outcome aborts the computation prematurely, loses the deposit which split between the other honest nodes. the computation continued without the malicious node (e.g., setting its share the data computation fees every request the network for storage, data retrieval, computation has fixed price, similar the concept gas ethereum. unlike ethereum where every computation run every node, enigma different nodes execute different parts each computation and need compensated according their contribution, which measured rounds. recall that every function reduced circuit addition and multiplication gates, each which takes one more rounds. node participating computation paid the weighted sum the number rounds contributed and the operations performed (addition, multiplication). since the platform turing-complete the exact cost request cannot always pre-calculated. therefore, once the computation finalized, the cost each request deducted from account balance each node maintains. request will not through unless the account balance over minimum threshold. storage fees fees for data storage are market based and time limited. the hosting contract automatically renewed using the owner's account balance. the balance too low, access the data will restricted and unless additional funds are deposited, the data will deleted within certain amount time. applications data marketplace direct consumer business marketplace for data. with guaranteed privacy, autonomous control and increased security, consumers will sell access their data. for example, pharmaceutical company looking for patients for clinical trials can scan genomic databases for candidates. the marketplace would eliminate tremendous amounts friction, lower costs for customer acquisition and offer new income stream for consumers. secure backend many companies today store large amounts customer data. they use the data provide personalized services, match individual preferences, target ads and offers, etc. with enigma, companies can use the data for the same purposes they today, without actually storing processing the data their servers, removing security risks and assuring the privacy their customers. internal compartmentalization large organizations can use enigma protect their data and trade secrets from corporate espionage and rogue employees. employees can still use and analyze data for the benefit the organization, but won't able steal any data. productivity inside organizations would improved since more people can have access more data, and costs security would lower. n-factor authentication voice, face and fingerprint recognition stored and computed enigma. only the user ever has access these data. policies for when and additional keys are required can set inside private contract, unexposed any potential attacker. identity authenticating and securely storing identities fully anonymous, yet provably correct, fashion trivial enigma and requires little several lines code. the process simple user secretshares her personal information required for authentication. when the user logs in, authenticating private contract executed, validating the user and linking her real identity with public pseudoidentity. the process completely trust-less and privacy-preserving. iot store, manage and use (the highly sensitive) data collected iot devices decentralized, trustless cloud. distributed personal data stores store and share data with third parties while maintaining control and ownership. set specific policies for each service with private contracts. identity truly protected since the decision share data always reversible services have access raw data, all they can run secure computations it. crypto bank run full-service crypto bank without exposing private internal details. users can take loans, deposit cryptocurrencies buy investment products with the autonomous control the blockchain, without publicly revealing their financial situation. blind e-voting votes anything, from political elections company board meetings, without exposing anything besides the final outcome. not only the privacy each voter maintained, even the actual votecount can remain private. for example, the elections require any kind majority vote, but details about the distribution, unanimous decision would indistinguishable from one decided single vote. bitcoin wallet decentralized private key generation multiple enigma nodes locally create segment the key, whereas the full key only ever assembled the user. trail evidence left anywhere. decentralized transaction signing transactions signed without ever exposing the private key leaving trail. decentralized controls set spending limits, multi-sig, checklocktimeverify like controls, and more with private script. lock time, limits number required signatures are completely invisible potential attacker. references diamond, jared, and germs guns. steel: the fates human societies. new york: norton, montesquieu, charles. the spirit the laws. digireads. com publishing, perry, barlow john. declaration the independence cyberspace. electronic frontier foundation vindu goel. facebook tinkers with users emotions news feed experiment, stirring outcry. the new york times, james ball. "nsas prism surveillance program: how works and what can do." the guardian, bill hardekopf. "the big data breaches forbes, nick szabo. "the dawn trustworthy computing." nick szabo. "the god protocols." nakamoto, satoshi. "bitcoin: peer-to-peer electronic cash system." consulted (): clark, joseph bonneau andrew miller jeremy, arvind narayanan joshua kroll edward, and felten. "sok: research perspectives and challenges for bitcoin and cryptocurrencies.", security and privacy (sp), ieee symposium on. ieee, maymounkov, petar, and david mazieres. "kademlia: peer-to-peer information system based the xor metric." peer-to-peer systems, pp. springer berlin heidelberg, yao, andrew "protocols for secure computations." ieee annual symposium foundations computer science. ieee, ben-david, assaf, noam nisan, and benny pinkas. "fairplaymp: system for secure multiparty computation." proceedings the acm conference computer and communications security. acm, bogdanov, dan, sven laur, and jan willemson. "sharemind: framework for fast privacypreserving computations." computer security-esorics springer berlin heidelberg, team, viff developement. "viff, the virtual ideal functionality framework." shamir, adi. "how share secret." communications the acm (): ben-or, michael, shafi goldwasser, and avi wigderson. "completeness theorems for noncryptographic fault-tolerant distributed computation." proceedings the twentieth annual acm symposium theory computing. acm, baum, carsten, ivan damgrd, and claudio orlandi. "publicly auditable secure multi-party computation." security and cryptography for networks. springer international publishing, damgrd, ivan, al. "practical covertly secure mpc for dishonest majorityor: breaking the spdz limits." computer securityesorics springer berlin heidelberg, cohen, gil, al. "efficient multiparty protocols via log-depth threshold formulae." advances cryptologycrypto springer berlin heidelberg, swanson, tim. "consensus-as-a-service: brief report the emergence permissioned, distributed ledger systems.", bentov, iddo, and ranjit kumaresan. "how use bitcoin design fair protocols." advances cryptologycrypto springer berlin heidelberg, andrychowicz, marcin, al. "secure multiparty computations bitcoin." security and privacy (sp), ieee symposium on. ieee,