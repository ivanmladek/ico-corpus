ite fetch: technical introduction decentralised digital world for the future economy toby simpson, humayun sheikh, thomas hain, troels ronnow, jonathan ward revision revised release, february https://fetch.ai info@fetch.ai https://t.me/fetch_ai (c) outlier venture reader note: this document subject continuous change and refinement. please ensure that you have the latest version before relying information contained within it. ite revisions fetch technical introduction https://fetch.ai, (c) fetch.ai limited revision details march initial release june revised release february updated for upcoming token sale. updates team, terminology, some new technology details, removal smart ledger text that duplicated the scalable ledger yellow paper more detail and minor corrections throughout (ts/am) (c) date v..: february ite fetch technical introduction https://fetch.ai, (c) fetch.ai limited overview today's digital world increasingly sub-optimal and feels oddly, and somewhat ironically, disconnected given how "connected" now are. full underutilised assets: hotel rooms lie empty, cars sit parked and unused for over their lives, half empty shipping containers travel the world, overcrowded, poorly optimised transport infrastructure eats our sanity, power grids have peaks and troughs usage that are shocking and organising even the simplest thing requires herculean effort hunting and gathering. short, live increasingly complex world that must somehow find ever more ridiculous ways adapt rather than one that figures out how adapt us, and, for that matter, itself. centralised systems are poorly placed solve today's complex problems they can't effectively work together find solutions from the bottom-up. propose open, decentralised system where large numbers simple things can cooperate--unsupervised--to solve problems without having had prior exposure them. fetch achieves this creating decentralised digital world where collective super intelligence actively delivers answers you: world where information that benefits you and information that might benefit you delivered effortlessly. fetch brings the world closer together and delivers power the individual. provides solutions problems that one has yet dared address, enabled system that can handle huge numbers tiny transactions conducted our digital representatives. (c) don't fix the old economy, present entirely new one. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited introduction technology three layers oef: decentralised life-support for autonomous agents enabling intelligence, deploying intelligence geography digital world: domain spaces anatomy aea agent types ite table contents doing business the fetch smart ledger the limitations existing methodologies ledger requirements useful proof-of-work (upow) scalable ledger intelligence about the markets for the markets machine learning and artificial intelligence applications and use cases transforming the data industry decluttering our lives with more opportunities more joined approach transport and energy other applications and data transformation real-time market shaping and construction sample use case development and deployment development philosophy full and thin nodes network participation app: not just wallet agents and interfaces data privacy and protection fetch: biographies and background fetch.ai team advisory team security and attack resistance (c) v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited introduction ite fetch decentralised digital representation the world which autonomous software agents perform useful economic work. this means that they can perform tasks, such delivering data providing services, and are rewarded with digital currency for their efforts the fetch token. these agents can thought digital entities: life-forms that are able make decisions their own behalf well behalf their stakeholders (individuals, private enterprises and governments for example). fetch's digital world exposed agents via its open economic framework (oef) and underpinned unique smart ledger technology deliver high performance, low cost transactions. the ledger delivers useful proof-of-work that builds market intelligence and trust over time growing the value the network used. fetch can neatly interfaced existing systems with minimal effort, allowing take advantage the old economy whilst building the new: plug existing data fetch and watch markets spontaneously form from the bottom up. applications: the applications such technology are many. bringing data life, fetch solves one the greatest problems the data industry today: data can't sell itself. with fetch, can: data able actively take advantage any opportunity exploit itself the marketplace environment that's constantly reorganising make that task easy possible. internet-of-things (iot) devices inhabited fetch agents can increase utilisation capitalising short-lived opportunities sell the information that they possess existing well new markets: agent vehicle can provide weather and road conditions simply relaying the activity its windscreen wiper and washer activity. fetch's decentralised digital world enables the emergence new marketplaces and allows this "unreal estate" place relevant markets near each other for ease exploration. the ability agents serve representatives for data, hardware and services enables better coordinated delivery highly even loosely connected services such transport and insurance. fetch creates huge population digital data analysts and sales agents who can work together, alone, with human corporate masters reduce the cost delivering complex solutions our daily lives. new opportunities: fetch's autonomous agents actively push their value out those who need who unknowingly need it. the open economic framework provides digital world for them inhabit that grows value used: over time, the collective intelligence that formed provides unparalleled guidance allowing for high speed, high reliability transactions. the network's expanding compute power provides all agents with the ability gain new insights and understanding from their data. with machine learning technology integrated throughout the system, from the ledger the agents themselves, network that enables, encourages and deploys intelligence, and that actively creates new knowledge. fetch provides the node structure, the oef api, and agent development toolkits make agents easy deploy. additionally, entire new industries can built from aea construction opportunities exist replace human intermediaries with trusted digital agents. previously unprofitable data and services become valuable with fetch, the cost and friction applying them dramatically reduced. data and hardware can now get their own two feet, get out there and sell themselves entirely free human intervention. (c) fetch token: fetch are issuing fixed number divisible tokens that are used the network the digital currency for all transactions, well for network operations such secure communications. tokens can also serve refundable deposit for both nodes and agents wishing perform certain operations (as security mechanism that discourages bad behaviour). fetch secures its foothold the data, transport, services, and iot industries its token grows demand each sector makes larger and larger contribution the fetch network's economic throughput. initial utility token will issued ethereum for the token sale. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited technology three layers ite fetch actively puts value-generating agents contact with those that require it. the world dynamically reorganised remove friction from the process. trust and reputation information provided allow users and agents transact with the least risk. our underlying ledger delivers digital currency and decentralised transaction system capable scaling more effectively than alternatives, that can support many tens thousands transactions per second virtually cost. enable improved utilisation iot devices and bring data marketplaces life. deliver this, have developed three key layers technology: figure fetch's three layers. layer the autonomous economic agents, aeas, which live the environment provided layer the oef. underpinning the oef the ledger that ensures the integrity the global truth the decentralised network and feeds the learning that provides trust, reputation and network intelligence. layer and form node. fetch's peer-to-peer network made many such nodes connected each other different ways. machine learning and intelligence supported all three levels. the coming sections, look this intelligence stack and the aea, oef and smart ledger layers more detail. oef: decentralised life-support for autonomous agents (c) the open economic framework (oef) provides life-support for autonomous software agents. these can thought digital entities that are able make their own decisions. they exist digital world that dynamically reorganises itself present the optimal environment for agents operate in. primarily, this means rearranging space place agents that can provide value "close" agents that are searching for that value. each agent therefore "sees" different world from its perspective: world that reorganised for its perceived and declared needs. the oef the high-level node functionality: the layer top the raw protocol and ledger that delivers this environment and all the other operations agents need order about their day-to-day work. figure below, shows the oef's internal organisation and structure: v..: february ite fetch technical introduction https://fetch.ai, (c) fetch.ai limited figure multiple oef nodes collectively make the decentralised environment. the two key apis are shown one for the aeas access their services and connect to/exist the world and one for the peer-to-peer protocol which carries both high-level and low-level commands. high-level commands include operations such agent transfer, exploration, search and discovery, whereas low-level commands consist operations for consensus, peer trust, digital currency, transactions and protocol control. the oef's primary api, exposed agents, supports number base-level commands. some these commands are free, others require small token cost. other commands require what term "trolley token" small deposit fetch tokens that refunded the operation gracefully completed. operation costs are decoupled from the fetch token similar way that "gas" the ethereum network. thus there need convert fetch tokens operational fuel before commencing operation. the node that performs the conversion receives the fetch tokens exchange for providing that service. the following table lists some the commands supported the oef agent api: cost deposit summary register yes register aea node unregister unregister aea from node (refunds trolley token) register yes register for search notification (*) unregister from unregister from search notification node transfer agent move: move from one node another communicate simple, secure agent agent communication (c) command there constantly fluctuating conversion rate from the fetch token the fetch operation fuel. fetch operation fuel used pay the execution fee for operations the fetch network. this separation high and low-velocity tokens allows large numbers small transactions without the issues usually associated with such things. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited cost deposit summary contract call perform smart contract function call processing request yes perform trusted decentralised computing operation data store store data external service (bigchaindb, etc.) transact yes perform simple transaction (**) low-risk transact yes transact with simple escrow system trust enquiry perform trust enquiry node/aea market-intel market intelligence enquiry advertise advertise available services search yes perform network service search explore space perform environment exploration (***) gather area perform area gather for offline exploration opportunity search yes search for unfulfilled badly categorised searches (****) construct zkp unknown yes construct zero-knowledge proof service discovery ite command discover available services registers for notification about certain searches. this allows agents notified and potentially respond searches that fulfil the requirements geographic and economic dimensions. the cost depends the complexity the filter. general "all" registrations are not generally permitted. **) transaction costs are near zero, but not actually zero. when large numbers transactions are occurring, this provides further incentive for nodes provide high-quality service and verify other nodes' actions. ***) exploration the "eyes" the decentralised virtual world. with the appropriate filters and use, allows agents build visualisation what around them. ****) opportunity search allows the network learn over time the correlation between requests and what was eventually used satisfy those requests. builds knowledge and facilitates real-time response previous requests with previously unknown solutions. should noted that the numbers presented the above oef command table are provisional, subject continued economic modelling and are for illustrative purposes only. fetch.ai's virtual machine available github view and detailed papers are being prepared outline on-ledger computing and oef commands. the reward for providing these commands aeas given the node's operator. figure shows the wallet node. this reward encourages the node's operator provide consistent, reliable service and positioned economically viable position. (c) commands such node transfer, explore, gather and search allow agents move around and view the environment which they live. trust and market enquiries permit agents learn about the reputation and trustworthiness other agents they encounter well the nodes that they are attached to. advertise, discovery and transact allow agents business. the network supports simple and secure agent-to-agent communications and provides interface commands for large-scale data storage and recovery third-party systems such bigchaindb other providers. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited agents need not restrict themselves one node. indeed, wise move for agent have more than one footprint the fetch world. they can this registering multiple nodes. this provides them with additional protection against failure, better trust information (as comes from multiple sources) and higher performance well the ability more than one place the digital world the same time. ite trolley tokens are managed smart contract the system. these are refundable fetch tokens that are required for some operations. the token automatically refunded when the operation complete when the other party involved fails ungracefully. this the "skin the game" requirement for connecting and using the oef's network features. enabling intelligence, deploying intelligence machine intelligence and learning exist all three layers. the oef and ledger form the primary fetch protocol: they operate each and every node the system and provide the environment which the agents live. the agent layer third parties dictate and create: present digital environment exposed via api which provides opportunity for economic gain utilised effectively. this effective utilisation, for scale and cost reasons, best done digitally and without human intervention. this incentivises digital intelligence the aea level. the protocol level, intelligence and learning are used provide four layers trust information: trust how normal any given transaction trust the information received from other nodes the network trust the parties involved based their history evolving market and data intelligence these collectively provide reassurance users about the trustworthiness any given transaction. the ledger's useful proof-of-work (upow(r)) generates this information nodes place transactions and transaction information onto it. this data grows value over time built from larger and larger sample size. can say with confidence that fetch truly intelligent protocol: uses this wealth information restructure itself dynamically order best suit its users well provide those users with information that allows them manage their risks and transact the most cost-effective rates possible. (c) market intelligence particularly interesting aspect fetch. over time, learns more about what kinds markets interact with others, under what conditions and which ones overlap with others. this data has previously been held proprietary silos very large online markets such amazon and ebay, but for the first time will available publicly this hugely valuable information becomes accessible participants the marketplace well enabling smart market structure and additional layer information for agents leverage order maximise opportunistic value use and increase utilisation data and services. fetch.ai will invest provide initial network intelligence and datasets bootstrap the system, and will support thirdparty developers working the fetch ecosystem the network gains from all the proof-of-work activity. there "winner-takes-all" dynamic. proof work serves place transactions and builds intelligence the network for all its users access the data still requires tokens, and information about markets not the same the individual personal details those involved them, user privacy maintained v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited fetch supports, rewards and encourages individual agents' intelligence whilst constructing collective super-intelligence support all users the network. geography digital world: domain spaces ite delivery data and services the real world tightly coupled location. travel, meteorological data, insurance, local networking and information that consumed regularly related physical proximity which direction lies. being able sort, view, find, explore and consume such data and services according its distance and location valuable concept proximity improves relevance well access. fetch.ai, our agents "live" decentralised digital virtual world. whilst this world has all the advantages being digital, organised multiple ways: geographically, economic purpose, quality, temporally, semantically, reputation any combination these provide agents with the optimal view get work done. for example, geographic organisation allows agents able search particular locality. for opportunistic application value, this greatly reduces the search scope necessary find relevant agents. also allows agents that inhabit hardware represent human users trivially filter relevance and adjust according to, say, the mode travel being used: the fact that restaurant meters away but the user motorway doing km/h with the nearest exit being away makes irrelevant, despite being nearby geographically. this smartness that permitted fetch's digital world. figure shows how take advantage the fact that our virtual world does not exist real space: are able stretch it, fold and manipulate reel what you need that right next you. figure fetch presents environment that reels what you need that next you. this from both agent and agent b's perspective, live, real-time and for all users the network. agents etc. will all see what they need to. this effectively allows you sit still and gather what useful and for the things that are useful highlight themselves and position themselves closer. (c) fetch.ai agents exist position, but they don't have to. their geographic location the decentralised world determined the node nodes that they are connected to. should they wish appear elsewhere, indeed, simply ignore the fact that they have position, then they are free cost. part the network forces them work only with the agents nodes that are near them. however, there significant sorting/filtering advantage from doing so. regardless agent's spatial activities, relevant areas are still pulled when necessary. v..: february ite fetch technical introduction https://fetch.ai, (c) fetch.ai limited figure fetch space has three dimensions; the geographic, the economic and network dimensions. these provide three entirely different ways for aeas position themselves, search and advertise. many agents will exist both geographic and economic space simultaneously maximise opportunities available them. can seen figure there also the concept "domain space", or, the economic dimension. with domain space, agents that are economically close are grouped accordingly. this creates several dimensions our virtual world; geographical location agents can position themselves and then explore particular direction, across range via radius/cone. economic location relevant marketplaces and subject matters are positioned closer each other than those that are radically different: fetch.ai introduces the concept marketplace proximity. this can thought semantic view the world. infrastructure decision points viewing the network infrastructure decision points, such airports, railway stations, road junctions, etc. network space the ability explore the network network space where geographical and economical location have meaning. combination these four provide enormous scope for smarter agents best exploit the opportunities available them combining views across them optimise what they are exposed to, but also learn about their surrounding space better position themselves business effectively. anatomy aea (c) the base level aea (autonomous economic agent) software entity that able perform actions without external stimulus. this makes truly autonomous: acts its own behalf, not just someone else's behalf. all aeas must contain unique identifier which comes from the agent's "wallet". this allows send and receive fetch tokens. all aeas must also maintain list nodes they are registered with and some basic statistics, all which signed and publicly verifiable. this can seen figure v..: february ite fetch technical introduction https://fetch.ai, (c) fetch.ai limited figure here see the agent's relationship with the "other worlds", that the oef that provides its life-support and environment, and the other that the real world. this latter world, agents can connect sensors, data, represent people provide connections between the old economy and the new, e.g., ticket booking systems. agents are able connected more than one node once. they can this for security and redundancy reasons and also more than one place one time (in any the dimensions which they are represented: geographical, economical, network any other). node registration required order participate. registration requires what refer "trolley token": token deposited smart contract that refunded one two cases, graceful unregister with pending/in-progress transactions the node fails. trolley tokens ensure that there token requirement order part the network and encourages good behaviour. also attaches cost malicious agents: large-scale attacks cost tokens and all these are likely lost. agent types aeas come many flavours and the systems that support them deliberately encourage and reward improved digital intelligence. whilst there such thing "typical" aea, envision least five general application areas, although many aeas will made varying combinations the types shown below there often significant overlap: (c) inhabitants these are aeas paired hardware that exist the real world. these may cars, drones, sensors, cameras, mobile phones and computers. aeas not control these devices, they exist "inside" them controllers/operators/drivers: digital version what would otherwise the human component. e.g. aea self-driving car does not drive the car, tells the car where drive. interfaces these provide interface between the old and the new economy. call these api aeas. they allow aea entities work with and leverage elements the conventional economy such ticket sales and can thought facilitation agents. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited pure software these are pure aeas that exist the digital space only. they explore, negotiate with, and find new ways serving their stakeholders. these are teams entities that work organise, schedule and arrange other aeas attached hardware and interfaces provide complete solutions. digital data sales agents these are specific class pure software agents that attach data sources data marketplaces and out into the fetch world extract value from that data. this solution what seen the number one problem the data industry: data does not sell itself. see for larger discussion this application area. ite representative aeas that represent individual and act their interface the fetch network acting "digital butler". their learning systems are involved with understanding preferences and tolerance for change whilst initiating autonomous requests fulfil the requirements the owner. figure five different major classes autonomous economic agents: those that work entirely internally the fetch network and those that interface external data, hardware entities represent human users. doing business (c) fetch effective, active brokering agency for putting agents who have value contact with those that need it. allows those agents passively actively involved the delivery search but particularly rewards active participation though its multi-dimensional decentralised virtual world. the simplest conversation that two aeas, connected the same node, can have with the oef order business with each other illustrated figure below. this shows the minimum message exchange between two agents order conduct simple transaction. does not show active exploration the network what happens when multiple agents are able deliver the value the agent that requires it. v..: february ite fetch technical introduction https://fetch.ai, (c) fetch.ai limited figure this example agent delivering data agent who requires it. simple search with simple escrow transaction via the node ensure that data item and the payment (t) are both provided before the exchange occurs. the ledger gets five key pieces information: source, target, value, action and location (stval). (c) the agent that searching can refine the search either the geographic economic dimension reduce the number hops (and thus the cost) conducting relevant search. figure shows three different searches: simple network search, geographic search economic search. the risk with simple, unconstrained network searches that the search hops will exceed the available tokens for the search before finding anything relevant. the agent can make better use their exploration tokens restricting the search with geographic and/or economic conditions rather than just the network's general organisation. figure a-e represent individual nodes. aea searching for hill beans, helps constrain the search where this hill needs the beans (geographic economic dimensions). this increases effectiveness and reduces the cost the search and avoids endless explorations over irrelevant nodes. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited the fetch smart ledger fetch has specific requirements related its unique architecture. its ledger and underlying network needs support the decentralised virtual world with large volume low-value transactions and the ability compress the distant past without undermining integrity data. also needs retain information about the transaction over and above that stored traditional transaction systems due the requirements the useful proof-of-work (upow). fetch's unique approach therefore neither blockchain nor dag, unique blend both data structures and incorporates many other innovations. ite the technologies presented here are the working foundations upon which are building. fetch are working number further innovations this field which will enable further generational leap the ledger's capabilities, performance and stability. furthermore, anticipate new ways which can structure the underlying digital world and present knowledge and insight the users the network. these new developments continue prototyped, trialled and developed, will updating our technical documentation accordingly. the limitations existing methodologies traditional blockchain architectures lend themselves intelligence-driven decentralised environments for agents because the nodes are largely static, remain on-line for extended periods time and are capable processing significant amounts information. major limitation blockchains that blocks are added sequentially, that only single block can reference the previous block the chain. this serial architecture inefficient and greatly limits the rates which transactions can processed. payment channel systems such lightning raiden offer way providing scalability blockchain solutions taking large numbers small payments off-chain. these systems can increase speed and decrease the cost certain types transactions but not provide general solution the scalability issue. many unpermissioned ledger systems, proof-of-work serves means control the block generation rate and ensure significant computational power associated with the generation blocks, thus ensuring the fidelity the network. the advantage the conventional hash-based puzzle that easy verify and stochastic, that miner's success proportional his her computational power. the disadvantage this approach that large amounts energy are used calculations that have purpose other than securing the integrity the blockchain. the difficulty solving the hash-puzzles also encourages formation mining pools, which decrease the system's decentralisation and therefore security. the fetch smart ledger designed overcome these various limitations and meet all the requirements our digital economy. ledger requirements scalability many millions agents will working alone groups provide solutions for themselves and for other stakeholders. without unconfined scalability, this will not possible. (c) stability for economic system useful necessary have means trading that ensures price stability. important aspect achieving stability separate fast moving tokens from slow moving ones. believe that achieving this crucial the creation healthy marketplace. https://raiden.network/, https://lightning.network/ v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited useful economic work the original bitcoin protocol uses proof-of-work protect against consensus attacks such double spends. this powerful idea, but believe that rather than solving puzzle with other benefit, the computational power should used solve relevant problems and thereby empower the economy. solving these issues the key value proposition the fetch's ledger. useful proof-of-work (upow) risk and trust information the network should provide trust, reliability, reputation and network intelligence information allow users the network access the information they need conduct business effectively and efficiently. ite fetch's useful proof-of-work will involve the packaging special-purpose computing problems into proof-of-work packages. these problems allow processing nodes with less computational power occasionally earn block rewards.verification winning solutions will carried out all participating nodes. fetch will also provide problems with varying difficulties that nodes with low computational power can earn rewards solving easier problems while more powerful miners address the difficult problems. this distributed computing platform will used solve artificial intelligence and scheduling problems and will ensure integrity the network by, for example, assessing trust the validity transactions and the ledger itself. scalable ledger fetch's ledger designed allow for peer-reorganisation present environment that's efficiently organised for both spatial and non-spatial access and provide large numbers rapidly confirmed near-zero cost transactions. its block structure contains transactions that include non-personally identifiable action class information, timing and location allowing for useful pow build increasingly useful knowledge for the network use evaluate the risk associated with any transaction presented the system. the fetch ledger novel structure that combines elements transaction chain with elements from directed acyclic graph (dag). specifically have used the dag inspiration for parallel execution and transactions reference while requiring the strict ordering found transaction chain. that say, the following section will describe our system where are running transaction chains (we refer them resource lanes) parallel with cross chain synchronisation mechanism. this mechanism achieved letting single block appear multiple chains. introduce the resource lane sharding scheme for ledgers. unlike traditional sharding, our system transaction may assigned several different resource lanes simultaneously. use preevaluation module determine which resource lanes are affected the transaction. this end, group transactions hashing the resource identifiers minimise resource correlations. the systems capacity directly proportional the number resource lanes available. (c) define valid transaction transaction which, besides the typical transaction body, signatures contract references etc., additionally contains information about the resources makes use of. that is, any attempt access other resources than those described the header the transaction will deemed invalid. the figure below, illustrate system that initially has four transaction chains (horizontal lines). for the sake simplicity illustrate transactions (vertical lines) entities that are using resources from exactly two resource lanes. however, transaction may linked any number resources shown figure v..: february ite fetch technical introduction https://fetch.ai, (c) fetch.ai limited figure resource lanes for fetch's internal arrangement transactions provide scalability. horizontal lines represents resource lanes and vertical transactions. circles illustrate transaction-resource lane relation. time progresses, the transaction capacity the system can expanded introducing more lanes. this done the new lanes referring back the old lane's blocks. very similar chain forking except that are doing deliberately increase the system capacity and with one difference: half the resources are assigned one fork and the other half the other. the time splitting each old lane referred two new lanes. the splitting process achieved inserting two new transaction blocks (each belong separate chains the expanded system) referring the last block the single chain (in the unexpanded system). outline the full system architecture our yellow paper "design scalable distributed ledger" and full working implementation can found our github repository (https://github.com/ fetchai). intelligence about the markets for the markets (c) the fetch network builds market intelligence, trust information and node reputation information order provide the users the network with access the information they need maximise either their ability find value provide those that seek it. this, combined with the multiple dimensions spatial organisation (geographical, economic, network, etc.) means that data can applied ways that have never before been imagined. with the network delivering general-purpose computing, the data that available can transformed deliver new insights and knowledge. collectively, the network's inhabitants learn new correlations between requirements and how deliver them. precisely this sort emergent network intelligence that, for example, allows agents establish climate and travel conditions from otherwise non-obvious sources such the use washers and wipers all vehicles that are the road. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited machine learning and artificial intelligence the fetch ledger has two key requirements provide the agents that operate and interact within the fetch network with support and guidance and secure. for this support, the fetch ledger uses one piece key information non-identifiable action class information undertaken the agents. each action stored alongside the value transacted and the public identities the transacting parties. the action information can used novel and informative ways support the trust agent's actions, search for agents that can serve their needs, supervise and understand their behaviour, and dynamically form new domains and markets. unlock these properties, essential understand the public distributed ledger system stochastic process, where all transactions and actors are modelled with methods. most notably, the actors are not only the agents using the fetch network, but also the participants that form the ecosystem nodes. using probabilistic framework, the nodes propagate belief about state and can find consensus using their own version the ledger history. the nodes can also establish belief each other and, further, develop dynamic strategies that ensure fast confirmation cycles. ite the open economic framework (oef) provides intelligent search network that facilitates agent matching and exchange. this achieved providing ontologies (controlled vocabularies) for describing different aspects agent such its type, communication protocol, data model, services and availability. this allows other users rapidly and easily query the system establish connections with the relevant counter-parties. the efficiency this process can improved using machine learning algorithms trained historical data such the queries that are subsequently followed successful value exchange. the use natural language the ontologies can also used construct document embeddings that can used cluster, for example, the agents' data models. oef nodes can use the embeddings provide ml-based searches that allow agents identify potential trading partners that they may not have been explicitly designed interact with. this would then greatly expand the potential for new trading connections formed. machine learning targets three elements that enhance the performance, enable access, and provides trust: understanding history: through models that capture behaviour, understanding and planning the future: understand how distribute workload and increase convergence and understanding the present: distribute current belief and information. the power that unlocked from recording agent actions considerable. real world cost and even proof work (or stake) strategies can adapted suit the transaction and participants hand. the consensus-building itself allows the agents use information about history and reputation, and the users the system can choose engage the basis not only simple contracts, but also trust. there are several new elements that are worthy discussion. here focus several applications machine learning the fetch ecosystem. belief propagation for ledger integrity (c) fetch's novel ledger system enables large transaction volumes enabling many transactions added the ledger the same time (in parallel). the main problem faced this highly parallel system double-spend transactions malicious actors the network. the detection these fraudulent transactions consumes resources checking the ledger, and mitigated most systems introducing delay time before transaction accepted. the fetch system will use machine learning determine the probability any transaction being replaced alternative double-spend, propagating beliefs about the current state the ledger between processing nodes. this time can reduced further using other properties the transaction such the sender and the number past transactions between sender and receiver. the system will provide disincentive for fraudulent actions reducing the trust that the network associates with particular economic actor. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited interactions between the ledger and external economic agents establishing trust ite since the algorithms that provide automated control the fetch ecosystem are likely consume just small fraction the available computational power the network, autonomous economic agents will also have the opportunity submit problems certain form (typically standard problem, such image speech recognition), and then pay processing nodes the network for their effort. this mechanism also enables rewards tuned the computational power the network with pricing mechanism used prevent external processing tasks taking priority over the network's maintenance tasks. the probabilistic nature transaction acceptance protocol also enables economic agents to, for example, immediately accept interactions with "trusted" economic agents and accept the possibility fraudulent behaviour the transaction sums are small are particularly time-critical. oef nodes automatically discover the context agents' actions and valuations and their relations with other agents. does building sequence models, i.e., models temporal data that track agents' history and compress this information into fixed length representations that preserve the similarities that were present the original data. using deep learning methods, such recurrent neural networks (rnns, lstms), this compact and low dimensional representation (also referred embedding) allows efficient comparison different agents. with this information, one can establish notion agent's reputation and the consistency particular action with its previous actions, which will serve predict its validity. both figures above, action sequences from different users are used. panel displays cases for users with stronger occurrence specific events than for those panel embeddings sequences were computed for each user. both figures, embeddings belonging users with similar action patterns are significantly closer the embedded space. fixed size representations can also used map the free form description the actions into semantic space where similar expressions would grouped together based their meaning. for example, transactions related different types weather data would form semantic cluster that could enable users search for novel weather-related data sources. supporting agents (c) computational agent considered full learning machine that could embody anything from human interacting with the system via user interface fully autonomous reinforcement learning system. from the outset, the fetch ledger was purpose-designed support agents all their activities: finding each other, recording information, establishing clear transaction decision record and enabling them engage with each other. agent can take multiple actions particular sequence and dynamically decide the best strategy for success. not only this important for effective operation, v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited interactions between agents also have all-important negotiation phase where the traded action established. since agent interactions can complex, the proposed action may manifest itself api-style program which proposed agent. the fetch ledger will store such information and provide means for checking the suitability specific programs the basis historical use. this again increases trust and unlocks interaction agents from different markets and domains. intelligent interfaces ite for economic agents truly autonomous, they need understanding how talk each other that goes far beyond merely knowing the appropriate communication protocols. they need have understanding the purpose that given message exchange serves. given description particular purpose, they need able learn what message exchange they need engage order achieve this purpose. agents are able draw the records previous interactions between agents learn how the processes question work. any process logs summarising exchanges between agents will stored alongside natural-language description the exchange's purpose. this could, for example, instruction that was given one the agents human user. agents may also programmed provide these natural-language descriptions themselves order facilitate human-machine interactions and help agents develop their understanding the purposes agent exchange sequences. this enables agents develop genuine autonomy the pursuit goals that can defined with the same flexibility provided natural human language. the result novel integration approaches drawn from two fields that have not previously been known cross paths: natural language processing and process mining. only recently have machine learning techniques been brought this field, and where they have been tried, they have proven very successful. breakthrough natural language processing known word embeddings. with other examples embeddings described above, these are fixed-length vector representations individual words. the process through which individual words are assigned individual vectors described embedding the vocabulary linear (vector-)space. the embeddings uncover relationships between the words' meaning. vec denotes the function that assigns words vector, relations such the following are observed: vec('pa s') vec('fr ce') vec('it y') vec('rom e') are taking these concepts understanding into building intelligent interfaces for agents. security and attack resistance (c) fetch will releasing separate paper outlining details the network's security and attack resistance. this paper includes results fetch's detailed modelling, our internal simulations and results the first versions the network under various attack scenarios. fetch believe this key topic and have designed the system with security mind: from the useful proof work through the trolley token mechanisms other feedback mechanisms that incentivise good behaviour whilst discouraging (economically and otherwise) bad behaviour. should always more profitable behave well the network for any its users. should also noted that fetch have done detailed economic modelling the ecosystem with its economic advisors from the university cambridge and other institutions order provide further support for the network's performance and security. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited (c) ite fetch.ai will publish consensus paper the first half that outlines the consensus perspective security and attack resistance. further, more detailed, paper that focusses specifically security will published mid and will alongside bounty program encourage community engagement with securing the fetch system. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited applications and use cases transforming the data industry fetch.ai's autonomous economic agents are able act without human intervention. they can pay and paid using the fetch token. this has significant application: agents generally represent value some form either data source, piece hardware they inhabit the person that they represent. given the agents are able search for opportunities themselves, they are constantly looking maximise returns from utilising that value. this section talk about few the opportunities. fetch aims solve the greatest challenge for the data industry: that data does not sell itself and too expensive use. fetch allows data self-delivering and self-exploiting avoiding the key issues: ite the cost selling data exceeds what worth. much data has value, but that value less than the cost selling it. sales are time-consuming. data marketplaces are discovering that not enough simply "build and they will come". fetch drives more sales for datasets allowing data proactively sell itself: fetch's aea technology provides mechanism for the development low-cost digital agents that reduce the cost sales virtually zero. this unlocks previously inaccessible value and fundamentally changes data from being static warehouses information waiting discovered into countless autonomous data containers delivering themselves opportunistically and directly customers. (c) figure pool standard aeas, with pre-existing experience and reputation, sit pool ready attach individual data sources before exploring the decentralised world looking for potential users and application. they are able scale demand rises and the "patchbay" connector affords simple, straightforward connection between data sources and the fetch.ai network. although they need not: aeas can also act real time under human control supervision appropriate v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited large populations cloned aeas can deployed masse respond network requirements. the "patch bay" technology interfaces multiple data sources the fetch network and makes that data available all aeas, not just the data provider's pool. should observed that one the key logistical advantages also one that enables novel solutions: having all the data bought and sold one system opposed being spread across multiple services such ebay, amazon, trip advisor, etc., significant. ite fetch will invest datasets provide initial pool useful information that can utilised aeas. this includes supporting third party developers well continuing its work form partnerships with commercial data providers and other information holders. decluttering our lives with more opportunities data today largely exercise pull rather than push. unless known about, attached and processed, largely static and cold. see one effect this our mobile devices: plethora mobile apps whose job often merely process one data source into application. these applications not talk each other, are limited one application application space and cannot combine the knowledge other data sources order deliver more meaningful data the user. fetch allows more useful combination and presentation data using populations standard agents that can make data sources available the oef demand. this information can then presented one application where much the transformation and combination data occur inside the fetch network. fetch's unique arrangement means that apps that, for example, work the basis providing the user with local information, can combine context sensitive data without needing any prior knowledge that data. this can seen figure (c) figure single app, with aea interface fetch, can gather and present data from multiple sources without having worry about many apis and changing formats. fetch dynamically organises the digital world shorten the distance from source target and turns the data gathering philosophy from "pull" "push": the data delivers itself, lowering bandwidth use, waste and cost. patch bay, this context, being pure interface layer between fetch and external data source that allows agents easily connect without having know the details the wiring behind the scenes v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited imagine service that presents parking information, charging points, wheelchair access, weather conditions, current restaurant table availability and review information surrounding restaurants and does entirely keeping with what had learnt about the user's preferences over time and was able incorporate new information instantly without ever having seen before. the fetch powered universe allows static, previously unfindable data sold and utilised. fetch does not replace data marketplaces, interfaces them and brings them life. more joined approach transport and energy ite transport one the least seamless aspects our daily lives. each step our daily journey exercise pushing square pegs through round holes and yet accepted inconvenience, largely without complaint. the individual components are largely centralised different organisations that neither wish nor benefit from cooperating with each other. fetch takes control this cooperation away from the individual companies and presents the network for use. this creates considerably more joined approach transport than would otherwise possible: availability all relevant sensor information prior knowledge required information sources types for potentially used. access many transport sources api aeas attach existing ticketing and information services order present and make available those things into the fetch network for all aeas. information the user's personal preferences personal "representative" aeas know enormous amount about individual's personal preferences. this allows these preferences applied all aspects transport including dynamically responding changes they happen. agents actively working deliver useful information aeas are actively working figure out how deliver context sensitive, accurate and useful information other agents. this positive intelligence arms race that encourages data transformation, deep analysis, novel uses one form data generate another and more. aeas are collectively able combine their intelligence generate results that are considerably more than the sum their parts: true emergent solutions otherwise complex and hard-to-solve problems. this approach has the ability transform energy use and delivery. from shaping energy demand and delivery precisely match the requirements multiple parties incorporating personal corporate preferences with advanced, adaptive prediction models, fetch.ai has the power and the market data make energy generation and delivery more efficient: more fluid, less restrictive alternative switching where suppliers and energy users benefit energy grids can managed with greater immediacy than currently possible dynamic price variation and other incentives response agent's needs. other applications and data transformation (c) agents are actively encouraged and rewarded their ability create data that value and deliver those that want it. fetch reduces friction between the two that gives providers with vast opportunities identify and exploit new markets. the gap between opportunity being recognised and being exploited made very short: short enough jumped near real-time. has been previously mentioned, vehicle windscreen and washer data can used establish road network state and rain, but can also used the summer suggest the quantity insects that are the air. such correlation learnt the network's agents over time, but fetch that allows the opportunities taken advantage they arise. such ability for aea speculatively explore looking for possible answers creates demand that can satisfied immediately other aeas. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited aeas can also take advantage the hardware they inhabit other ways: constructing self-organising, self-healing, ad-hoc networks (from bluetooth spontaneous wifi networks) allow for communications and messaging where none would otherwise possible: enabling peer-to-peer wireless networking areas that would otherwise not have network access and allowing agents figure out how make work efficiently. combining live location data, the concept "i'd like for run much privacy but not out sight people possible, but with restaurant the end which serving food and not too busy" becomes viable delivery person representative aea. ite agents can act their own behalf respond the network's population's needs and imagine that agents will created specifically solve problems such intra-ledger transactions, currency conversions, access financial, insurance and real-estate markets well generating new data that can actively used rather than sitting waiting found. real-time market shaping and construction introduced fetch constructs market information result ongoing network use. this information exposes intelligence about market sizes and interactions that are held privately companies such ebay and amazon. this includes: market sizes, interactions, overlaps, temporal and spatial data about such intersections and considerable information about transaction rates and sizes. this data that created fundamental part the smart ledger's operation and unique fetch. fetch allows its agent inhabitants organise themselves suit market requirements. also ensures that collections aeas that form market areas can position themselves best placed interact with relevant other markets. the aea's position will change continuously and real-time. such rearrangement markets has not been previously possible the digital world: fetch provides both the layered virtual space and the intelligence built from ledger proof-of-work make this possible. figure shows economic space's organisation. (c) the market information and ability respond requests for value that not currently existence the fetch network provides agents with the opportunity fulfil the request near real-time. this knowledge the correlation between request and what satisfied learnt the network for the benefit all future network users. this data knowledge combined with market knowledge incredibly valuable product its own right and increase the effectiveness and margins for the aeas the system. the construction spontaneous mesh networks potentially huge step forwards for decentralised internet v..: february ite fetch technical introduction https://fetch.ai, (c) fetch.ai limited figure fetch, agent can the right place three separate dimensions maximise its ability exploit its value find someone satisfy its requirements. can move independently all three layers and can even multiple places once connecting more than one node. sample use case creating aea taking the example simple weather station iot device, there sequence events and activities required order for work the fetch network. simplified example the minimum communication and actions involved performing fetch transaction presented section doing business. here, take more detailed look the steps involved including the development actions required integrate device that was not previously exposed the fetch network. all stages there are many options depending the preference the device's owner the type device. this section does not exhaustively cover those options. there are many ways interfacing weather station device aea. these include: integration into the device itself this involves adding software the device that can act standalone fetch compatible unit. fetch provides example source code that allows such code created but does require the ability run software the device itself. interfacing generic standard api/interface many such devices have interfaces allow them plug into computer. this most often usb bluetooth connection. aea can run separate computer, either small device such raspberry mobile device desktop computer and can collect this data and connect fetch. exposing device data marketplace for generic aeas access the device itself the computer interfaces can simply push this data data marketplace and allow aeas connect that marketplace. this case, the device not aea its own right. (c) the first two options create aea its own right that controlled the owner the weather station. the last simply relays another service that connected fetch and less interest for this example, but shows that "indirect" connections fetch are possible. transacting fetch aea registers fetch one more nodes, each registration with trolley token which held smart contract that ensures that returned the aea disconnects gracefully the node fails the fetch code sufficiently light and resource efficient run tiny embedded devices, even down the size arduino with only handful tens kilobytes memory v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited forcibly disconnects the aea. registration places the agent the network and allows place itself economic geographic space wishes. the aea can then advertise, actively explore the fetch world for customers notified potentially exploitable opportunities combination all these. advertise this the simplest case and just pushes the market areas that the aea the network. this case, would meteorological information that includes, for example, temperature, humidity, precipitation state and pressure. other agents searching for such things would find the aea the geographical market searches encompassed it. ite actively explore the decentralised virtual world offers way for active searching space. this finds other aeas that may wish achieve something and opportunity push that value for consideration even would not have been triggered simple search option notifications opportunities potential users our weather information may not specifically search for such things, they may planning journey, special event something else. the aea can register for notification such searches well registering for notification failed searches that are worth looking at. (c) fetch facilitating the connection two agents and providing several ways making best use the decentralised virtual world. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited development and deployment fetch are developing the entire full-node software stack. this includes the oef and the ledger systems along with all other software necessary download and run full fetch node. the source code will released open-source and can downloaded, compiled and run anyone. fetch also provide precompiled self-installing node packages for many platforms. the fetch node software written c++ for performance and stability. ite additionally, fetch are developing number aeas assist bootstrapping the network and provide range examples for developers. these agents include "stock generics" (those that can trivially attach data source and then exploit that data with little user-configured context information) and number examples the different agent classes imagine (see "agent types"). very efficient "tiny-agents" will developed for integration into internet-of-things devices. the aea software developer kit provides framework applications for agents several languages and freely available all agent developers. the sdk also contains examples development (including integration with common ml/ai frameworks) and oef environment exploration (on all three the dimensions: economic, geographic and network). fetch provides native wallet, aea monitoring and exploration application for ios, android, windows, linux and macos. the source code for these applications will available. these are firstclass applications that are available from the relevant platform stores (where applicable) and require additional frameworks, software actions installed and used. the users these applications choose so, the applications are able operate thin full node. this provides users with income from providing oef services, transaction processing and market intelligence. furthermore, the wallet can configure itself aea deliver information the network, act relay for mesh networking (assuming the user gives permissions for these activities). should noted that initial releases during the test phase fetch.ai's development are for development purposes and will different the final, native applications that are adapted the individual platforms. aeas are able interrogate the oef for market and data intelligence. example agents that perform these enquiries will provided they allow for access information that leads smarter, ondemand deployment agents from agent pools respond specific spikes demand. source-code for the fetch vm, the scaleable ledger and the oef can found https://github.com/ fetchai. development philosophy (c) develop high quality, robust, well-documented and efficient software that built last. the primary node software written c++ with minimal dependencies and both memory and processor efficient well being designed minimise network traffic allow for maximum scalability with minimum resource use. create protocol with the knowledge that every byte saved --sent/received, processed held memory--affords the fetch network greater scale and allows operate more devices than would otherwise possible. fetch has developers with individual experience spanning decades architecting and developing such systems and many others with detailed experience and knowledge the field distributed, highly parallel, scaleable networked applications c++. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited full and thin nodes fetch supplies the source and executables code for both full nodes and thin nodes. thin nodes are reduced version the fetch node that requires fewer resources. particular, the memory, bandwidth and processing requirements are reduced thin node allow for fully integrated node-aea setups. full nodes are full oef feature providing systems, whereas thinner, lighter nodes can provide ledger based functionality without the oef's higher level features. the source code, executables and documentation are available github.com. fetch node class aea: can send and receive fetch tokens and its transactions are placed the ledger with all other transactions. network participation app: not just wallet ite fetch delivering native wallet for desktop platforms (macos, windows and linux). for mobile platforms, the wallet app additionally network participation application (npa). fetch's npa has number additional features over and above wallet functionality: enables the user create autonomous economic agents represent combinations sensor information simply dragging and dropping components. these unique arrangements data and sensors can configured create unique aeas that can then deliver that value other agents the fetch world. provides representative agent: one that represents you (see .). these agents can take your preferences, stored safely, securely and encrypted your own personal device, and use that provide tailored solutions problems that you might have. allows the user explore the decentralised world though they were agent viewing the fetch world and watching changing rearranging itself real-time. the npa key part delivering fetch's features and utility individuals and provides the fetch network with large population agents that are individually configured users represent unique combinations sensor data, general information and human information. agents and interfaces the agent classes described are supplemented pure interface aeas. these are agents that exist agents merely interface the oef order extract data for analysis. this may then transformed, combined with other proprietary data and made available specifically generally for agents then exploit the world. data privacy and protection (c) fetch.ai's core proposition create highly trusted environment which autonomous economic agents can exist, discover and discovered, communicate with each other, broker and transact with the confidence that messages and transactions are both secure and between the parties intended. privacy and data protection the highest importance us. key aspect the fetch protocol, the smart ledger and the supporting distributed ledger that personally identifiable information (pii) not controlled managed fetch. the only information required transact the public address aea. given the aea the only holder the private key involved, only the non-identifiable public portion stored the ledger and used communicate. agents are able sign and decrypt messages themselves with the fetch system facilitating. fetch.ai will provide market and transaction intelligence interpreting one's individual transactions context all the aggregated transactions over the fetch service. will not possible reverse engineer this aggregated intelligence back into individual transactions. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited fetch: biographies and background fetch.ai convergent technology company founded leverage economic value generation converging artificial life, machine intelligence, multi-agent simulations, cryptography and distributed ledger technologies. fetch.ai team humayun sheikh co-founder and ceo, fetch.ai with strong business, economic, software, regulatory and transport experience, ideally positioned contribute the future networked civilisation. ite humayun sheikh, ceo. innovation entrepreneur and founding investor deepmind with record revolutionising trading the steel sector, now changing the way transact and travel. toby simpson co-founder and cto, fetch.ai producer the successful artificial life creatures series games and early developer deepmind, his thirty years' experience software development and ten cto across three companies are now focussed crypto-economics and large-scale multi-agent systems deployment. thomas hain co-founder and chief scientific officer professor sheffield and established scientist advanced machine learning ai. bridges the real world and academia and inspired the opportunities brings modern society. jonathan ward senior machine learning scientist highly-cited researcher excited the potential intelligent systems create the economy the future. phd machine learning from university college london with earlier training physics and mathematics. troels ronnow senior software engineer scientist and innovator, has benchmarked d-wave two, co-authored patent applications and has been working more than two years full time building distributed ledgers. maria minaricova head business development experienced managing strategic program delivery and business development. worked oracle and pan-european research groups, delivering complex projects challenging environments. arthur meadows head investor relations international experience software start-ups and bringing disruptive, high-growth tech products commercial success. mba from judge business school, university cambridge. khan baykaner lead software engineer research engineer machine learning with experience developing deep reinforcement and generative models, solving problems digital health, audio/video media and nlp. phd developing computational auditory models from university surrey. katie lucas lead software engineer (c) ex-google sre and privacy engineer, she has also worked with citrix, hitachi and grapeshot. highly experienced many fields including security systems, military simulations and real-time data-processing pipelines. joshua croft lead software engineer nlp and data mining specialist geolocation, natural language and iot. ex-playstation developer with msc advanced computer science from the university east anglia. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited fitzgerald lead software engineer engineer, researcher and technology enthusiast with experience distributed ledgers, video codecs, networking and low level software optimisation. strong engineering and mathematical background, obtained his degree electronic engineering from university surrey. robert dickson senior software engineer nathan hutton senior software engineer seasoned software engineer and architect with experience dynamics simulations, low-level protocols, graphics and virtual machines. has strong artificial life and mathematics background. peter bukva principal software engineer ite experienced software engineer and fpga specialist, previously worked bae high speed communications systems. meng from the university edinburgh. experienced software engineer and scientist. previously worked bloomberg and siemens corporate research. msc solid state physics and phd high temperature superconductors. pierre wilmot software engineer software engineer with background video games and deep learning for image processing. motivated the desire find clean and elegant solutions complex problems. attila bagoly software engineer enthusiastic software engineer and trained scientist with msc statistical and particle physics. previously worked numerical hydrodynamics, particle physics data analysis and various machine learning projects. aristoteles triantafyllidis software engineer computer developer with passion for leveraging cutting-edge game production technologies and engines. has informatics and telecommunications and diploma with honours from sae institute game production. david galindo head cryptography associate professor computer security university birmingham with years experience applied cryptography research, both academy and industry. his work has been published top academic venues computer security and has been deployed governments around the globe. marcin abram lead research scientist theoretical physicist and machine learning scientist. marcin's doctoral research explored topics coherence and emergent behaviour quantum systems. his current work focuses machine learning applications for modelling autonomous economic agents distributed ledgers. fred moisan lead economist researcher behavioural, experimental and computational economics, applying game theory the economics networks and the design decentralised marketplaces. phd from the university toulouse. jerome maloberti lead software engineer (c) implementing large scale multi-agent systems with algorithms with nearly years' experience following first degree software engineering and phd artificial intelligence. patrick motylinski senior research scientist scientific researcher with many years experience areas ranging from physics and mathematics, blockchain technologies and cryptocurrencies. holds phd theoretical high energy physics from university amsterdam, and has several highly cited, peer-reviewed scientific publications, well considerable number patent applications. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited marco favorito machine learning engineer m.sc.eng. computer science from sapienza university rome, where worked thesis reinforcement learning. software engineer with solid programming skills, he's working the oef. daniel honerkamp machine learning engineer combining expertise both machine learning and economics with msc computational statistics and machine learning from ucl and previous experience the swiss national bank. soren riis research scientist ite research scientist university queen mary london with the speciality multi-user information theory, network coding, algorithms, complexity theory and cryptography. dphil (phd) mathematical logic from university oxford. jin-mann wong research scientist worked previously researcher theoretical physics and mathematics with interest technical aspects blockchains. she holds phd string theory from king's college london. ali hosseini artificial intelligence researcher expert multi-agent systems and logical modelling with background software engineering. phd and msc artificial intelligence from king's college london with excellent academic track record and publications conferences and journals. diarmid campbell senior software engineer senior engineer and technical manager with years industry experience, specialising video games, computer vision and educational games including building augmented reality technology for sony and their playstation division. chris atkin digital marketing coordinator qualified journalist with passion for social media. has five years experience sky news and sport and has managed the social media accounts panama's largest language school. catherine moriarty chief amazement officer dynamic people person with wealth commercial experience and wonderful understanding maximising peoples' potential. driven and focused, with humour and respect for everyone she meets. principled and determined make the world better. now bringing sprinkle amazing the fetch team. lisa condon generalist generalist with extensive experience within the retail and tech sector after working for river island and nokia technologies. highly motivated problem solver and passionate people person. david wood recruitment recruiter with over years' experience technology recruiting. passionate about technology and who enjoys working closely with engineers identify high calibre talent. mba from the university miami. gary wood manager (c) multi-talented manager with over years experience. well-versed supporting fast moving, dynamic development teams. previously designed, implemented and managed onsite data-centre running massively multi-player online game for the bbc. advisory team melvyn weeks assistant professor economics university cambridge, researching the application machine learning market pricing. senior economic advisor ofgem, uk's energy regulator. v..: february fetch technical introduction https://fetch.ai, (c) fetch.ai limited steve grand, obe inventor complex autonomous agents for nearly years, creator the creatures artificial life games and proud father small robot now the science museum, steve has held research fellowships artificial life, psychology, biomimetics and creative technologies. received d.univ from the and was made obe for services computing. niall armes armes world-leading biochemist, molecular biologist and entrepreneur. received his phd from the imperial cancer research fund london for work comparative genome structure. subsequently founded twistdx, serving cso and ceo prior the company's acquisition. monique gangloff ite principal investigator/senior scientist the university cambridge, department biochemistry. her research endeavours have resulted more than international peer-reviewed publications and patent application. jamie burke founder and ceo outlier ventures, jamie has cultivated powerful ecosystem corporate partners, investors and government agencies help companies scale. also advocates for the professionalisation the industry through international media. (c) see https://fetch.ai for more information our team including linkedin profiles. v..: february ite fetch technical introduction https://fetch.ai, (c) fetch.ai limited the authors would like thank all those fetch and outlier ventures for their valuable feedback and contribution this document (c) https://fetch.ai info@fetch.ai https://t.me/fetch_ai march february v..: february