hushlist protocol specification pre-release version david mercer duke leto february abstract. hushlist protocol for mailing lists using the encrypted memo field the zcash protocol. supports anonymous and pseudonymous senders, anonymous receivers and hushlist creators, well public and private lists. the hushlist protocol can run any fork zcash that has compatible memo field, though certain advanced features might not fully supported all chains. hushlist developed and tested the hush mainnet and testnets and designed run any zec code fork including but not limited hush, kmd, zcl, zen, vot, btcz and ltz. hushlist also compatible with bitcoin hush btch, which kmd asset chain. addition the above properties, hushlist provides users with censorship-resistant storage and retrieval, since every hush full node will have encrypted copy every hushlist memo. furthermore, sending and receiving via one more blockchains serious deviation from traditional serverclient design which easily allows man-in-the-middle attack and deep packet inspection (dpi). network traffic monitoring and correlation made much harder, because there longer packet with timestamp and "selectors" going from one unique another unique via very predictable network route. zcash [zcash] implementation the decentralized anonymous payment scheme zerocash, with security fixes and adjustments terminology, functionality and performance. bridges the existing transparent payment scheme used bitcoin [bitcoin] with shielded payment scheme secured zero-knowledge succinct non-interactive arguments knowledge (zk-snarks). hush fork the zcash codebase (..) which generated it's own genesis block and uses the zcash sprout proving key. this specification defines the hushlist communication protocol and explains how builds the foundation zcash and bitcoin. keywords: anonymity, freedom speech, cryptographic protocols, electronic commerce and payment, financial privacy, proof work, zero knowledge. contents introduction high-level overview types transactions radix@gmail.com duke@leto.net design hushlist reference implementation account funding hushlist contacts hushlist creation private hushlists multi-chain private hushlists public hushlists list subscription subscribing public hushlist sending hushlist receiving messages costs examples metadata analysis user stories "pen name" user story amanda last will and testament user story xerxes "oppressed minority" user story francesca and nicolau "security researcher" user story gordon "whisteblower" user story martha "censored journalist" user story billy special thanks references introduction hushlist protocol for anonymous mailing lists using the encrypted memo field the zcash protocol. technical terms for concepts that play important role hushlist are written slanted text italics are used for emphasis and for references between sections the document. the key words must, must not, should, and should not this document are interpreted described [rfc-] when they appear all caps. these words may also appear this document lower case plain english words, absent their normative meanings. this specification structured follows: notation definitions notation used throughout the document; concepts the principal abstractions needed understand the protocol; abstract protocol high-level description the protocol terms ideal cryptographic components; concrete protocol how the functions and encodings the abstract protocol are instantiated; implications high-level overview the following overview intended give concise summary the ideas behind the protocol, for audience already familiar with block chain-based cryptocurrencies such bitcoin zcash. value hush either transparent shielded transfers transparent value work essentially bitcoin and have the same privacy properties. shielded value carried notes, which specify amount and paying key. the paying key part payment address, which destination which notes can sent. bitcoin, this associated with private key that can used spend notes sent the address; hush this called spending key. transaction can contain transparent inputs, outputs, and scripts, which all work bitcoin [bitcoin-protocol]. also contains sequence zero more joinsplit descriptions. each these describes joinsplit transfer which takes transparent value and two input notes, and produces transparent value and two output notes. types transactions all zcash forks have what will classify into four categories transactions. let called transparent transaction, which identical bitcoin transaction, consisting entirely transparent inputs and outputs. hushlist protocol implementations must not create transparent transactions, they not protect metadata any way and lack memo fields. these transactions can done with traditional wallet software and does not have any part hushlist protocol. let called shielding transactions, which takes transparent value stored utxos and transforms them shielded value stored inside notes which are protected zk-snarks. let called shielded transactions, which take shielded value from one shielded address another, and fully protected zk-snarks. hushlist implementations must support these transactions, and additionally should educate users that they are the most private type transaction, which minimized metadata leakage. let called deshielding transactions, which take shielded value stored notes and transfer them utxos stored hushlistmust not create deshielding transactions, they leak metadata and can potentially link previously shielded address transparent address hushlist implementation should attempt prevent, all costs, accidentally sending address via the sendmanyrpc command. easy way summarize the support transactions hushlist say: all receivers must shielded addresses, senders can either transparent shielded addresses. each hushlistmust have default blockchain and network that attached to, and the default chain should hush. the default network must assumed "mainnet" not specified, similar how the *master* branch assumed many git commands not specified. the user must able set their global default chain (not implemented yet) well default chain for each list. each list also has tadd+zaddr dedicated that list, the user has dedicated addresses send psuedo/anon messages, well default fee and amount. the default amount and the default fee currently but these numbers are subject change. hushlist supports file attachments and embedding arbitrary binary data, not limited ascii. hushlist does not impose file size limits and network fees and cpu/ram costs provide natural incentives for spammers find cheaper and easier-to-access dumping grounds. design hushlist the design hushlist inspired git. the reference implementation command-line program which very thin wrapper around api, which implemented various perl modules. hushlist uses many the same subcommands git which have intuitive meanings, which provide "easy-onramps" learn how use the cli. this document specifies protocol and the authors provide reference implementation this protocol crossplatform perl which can easily installed millions computers around the world via cpan and other methods. hushlist should work across any platform that supports perl and the coin being used. this case, cryptocoins are much less portable than perl, perl will not the limiting factor. the reference implemenation written maintainable and testable way such that can easily evolve the protocol evolves. hoped that the future there will many implementations hushlist, running various blockchains and using various software stacks. the design hushlist compatible with simple payment verification (spv) light wallets and future version hushlist will learn speak electrumx backend server, which natively supports hush the upcoming release. reference implementation the reference implementation developed free software under the gnu public license version github the following url: https://github.com/leto/hushlist this code still active development, consider experimental and only for developers this point pending security review. this the bleeding edge, folks. the current reference implementation can send and receive memos, including files disk simple strings text, long they are bytes. multipart hushlist memos (file attachments) and public hushlists are still development. account funding first run, hushlist creates new shielded zaddress fund transparent addresses for pseudonymous sending via the sendmanyrpc method. may funded the user from any taddr zaddr with loss privacy. for each pseudonym the user sends from (may globally used per-list), taddr created and de-shielding transaction done from which will allow the user send memos the given hushlist behalf the pseudonym. since hushlist memos have, default, amount all the costs associated with using hushlist are network costs. users may additionally add non-zero amount hushlist memo. for each hushlist the user wants part of, hushlist will create brand new zaddress (it must not reuse existing address) and fund that address via shielded transaction between there are taddr zaddr funds the entire wallet, hushlistshould present the user taddr zaddr which can used "top up" the current hushlist wallet from another wallet/exchange/etc. hushlist contacts hushlist maintains database contacts which use the address the unique and additional metadata. since hushlist supports multiple blockchains, must have contact database for each chain. each chain must have it's own contact namespace, you can have bob hush and bob and zcash and they will not conflict. hushlist internally associates lists contacts, not the address contact. this allows the user update the address contact one place and things work correctly the next time the address that contact looked up. lists contain contacts and contacts have addresses. hushlist contact may only have one address, either taddr zaddr, but not both. have taddr and zaddr for person, you can simply create two contacts, such tbob and zbob. terms the metadata that revealed when communicating with tbob zbob, they are quite different, and healthy for metadata minimization consider them two different contacts. one has the addresses for set contacts multiple chains that are supported, say zec, hush and kmd, then user may send memo members across multiple blockchains ensure delivery and subvert censorship single chain. hushlist creation private hushlists private hushlist simply list contacts stored locally and costs nothing. the zcash protocol itself has max recipients sendmanyrpc currently, hushlist implementations should not allow lists with more than recipients this time. multi-chain private hushlists user may choose send hushlist memo via multiple coins long there valid address for each hush contact for each coin. for example, you have addresses for three your friends each the hush, kmd and zec chains, then you may choose redundantly send memo all the chains. this provides backup the data the other chains should one them blocked (such dropping any packets for certain peer-to-peer ports), filtered temporarily inaccessible. additionally user may choose send day-to-day memos inexpensive chain such hush which has lower network difficulty and for things that need have bitcoin-level security, archive copy kmd can sent. kmd uses the delayed-proof-of-work [dpow] algorithm ensuring that once the information engraved the bitcoin blockchain, would required both blockchains question compromised prevent accessing the data. public hushlists public hushlist means publishing the private key taddr (or potentially zaddr) such that this address longer owned single individual. intentially publishing the private key public place, the owner has put all funds and more importantly, the metadata all transactions that address, the public domain. default, hushlistmust refuse publicize the private key address that has non-zero balance. hushlist implementations should protect users from accidental monetary loss every way possible. even so, user could accidentally send funds address that has been publicized and this very real confusion still looking for good answers. very recent developments zcash might allow the potential use "viewing keys" the fture, but this feature has not been fully merged master this time and lacks rpc interface, hushlist chooses use private keys which are core zcash protocol that well-supported all forks. "viewing keys" are one day used, that feature will need merged into multiple zcash forks, which does not seem likely the near-term. since creating private hushlist requires making transaction the network store data the memo-field, has cost. this cost will the fee the transaction, most likely around but each chain different and fees obviously change blockchains get more active. list subscription when the private key for list imported into hushlist, either from the blockchain, uri manual entry, the private key added the user's wallet, along with user entered approved name and description for the list (if provided on-chain uri encoded metadata). hushlist creates unique taddr zaddr for each list that the user may choose send each message the list psuedonymously anonymously mixture both. there loss privacy send memos the same hushlist with psuedonym talice and anon handle zbob the user chooses. subscribing hushlist completely free, simply the act importing data your local wallet. faciliate applications being able uniquely identify public hushlists introduce new url scheme where there username the currency symbole the cryptocoin and the password field the network, i.e. hushlist://coin:network@k coin can the currency symbol compatible cryptocoin such hush (hush) kmd (komodo) zec (zcash), zcl (zclassic), zen (zencash) btch (bitcoin hush). network will often "mainnet" but this schema allows for the very real use case developers iterating through various testnets and supports "sidenets" for those that want isolate data from mainnet. the base-formatted private key returned the dumpprivkey rpc method the associated coin. when coin and network are omitted, they default hush and "mainnet" respectively, hushlist://k equivalent hushlist://hush:mainnet@k additionally, url parameters can used speficify nickname and fee for the list imported: hushlist://hush:mainnet@k?n=nickname&fee=x&height=n the nickname and fee are just suggestions and the user must able modify them before importing the list. the height actually for performance reasons, and helps the local avoid scanning the entire history the blockchain for transactions. the first public hushlist can uniquely identified the following url hushlist://skxqpjnkvcfpmbprdaqhnjdomfkmapivctaypynznyxodoaq for performance reasons, can help each node skip over blocks filled with transactions specfying the minimum block height for importkey look in. this more performant url is: hushlist://skxqpjnkvcfpmbprdaqhnjdomfkmapivctaypynznyxodoaq?height= this hushlist contains the first hushlist memo, described the sections below. subscribing public hushlist the url above serves the main way for people subscribe public hushlist, since can embedded just like https:// link any other text document website. depending the browser that one uses, the hushlist:// protocol may already linkified web page. protocol helper applications can and will developed the appropriate action can taken when user clicks hushlist:// link. the reference implementation, the subscribe subcommand can used: hushlist subscribe hushlist://skxqpjnkvcfpmbprdaqhnjdomfkmapivctaypynznyxodoaq?height= sending hushlist one may send hushlist from taddr (pen name, psuedonym) zaddr (anonymous shielded address) which implemented the client via the sendmanyrpc method. recepients may single shielded transaction, which upstream zec limitation which exists all zec forks. hushlist only supports hushlists this size, but may implement larger hushlists breaking large recipient lists into multiple sends, the expense atomicity. one may send string text via the *send* subcommand send the contents file via the *send-file* subcommand. one sends string text, there metadata related that all, locally. only exists encrypted memo field the chain. one uses the *send-file* command, may prudent securely delete the file from the filesystem after sent, depending the needs the user. each hushlist has dedicated default chain that attached to. when looking hushlist contacts for given list, their address that chain will retreived. unique feature hushlist that speech=money, you may always attach non-zero amount hush, zec, kmd/etc each memo hushlist. currently you must send each member hushlist the same amount one memo, but you may send different amounts different memos. receiving messages any time later, after the transaction has entered the blockchain, memos sent given address can downloaded and viewed those parties who have valid private keys viewing keys. clients can poll the local full node periodically user specifiable default interval or, default, the same the average block time for the chain question. for the hush chain, this minutes. for any reason hushlist user wants prove with cryptographic certaintity that they knew certain information certain time, all they would need publish the private key address which made the transaction that contains the information. this the so-called "investigative journalist" "whistle-blower" use case. individual can send themselves hushlist memos "just case" they need prove something the future. this can considered "data insurance". costs sending hushlist memos requires making financial transaction and default, hushlist sends the recipient transaction for hush (or zec etc) with the default network fee (currently for zec +hush). the fee amount must configurable the user. the reference implementation hushlist changed via the hushlist fee environment variable. additionally, every hushlist has it's own configurable fee declared the configuration file for that list. the user may set higher fee some lists ensure faster delivery while using lower fees other lists which are not time sensitive. examples the first hushlist memo was transaction which also included non-zero amount hush. viewable the hush block explorer here: https://explorer.myhush.org/tx/acbaefbcddbdebdcbfadbccffbbf one may note that the zaddr associated with this transaction does not appear anywhere the explorer, because shielded addresses never show directly the public blockchain. network transaction analysis not possible zaddrs. the explorer only shows that joinsplitoccured and that change was given taddr. nevertheless, the follow text forever embedded the byte memo field the above transaction: beginning the time for taking the most delicate care that the balances are correct. "manual muad'dib" the princess irulan once men turned their thinking over machines the hope that this would set them free. but that only permitted other men with machines enslave them. reverend mother gaius helen mohiam polish comes from the cities; wisdom from the desert. arrakeen villager saying prepared appreciate what you meet. fremen proverb note that the transaction does leak the metadata the amount, since was de-shielding transaction, from all hushlist memos have amount=. default this not normally concern. metadata analysis the biggest concern for metadata leakage hushlist de-shielding transactions which leak amount metadata. the only time hushlist does de-shielding transaction when the local wallet has shielded value and must transfer value from taddr when the user chooses send from psuedonymous taddr hushlist. the first case call "shielded top-up" and happens rarely but would not want always have the same default amount "top-up" because that amount can searched for the public chain. for this reason, add some noise the exact amount our topups. for instance, the user wanted move hush, would generate random number between and and then subtract from the top-up amount. then all hushlist users wouldhave slightly different top-up amount instead few easily searchable amounts. the second case, normal transactions will have amount= which will stand out and network transaction analysis possible. these psuedonyms choose actually send non-zero amounts, network analsysis can made harder since most hushlist messages use amount=. user stories this section contains various "user stories" how potential users can use the various features the hushlist protocol meet their needs. "pen name" user story amanda let amanda have transparent address and let there public hushlist with shielded address amanda sends hushlist memos from public hushlist with de-shielding transaction, ie. any person who subscribed this public hushlist will able see amandas memos, yet amandas identity "psuedonymous", i.e. everybody knows that every message from the same person, but her identity remains unknown. any time the future, amanda would like *cryptographically prove* that she the identity behind all she must create signed message with her private key, which proves her ownership it. more "nuclear" option publish the private key any transparent value resides can simply moved another address before publication. this option "burns" the identity somewhat, messages after the publishing the private key can known the original authors any other person who learned the key. course amanda free never reveal her identity and remain psuedonym indefinitely. amanda needs concerned about her address being tied passive network attacker who records the internet and encouraged use proxy, tor other means depending risk and operational security needs. last will and testament user story xerxes xerxes would like store copy their last will and testament multiple secure locations, where they cannot lost nor destroyed parties that would benefit from the destruction the will. xerxes can use hushlist protocol store their will many different blockchains, the hopes that least one will survive longer than him, and prevent censorship only stored the data one chain. xerxes can choose additionally make the will public initially, after some time period, only leave instructions for retreiving the will with executors their estate. this use case also supports the continual updating will, and provides record all the changes will, with timestamps and cryptographic certainty. this record can verified any and all exectuors, with without making the records public. indeed, public hushlist can used provide instructions and the actual will, and newer memos that list are public proof that the person has changed their will. "oppressed minority" user story francesca and nicolau francesca and nicalau live place where their local religion/government/organization oppressed larger religion/government/organication that controls everything around them, yet they still want safely communicate. "security researcher" user story gordon dana wants communicate -day exploits about nation-state infrastructure the people that run this critical infrastructure, without anybody else listening this very sensitive information. "whisteblower" user story martha martha has data about something that must transported from internal-only systems, external places, preferably many, while knowing that the data not tampered with even viewed until the appropriate time. "censored journalist" user story billy this extension the "pen name" user story. let's say that for some reason journalist billy already known publicly, but censored from all media locally various places. billy can use hushlist publish his writing (and also source data, encrypted not) multiple blockchains make permanently mirrored across thousands servers and very hard censor. special thanks special thanks daira hopwood for inspring zcash protocol document and for making the latexinfrastructure open source, which was used make this document. hushlist built the shoulders giants and all the people that have made the bitcoin and zcash ecosystems what they are, thank you. additionally, special thanks the komodo platform[komodo], which has embraced hush one the first cryptocoins added their barterdex [barterdex] atomic swap platform and continues support the hush community various ways. references [barterdex] jl. barterdex atomic swap decentralized exchange native coins. url: https://github. com/supernetorg/komodo/wiki/barterdex-whitepaper-v (visited --) p). [bitcoin] satoshi nakamoto. bitcoin: peer-to-peer electronic cash system. october url: https://bitcoin.org/en/bitcoin-paper (visited --) p). [bitcoin-protocol] protocol documentation bitcoin wiki. url: https bitcoin wiki protocol documentation (visited --) p). [dpow] jl. delayed proof work (dpow). url: https://supernet.org/en/technology/whitepapers/ delayed-proof-of-work-dpow (visited --) p). [komodo] supernet. komodo platform. url: https komodoplatform com (visited --) p). [rfc-] scott bradner. request for comments key words for use rfcs indicate requirement levels. internet engineering task force (ietf). march url: https://tools.ietf.org/ html/rfc (visited --) p). [zcash] daira hopwood. zcash protocol specification. url: https://github.com/zcash/zips/blob/ master/protocol/protocol.pdf (visited --) p).