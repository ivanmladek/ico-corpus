chandler song,stanley wu,ryan fang info@ankr.network etwo resource-efficient and scalable blockchain preliminary draft. private information. april ankr network ankr network table contents abstract introduction current blockchain technology ankr's solutions proof useful work background trusted hardware pouw consensus protocol program interpreter native data feed for smart contract undesirable existing oracle solutions nos components data feed protocol improvements security and confidentiality use cases and unlocked potentials ecosystem the ankr blockchain ankr token system smart identity and credit system dapps and programmable interfaces use cases real estate asset-backed securities multi-chain structure chain structure plasma context within the distributed cloud references ank two abstract this white paper, present the ankr blockchain, multi-chain and useful work based decentralized network with native data feed. first review novel mining solution using the proof useful work (pouw) consensus. will explain the multiple-chain structure and then describe how plan provide generic interface for town crier, authenticated data feed for smart contracts. will also discuss how ankr's technologies will enable decentralized cloud computing. finally, will characterize the ankr ecosystem and the app interface further facilitate the utilization the ankr network. nfo@ank network ankr two introduction current blockchain technology blockchain growing list blocks. these blocks contain records and timestamps. blockchain network decentralized network, where every node this network keeps copy the information this network. this way the network immune single point failure. the network decentralized where users need only trust the consensus, not anyone else, validate piece information. this solves byzantine general problem. these properties make blockchain ideal vehicle for public ledger. pioneer application blockchain bitcoin. since the advent bitcoin, the world has witnessed rapid progress and improvement blockchain technology. from bitcoin, decentralized censorship-resistant electronic cash system that was primarily built transaction application, ethereum, the next major innovation with programmable languages that support customized applications through "smart contract" technology, countless other endeavors the blockchain community, the advantage and benefits decentralized framework have become more evident over time. common for today's companies try integrate blockchain technology into their existing business model. however, there are still various obstacles preventing mass adoption the blockchain technology real-world business applications, and believe three the biggest challenges are massive waste power current mainstream blockchain technology lack reliable and efficient oracle (data feed) services connect existing businesses the blockchain low tps and lack scalability due the overloaded single blockchain implementation for all business purposes this moment, there are two design paradigms for blockchain applications: treating blockchain database with all business logic residing the applications such frameworks will inevitably slow down over time exponential data growth will bloat the blockchain size collecting smart contracts for drastically different business use cases one blockchain such framework will face considerable difficulty maintain and scale the long run most blockchain applications use either proof work (pow) proof stake (pos) the consensus for fo@a ank two validating piece information (in most cases the information the ownership coin token).yet both proof work and proof stake consensus protocol face considerable challenges when comes real-world application. pow requires massive computation (a.k.a mining) validate new block. this process wastes enormous amount energy. pos distributes new blocks based deterministic way, where the stake user considered. though more energy efficient, pos-based blockchains face the potential nothing-at-stake-attack, where bad behaviors are not punished. notably, especially for some the newly developed pos-based blockchains, existing businesses even individuals the real-world can easily occupy the majority the stake and render the entire blockchain compromised. ankr's solutions ankr blockchain revolutionary multi-chain and strive build resource-efficient blockchain useful-work based blockchain with native authenti- framework that truly enables decentralized cloud cated data feed. ankr blockchain provides innova- computing and provides user-friendly infrastruc- tive solution the following problems: ture for business applications. collaborating with proof useful work (pouw) allows for industry partners, ankr network will also propose self-sustainable and contribute several example child chains blockchain framework with the potential unlock idle computing power around the that address distinct business scenarios, including world, forming decentralized super-cpu real estate, financial products, automobile, art native authenticated data feed with standardized collection, wine, and others. api enables simple real-world business adoption ankr will unlock new potentials with the following multi-chain plasma implementation allows differ- innovations: ent applications handle application-specific smart standardized apis for connecting existing contracts individual child chains, preventing trans- business-ready internet solutions actions from overloading the pouw-based main speed and scalability from novel blockchain chain architecture security and confidentiality enabled trusted hardware environmentally efficient mining and sharing computing resources reliable native oracle service info@ank etwork ankr two proof useful work background bitcoin's underlying consensus protocol proof work (pow) addresses two fundamental problems decentralized cryptocurrency design: how select consensus leaders and how allocate rewards fairly among participants. even though proof work (pow) provides security the blockchain, nevertheless forces participants waste massive amount computational resources. other than preventing malicious attackers from taking over the majority the mining resources, pow consensus finds other real-world benefit. the time writing this white paper, the bitcoin network uses more electricity than the entire country iceland and this amount projected reach much what consumed the population denmark the year other popular consensuses such practical byzantine fault tolerance (pbft) proof stake (pos) are essentially waste-free, but they restrict participation require participants lock stakes the blockchain. further, pbft and pos consensus are often complex and arbitrary, making extremely hard update and adjust the original setup. o@a trusted hardware intel sgx (software guard extensions) new set instructions that permits execution application inside hardware enclave, which protects the application's integrity and confidentiality against certain forms hardware and software attacks, including hostile operating systems. enclave processes isolated executions sgx. these system calls are guaranteed execute correctly and with perfect confidentiality. sgx allows generation authentication that remotely proves the validity operation. when enclave created, the cpu produces hash its initial state. the software the enclave may later time request report which includes measurement and supplementary data provided the process. the report digitally signed using hardware-protected key produce proof that the software running sgx-protected enclave. such proof can verified remote system and sgx signs proofs using group signature. nfo@ank etwork ank two pouw consensus protocol propose proof useful work consensus, which able achieve high-security standard without wasting energy. high-level, pouw consensus, miners with cpu computing power can execute useful computation under the trusted hardware's proctoring earn reward within the blockchain ecosystem. traditional pow consensus, reward can only claimed after miners have solved complex hashing problems. such setup due the lack trusted proctor. sgx-protected hardware enclave can act trusted proctor for cpu activities, testifying miners' useful computation and providing proofs for mining reward. the pouw based ankr blockchain has mining scheme composed three components: miners, useful work providers, and the blockchain agent. note that the blockchain agent not person, but entity enabled the trusted hardware. the useful work providers will supply useful workloads miners. the blockchain agent will collect transactions the blockchain and generate corresponding block templates made ready once the proof useful work confirmed. other words, order for block fully validated and published the network, the block template requires pouw attached. the other hand, once the miner finishes its job, the hardware enclave verifies the validity the miner's contribution and meters based number instructions. complete pouw consists attestation generated sgx validating the compliance with ankr and another attestation validating the matching difficulty parameter. decide which instruction deserves the reward, the pouw enclave generates random number and check whether this number smaller than the desired difficulty. this case, uses sgx's random number generator (srng) handle instructions batches. concretely, pouw will divide useful workload into subtasks much shorter duration. each subtask will run completion and compete for winning. the result has lower number executed instructions than any other, the enclave will generate the attestation that includes the input block hash and difficulty. while true: blockchain agent block template; process(template)- (hash,difficulty); pseudo code for the miner loop: useful work client task; enclave(task,hash,difficulty)- pouw; pouw (block template,pouw)- new block; o@a two ank two pouw opens new opportunities for the ankr blockchain miners' computing power within the network can used towards almost all on-chain computation. for instance, client submits private datagram request through our oracle service, the miner will use its resources help encrypt and decrypt the parameters the datagram request. excessive computational resources can monetized and sold internal external applications for useful works. these useful work tasks can include training neural network and even hosting web services. conclusion, understand pouw high level and compare existing solutions, can imagine world with only two things computing and task-requesting. proof work system, everyone computes essentially useless puzzles with rewards, and for every predetermined time period, lottery winner randomly chosen (the most hard-working person has the best chance win). proof stake system, for every predetermined time period, lottery winner randomly chosen (the richest has the largest chance win). and that one person allowed compute only on-chain transactions and get paid the task requester. proof useful work system, everyone can compute all kinds tasks that others request while getting paid the requesters. with trustworthy proctor monitoring everyone's computation actions, and for every predetermined time period, the proctor will randomly give out reward everyone who has done computing for others this time period. people who perform more computing this time period have higher probability get reward. course, the "lottery winner" will very happy with the extra reward, but everyone else will feel just fine they also get paid. this system where everyone's endeavor gets rewarded, and the most hard-working individuals have the best chance win the lottery. nfo@ank network ankr two with the widespread use sgx-enabled cpus, the pouw protocol has the potential unlock massive idled cpu (with sgx instructions) computing power for useful work computation. envision that useful work can come from both computation tasks both and off the blockchain. this essentially will enable distributed cloud computing, where otherwise idled cpus can now generate value for owners with little cost. further, under such distributed computing framework, the task requestors will have access cheaper cloud computing service compared traditionally centralized cloud computing services. currently, cloud service giants like aws and microsoft azure charge extremely high markups. program interpreter will using graphene sgx provide developer interfaces for programming the hardware enclave. graphene sgx fully-featured library can rapidly deploy unmodified applications sgx with overheads comparable applications modified use "shim" layers. generally, graphene-sgx interprets high-level code and converts them c/c++. these supports can runtimes command-line, apache, nginx, gcc, python, openjdk, etc. fo@a ank two multi-chain structure ethereum processes all smart contracts one chain serial which bottlenecks throughput, especially when there are massive contracts and complicated data the chain. will look closely into how plan scale ankr blockchain through implementing plasma and sharding. chain structure ankr network consists tree structure blockchains where various application chains (child chains) are connected single root chain (main chain). ankr's main chain the backbone the entire system. the main chain based pouw and its functionality includes child chain indexing, useful work mining and smart contract executions. each child chain tailored the need specific application. basically, each block the main chain contains the references the boundary child chains. new blocks are generated the child chain, the main chain will create new blocks reflect the new boundary and cross-chain communication should implemented message system keep the isolation chains. info@ank etwork ankr two each child chain can tailored serve different purposes based technical need. application-specific smart contracts will stored the child chain, and the main chain will used for consensus and distributed computation. because the main chain can tap into distributed global computing power, transactions the child-chain will calculated speed much faster than transactions traditional one-chain structure. transactions can even reversed participant within the child blockchain proven have acted maliciously. the main chain will also provide native authenticated data feed service for off-chain data relay each child chain. currently, existing oracle solution exists separately from the blockchain framework and limited compatibility. propose user-friendly universal api for each child chain connect off-chain entities. existing business can build decentralized autonomous applications the child chain with powerful computing power and native data feed service provided the main chain. o@a ankr two different tailored needs can categorized follows: low transaction volume but high transaction amount, eg. real estate high transaction volume but low transaction amount, eg. e-commerce real-time requests and responses, eg. prediction market plasma plasma protocol for building unlimited number blockchains that can are supervised ankr's main chain. the efficiency the main chain can significantly improved offloading some transactions from the main chain plasma chains, especially proper incentives are given plasma operators. another advantage the flexibility plasma chain implementation long can effectively cross-checked contract parent chain. with new cryptographic approaches one can extend plasma implementation with transactions utilizing ring signatures zksnarks for confidentiality end users. every participant the network must run both plasma node and the ankr node. blocks must store all transactions and then form -depth merkle tree with each transaction being leaf (unfilled leaves are zeroed out). the merkle root then hashed together with the hash from the previous block header and stored root hash. the block then propagated the network through gossip protocol and the root hash with timestamp submitted root chain through ankr node with the validator address. there will way for validator quickly check utxo most recent. when someone makes deposit, add the transaction utxo set. when someone makes valid transaction from transaction output the current utxo set, remove the original output from the utxo set and add its outputs the new utxo set. when someone successfully exits, simply remove the from utxo set. this how transaction must stored rlp serialized format. [blknum, txindex, oindex, sig, input blknum, txindex, oindex, sig, input newowner, denom, output newowner, denom, output fee] each transaction has inputs and outputs, and the sum the denominations the outputs plus the fee must equal the sum the denominations the inputs. the signatures must signatures all the other fields the transaction, with the private key corresponding the owner that particular output. deposit block has all input fields, and the fields for the second output, zeroed out. make transaction that spends only one inf nkr .networ ank two utxo, user can zero out all fields for the second input. the case where participant sees invalid block, they submit fraud proof the root chain. the case where participant does not receive block, but they see new block header hash submitted the root chain; they must submit exit transaction soon possible. also, they need validate that the new block has same root hash the root hash root chain. send transaction, will serialize transaction format described above, propagate transaction network and wait for the transaction included plasma block. the block header hash will added smart contract root chain the more detailed implementation plan will include: list plasma blocks, for each block storing (i) the merkle root, (ii) the time the merkle root was submitted. create block struct which has both merkle root and timestamp recorded each block. mapping from uint block num block struct list submitted exit transactions, storing the submitter address and the utxo position (plasma block number, txindex, outindex). this must stored data structure that allows transactions popped from the set order priority. thi can implemented using priority queue, with priority equal blknum txindex oindex. users should able challenge any exit within the priority queue (this requires being able delete node from any place priority queue). the future, should able determine how efficiently prove invalid blocks chain. this allows users prove block invalid, slash stake owner and reward challenger. block must then rolled back removing (blocknum, block) pair from mapping plasma blocks root chain. constructor owner msg.sender; owner_stake msg.value; blockcount create new can only called contract must allow removal node anywhere data structure allow for parallel challenges take place. o@a two ankr network submitblock(bytes root): submits block, which basically just the merkle root the transactions the block add mapping from (blockcount struct(root, block.timestamp)) can only called owner fire blocksubmitted(roothash) event deposit(): generates block that contains only one transaction, generating new utxo into existence with denomination equal the msg.value deposited root contract creates block and hashes the way the child chain would and adds the plasma block list. validator must submit block with the next block number. they try submit block with same block number will ignored. depositor never sees the block with their deposit, they can still submit startexit with all parameters except for confirmsig they see the block with their deposit, but any future transaction withheld, they again submit startexit with all parameters except for confirmsig the case where they send the transaction, its included the block but that block withheld. they can still successfully exit because any challenge needs confirmsig from sender saying have the block. fire deposit(msg.sender, msg.value) event startexit(uint plasmablocknum, uint txindex, uint oindex, bytes tx, bytes proof, bytes confirmsig): starts exit procedure for given utxo. requires input (i) the plasma block number and index which the utxo was created, (ii) the output index, (iii) the transaction containing that utxo, (iv) merkle proof the transaction, and (v) confirm signature from each the previous owners the now-spent outputs that were used create the utxo. when just have fresh utxo that needs exit, put for confirmsig parameter when have old utxo, need aggregate all signatures from previous owners (how aggregate?). figure out omisego does aggregate signature. merkle proof the transaction, validate that corresponds hash plasmablocknum list plasma blocks this needs bonded. only the user who received this transaction should able call this method (no one can exit someone else's transaction) fire exitstarted(msg.sender, plasmablocknum, txindex, oindex) event. challengeexit(uint exitid, uint plasmablocknum, uint txindex, uint oindex, bytes tx, bytes proof, bytes confirmsig): challenges exit attempt process, providing proof that the txo was spent, the spend was included block, and the owner made confirm signature. ecrecover(hash(tx), s): address returned must the same sender exit transaction. merkle proof the transaction, validate that corresponds hash plasmablocknum info@ankr.network ank two list plasma blocks this needs bonded. bond submitted exiter startexit reward challenger successful. allows one delegate challenging improper exits third party. finalizeexit() pops exit off challenge period ended pays exiter required money note: can called anyone. fire exitfinalized(address exiter, plasmablocknum, txindex, oindex) event withdraw() transfers any owed funds msg.sender (includes exits and refunded bonds) must have way keeping track the funds bonded msg.sender and whether that bond can released. create mapping(address uint) withdrawals. upon successful exit, increment with drawals[msg.sender] with exit funds bond. upon successful challenge, increment withdrawals[msg.sender] with bond exiter own bond. blocks can only sent one one, sequence enforced the contract. any user ankr network can deposit ankr tokens contract that will trigger event and force plasma network operator make funding transaction plasma chain. then the users can make transactions freely the plasma chain with only headers being pushed the parent contract ankr. when user would like settle one his transactions the main chain, the user can make withdrawal ankr providing reference number the transaction. will require the full transaction and merkle proof prove this transaction valid the blockchain context and the user legitimate owner. parent contract checks proof and passes, the withdrawal starts. o@a two ankr two native data feed for smart contract smart contracts are programs that execute autonomously the blockchain without external connectivity. their key uses (e.g. financial instruments) require them consume data from outside the blockchain (e.g. stock quotes). today, almost all blockchains are data-hungry. order build sufficient ecosystem for smart contracts widely adopted, trustworthy data feed system that supports large amount data requests extremely critical.therefore, mechanism such oracle service required bridge the two environments: on-chain and off-chain. again, considering speed and scalability our design goal, this oracle service must reliable and efficient. introduce ankr's native data feed, which enabled the native oracle system authenticated data feed system using trusted hardware. undesirable existing oracle solutions centralized oracle: centralized oracle the most commonly used approach many blockchains. such system quite the antithesis decentralized blockchain and smart contracts fails provide tamper resistance and trustlessness. almost all centralized oracles rely off-chain notarizations, which can potentially create troublesome results. manual human input: many proposals focus full adoption manual human input. though decentralized and flexible, such approach not only time-inefficient, but also resource-intensive. maneuvering data sources: even though tls-n provides digitally signed data sources, such method would require all legacy systems and websites change their infrastructure accordingly. fecosystem o@a nwhite opaper ank nos components data feed protocol native oracle system consists three com- initiate data request: the smart contract sends ponents: the nos smart contract, the enclave datagram request nos contract and the relay. the enclave and relay reside the nos server and the nos smart contract monitor and relay: the relay monitors the nos con- executed the blockchain. tract and delivers any incoming request the enclave. the nos smart contract functions the fron- fetch data feed: the enclave communicates with the tend the nos system. provides api data source via https with the given parameters. interact with any form smart contract such after obtaining the datagram, forwards the datagram the ethereum smart contract written the nos contract via the relay. solidity. concretely, nos smart contract accepts datagram request from block- response: nos contract returns the datagram chain-based smart contract and responds with the smart contract. the corresponding datagram. cnos also provides monetary management similar ethereum's gas. additionally, fixes many existing issues with the ethereum's gas, which will addressed later. the enclave responsible for ingesting datagram requests from blockchains. queries external https-enabled internet data sources, returns datagram digitally signed message. the enclave should assumed secure lacks network access and completely isolated from any operating system and software, whether hostile not. the relay handles bidirectional network traffic behalf the enclave. info@ank etwork ank two improvements security and confidentiality gas sustainability: ethereum requires transaction initiators pay gas costs. such design has the risk malicious users triggering calls steal gas, causing the depletion gas and potential denial-of-service attack the application level. therefore critical that any gas services blockchain can reimbursed for computation initiated. one significant drawback the current ethereum gas model that, transaction submitted wallet with insufficient funds, the wallet's balance will drop nos protocol ensures that honest system will not run out money and that honest requester will not pay excessive fees. private datagram requests: not all transactions have publicly visible. nos supports permission-based user confidentiality encrypting parameters the datagram requests. only users with permission will able see the data responses. fo@a two use cases and unlocked potentials https-enabled website and legacy systems: nos can easily transfer data from https-enabled websites the blockchain. for example, mls trusted source for all real estate data. the api supports data recent sales, public and private schools, demographics, home values and market trends. nos can deliver the data bulk json xml onto the blockchain. potential fiat currency transactions blockchain: nos should able provide bank-intermediated ledger through commercial banks' api. design, should present transferring proofs, making purchases smart assets with fiat currency possible. potential modern application interfaces: nos system can connect blockchain with modern applications such facebook messenger and wechat unlock massive marketing potentials. info@ank network ank two ecosystem the ankr blockchain ankr token system ankr tokens serve the storage value and means transfer value. all times, ankr token can used incentivize the engagement with ankr network and can transferred across child chains. since more complicated finish transactions within multi-chain system, the main chain, with global knowledge, will the best place maintain the allocation tokens generated. ankr tokens can used computation fees across all child chains, and all users ankr blockchain can earn ankr tokens contributing their computing power. such ecosystem virtuous cycle, the more people participate ankr blockchain computation, the more ankr token they will earn, the more token they have, the more service they can acquire the ecosystem, and thus triggering more computation needs. ankr tokens can mined contributing idle computing power for useful work computation and will charged for computation and transactions happened ankr blockchain. this will create truly self-sustainable ecosystem and create "decentralized world computer." the decentralized computer will cost users ankr token use, but will much cheaper than centralized solutions such amazon cloud google cloud, because the decentralized cloud will utilize otherwise wasted computing power and wouldn't charge high markup like the internet giants. moreover, human capital for running the decentralized computer will much lower, the decentralized solution won't spend large amount money for administration, marketing and high executive compensation. other words, the "decentralized computer" will provide the strongest computing power with the lowest cost. envision the ankr blockchain truly self-sustainable ecosystem with growing popularity among the community and ever-increasing computational power. smart identity and credit system with the embedded oracle service the ankr blockchain, users will able build their own identities o@a two ank smart contracts within the ecosystem. the future, instead being restricted one dapp, users can interact with all dapps the ankr blockchain. one user exists singularly the chain with the smart contract recording all the user events the blockchain. off-chain assets can also digitalized and tokenized and written into smart contracts, with immutable log all transactions. the connected internet things enables truly innovative credit system that allows both sides the transaction transparent and untampered. dapps and programmable interfaces well-designed public api crucial for business adoption and usability. let's take amazon aws example. the simple storage service (s) provides operations like retrieve, store, refresh, update and etc. most customers not care need understand how their data duplicated and distributed for the purpose resilience and accessibility. similarly, blockchain app developer more interested promoting assets the chain, removing assets off the chain and maintaining the status. will provide more information about our long-term plan the section ecosystem and dapp. nfo@ank network ank two context within the distributed cloud o@a two ank two use cases ankr working closely with various partners across the real estate, fintech, automobile and art collection industries for future dapps ankr blockchain. all dapps the ankr blockchain will use ankr tokens for computation and transaction fees. believe with native oracle services and resource efficient consensus, the ankr blockchain will ideal platform for existing businesses build their blockchain applications. real estate the real estate industry characterized asymmetric information and heavy offline operations. all parties the industry try create edge for themselves via the use asymmetric information, concealing information that could positively hurt their position the transaction. due such dispersed and centralized information ownership, countless manual information exchanges are required, and turn, opportunities tamper with information are created. result, massive friction and ambiguity persist the industry. the ankr blockchain provides turnkey solution this intransparent and inefficient industry, the native oracle system can automatically update off chain data, and private datagram requests can support permission-based information visibility. believe full information visibility all users the network isn't ideal for real estate application, sensitive information such one's rent payment records property's income history should only made visible counterparties when permission given. with this logic mind, ankr networks and our partner, cityspade, strive build the first native dapp that provides blockchain based rental payment and rental contract marketplace that will form personal rental credit system over time. moreover, with established rental credit system, crowdfunded security deposits, tokenized rental agreement transactions even partial real estate ownership trading can become reality. more than apartments managed cityspade across new york, philadelphia, boston, washington and new jersey will become the first wave properties that are given "smart identities" that record all future transactions and rental income the underlying properties. more than million worth annual rental info@ank etwork ankr two payments will processed the native application right from the beginning, and believe more properties well users will join the platform for ample incentives created organically the platform and unprecedented automation experience. (detailed description see real estate native dapp whitepaper) fo@a two ank two asset-backed securities the ankr blockchain, with its high computation starting with the loan origination. when borrowers and capability and native real-time oracle feed, can lenders agree the terms loan, new electronic largely streamline the asset-backed security asset will created the blockchain and time-stamped. origination processes, lower costs, increase the ownership information and other pertinent underwriting speed transactions, enhance transparency, data will attached the loan. smart contracts with and fortify security. securitization services relevant loan information will enable automatic loan based the ankr blockchain could impact all servicing and records the borrower's payment history. participants lifecy- group loans will have the ability pooled cle--from originators, sponsors/issuers, and together into spv, where individual servicing history will servicers rating agencies, trustees, investors, linked the original borrower. this allows future secu- and even regulators. rity holders view the underlying loan's performance the securitization almost real time. when loan-backed security created, along with our partner, ankr network relevant legal and offering documents will automatically proposing child-chain application that rein- created smart contracts with little manual assis- vents the securitization lifecycle (here use tance. regulators will given full permission all rele- loan-backed security example). vant information for compliance, while the public will only have limited information access for this digital security. most importantly, smart contracts will automate the distribution payments the security holder, giving investors real-time visibility their income stream without waiting and without manual actions. rating agencies, regulators and traders will have different permission the same data that ties the underlying assets. such data will also updated real time for all users, giving participants the market single trustworthy asset information source. info@ank network ankr two references eyal, gencer, sirer and renesse. bitcoin-ng: scalable blockchain protocol. nsdi, zhang, f., eyal, i., escriva, r., juels, a., and van renesse, rem: resource-efficient mining for blockchains. cryptology eprint archive, report zhang, cecchetti, croman, juels, and shi. town crier: authenticated data feed for smart contracts. cryptology eprint archive, report intel corporation. intel(r) software guard extensions programming reference, -us edition, intel corporation. intel(r) software guard extensions sdk. https://software.intel.com/en-us/sgx-sdk, intel software guard extensions enclave writer's guide. https://software.intel. com/sites/default/ files/managed/ae// software-guard-extensions-enclave-writers-guide. pdf. accessed: --. satoshi nakamoto, bitcoin: peer-to-peer electronic cash system, buterin. ethereum: next-generation smart contract and decentralized application platform. gavin wood, ethereum: secure decentralised generalised transaction ledger, http:// gavwood.com/pa per.pdf, oraclize: "the provably honest oracle service". www.oraclize.it, referenced feb. buchman. tendermint: byzantine fault tolerance the age blockchains, castro and liskov. practical byzantine fault tolerance. usenix symposium operating sys tems design and implementation (osdi), feb. eleftherios kokoris-kogias, philipp jovanovic, linus gasser, nicolas gailly, ewa syta, bryan ford. omniledger: secure, scale-out, decentralized ledger via sharding randhound and randherd. https://github.com/dedis/paper__randomness. buterin. poon. plasma: scalable autonomous smart contracts fo@a