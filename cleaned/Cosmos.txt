network distributed ledgers jae kwon jae@tendermint.com ethan buchman ethan@tendermint.com for discussions, join our community chat! note: you can read this github, then we're still actively developing this document. please check regularly for updates! the combined success the open-source ecosystem, decentralized le-sharing, and public cryptocurrencies has inspired understanding that decentralized internet protocols can used radically improve socio-economic infrastructure. have seen specialized blockchain applications like bitcoin cryptocurrency), zerocash cryptocurrency for privacy), and generalized smart contract platforms such ethereum [], with countless distributed applications for the etherium virtual machine (evm) such augur prediction market) and thedao (an investment club). date, however, these blockchains have suffered from number drawbacks, including their gross energy inef ciency, poor limited performance, and immature governance mechanisms. proposals scale bitcoin's transaction throughput, such segregated-witness and bitcoinng [], are vertical scaling solutions that remain limited the capacity single physical machine, order ensure the property complete auditability. the lightning network can help scale bitcoin transaction volume leaving some transactions off the ledger completely, and well suited for micropayments and privacy-preserving payment rails, but may not suitable for more generalized scaling needs. ideal solution one that allows multiple parallel blockchains interoperate while retaining their security properties. this has proven dif cult, not impossible, with proof-of-work. merged mining, for instance, allows the work done secure parent chain reused child chain, but transactions must still validated, order, each node, and merge-mined blockchain vulnerable attack majority the hashing power the parent not actively merge-mining the child. academic review alternative blockchain network architectures provided for additional context, and provide summaries other proposals and their drawbacks related work. here present cosmos, novel blockchain network architecture that addresses all these problems. cosmos network many independent blockchains, called zones. the zones are powered tendermint core [], which provides high-performance, consistent, secure pbft-like consensus engine, where strict forkaccountability guarantees hold over the behaviour malicious actors. tendermint core's bft consensus algorithm well suited for scaling public proof-of-stake blockchains. the rst zone cosmos called the cosmos hub. the cosmos hub multi-asset proof-of-stake cryptocurrency with simple governance mechanism which enables the network adapt and upgrade. addition, the cosmos hub can extended connecting other zones. the hub and zones the cosmos network communicate with each other via inter-blockchain communication (ibc) protocol, kind virtual udp tcp for blockchains. tokens can transferred from one zone another securely and quickly without the need for exchange liquidity between zones. instead, all inter-zone token transfers through the cosmos hub, which keeps track the total amount tokens held each zone. the hub isolates each zone from the failure other zones. because anyone can connect new zone the cosmos hub, zones allow for future-compatibility with new blockchain innovations. this section describe the tendermint consensus protocol and the interface used build applications with it. for more details, see the appendix. classical byzantine fault-tolerant (bft) algorithms, each node has the same weight. tendermint, nodes have non-negative amount voting power, and nodes that have positive voting power are called validators. validators participate the consensus protocol broadcasting cryptographic signatures, votes, agree upon the next block. validators' voting powers are determined genesis, are changed deterministically the blockchain, depending the application. for example, proof-of-stake application such the cosmos hub, the voting power may determined the amount staking tokens bonded collateral. note: fractions like and refer fractions the total voting power, never the total number validators, unless all the validators have equal weight. means "more than means "at least tendermint partially synchronous bft consensus protocol derived from the dls consensus algorithm []. tendermint notable for its simplicity, performance, and fork-accountability. the protocol requires xed known set validators, where each validator identi their public key. validators attempt come consensus one block time, where block list transactions. voting for consensus block proceeds rounds. each round has round-leader, proposer, who proposes block. the validators then vote, stages, whether accept the proposed block move the next round. the proposer for round chosen deterministically from the ordered list validators, proportion their voting power. the full details the protocol are described here. tendermint's security derives from its use optimal byzantine fault-tolerance via super-majority voting and locking mechanism. together, they ensure that: voting power must byzantine cause violation safety, where more than two values are committed. any set validators ever succeeds violating safety, even attempts so, they can identi the protocol. this includes both voting for con icting blocks and broadcasting unjusti votes. despite its strong guarantees, tendermint provides exceptional performance. benchmarks nodes distributed across datacenters continents, commodity cloud instances, tendermint consensus can process thousands transactions per second, with commit latencies the order one two seconds. notably, performance well over thousand transactions per second maintained even harsh adversarial conditions, with validators crashing broadcasting maliciously crafted votes. see the gure below for details. major bene tendermint's consensus algorithm simpli light client security, making ideal candidate for mobile and internet-of-things use cases. while bitcoin light client must sync chains block headers and the one with the most proof work, tendermint light clients need only keep with changes the validator set, and then verify the precommits the latest block determine the latest state. succinct light client proofs also enable inter-blockchain communication. tendermint has protective measures for preventing certain notable attacks, like long-range-nothing-at-stake double spends and censorship. these are discussed more fully the appendix. the tendermint consensus algorithm implemented program called tendermint core. tendermint core application-agnostic "consensus engine" that can turn any deterministic blackbox application into distributedly replicated blockchain. tendermint core connects blockchain applications via the application blockchain interface (abci) []. thus, abci allows for blockchain applications programmed any language, not just the programming language that the consensus engine written in. additionally, abci makes possible easily swap out the consensus layer any existing blockchain stack. draw analogy with the well-known cryptocurrency bitcoin. bitcoin cryptocurrency blockchain where each node maintains fully audited unspent transaction output (utxo) database. one wanted create bitcoin-like system top abci, tendermint core would responsible for sharing blocks and transactions between nodes establishing canonical/immutable order transactions (the blockchain) meanwhile, the abci application would responsible for maintaining the utxo database validating cryptographic signatures transactions preventing transactions from spending non-existent funds allowing clients query the utxo database tendermint able decompose the blockchain design offering very simple api between the application process and consensus process. cosmos network independent parallel blockchains that are each powered classical bft consensus algorithms like tendermint the rst blockchain this network will the cosmos hub. the cosmos hub connects many other blockchains (or zones) via novel inter-blockchain communication protocol. the cosmos hub tracks numerous token types and keeps record the total number tokens each connected zone. tokens can transferred from one zone another securely and quickly without the need for liquid exchange between zones, because all inter-zone coin transfers through the cosmos hub. this architecture solves many problems that the blockchain space faces today, such application interoperability, scalability, and seamless upgradability. for example, zones derived from bitcoind, go-ethereum, cryptonote, zcash, any blockchain system can plugged into the cosmos hub. these zones allow cosmos scale nitely meet global transaction demand. zones are also great for distributed exchange, which will supported well. cosmos not just single distributed ledger, and the cosmos hub isn't walled garden the center its universe. are designing protocol for open network distributed ledgers that can serve new foundation for future nancial systems, based principles cryptography, sound economics, consensus theory, transparency, and accountability. the cosmos hub the rst public blockchain the cosmos network, powered tendermint's bft consensus algorithm. the tendermint open-source project was born address the speed, scalability, and environmental issues bitcoin's proof-ofwork consensus algorithm. using and improving upon proven bft algorithms developed mit [], the tendermint team was the rst conceptually demonstrate proof-of-stake cryptocurrency that addresses the nothing-at-stake problem suffered rst-generation proof-of-stake cryptocurrencies such nxt and bitshares.. today, practically all bitcoin mobile wallets use trusted servers provide them with transaction veri cation. this because proofof-work requires waiting for many con rmations before transaction can considered irreversibly committed. doublespend attacks have already been demonstrated services like coinbase. unlike other blockchain consensus systems, tendermint offers instant and provably secure mobile-client payment veri cation. since the tendermint designed never fork all, mobile wallets can receive instant transaction con rmation, which makes trustless and practical payments reality smartphones. this has signi cant rami cations for internet things applications well. validators cosmos have similar role bitcoin miners, but instead use cryptographic signatures vote. validators are secure, dedicated machines that are responsible for committing blocks. non-validators can delegate their staking tokens (called "atoms") any validator earn portion block fees and atom rewards, but they incur the risk getting punished (slashed) the delegate validator gets hacked violates the protocol. the proven safety guarantees tendermint bft consensus, and the collateral deposit stakeholders-validators and delegators-provide provable, quanti able security for nodes and light clients. distributed public ledgers should have constitution and governance system. bitcoin relies the bitcoin foundation and mining coordinate upgrades, but this slow process. ethereum split into eth and etc after hard-forking address thedao hack, largely because there was prior social contract nor mechanism for making such decisions. validators and delegators the cosmos hub can vote proposals that can change preset parameters the system automatically (such the block gas limit), coordinate upgrades, well vote amendments the human-readable constitution that govern the policies the cosmos hub. the constitution allows for cohesion among the stakeholders issues such theft and bugs (such thedao incident), allowing for quicker and cleaner resolution. each zone can also have their own constitution and governance mechanism well. for example, the cosmos hub could have constitution that enforces immutability the hub (no roll-backs, save for bugs the cosmos hub node implementation), while each zone can set their own policies regarding roll-backs. enabling interoperability among differing policy zones, the cosmos network gives its users ultimate freedom and potential for permissionless experimentation. here describe novel model decentralization and scalability. cosmos network many blockchains powered tendermint. while existing proposals aim create "single blockchain" with total global transaction ordering, cosmos permits many blockchains run concurrently with one another while retaining interoperability. the basis, the cosmos hub manages many independent blockchains called "zones" (sometimes referred "shards", reference the database scaling technique known "sharding"). constant stream recent block commits from zones posted the hub allows the hub keep with the state each zone. likewise, each zone keeps with the state the hub (but zones not keep with each other except indirectly through the hub). packets information are then communicated from one zone another posting merkle-proofs evidence that the information was sent and received. this mechanism called inter-blockchain communication, ibc for short. any the zones can themselves hubs form acyclic graph, but for the sake clarity will only describe the simple con guration where there only one hub, and many non-hub zones. the cosmos hub blockchain that hosts multi-asset distributed ledger, where tokens can held individual users zones themselves. these tokens can moved from one zone another special ibc packet called "coin packet". the hub responsible for preserving the global invariance the total amount each token across the zones. ibc coin packet transactions must committed the sender, hub, and receiver blockchains. since the cosmos hub acts the central ledger for the whole system, the security the hub paramount importance. while each zone may tendermint blockchain that secured few (or even less bft consensus not needed), the hub must secured globally decentralized set validators that can withstand the most severe attack scenarios, such continental network partition nation-state sponsored attack. cosmos zone independent blockchain that exchanges ibc messages with the hub. from the hub's perspective, zone multi-asset dynamic-membership multi-signature account that can send and receive tokens using ibc packets. like cryptocurrency account, zone cannot transfer more tokens than has, but can receive tokens from others who have them. zone may designated "source" one more token types, granting the power ate that token supply. atoms the cosmos hub may staked validators zone connected the hub. while double-spend attacks these zones would result the slashing atoms with tendermint's forkaccountability, zone where the voting power are byzantine can commit invalid state. the cosmos hub does not verify execute transactions committed other zones, the responsibility users send tokens zones that they trust. the future, the cosmos hub's governance system may pass hub improvement proposals that account for zone failures. for example, outbound token transfers from some (or all) zones may throttled allow for the emergency circuit-breaking zones temporary halt token transfers) when attack detected. now look how the hub and zones communicate with each other. for example, there are three blockchains, "zone", "zone", and "hub", and wish for "zone" produce packet destined for "zone" going through "hub". move packet from one blockchain another, proof posted the receiving chain. the proof states that the sending chain published packet for the alleged destination. for the receiving chain check this proof, must able keep with the sender's block headers. this mechanism similar that used sidechains, which requires two interacting chains aware one another via bidirectional stream proof-of-existence datagrams (transactions). the ibc protocol can naturally ned using two types transactions: ibcblockcommittx transaction, which allows blockchain prove any observer its most recent block-hash, and ibcpackettx transaction, which allows blockchain prove any observer that the given packet was indeed published the sender's application, via merkle-proof the recent block-hash. splitting the ibc mechanics into two separate transactions, allow the native fee market-mechanism the receiving chain determine which packets get committed (i.e. acknowledged), while allowing for complete freedom the sending chain how many outbound packets are allowed. the example above, order update the block-hash "zone" "hub" (or "hub" "zone"), ibcblockcommittx transaction must posted "hub" with the block-hash "zone" (or "zone" with the block-hash "hub"). see ibcblockcommittx and ibcpackettx for for more information the two ibc transaction types. the same way that bitcoin more secure being distributed, mass-replicated ledger, can make exchanges less vulnerable external and internal hacks running the blockchain. call this distributed exchange. what the cryptocurrency community calls decentralized exchange today are based something called "atomic crosschain" (axc) transactions. with axc transaction, two users two different chains can make two transfer transactions that are committed together both ledgers, none all (i.e. atomically). for example, two users can trade bitcoins for ether (or any two tokens two different ledgers) using axc transactions, even though bitcoin and ethereum are not connected each other. the bene running exchange axc transactions that neither users need trust each other the trade-matching service. the downside that both parties need online for the trade occur. another type decentralized exchange mass-replicated distributed exchange that runs its own blockchain. users this kind exchange can submit limit order and turn their computer off, and the trade can execute without the user being online. the blockchain matches and completes the trade behalf the trader. centralized exchange can create deep orderbook limit orders and thereby attract more traders. liquidity begets more liquidity the exchange world, and there strong network effect (or least winner-take-most effect) the exchange business. the current leader for cryptocurrency exchanges today poloniex with -hour volume $m, and second place bit nex with -hour volume $m. given such strong network effects, unlikely for axc-based decentralized exchanges win volume over the centralized exchanges. for decentralized exchange compete with centralized exchange, would need support deep orderbooks with limit orders. only distributed exchange blockchain can provide that. tendermint provides additional bene faster transaction commits. prioritizing fast nality without sacri cing consistency, zones cosmos can nalize transactions fast for both exchange order transactions well ibc token transfers and from other zones. given the state cryptocurrency exchanges today, great application for cosmos the distributed exchange (aka the cosmos dex). the transaction throughput capacity well commit latency can comparable those centralized exchanges. traders can submit limit orders that can executed without both parties having online. and with tendermint, the cosmos hub, and ibc, traders can move funds and out the exchange and from other zones with speed. privileged zone can act the source bridged token another cryptocurrency. bridge similar the relationship between cosmos hub and zone; both must keep with the latest blocks the other order verify proofs that tokens have moved from one the other. "bridge-zone" the cosmos network keeps with the hub well the other cryptocurrency. the indirection through the bridge-zone allows the logic the hub remain simple and agnostic other blockchain consensus strategies such bitcoin's proof-of-work mining. each bridge-zone validator would run tendermint-powered blockchain with special abci bridge-app, but also full-node the "origin" blockchain. when new blocks are mined the origin, the bridge-zone validators will come agreement committed blocks signing and sharing their respective local view the origin's blockchain tip. when bridge-zone receives payment the origin (and suf cient con rmations were agreed have been seen the case pow chain such ethereum bitcoin), corresponding account created the bridge-zone with that balance. the case ethereum, the bridge-zone can share the same validator-set the cosmos hub. the ethereum side (the origin), bridge-contract would allow ether holders send ether the bridge-zone sending the bridge-contract ethereum. once ether received the bridge-contract, the ether cannot withdrawn unless appropriate ibc packet received the bridge-contract from the bridge-zone. the bridge-contract tracks the validator-set the bridge-zone, which may identical the cosmos hub's validator-set. the case bitcoin, the concept similar except that instead single bridge-contract, each utxo would controlled threshold multisignature psh pubscript. due the limitations the psh system, the signers cannot identical the cosmos hub validator-set. ether the bridge-zone ("bridged-ether") can transferred and from the hub, and later destroyed with transaction that sends particular withdrawal address ethereum. ibc packet proving that the transaction occurred the bridge-zone can posted the ethereum bridge-contract allow the ether withdrawn. the case bitcoin, the restricted scripting system makes dif cult mirror the ibc coin-transfer mechanism. each utxo has its own independent pubscript, every utxo must migrated new utxo when there change the set bitcoin escrow signers. one solution compress and decompress the utxo-set necessary keep the total number utxos down. the risk such bridgeging contract rogue validator set. byzantine voting power could cause fork, withdrawing ether from the bridge-contract ethereum while keeping the bridgedether the bridge-zone. worse, byzantine voting power can steal ether outright from those who sent the bridge-contract deviating from the original bridgeging logic the bridge-zone. possible address these issues designing the bridge totally accountable. for example, all ibc packets, from the hub and the origin, might require acknowledgement the bridge-zone such way that all state transitions the bridge-zone can ciently challenged and veri either the hub the origin's bridge-contract. the hub and the origin should allow the bridgezone validators post collateral, and token transfers out the bridge-contract should delayed (and collateral unbonding period suf ciently long) allow for any challenges made independent auditors. leave the design the speci cation and implementation this system open future cosmos improvement proposal, passed the cosmos hub's governance system. solving the scaling problem open issue for ethereum. currently, ethereum nodes process every single transaction and also store all the states. link. since tendermint can commit blocks much faster than ethereum's proof-of-work, evm zones powered tendermint consensus and operating bridged-ether can provide higher performance ethereum blockchains. additionally, though the cosmos hub and ibc packet mechanics does not allow for arbitrary contract logic execution per se, can used coordinate token movements between ethereum contracts running different zones, providing foundation for token-centric ethereum scaling via sharding. cosmos zones run arbitrary application logic, which ned the beginning the zone's life and can potentially updated over time governance. such exibility allows cosmos zones act bridges other cryptocurrencies such ethereum bitcoin, and also permits derivatives those blockchains, utilizing the same codebase but with different validator set and initial distribution. this allows many existing cryptocurrency frameworks, such those ethereum, zerocash, bitcoin, cryptonote and on, used with tendermint core, which higher performance consensus engine, common network, opening tremendous opportunity for interoperability across platforms. furthermore, multi-asset blockchain, single transaction may contain multiple inputs and outputs, where each input can any token type, enabling cosmos serve directly platform for decentralized exchange, though orders are assumed matched via other platforms. alternatively, zone can serve distributed fault-tolerant exchange (with orderbooks), which can strict improvement over existing centralized cryptocurrency exchanges which tend get hacked over time. zones can also serve blockchain-backed versions enterprise and government systems, where pieces particular service that are traditionally run organization group organizations are instead run abci application certain zone, which allows inherit the security and interoperability the public cosmos network without sacri cing control over the underlying service. thus, cosmos may offer the best both worlds for organizations looking utilize blockchain technology but who are wary relinquishing control completely distributed third party. some claim that major problem with consistency-favouring consensus algorithms like tendermint that any network partition which causes there single partition with voting power (e.g. going ine) will halt consensus altogether. the cosmos architecture can help mitigate this problem using global hub with regional autonomous zones, where voting power for each zone are distributed based common geographic region. for instance, common paradigm may for individual cities, regions, operate their own zones while sharing common hub (e.g. the cosmos hub), enabling municipal activity persist the event that the hub halts due temporary network partition. note that this allows real geological, political, and network-topological features considered designing robust federated fault-tolerant systems. namecoin was one the rst blockchains attempt solve the name-resolution problem adapting the bitcoin blockchain. unfortunately there have been several issues with this approach. with namecoin, can verify that, for example, @satoshi was registered with particular public key some point the past, but wouldn't know whether the public key had since been updated recently unless download all the blocks since the last update that name. this due the limitation bitcoin's utxo transaction merkle-ization model, where only the transactions (but not mutable application state) are merkle-ized into the block-hash. this lets prove existence, but not the nonexistence later updates name. thus, can't know for certain the most recent value name without trusting full node, incurring signi cant costs bandwidth downloading the whole blockchain. even merkle-ized search tree were implemented namecoin, its dependency proof-of-work makes light client veri cation problematic. light clients must download complete copy the headers for all blocks the entire blockchain (or least all the headers since the last update name). this means that the bandwidth requirements scale linearly with the amount time []. addition, name-changes proof-of-work blockchain requires waiting for additional proof-of-work con rmation blocks, which can take hour bitcoin. with tendermint, all need the most recent block-hash signed quorum validators (by voting power), and merkle proof the current value associated with the name. this makes possible have succinct, quick, and secure light-client veri cation name values. cosmos, can take this concept and extend further. each name-registration zone cosmos can have associated toplevel-domain (tld) name such ".com" ".org", and each name- registration zone can have its own governance and registration rules. while the cosmos hub multi-asset distributed ledger, there special native token called the atom. atoms are the only staking token the cosmos hub. atoms are license for the holder vote, validate, delegate other validators. like ethereum's ether, atoms can also used pay for transaction fees mitigate spam. additional ationary atoms and block transaction fees are rewarded validators and delegators who delegate validators. the burnatomtx transaction can used recover any proportionate amount tokens from the reserve pool. the initial distribution atom tokens and validators genesis will the donors the cosmos fundraiser (%), lead donors (%), cosmos network foundation (%), and all bits, inc (%). from genesis onward, the total amount atoms will rewarded bonded validators and delegators every year. see the cosmos plan for additional details. unlike bitcoin other proof-of-work blockchains, tendermint blockchain gets slower with more validators due the increased communication complexity. fortunately, can support enough validators make for robust globally distributed blockchain with very fast transaction con rmation times, and, bandwidth, storage, and parallel compute capacity increases, will able support more validators the future. genesis day, the maximum number validators will set and this number will increase rate for years, and settle validators. year year year year year year year year year year year ... atom holders who are not already can become validators signing and submitting bondtx transaction. the amount atoms provided collateral must nonzero. anyone can become validator any time, except when the size the current validator set greater than the maximum number validators allowed. that case, the transaction only valid the amount atoms greater than the amount effective atoms held the smallest validator, where effective atoms include delegated atoms. when new validator replaces existing validator such way, the existing validator becomes inactive and all the atoms and delegated atoms enter the unbonding state. there must some penalty imposed the validators for any intentional unintentional deviation from the sanctioned protocol. some evidence immediately admissible, such double-sign the same height and round, violation "prevote-the-lock" rule the tendermint consensus protocol). such evidence will result the validator losing its good standing and its bonded atoms well its proportionate share tokens the reserve pool collectively called its "stake" will get slashed. sometimes, validators will not available, either due regional network disruptions, power failure, other reasons. if, any point the past validatortimeoutwindow blocks, validator's commit vote not included the blockchain more than validatortimeoutmaxabsent times, that validator will become inactive, and lose validatortimeoutpenalty (default its stake. some "malicious" behavior does not produce obviously discernable evidence the blockchain. these cases, the validators can coordinate out band force the timeout these malicious validators, there supermajority consensus. situations where the cosmos hub halts due coalition voting power going ine, situations where coalition voting power censor evidence malicious behavior from entering the blockchain, the hub must recover with hard-fork reorg-proposal. (link "forks and censorship attacks"). cosmos hub validators can accept any token type combination types fees for processing transaction. each validator can subjectively set whatever exchange rate wants, and choose whatever transactions wants, long the blockgaslimit not exceeded. the collected fees, minus any taxes speci below, are redistributed the bonded stakeholders proportion their bonded atoms, every validatorpayoutperiod (default hour). the collected transaction fees, reservetax (default will toward the reserve pool increase the reserve pool and increase the security and value the cosmos network. these funds can also distributed accordance with the decisions made the governance system. atom holders who delegate their voting power other validators pay commission the delegated validator. the commission can set each validator. the security the cosmos hub function the security the underlying validators and the choice delegation delegators. order encourage the discovery and early reporting found vulnerabilities, the cosmos hub encourages hackers publish successful exploits via reporthacktx transaction that says, "this validator got hacked. please send bounty this address". upon such exploit, the validator and delegators will become inactive, hackpunishmentratio (default everyone's atoms will get slashed, and hackrewardratio (default everyone's atoms will get rewarded the hacker's bounty address. the validator must recover the remaining atoms using their backup key. order prevent this feature from being abused transfer unvested atoms, the portion vested unvested atoms validators and delegators before and after the reporthacktx will remain the same, and the hacker bounty will include some unvested atoms, any. the cosmos hub operated distributed organization that requires well-de ned governance mechanism order coordinate various changes the blockchain, such the variable parameters the system, well software upgrades and constitutional amendments. all validators are responsible for voting all proposals. failing vote proposal timely manner will result the validator being deactivated automatically for period time called the absenteeismpenaltyperiod (default week). delegators automatically inherit the vote the delegated validator. this vote may overridden manually. unbonded atoms get vote. each proposal requires deposit minimumproposaldeposit tokens, which may combination one more tokens including atoms. for each proposal, the voters may vote take the deposit. more than half the voters choose take the deposit (e.g. because the proposal was spam), the deposit goes the reserve pool, except any atoms which are burned. for each proposal, voters may vote with the following options: yea yeawithforce nay naywithforce abstain strict majority yea yeawithforce votes (or nay naywithforce votes) required for the proposal decided passed (or decided failed), but can veto the majority decision voting "with force". when strict majority vetoed, everyone gets punished losing vetopenaltyfeeblocks (default day's worth blocks) worth fees (except taxes which will not affected), and the party that vetoed the majority decision will additionally punished losing vetopenaltyatoms (default .%) its atoms. any the parameters ned here can changed with the passing parameterchangeproposal atoms can ated and reserve pool funds spent with the passing bountyproposal all other proposals, such proposal upgrade the protocol, will coordinated via the generic textproposal see the plan. there have been many innovations blockchain consensus and scalability the past couple years. this section provides brief survey select number important ones. consensus the presence malicious participants problem dating back the early when leslie lamport coined the phrase "byzantine fault" refer arbitrary process behavior that deviates from the intended behavior, contrast "crash fault", wherein process simply crashes. early solutions were discovered for synchronous networks where there upper bound message latency, though practical use was limited highly controlled environments such airplane controllers and datacenters synchronized via atomic clocks. was not until the late that practical byzantine fault tolerance (pbft) was introduced cient partially synchronous consensus algorithm able tolerate processes behaving arbitrarily. pbft became the standard algorithm, spawning many variations, including most recently one created ibm part their contribution hyperledger. the main bene tendermint consensus over pbft that tendermint has improved and simpli underlying structure, some which result embracing the blockchain paradigm. tendermint blocks must commit order, which obviates the complexity and communication overhead associated with pbft's view-changes. cosmos and many cryptocurrencies, there need allow for block n+i where commit, when block itself hasn't yet committed. bandwidth the reason why block hasn't committed cosmos zone, then doesn't help use bandwidth sharing votes for blocks n+i. network partition ine nodes the reason why block hasn't committed, then n+i won't commit anyway. addition, the batching transactions into blocks allows for regular merkle-hashing the application state, rather than periodic digests with pbft's checkpointing scheme. this allows for faster provable transaction commits for light-clients and faster inter-blockchain communication. tendermint core also includes many optimizations and features that above and beyond what speci pbft. for example, the blocks proposed validators are split into parts, merkle-ized, and gossipped such way that improves broadcasting performance (see libswift for inspiration). also, tendermint core doesn't make any assumption about point-to-point connectivity, and functions for long the network weakly connected. while not the rst deploy proof-of-stake (pos), bitshares. contributed considerably research and adoption pos blockchains, particularly those known "delegated" pos. bitshares, stake holders elect "witnesses", responsible for ordering and committing transactions, and "delegates", responsible for coordinating software updates and parameter changes. bitshares. aims achieve high performance tx/s, latency) ideal conditions, with each block signed single signer, and transaction nality taking quite bit longer than the block interval. canonical speci cation still development. stakeholders can remove replace misbehaving witnesses daily basis, but there signi cant collateral witnesses delegators the likeness tendermint pos that get slashed the case successful double-spend attack. building approach pioneered ripple, stellar ned model federated byzantine agreement wherein the processes participating consensus not constitute xed and globally known set. rather, each process node curates one more "quorum slices", each constituting set trusted processes. "quorum" stellar ned set nodes that contain least one quorum slice for each node the set, such that agreement can reached. the security the stellar mechanism relies the assumption that the intersection any two quorums non-empty, while the availability node requires least one its quorum slices consist entirely correct nodes, creating trade-off between using large small quorum-slices that may dif cult balance without imposing signi cant assumptions about trust. ultimately, nodes must somehow choose adequate quorum slices for there suf cient fault-tolerance (or any "intact nodes" all, which much the results the paper depend on), and the only provided strategy for ensuring such con guration hierarchical and similar the border gateway protocol (bgp), used toptier isps the internet establish global routing tables, and that used browsers manage tls certi cates; both notorious for their insecurity. the criticism the stellar paper the tendermint-based proofof-stake systems mitigated the token strategy described here, wherein new type token called the atom issued that represent claims future portions fees and rewards. the advantage tendermint-based proof-of-stake, then, its relative simplicity, while still providing suf cient and provable security guarantees. bitcoinng proposed improvement bitcoin that would allow for forms vertical scalability, such increasing the block size, without the negative economic consequences typically associated with such change, such the disproportionately large impact small miners. this improvement achieved separating leader election from transaction broadcast: leaders are rst elected proof-of-work "micro-blocks", and then able broadcast transactions committed until new micro-block found. this reduces the bandwidth requirements necessary win the pow race, allowing small miners more fairly compete, and allowing transactions committed more regularly the last miner micro-block. casper proposed proof-of-stake consensus algorithm for ethereum. its prime mode operation "consensus-by-bet". letting validators iteratively bet which block they believe will become committed into the blockchain based the other bets that they have seen far, nality can achieved eventually. link. this active area research the casper team. the challenge constructing betting mechanism that can proven evolutionarily stable strategy. the main bene casper compared tendermint may offering "availability over consistency" consensus does not require quorum voting power perhaps the cost commit speed implementation complexity. the interledger protocol not strictly scalability solution. provides hoc interoperation between different ledger systems through loosely coupled bilateral relationship network. like the lightning network, the purpose ilp facilitate payments, but speci cally focuses payments across disparate ledger types, and extends the atomic transaction mechanism include not only hash-locks, but also quorum notaries (called the atomic transport protocol). the latter mechanism for enforcing atomicity inter-ledger transactions similar tendermint's light-client spv mechanism, illustration the distinction between ilp and cosmos/ibc warranted, and provided below. the notaries connector ilp not support membership changes, and not allow for exible weighting between notaries. the other hand, ibc designed speci cally for blockchains, where validators can have different weights, and where membership can change over the course the blockchain. the lightning network, the receiver payment ilp must online send con rmation back the sender. token transfer over ibc, the validator-set the receiver's blockchain responsible for providing con rmation, not the receiving user. the most striking difference that ilp's connectors are not responsible keeping authoritative state about payments, whereas cosmos, the validators hub are the authority the state ibc token transfers well the authority the amount tokens held each zone (but not the amount tokens held each account within zone). this the fundamental innovation that allows for secure asymmetric transfer tokens from zone zone; the analog ilp's connector cosmos persistent and maximally secure blockchain ledger, the cosmos hub. the inter-ledger payments ilp need backed exchange orderbook, there asymmetric transfer coins from one ledger another, only the transfer value market equivalents. sidechains are proposed mechanism for scaling the bitcoin network via alternative blockchains that are "two-way pegged" the bitcoin blockchain. (two-way pegging equivalent bridging. cosmos say "bridging" distinguish from marketpegging). sidechains allow bitcoins effectively move from the bitcoin blockchain the sidechain and back, and allow for experimentation new features the sidechain. the cosmos hub, the sidechain and bitcoin serve light-clients each other, using spv proofs determine when coins should transferred the sidechain and back. course, since bitcoin uses proof-of-work, sidechains centered around bitcoin suffer from the many problems and risks proof-of-work consensus mechanism. furthermore, this bitcoin-maximalist solution that doesn't natively support variety tokens and inter-zone network topology cosmos does. that said, the core mechanism the two-way peg principle the same that employed the cosmos network. ethereum currently researching number different strategies shard the state the ethereum blockchain address scalability needs. these efforts have the goal maintaining the abstraction layer offered the current ethereum virtual machine across the shared state space. multiple research efforts are underway this time. [][] cosmos and ethereum mauve have different design goals. cosmos speci cally about tokens. mauve about scaling general computation. cosmos not bound the evm, even different vms can interoperate. cosmos lets the zone creator determine who validates the zone. anyone can start new zone cosmos (unless governance decides otherwise). the hub isolates zone failures global token invariants are preserved. the lightning network proposed token transfer network operating layer above the bitcoin blockchain (and other public blockchains), enabling improvement many orders magnitude transaction throughput moving the majority transactions outside the consensus ledger into so-called "payment channels". this made possible on-chain cryptocurrency scripts, which enable parties enter into bilateral stateful contracts where the state can updated sharing digital signatures, and contracts can closed nally publishing evidence onto the blockchain, mechanism rst popularized cross-chain atomic swaps. opening payment channels with many parties, participants the lightning network can become focal points for routing the payments others, leading fully connected payment channel network, the cost capital being tied payment channels. while the lightning network can also easily extend across multiple independent blockchains allow for the transfer value via exchange market, cannot used asymmetrically transfer tokens from one blockchain another. the main bene the cosmos network described here enable such direct token transfers. that said, expect payment channels and the lightning network become widely adopted along with our token transfer mechanism, for cost-saving and privacy reasons. segregated witness bitcoin improvement proposal link that aims increase the per-block transaction throughput while simultaneously making block syncing faster for new nodes. the brilliance this solution how works within the limitations bitcoin's current protocol and allows for soft-fork upgrade (i.e. clients with older versions the software will continue function after the upgrade). tendermint, being new protocol, has design restrictions, has different scaling priorities. primarily, tendermint uses bft round-robin algorithm based cryptographic signatures instead mining, which trivially allows horizontal scaling through multiple parallel blockchains, while regular, more frequent block commits allow for vertical scaling well. well designed consensus protocol should provide some guarantees the event that the tolerance capacity exceeded and the consensus fails. this especially necessary economic systems, where byzantine behaviour can have substantial nancial reward. the most important such guarantee form forkaccountability, where the processes that caused the consensus fail (ie. caused clients the protocol accept different values fork) can identi and punished according the rules the protocol, or, possibly, the legal system. when the legal system unreliable excessively expensive invoke, validators can forced make security deposits order participate, and those deposits can revoked, slashed, when malicious behaviour detected []. note this unlike bitcoin, where forking regular occurence due network asynchrony and the probabilistic nature nding partial hash collisions. since many cases malicious fork indistinguishable from fork due asynchrony, bitcoin cannot reliably implement fork-accountability, other than the implicit opportunity cost paid miners for mining orphaned block. call the voting stages prevote and precommit. vote can for particular block for nil. call collection prevotes for single block the same round polka, and collection precommits for single block the same round commit. precommit for nil the same round, they move the next round. note that strict determinism the protocol incurs weak synchrony assumption faulty leaders must detected and skipped. thus, validators wait some amount time, timeoutpropose, before they prevote nil, and the value timeoutpropose increases with each round. progression through the rest round fully asynchronous, that progress only made once validator hears from the network. practice, would take extremely strong adversary inde nitely thwart the weak synchrony assumption (causing the consensus fail ever commit block), and doing can made even more dif cult using randomized values timeoutpropose each validator. additional set constraints, locking rules, ensure that the network will eventually commit just one block each height. any malicious attempt cause more than one block committed given height can identi ed. first, precommit for block must come with justi cation, the form polka for that block. the validator has already precommit block round r_, say they are locked that block, and the polka used justify the new precommit round must come round r_polka where bonded stake can slashed. course, since slashing requires that someone share evidence fork, light clients should store any block-hash commits that sees. additionally, light clients could periodically stay synced with changes the validator set, order avoid long range attacks (but other solutions are possible). spirit similar ethereum, tendermint enables applications embed global merkle root hash each block, allowing easily veri able state queries for things like account balances, the value stored contract, the existence unspent transaction output, depending the nature the application. assuming suf ciently resilient collection broadcast networks and static validator set, any fork the blockchain can detected and the deposits the offending validators slashed. this innovation, rst suggested vitalik buterin early solves the nothing-at-stake problem other proof-of-stake cryptocurrencies (see related work). however, since validator sets must able change, over long range time the original validators may all become unbonded, and hence would free create new chain from the genesis block, incurring cost they longer have deposits locked up. this attack came known the long range attack (lra), contrast short range attack, where validators who are currently bonded cause fork and are hence punishable (assuming fork-accountable bft algorithm like tendermint consensus). long range attacks are often thought critical blow proof-of-stake. fortunately, the lra can mitigated follows. first, for validator unbond (thereby recovering their collateral deposit and longer earning fees participate the consensus), the deposit must made untransferable for amount time known the "unbonding period", which may the order weeks months. second, for light client secure, the rst time connects the network must verify recent block-hash against trusted source, preferably multiple sources. this condition sometimes referred "weak subjectivity". finally, remain secure, must sync with the latest validator set least frequently the length the unbonding period. this ensures that the light client knows about changes the validator set before validator has its capital unbonded and thus longer stake, which would allow deceive the client carrying out long range attack creating new blocks beginning back height where was bonded (assuming has control suf ciently many the early private keys). note that overcoming the lra this way requires overhaul the original security model proof-of-work. pow, assumed that light client can sync the current height from the trusted genesis block any time simply processing the proofof-work every block header. overcome the lra, however, require that light client come online with some regularity track changes the validator set, and that the rst time they come online they must particularly careful authenticate what they hear from the network against trusted sources. course, this latter requirement similar that bitcoin, where the protocol and software must also obtained from trusted source. the above method for preventing lra well suited for validators and full nodes tendermint-powered blockchain because these nodes are meant remain connected the network. the method also suitable for light clients that can expected sync with the network frequently. however, for light clients that are not expected have frequent access the internet the blockchain network, yet another solution can used overcome the lra. non-validator token holders can post their tokens collateral with very long unbonding period (e.g. much longer than the unbonding period for validators) and serve light clients with secondary method attesting the validity current and past block-hashes. while these tokens not count toward the security the blockchain's consensus, they nevertheless can provide strong guarantees for light clients. historical block-hash querying were supported ethereum, anyone could bond their tokens specially designed smart contract and provide attestation services for pay, effectively creating market for lightclient lra security. due the nition block commit, any coalition voting power can halt the blockchain going ine not broadcasting their votes. such coalition can also censor particular transactions rejecting blocks that include these transactions, though this would result signi cant proportion block proposals rejected, which would slow down the rate block commits the blockchain, reducing its utility and value. the malicious coalition might also broadcast votes trickle grind blockchain block commits near halt, engage any combination these attacks. finally, can cause the blockchain fork, double-signing violating the locking rules. globally active adversary were also involved, could partition the network such way that may appear that the wrong subset validators were responsible for the slowdown. this not just limitation tendermint, but rather limitation all consensus protocols whose network potentially controlled active adversary. for these types attacks, subset the validators should coordinate through external means sign reorg-proposal that chooses fork (and any evidence thereof) and the initial subset validators with their signatures. validators who sign such reorgproposal forego their collateral all other forks. clients should verify the signatures the reorg-proposal, verify any evidence, and make judgement prompt the end-user for decision. for example, phone wallet app may prompt the user with security warning, while refrigerator may accept any reorg-proposal signed the original validators voting power. non-synchronous byzantine fault-tolerant algorithm can come consensus when voting power are dishonest, yet fork assumes that voting power have already been dishonest double-signing lock-changing without justi cation. so, signing the reorg-proposal coordination problem that cannot solved any non-synchronous protocol (i.e. automatically, and without making assumptions about the reliability the underlying network). for now, leave the problem reorgproposal coordination human coordination via social consensus internet media. validators must take care ensure that there are remaining network partitions prior signing reorgproposal, avoid situations where two con icting reorgproposals are signed. assuming that the external coordination medium and protocol robust, follows that forks are less concern than censorship attacks. addition forks and censorship, which require byzantine voting power, coalition voting power may commit arbitrary, invalid state. this characteristic any (bft) consensus system. unlike double-signing, which creates forks with easily veri able evidence, detecting committment invalid state requires non-validating peers verify whole blocks, which implies that they keep local copy the state and execute each transaction, computing the state root independently for themselves. once detected, the only way handle such failure via social consensus. for instance, situations where bitcoin has failed, whether forking due software bugs (as march committing invalid state due byzantine behavior miners (as july the well connected community businesses, developers, miners, and other organizations established social consensus what manual actions were required participants heal the network. furthermore, since validators tendermint blockchain may expected identi able, commitment invalid state may even punishable law some external jurisprudence, desired. abci consists primary message types that get delivered from the core the application. the application replies with corresponding response messages. the appendtx message the work horse the application. each transaction the blockchain delivered with this message. the application needs validate each transactions received with the appendtx message against the current state, application protocol, and the cryptographic credentials the transaction. validated transaction then needs update the application state binding value into key values store, updating the utxo database. the checktx message similar appendtx, but it's only for validating transactions. tendermint core's mempool rst checks the validity transaction with checktx, and only relays valid transactions its peers. applications may check incrementing nonce the transaction and return error upon checktx the nonce old. the commit message used compute cryptographic commitment the current application state, placed into the next block header. this has some handy properties. inconsistencies updating that state will now appear blockchain forks which catches whole class programming errors. this also simpli the development secure lightweight clients, merkle-hash proofs can veri checking against the block-hash, and the block-hash signed quorum validators (by voting power). additional abci messages allow the application keep track and change the validator set, and for the application receive the block information, such the height and the commit votes. abci requests/responses are simple protobuf messages. check out the schema le. arguments: data ([]byte) the request transaction bytes returns: code (uint) response code data ([]byte) result bytes, any log (string) debug error message usage: append and run transaction. the transaction valid, returns codetype.ok arguments: data ([]byte) the request transaction bytes returns: code (uint) response code data ([]byte) result bytes, any log (string) debug error message usage: validate transaction. this message should not mutate the state. transactions are rst run through checktx before broadcast peers the mempool layer. you can make checktx semi-stateful and clear the state upon commit beginblock allow for dependent sequences transactions the same block. returns: data ([]byte) the merkle root hash log (string) debug error message usage: return merkle root hash the application state. arguments: data ([]byte) the query request bytes returns: code (uint) response code data ([]byte) the query response bytes log (string) debug error message usage: flush the response queue. applications that implement types.application need not implement this message it's handled the project. returns: data ([]byte) the info bytes usage: return information about the application state. application speci arguments: key (string) key set value (string) value set for key returns: log (string) debug error message usage: set application options. e.g. key="mode", value="mempool" for mempool connection, key="mode", value="consensus" for consensus connection. other options are application speci arguments: validators ([]validator) initial genesis-validators usage: called once upon genesis arguments: height (uint) the block height that starting usage: signals the beginning new block. called prior any appendtxs. arguments: height (uint) the block height that ended returns: validators ([]validator) changed validators with new voting powers remove) usage: signals the end block. called prior each commit after all transactions see the abci repository for more details. there are several reasons why sender may want the acknowledgement delivery packet the receiving chain. for example, the sender may not know the status the destination chain, expected faulty. or, the sender may want impose timeout the packet (with the maxheight packet eld), while any destination chain may suffer from denialof-service attack with sudden spike the number incoming packets. these cases, the sender can require delivery acknowledgement setting the initial packet status ackpending then, the receiving chain's responsibility con delivery including abbreviated ibcpacket the app merkle hash. first, ibcblockcommit and ibcpackettx are posted "hub" that proves the existence ibcpacket "zone". say that ibcpackettx has the following value: fromchainid "zone" fromblockheight (say) packet ibcpacket header ibcpacketheader srcchainid "zone" dstchainid "zone" number (say) status ackpending type "coin" maxheight (say "hub" currently height payload next, ibcblockcommit and ibcpackettx are posted "zone" that proves the existence ibcpacket "hub". say that ibcpackettx has the following value: fromchainid "hub" fromblockheight packet ibcpacket header ibcpacketheader srcchainid "zone" dstchainid "zone" number status ackpending type "coin" maxheight payload next, "zone" must include its app-hash abbreviated packet that shows the new status acksent ibcblockcommit and ibcpackettx are posted back "hub" that proves the existence abbreviated ibcpacket "zone". say that ibcpackettx has the following value: fromchainid "zone" fromblockheight (say) packet ibcpacket header ibcpacketheader srcchainid "zone" dstchainid "zone" number status acksent type "coin" maxheight payloadhash finally, "hub" must update the status the packet from ackpending ackreceived evidence this new nalized status should back "zone". say that ibcpackettx has the following value: fromchainid "hub" fromblockheight packet ibcpacket header ibcpacketheader srcchainid "zone" dstchainid "zone" number status ackreceived type "coin" maxheight payloadhash meanwhile, "zone" may optimistically assume successful delivery "coin" packet unless evidence the contrary proven "hub". the example above, "hub" had not received acksent status from "zone" block would have set the status automatically timeout this evidence timeout can get posted back "zone", and any tokens can returned. there are two types merkle trees supported the tendermint/cosmos ecosystem: the simple tree, and the iavl+ tree. the simple tree merkle tree for static list elements. the number items not power two, some leaves will different levels. simple tree tries keep both sides the tree the same height, but the left may one greater. this merkle tree used merkle-ize the transactions block, and the top level elements the application state root. simpletree with elements the purpose the iavl+ data structure provide persistent storage for key-value pairs the application state such that deterministic merkle root hash can computed ciently. the tree balanced using variant the avl algorithm, and all operations are o(log(n)). avl tree, the heights the two child subtrees any node differ most one. whenever this condition violated upon update, the tree rebalanced creating o(log(n)) new nodes that point unmodi nodes the old tree. the original avl algorithm, inner nodes can also hold key-value pairs. the avl+ algorithm (note the plus) modi the avl algorithm keep all values leaf nodes, while only using branch-nodes store keys. this simpli the algorithm while keeping the merkle hash trail short. the avl+ tree analogous ethereum's patricia tries. there are tradeoffs. keys not need hashed prior insertion iavl+ trees, this provides faster ordered iteration the key space which may bene some applications. the logic simpler implement, requiring only two types nodes inner nodes and leaf nodes. the merkle proof average shorter, being balanced binary tree. the other hand, the merkle root iavl+ tree depends the order updates. will support additional cient merkle trees, such ethereum's patricia trie when the binary variant becomes available. the canonical implementation, transactions are streamed the cosmos hub application via the abci interface. the cosmos hub will accept number primary transaction types, including sendtx bondtx unbondtx reporthacktx slashtx burnatomtx proposalcreatetx and proposalvotetx which are fairly self-explanatory and will documented future revision this paper. here document the two primary transaction types for ibc: ibcblockcommittx and ibcpackettx ibcblockcommittx transaction composed of: chainid (string) the the blockchain blockhash ([]byte) the block-hash bytes, the merkle root which includes the app-hash blockpartsheader (partsetheader) the block part-set header bytes, only needed verify vote signatures blockheight (int) the height the commit blockround (int) the round the commit commit ([]vote) the tendermint precommit votes that comprise block commit validatorshash ([]byte) merkle-tree root hash the new validator set validatorshashproof (simpleproof) simpletree merkle- proof for proving the validatorshash against the blockhash apphash ([]byte) iavltree merkle-tree root hash the application state apphashproof (simpleproof) simpletree merkle-proof for proving the apphash against the blockhash ibcpacket composed of: header (ibcpacketheader) the packet header payload ([]byte) the bytes the packet payload. optional payloadhash ([]byte) the hash for the bytes the packet. optional either one payload payloadhash must present. the hash ibcpacket simple merkle root the two items, header and payload ibcpacket without the full payload called abbreviated packet. ibcpacketheader composed of: srcchainid (string) the source blockchain dstchainid (string) the destination blockchain number (int) unique number for all packets status (enum) can one ackpending acksent ackreceived noack timeout type (string) the types are application-dependent. cosmos reserves the "coin" packet type maxheight (int) status not noackwanted ackreceived this height, status becomes timeout optional ibcpackettx transaction composed of: fromchainid (string) the the blockchain which providing this packet; not necessarily the source fromblockheight (int) the blockchain height which the following packet included (merkle-ized) the block-hash the source chain packet (ibcpacket) packet data, whose status may one ackpending acksent ackreceived noack timeout packetproof (iavlproof) iavltree merkle-proof for proving the packet's hash against the apphash the source chain given height the sequence for sending packet from "zone" "zone" through the "hub" depicted {figure x}. first, ibcpackettx proves "hub" that the packet included the app-state "zone". then, another ibcpackettx proves "zone" that the packet included the app-state "hub". during this procedure, the ibcpacket elds are identical: the srcchainid always "zone", and the dstchainid always "zone". the packetproof must have the correct merkle-proof path, follows: ibc/// when "zone" wants send packet "zone" through "hub", the ibcpacket data are identical whether the packet merkleized "zone", the "hub", "zone". the only mutable eld status for tracking delivery. thank our friends and peers for assistance conceptualizing, reviewing, and providing support for our work with tendermint and cosmos. zaki manian skuchain provided much help formatting and wording, especially under the abci section jehan tremback althea and dustin byington for helping with initial iterations andrew miller honey badger for feedback consensus greg slepak for feedback consensus and wording also thanks bill gleim and seunghwan han for various contributions. your name and organization here for your contribution bitcoin: https://bitcoin.org/bitcoin.pdf zerocash: http://zerocash-project.org/paper ethereum: https://github.com/ethereum/wiki/wiki/whitepaper thedao: https://download.slock.it/public/dao/whitepaper.pdf segregated witness: https://github.com/bitcoin/bips/blob/master/bip.mediawiki bitcoinng: https://arxiv.org/pdf/.v.pdf lightning network: https://lightning.network/lightningnetwork-paper-draft-..pdf tendermint: https://github.com/tendermint/tendermint/wiki flp impossibility: https://groups.csail.mit.edu/tds/papers/lynch/jacm.pdf slasher: https://blog.ethereum.org////slasher-apunitive-proof-of-stake-algorithm/ pbft: http://pmg.csail.mit.edu/papers/osdi.pdf bitshares: https://bitshares.org/technology/delegatedproof-of-stake-consensus/ stellar: https://www.stellar.org/papers/stellar-consensusprotocol.pdf interledger: https://interledger.org/rfcs/-interledgerarchitecture/ sidechains: https://blockstream.com/sidechains.pdf casper: https://blog.ethereum.org////introducing-casperfriendly-ghost/ abci: https://github.com/tendermint/abci ethereum sharding: https://github.com/ethereum/eips/issues/ libswift: http://www.ds.ewi.tudelft.nl/ leadmin/pds/papers/performa nceanalysisoflibswift.pdf dls: http://groups.csail.mit.edu/tds/papers/lynch/jacm.pdf thin client security: https://en.bitcoin.it/wiki/thin_client_security ethereum mauve paper: http://vitalik.ca/ les/mauve_paper.html https://www.docdroid.net/ecxgzs/-ethereumplatform-review-opportunities-and-challenges-for-privateand-consortium-blockchains.pdf.html