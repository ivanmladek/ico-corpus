substratum network technical paper version mission substratum creating open-source foundation for decentralized web which will provide unrestricted access content and sharing information for users across the globe. our mission bring forth the free and fair internet the future combining proven technological building blocks with emergent technologies innovative and holistic way help solve many the problems that plague the modern internet. the substratum network the substratum network open-source network that allows anyone allocate spare computing resources make the internet free and fair place for the entire world. worldwide collection nodes that securely delivers content without the need vpn tor. because there's single authority delivering monitoring content, censorship and geo-restricted sites won't issue substratum network. doesn't matter where you live what content you're accessing, everyone the world sees the exact same content. the concept for the substratum network first originated closed system that would only provide content within its private network. leveraging computer resources and decentralizing content would enable several hosts render sites across several hosts. what became difficult was the time and scale would take move much content into this private network. inception the network would not even provide the world's website content. the alternate solution was find way provide content way that could still travel peer peer, would secure, and would allow access all the internet has offer. substratum node substratum node the foundation the substratum network. what the average user runs earn sub and dedicate some their computers' resources towards the network. people who run substratum node can rewarded with cryptocurrency for each time they serve content. the purpose substratum node mask and un-mask cores packages for clandestine routing. substratum nodes work together relay cores packages and content the network. when user requests site, nodes use algorithms find the most expedient and secure way get the information that user. multiple nodes work fulfill single request order maintain necessary level anonymity. understanding the components substratum node and the substratum network contain several components and features that help provide all the functionality. before explaining the step step process how the network communicates let's understand each component the entire network. cores packages core(s) package series instructions bundled way that allows each node within the network receive just enough information make decision how handle request. core(s) packages contain layers requests that inform nodes how perform one three actions. create the request, pass the request along, process the request. client: this the device that initializing the request such browser, video game. originator: the identity the originating request node. relay: identifies nodes that will used hop along routes get its destination. exit: the exit node will make the true web request behalf the originator and send back along the route stack. server: information about the server that hosting the requested information. substratum dns the purpose our dns the os-agnostic tool that the substratum node user interface will use examine and manage the dns settings user's machine for routing its tcp communications over the substratum network. built utility and can run from the command line. the hopper the purpose the hopper interpret cores packages, determining their next destination. the hopper will receive incoming cores package and unwrap just enough information determine what the next phase the process. the possible phases that node may execute are: send the request served the proxy server, make request website behalf the originating node, just move the request across the route proxy client the purpose proxy client convert cores packages from the substratum network into regular (nonclandestine) requests and convert the regular (non-clandestine) responses back into cores packages for the substratum network. proxy client some distant node the component that does the nonclandestine communication with the greater internet behalf the originating node. this what would used exit node. the proxy client converts your cores package back into regular request, gets the response, and wraps new cores package. that cores package goes back onto the substratum network continue the route back the originating node. proxy server the purpose proxy server acts the only server your device can get information from. proxy for all your requests. for example, every website you request when running substratum node will delivered via the proxy server. far your system concerned this server represents every server. neighborhoods each substratum node the substratum network contains subsystem that call the neighborhood. the neighborhood responsible for keeping track other nodes the network, remembering how (and whether) they're connected one another, and storing other information about them well. currently, for example, the neighborhood keeps track whether nodes are running bootstrap mode which function provide gossip about the network rather than routing data. whenever consuming node wants send cores package through the network, its neighborhood responsible for analyzing the network and determining what route the cores package should take. neighborhood data stored within in-memory database. this creates level security that allows node shut down and free any knowledge originally contained. bootstrap nodes when node first starts will contain limited set instructions reach out and contact available bootstrap nodes. bootstrap node provides collection available node addresses for this new node joining the network. this allows the new node get kick start onto the network. bootstrap nodes will not perform the same functions typical node. while they will provide other nodes with information build neighborhoods, they will not route requests and they will not monetized. the life span bootstrap nodes may come end the future more and more nodes join the network. more nodes come online the use social connection features will help with bootstrapping nodes. user the node can get the address another node and add manually their neighborhood. this information can gathered through social means just the same other open source projects are shared and used socially across the web. blockchain bridge the job the blockchain bridge communicate with the actual blockchain. the blockchain bridge does not connect directly the blockchain. leverages the proxy client make the connection. this allows nodes subvert restrictions from access blockchain information the same way that node subverts website restrictions via the proxy server. clandestine routing masking the network grows and becomes available there will time when outside forces will want intercept prevent the network from being utilized the way was intended. create another barrier prevent malicious intent, packages will wrapped mask. the first mask will basic encryption methods see today. these masks will provide extra layer security similar typical https traffic see today. development more in-depth features for the network continues the goal create clandestine routes. each cores package will wrapped layer obscurity that will resemble different types traffic. traffic patterns when viewed over time can distinguishable. masking packages random traffic patterns, deters typical packet sniffing and traffic analyzation methods from seeing patterns and blocking requests and responses. this entire layer will wrap around cores packages and its various components before being handed off seen the diagram below. mask cores route payload (client request client response) meta data raw traffic between browser and server gossip protocol certain times, the neighborhood will trigger round gossip. when this happens, the neighborhood will send cores package each the nodes which your node has direct tcp connection. this cores package will contain part what your node knows about the current state the network, including what has learned from other nodes when they have sent gossip it. when you start decentralized node, needs know how locate just one other node the network; but these gossip messages are how strengthens its position over time and becomes integral participant the network. since every node sends gossip periodically, information about your node will eventually percolate out across the network, and information about the farthest reaches the network will eventually reach your node. *the proposed monetization configuration will not occur charge since each these nodes right next you. node but your own sends any data your behalf, and therefore there's nobody pay. the substratum network step step now that you have understanding each component and its function, let's walk through step step guide complete end end request using the substratum network. the guide will demonstrate how each node relays information across the wire. substratum network starts with computer running substratum node software each node belongs neighborhood neighborhood composed multiple substratum nodes. each node only aware its immediate neighbors, this helps ensure anonymity for the nodes and boosts security preventing the level which any attacker could potentially penetrate the network. when someone requests web-site the node creates request package for one its immediate neighbors. the contents the request package consist the following: encrypted route stack for going and from the destination encrypted package for each node the route stack encrypted payload with the original web request the originator node creates predetermined route stack, both and from the request endpoint, using its neighborhood. client, like web-browser such google chrome, submits request website. substratum node creates encrypted package with encrypted parts for each node along route path. the route path predetermined the originator node and contains different request and response paths. this limits the potential attack surface because the request path the host and the path back the client are different. the encrypted package sent immediate neighbor. each substratum node only knows the addresses immediate neighbors, this also works limit the potential attack surface. the neighbor receives the package decrypts it. only the node with the matching fingerprint can decrypt the package here's how node decrypts the package: the recipient node decrypts the next set instructions, not the entire package. the instructions for the next hop tell the node relay the request the next node, public key, the route stack. instructions for additional node tell the recipient relay the request the next node. minimum three hops allows only compartmentalized knowledge the network.) since each node not aware addresses outside its immediate neighbors the ability for attack the network greatly reduced. the final hop the destination includes payload and instructs exit node create web request and response behalf the originator using the request data provided the client (such google chrome your mobile browser). response will return along unique route which only further boosts the security and anonymity the network. the return path behaves like the request path but includes the encrypted response for the client. only the originating node able decrypt the response hand the browser rendered constraints order for this process work correctly, safely, and profitably, there are certain common-sense constraints what node should and shouldn't do. connection perhaps chief among these constraints that you should keep your node available the same public address long you can. suppose your node listed another node's neighborhood route for cores package, and the time the cores package arrives your node, your node cannot contacted the way the originating node's neighborhood expected be. that case, the cores package will fail route, and will have sent again; but order keep itself from making the same mistake, the node that failed contact your node will make note not route any more data through your node, and gossip this information ("don't route data through him; can't contact him") out other nodes. this way, even brief period disconnection can seriously affect the amount (potentially) profitable routing work your node will given. have plans make certain public-ip changes survivable, but currently none are. your public address changes, your node traffic will drop zero and stay there; you'll need kill your node and restart get back the network. device reliability device such laptop that can suspended lose battery power may not ideal for running effective node. although node occupies tiny footprint most devices regard size, cpu, and memory consumption. living device that suspends, shuts down, has and unreliable power supply not recommended. the node should stay running and connected long and steadily possible. future features may include keeping track statistics such how fast node has proven and whether they're acting suspiciously. warm-up delay three hop minimum* each node the network will know the addresses the few nodes that are directly connected it, but will not know the addresses any other node the network. there are few security-related implications this. effective originating node requires route least three hops long make sure that none the nodes the route knows all the addresses it. therefore, route less than three hops long intrinsically insecure. exit node for two-way route would need know the public key the originating node, that can encrypt the response payload. therefore, the exit node should not also know the address the originating node; otherwise would able associate request urls (tls) entire request/response transactions (http) with originating addresses. for neighborhood produce valid routes needs enough nodes that can produce minimum threehop route, but not many connections between nodes that can't find exit node that isn't directly connected. all this means that may take significant interval time, marked the periodic arrival and departure gossip, before newly-started neighborhood complete enough able generate routes allow its owner originate traffic. neighborhood will ready route other people's data soon has two immediate neighbors that are not bootstrap nodes. course, order for node route traffic must built into route another node, and may take some time for another node assimilate and choose well. the current version substratum node not yet secure, has default route-length minimum two hops rather than three, because makes testing easier while still presenting all the conditions need test. upon release the first production version substratum node the default route-length will change three hops mentioned above. best performance measures the best computer which run substratum node one whose public never changes: one whose isp has granted static address. failing that, the best way run node non-portable computer that using wired ethernet connection. (sending data through wire keeps far more secure than broadcasting through the air.) failing that, the best way would wifi-connected computer that may move around the territory particular router but doesn't leave and never suspended hibernated. monetization substratum plans incentivize users running nodes rewarding them cryptocurrency. this digital form monetization allows the system remain decentralized and have value across the globe. break down how the system will self-govern and distribute this currency will have identify key features and protocols that are necessary for successful monetization. what are counting the first problem had solve when understanding how can monetize the network what count. multiple iterations network traffic were analyzed see how data could counted and logged without compromising security. these iterations resulted the counting bytes transferred within cores packages. the platform also counts how those bytes are used within the steps contained within cores packages. the network accounting will monitor routing package along with providing exit services well. this create higher rewards for exit nodes. bytes routing services exit services how counted avoid the concept central authority, nodes must provided with mechanism for storing what would considered accounts payable and accounts receivable data. each node keeps track what owes other nodes for requests. also keeps track what owed for transmitting routes from requests for other nodes. this creates self-governed policy that provides several mechanisms for validating both good and bad actors. more importantly provides method adjust pricing per node basis based factors that the node owner would want make adjustments for. this discussed more the how rewarded section. and will create entry accounts receivable for routing bytes for creates request and adds transactions (b, the accounts payable log will create entry accounts payable for routing bytes for and along with bytes for will create entry accounts receivable for performing exit services bytes for will create entry accounts receivable for returning bytes and will create entry accounts receivable for routing bytes how rewarded the best way describe how the value model applied this form logging transactions free market approach. allowing nodes set their own price central system does not need monitor costs, and payout across massive network. the goal allow nodes set prices for their services based number factors. some the factors include regional availability, uptime, upload and download speeds, reliability, truthfulness transactions, and possibly availability censorship oppressed regions. the same way that node owners can name their price, node consumers will want identify thresholds their spending. example how the node network plans achieve this create configurations that allow consumers set spending limits per transactions. node users should able change their spending habits based the quality nodes paying higher costs for premium nodes take more budget friendly approach node use. what the future holds this living document that will updated the product continues evolve. below are features that are important for how the network will function but are still the analysis and research phase development. the work becomes clearer and more tested these features will documented and updated within their respective sections this paper. here are some details look forward to. validating monetization transactions through consensus handling bad actors within monetization actors who don't pay actors who overcharge (cook the books) route failures exit services and banning