hycon whitepaper v.. infinity project abstract introduction discussion existing blockchain technologies throughput latency size and bandwidth security wasted resources usability versioning, hard forks, and multiple chains infinity project core goals core goal market need identification core goal flexible currency core goal user-centric platform core goal flexible innovation core goal secure decentralized exchange hycon technical specifications genesis block hashing algorithms consensus spectre protocol voting rules application spectre protocol example dags example case double spend dag versus blockchain infinity spectre implementation block "height" and chaining network infrastructure node.js, typescript serialization protocol buffers mining overview mining process detail stratum integration xmrig mining rewards wallets accounts hycon wallet gui hycon wallet hycon addresses accounts balances synchronisation conclusions references appendix genesis block discussion contents hycon genesis block appendix coin distribution budget allocation coin distribution budget allocation abstract this paper begins outlining the vision the infinity project, which planned for phase roll-out: the 'hycon' coin the open-source infinity platform for customizable enterprise blockchain solutions, and decentralized cryptocurrency exchange platform. however, this whitepaper's main objective provide detailed analysis 'hycon', fast and secure cryptocurrency that makes use the spectre protocol enable high transaction speeds while maintaining security. identified herein are sample the challenges and limitations many existing cryptocurrencies and solutions proposed the hycon coin. additionally, the technical specifications hycon will introduced, well brief discussion spectre and its implementation this project. introduction "...cash, after millennia one mankind's most versatile and enduring technologies, looks set over the next years finally melt away into electronic stream ones and zeros." the economist today's world electronic and mobile banking, money transforming from something tangible, held one's hand, into digital numbers that are moved around the internet. this environment, was natural progression for new forms currency emerge, which exist only cryptographically secured strings digital code, known 'cryptocurrency'. this digital currency revolution began when the still anonymous satoshi nakamoto published the bitcoin whitepaper []. today, new cryptocurrencies are released almost daily basis, sharing one unifying concept: the underlying technological architecture that the blockchain. blockchain itself shared public ledger transactions that records and maintains that record all transactions made the system from the genesis the first block until the present moment. the ledger the blockchain defined above built using linked list, chain blocks, where each block contains certain number transactions that were validated the network specific timespan. the infinity project will introduce new cryptocurrency called hycon, designed address some the challenges faced existing blockchain technologies. what follows outline the existing state blockchain development with focus the problems that need addressed, the goals the infinity project itself, how hycon proposes overcoming existing blockchain limitations, and the technical specifications hycon. discussion existing blockchain technologies for the purposes this discussion, the bitcoin and ethereum blockchains will the focus they are the most widely used and well studied implementations blockchain technology date. useful reference point for examining blockchain technology the work yli-huomo al.[]. presented therein comprehensive summary recent work blockchain technology and the limitations inherent blockchain based system. while their research was focused entirely papers discussing the bitcoin blockchain, the findings presented are broadly applicable for the purposes this discussion. the key discussion metrics used were drawn from swan and again, these are applicable here. this research highlights seven limitations current blockchain systems: throughput latency size and bandwidth security wasted resources usability versioning, hard forks, and multiple chains throughput representative blockchain such bitcoin takes minutes longer confirm transactions, achieving transactions per second maximum throughput, with current transaction rates the region per second. ethereum can process more transactions per second, with confirmation times approximately times faster than those found the bitcoin network. however, benchmarking the current throughput capacity these blockchains against the visa network useful comparison understand current limitations these blockchains: the visa network can verify transactions seconds, process transactions per second average, and features maximum capacity transactions per second.[] can seen these metrics, there still large discrepancy the throughput today's most used blockchain networks when compared traditional, centralised payment networks like visa. primary factor limiting the throughput blockchain networks the latency between nodes. while there have been some promising attempts address this problem, such the lightning network due adopted bitcoin, and the raiden network that already running micro version the ethereum blockchain, consensus has yet reached viable, long-term solution. latency mentioned above, latency and throughput hand hand limiting factors, because the maximum throughput network limited the latency between nodes. there high latency between nodes, the risk mining old block increased. the bitcoin network, for example, the average time taken for block propagate the nodes just under seconds, with nodes reached after approximately seconds (as april []. for ethereum, the average time for propagation nodes less than second, with nodes reached approximately seconds []. for bitcoin, the ratio the block mining time the network propagation time large, meaning that latency between nodes does not act large limiting factor. with ethereum's shorter inter-block time, the wasted time could more problematic, but ethereum uses algorithm based the ghost protocol incentivise mining the longest chain instead attempting continue mine parallel chains that were created due high latency, low inter-block times. size and bandwidth there are two considerations that must addressed discussion regarding size and bandwidth: the physical data that represents the full blockchain, and the size individual blocks being sent over the network. with the requirement that full-node, which can mine new blocks and interact with the blockchain network, must maintain local copy the entire blockchain, clear that the storage capacity required maintain this local ledger directly proportional the number blocks the chain, thus leading risk much higher centralization the blockchain becomes large that only few nodes are able process block []. addition, when transaction volume starts push the limits the available bandwidth, coupled with hard-cap imposed the block size, mining fees can increase significantly, which could lead changes the core protocols allow for greater transaction volume: i.e. larger block sizes, shorter block times. this eventuality, hard fork, which generally considered undesirable, would required make the necessary protocol upgrades. security one the biggest selling points pow blockchains technology the fact that they are very difficult hack. order for fraudulent user alter entry that already present the blockchain, they would need redo the proof work for that block well all subsequent blocks that reference it. the computational resources needed successfully perform attack this nature equal the hashing power the network, hence the name, attack". however, this unlikely prospect the mining benefits possessing the network would outweigh those gained acting fraudulently. second method attack referred sybil attack, where fraudulent entity creates multiple fraudulent identities for use the network, which then try subvert the network their advantage. pow based system, such bitcoin, your ability influence the network determined how much hash power you use find new blocks. pretending two miners would require the hash power divided, resulting advantage. there are, however, other ways attack user funds blockchain network. often, users rely the safe storage their private keys centralized exchanges, which, compromised, can provide attacker with access their wallets, and extension, their cryptocurrency. another security risk the blockchain space found the implementation smart-contracts that feature coding errors. particularly well-known and successful exploitation smart contract occurred june and now colloquially known the "dao attack", wherein attacker was able use small flaw the code that executed the smart contract obtain estimated million worth ether, event that eventually led the controversial hard fork that split the ethereum network two, creating ethereum classic. wasted resources the electrical and extension environmental impact the bitcoin blockchain considerably large. current estimates, kwh electricity required validate single transaction, with upwards twh used miners annually continually add new blocks the bitcoin blockchain.[] while the figures involved are lower for ethereum, the energy outlay, and thus environmental impact, still massive.[] fact, you were combine the amount energy used protect the bitcoin and ethereum networks, there would enough power the country new zealand for year. there are currently movements away from proof work blockchains, with ethereum being the most prominent proponent for move towards proof stake. usability the bitcoin blockchain, transactions are published part block approximately every minutes, and standard wait minutes more after each transaction has been published, allow for subsequent verification. taking real-world example, this would analogous attempting pick groceries from store and then having wait line for hour while your payment processed. for real-time application real-world use case, this clearly unacceptable. second, more nuanced concern with bitcoin, and the majority currently available cryptocurrencies, the concept anonymity, pseudonymity the common case. transactions are public and shared all participants the blockchain. for transactions where discretion required, this not always desirable the data could examined, allowing algorithms extract transaction data from user's "private" transactions. again use real world example for illustrative purposes, suppose user sends money their mother; based the transaction information, possible see: how much bitcoin has been sent and received each user now and throughout the entire history those particular addresses, the balances both addresses any given time history, and which other addresses each user has sent funds received funds from. essentially, senders and recipients transactions can see the financial history the other, and could even have the ability know what was bought, what was gambled on, even which entity received 'anonymous' support, once you are able link particular address individual. the american fbi has proven several times now, bitcoin not truly anonymous. for many users, financial transparency perhaps one the largest disadvantages using bitcoin, however, researchers are working fixing this problem with solutions such zksnarks (zero-knowledge cryptography), which privacy mechanism built into zcash, and added ethereum with the metropolis (byzantine) upgrade. versioning, hard forks, and multiple chains the primary problem forking blockchain one loss consensus and security. take the hyperbolical example severely bloated blockchain which makes use the computing power available the universe, and contrasting example wherein competing chains each possess the available computing power. the case the first example, attack would truly require the computing power available order overtake the chain maintained honest nodes, however the fragmented case, only the computing power available the universe would required corrupt any individual chain. blockchains rely consensus being maintained having the combined computational power honest nodes outweigh the power available malicious ones. with fragmentation the chain and reduced computational power being applied each fork, attack has more chance being successful, with lower entry point terms resources required met. hard forks are another generally undesirable outcome that often result from loss protocol consensus. ideological differences between different stakeholders within given blockchain ecosystem can lead split, fork the chain, with well-known examples being the breakaway bitcoin cash due bitcoin's scaling issues and inability used fast and cheap means electronic cash and the previously referenced ethereum classic, which forked away from ethereum the philosophical basis blockchain immutability. however, hard forks are not always contentious and often come about through changes core protocols blockchain system, such with ethereum's metropolis upgrade. after hard fork, the overall hash power that was applied the original chain may still there, however the case ideological hard fork, then split between two competing chains, leaving them possibly less secure and more vulnerable attack. infinity project core goals during the formation the infinity project asked the following key questions: given current limitations existing cryptocurrencies, what are the needs and wants the market and how can provide solutions? what properties are necessary for cryptocurrency widely adopted and integrated into the wider economy? with these questions mind, conducted thorough analysis existing blockchains including bitcoin, ethereum, and variety promising altcoins uncover the strengths and weaknesses each project. however, was difficult find project that perfectly aligned with our initial questions posed above. therefore, the infinity project team began researching new technologies and algorithms that were more suitable for mass, real-world adoption, help meet our goals. the same time, started design the basic framework the infinity project, and formulated the following core goals: infinity project core goals identify actual market needs for cryptocurrency develop cryptocurrency that flexible create user-centric blockchain platform develop ecosystem that promotes sustainable innovation investigate methods for decentralized cryptocurrency exchange core goal market need identification although many blockchain projects have gained mainstream attention and recognition recently, cryptocurrency has penetrated digital commerce global scale. more precisely, great divide still exists between most crypto projects and real world solutions. cryptocurrency acceptance and adoption currently limited very small group online merchants and handful other services, making infeasible completely rely bitcoin any other currently available cryptocurrency the facto digital currency choice. help overcome this and issue and expedite use cases and adoption, useful work jointly with experts given field community, along with developers, order drive the development successful, market-friendly currency that best serves all users. therefore, answer one the two key questions posed our infinity project team, "what the user-centered currency that the market wants?", must define the core blockchain technology required order find mutually desirable solution from both market and development standpoint. this led the infinity project team conclude that the first key success factor (ksf) when developing our new cryptocurrency design and implement based the premise providing practical solutions that the market needs. core goal flexible currency the infinity project team decided step away from traditional viewpoints monolithic monetary development present many existing encryption projects, and introduce the concept flexible implementation platform that can incorporate various monetary models. extension, this led the creation our "hyper-connected coin" (hycon), which from its very beginnings, was designed fast, cheap, scalable, and safe, and thus ready for adoption and usage variety real-world situations. the underlying infinity blockchain that it's built upon has been designed with interchangeable, modular structure, which will facilitate the easy adoption and alteration the underlying technology suit specific needs. core goal user-centric platform arguably, one the most important parts the paradigm shift that bitcoin ignited the facilitation secure, decentralized exchange value electronically one that open all, and opened the door the once unrealistic notion making payments without banks. however, steep learning curve from the conceptual level down the actual and most cryptocurrencies one the key hurdles currently hampering greater adoption. the infinity project seeks reduce these barriers entry providing more straightforward and user-friendly platform, addition intuitive wallet and exchange platform interface. ultimately, our goal allow more people harness the paradigm-shifting power blockchain technology. core goal flexible innovation one the most important aspects considered during the development the infinity project was how help more people, businesses, governments, ngos, etc., harness the power blockchain technology. thus, our infinity project team researching the implementation the infinity platform, which flexible blockchain platform concept that evolved from the study various other existing blockchains, platforms, and cryptocurrencies. while hycon will part the infinity platform, will not its sole component. the goal our infinity platform research create platform that intuitive use and one that can implemented various ways. example use cases for the infinity platform include: implementing secure cryptocurrency based hycon that fast and cheap use means exchange value; the creation decentralized corporate ledgers enhance information security and facilitate more efficient data storage and transmission; and adding cryptographic security stock exchanges. potential use cases and innovations built with the infinity platform are vast, and can adapt offer potential users the flexibility create the blockchain solution they need. core goal secure decentralized exchange active area research for the infinity project giving users the ability exchange different cryptocurrencies decentralized manner. current exchanges rely centralization cheaply and quickly trade cryptocurrencies, however this centralization requires users entrust their fiat and cryptocurrency holdings the exchange. unfortunately, the source code that powers these exchanges often not publicly available for review, despite the huge volumes transactions that pass through these exchanges. globally, there have been multiple incidents where exchanges have had their user's cryptocurrencies stolen malicious actors. the centralization user funds and information existing exchanges today will continue making these companies targets. part the infinity project's future research, intend integrate the concept atomic swaps into hycon allow for our currency become true medium exchange. through hycon, multiple other cryptocurrencies will tradable, and transaction fees will distributed the miners who protect the network. atomic swaps will allow hycon held escrow pending the proof payment another cryptocurrency, and thus facilitate trustless trading hycon and other cryptocurrencies. hycon technical specifications characteristic specification hash function cryptonight blake consensus protocol spectre chain structure directed acyclic graph(dag) block speed mining method pow genesis block the hycon genesis block was published january th, :am kst (gmt+). available viewed github part team hycon's repository[]. for more information about the genesis block, please see appendix hashing algorithms the first version this document cited blakeb the only hash function being used part the hycon system. however, due recent developments asic technology[], was decided move away from the blake-b hash and instead use the asic resistant hash cryptonight, which also employed monero. what makes cryptonight interesting that uses pseudorandom memory read/write operations part its hashing operation. this leads performance being loosely comparable whether cpu gpu, while also rendering incompatible with standard asic architecture. the future, and order deter centralisation mining resources, planned follow the example set monero and periodically tweak the hashing algorithm maintain asic resistance over the course the mining period. consensus spectre protocol contrast the nakamoto protocol used for consensus the bitcoin blockchain, hycon implements protocol called spectre maintain consensus []. spectre generalises blockchain into the form directed acyclic graph(dag) employing voting algorithm between pairs blocks order specify their order pairwise manner, i.e. block should applied before block block should applied before block while full description the spectre protocol beyond the scope this whitepaper, basic outline the voting rules provided below. voting rules order discuss the voting rules spectre, useful refer visual representation the process. should also noted that votes are communicated between nodes and there need explicitly participate vote. rather votes come from blocks and the way which they vote implied from the structure the dag. the criteria used the voting process spectre are follows; the important terms noted are past(x) and uture(x) which designate the blocks that are reachable from and the blocks which reference antecedent respectively. more specifically, block uture(x) past(y) i.e. uture(x) past(y) should also noted that the virtual block, designated irtual(g) hypothetical block that has the entire dag its past. for some block designated voting some other blocks designated and uture(x) but not uture(y) then will vote favour uture(x) and uture(y) the vote will determined recursively based the prospective vote virtual block with past equal past(z) not uture(x) uture(y) then the vote will decided the majority vote from the set blocks designated uture(z) virtual block with past(v irtual(g)) i.e. its past the entire dag, will vote accordance with the majority vote the dag. for the cases the block will vote for itself correct, provided that not uture(x) vice versa. application spectre protocol example dags best illustrate the application spectre, useful work through example the protocol action step step and provide snapshots the state the voting process proceeds. this particular example drawn directly from the spectre whitepaper. example case double spend take the simplest possible case where block contains transaction and second block contains conflicting transaction these conflicts could malicious, merely caused latency between nodes leading transactions being published twice, such that two miners are collecting the same transaction fee. depending the structure the dag the result this double spend will resolved differently the two blocks will have differing pasts and futures. the initial case for this example looks follows with blocks and being published approximately the same time block this stage the system unaware the double spend, subsequent blocks have been published referencing both the conflicting blocks. however, the structure the dag develops and more blocks are added, the double spend discovered and the structure the dag will analysed determine which block takes precedent. the above diagram, block the first block published with reference the double spend between and following the rules listed above, the votes can counted follows. blocks and all vote for block because block not present their past. similarly, the votes blocks and are for for the same reason. block votes based recursive call over its past. blocks and are not included past() they are not considered when determining block vote. the voting area for block shown below. blocks are not the sets blocks uture(a) uture(b) they will vote the same the majority their futures. the case this recursive vote, these blocks all have more votes for block their future and also vote for block block past contains votes for block and votes for block block will vote for block there had been tie, block would break the tie deterministically that all servers can agree which way block votes. since only use past() determine the vote its vote will never change. the remainder the voting process the dag based the future the remaining blocks. once block vote has been confirmed, block votes favour because the votes and outweigh the votes and block sees votes for from and with blocks and voting for thus block also votes for similar case for blocks and which all cast their votes for leading final vote tally for this voting procedure votes favour and votes favour interesting property spectre that, especially simple cases such the one illustrated here, replicates longest-chain selection models used other blockchain technologies. following the route from passing through and the same route but passing through can seen that the route ->a-> longer than the route ->b->, i.e. the longest chain wins. dag versus blockchain common question that gets asked when discussing hycon about the dag structure itself. the dag structure employed hycon consequence committing block interval. while looking ways that throughput blockchain could increased became apparent that system latency distributed network would limiting factor leading unintentional forking the blockchain. rather than avoiding these forks was decided embrace them and the resulting structure, the oft misunderstood and overemphasised dag, which was the consequence. the advantage dag structure over linear blockchain primarily that allows for shorter intervals between blocks, which turn leads higher transaction confirmation speeds. contrast currently existing blockchains, where newly mined blocks are chained the end the blockchain referencing the hash the previous block, new block added the dag references the current tips the dag instead. this allows blocks published simultaneously from different nodes, without running the risk forking the chain. new blocks are permitted have multiple antecedents, they can added concurrently and thus miners can still reap the mining rewards without having worry about their blocks being orphaned. where problems occur nodes publish transactions that have been simultaneously published elsewhere, leading possible double spends. using spectre, possible achieve consensus about which transactions should rejected without orphaning the entire block. infinity spectre implementation the voting procedure spectre quite drain resources, its implementation needs carefully managed. our initial prototype was written python for ease development, however, the final version the infinity spectre implementation written rust, such that complete control over data structures and memory management maintained allowing for better performance. block "height" and chaining can gathered from cursory glance the dag structure, the traditional idea block height used bitcoin ethereum requires slight semantic modification. those representative blockchains, the height represents the number blocks that have been chained top the genesis block. hycon the height more general descriptor representing the number dag layers above the genesis block the current block is. the calculation applied quite simple. the height the new block one more than the height its highest parent. for any new block with set parents eight(b) max(height(p)) diagrammatically, this situation looks like the example provided below. newly published blocks reference the highest available unreferenced blocks, and have height set one more than the highest referenced block. network infrastructure node.js, typescript the advantage using this setup for the system architecture node.js' inbuilt support for asynchronous operations. node.js allows for cross-platform "non-blocking evented i/o", where individual components can wait for the results operations outside the flow normal operation. the waiting components are only triggered and executed the occurrence certain event, such message being received from the network, input from user, allowing other code execute during the waiting period. the use typescript was decided upon due the strong type checking that enforces what essentially javascript. using typed version javascript allowed the development team build platform that takes advantage the asynchronicity provided node.js while also making debugging simpler process due explicitly defined types. the typescript files require compiling before being run, many syntax and type errors can caught easily the compile stage, rather than trawling through maze callbacks step step the debugging process common javascript applications. serialization protocol buffers blockchain system there are any number messages flying around the network any given time. important that the node software able decode that data consistent and correct manner. the use protocol buffers, which are developed google[], allow for consistent message definitions that can used across different platforms, allow for nodes running the infinity blockchain developed numerous programming languages. the serialization layer language agnostic, which highly useful for cross-platform applications. protocol buffers also allow for backwards and forwards compatibility, increasing the chance that update will only require soft fork, rather than hard fork. also makes easier for third party software compatible, allowing other developers interact with the hycon network. mining overview publishing block will require proof work, similar the majority existing cryptocurrencies. miners will calculate the hash the next block based the hashes the tips the dag, the merkle root the transactions included the block, and nonce, that will altered until hash that exceeds current difficulty calculated. while the creators spectre state that blocks per second feasible using the protocol, hycon will initially have target block per second. although the current prototype uses proof work, are very aware the large amount electricity being used secure the bitcoin and ethereum networks, and are considering alternatives. one the lesser-known methods that are considering proof space[], which requires miners pre-compute and store large amounts data, then search through the files for solution that satisfies the current difficulty. this uses very little electricity and has been demonstrated effective burst coin and space mint. mining process detail the initial stage the mining process the encoding and hashing the contents the block header, which will not change result the mining process. these contents are the references the previous blocks, the merkle root the transactions contained within the block, the block target difficulty, the block timestamp, and the root the merkle-patricia trie representing the current world state after the transactions this block(see wallets accounts section for more information). this data hashed using the byte version blake provide unchanging pre-hash furnished gpu cpu miner. this step necessary, particularly for gpu mining, hycon block headers have variable length due multiple possible parent blocks. gpu mining software works best when furnished with fixed length data structure pre-hashing necessary. the byte header pre-hash then combined with byte nonce, that incremented one for each hash attempt using the cryptonight hash algorithm. the combined header pre-hash and nonce are hashed together return byte hash representative the block. this hash then compared the difficulty specified the block header, and the correct difficulty threshold reached, the nonce returned included the finished block header and published. stratum integration xmrig hycon makes use the stratum protocol allow for support for gpu mining using modified version xmrig[]. mining rewards successful completion the proof work for new block, the miner rewarded with hycon. the mining process for hycon planned last for years. the initial reward for mining block will set hycon. the reward will remain hycon per block for years and months which stage will decrease hycon hycon per block. the reward will continue decrease periodically this fashion until the market cap billion hycon reached after just short years. was decided decrease the mining reward linearly opposed bitcoin's geometric distribution with periodic halving, provide more balanced distribution coins over the mining period and avoid severe decreases the economic incentives for miners, seen with bitcoin's halving model. applying the linear model outlined above the distribution curve hycon looks follows: wallets accounts hycon wallet gui full node running the hycon software has access locally hosted web gui allowing for wallet operations, transactions, and blockchain exploration. the gui was written using react allow for lightweight high-performance interface. hycon wallet hycon wallets employ industry standard elliptic curve cryptography methods for transaction signing, specifically secpk [], well implementing mnemonic codes for wallet recovery specified bip [], allow for ease integration for third party wallet providers. provision has also been made for (hierarchical deterministic) wallets specified bips and [][] hycon addresses hycon addresses are generated byte arrays sliced from the byte blakeb hash the associated public key. for human readability the addresses are output base strings, prefixed with capital the final characters the string act checksum for the address. the checksum calculated three steps. first, the byte blakeb hash the address calculated. then, this hash output encoded base string. finally, the first characters from this string are taken and appended the string representation the address. the use checksum this manner minimizes the chance mistyped addresses being accidentally used. accounts balances order keep track the spending and balances hycon participants, necessary implement accounting model. the model chosen for use hycon based the one used ethereum and described the ethereum yellow paper[], data structure called merkle patricia trie[]. each block contains the world state result the publication its contained set transactions, the value which the blakeb hash the merkle patricia root representing the account data for all hycon accounts. the account data that stored the balance that particular account hycon, reference the most recent block referencing that particular account, and nonce value representing how many transactions that particular account has initiated. the nonce value used protect against replay attacks, and the previous block reference optimisation allow for quicker transaction history querying well easier tracking for spectre the case double spend. the blakeb hash used the accounting model allows for expedient hashing required process numerous transactions and balances. synchronisation hycon will employ headers first approach initial synchronisation with the network. first startup, and subsequent startups thereafter message sent connected peers asking for number headers with block height subsequent certain block height (the currently stored maximum block height their local database). receipt those headers, the blocks are verified and they are missing from the local database, the full block data requested from connected peer. the received blocks are verified again receipt and then added the database they are validated. blocks can only added the database once their parent blocks have been included this process necessarily sequential. conclusions this whitepaper's discussion began exploring the limitations existing cryptocurrencies, which was the basis for the entire infinity project. the vision the infinity project provide fast, secure, scalable, and user-centric blockchain and cryptocurrency ecosystem available for mass adoption. through the combination the spectre protocol and cryptonight and blake-b hashing algorithms, have proposed new cryptocurrency that both safe and expedient. with the adoption the methods elaborated herein, the hycon cryptocurrency and infinity project offers valuable and differentiated addition the global cryptocurrency landscape. references blake.net. (). blake. [online] available at: https://blake.net/ [accessed oct. coindesk. (). understanding the dao attack coindesk. [online] available at: https://www.coindesk.com/understanding-dao-hack-journalists/ [accessed nov. croman, k., decker, c., eyal, i., gencer, a.e., juels, a., kosba, a., miller, a., saxena, p., shi, e., sirer, e.g. and song, d., february. scaling decentralized blockchains. international conference financial cryptography and data security (pp. -). springer berlin heidelberg. decker, (). bitcoinstats. [online] bitcoinstats.com. available at: http://bitcoinstats.com/network/propagation/ [accessed nov. decker, and wattenhofer, r., september. information propagation the bitcoin network. peer-to-peer computing (pp), ieee thirteenth international conference (pp. -). ieee. digiconomist.net. (). bitcoin energy consumption. [online] available at: https://digiconomist.net/bitcoin-energy-consumption [accessed nov. digiconomist. (). ethereum energy consumption index (beta) digiconomist [online] available at: https://digiconomist.net/ethereum-energy-consumption [accessed dec. the economist. (). the end the cash era. [online] available at: http://www.economist.com/node/ [accessed sep. ethereum blog. (). toward -second block time ethereum blog. [online] available at: https://blog.ethereum.org////toward-a--second-block-time/ [accessed sep. etherscan.io. (). ethereum average blocksize chart [online] available at: https://etherscan.io/chart/blocksize [accessed nov. ethstats.net. (). ethereum network status. [online] available at: https://ethstats.net/ [accessed nov. goland.org. (). how make block chains strongly consistent stuff yaron finds interesting. [online] available at: http://www.goland.org/why_block_chains_are_strongly_consistent/ [accessed sep. goland.org. (). the block chain and the cap theorem stuff yaron finds interesting. [online] available at: http://www.goland.org/blockchain_and_cap/ [accessed sep. google developers. (). protocol buffers google developers. [online] available at: https://developers.google.com/protocol-buffers/ [accessed oct. james-lubin, (). blockchain scalability. [online] o'reilly media. available at: https://www.oreilly.com/ideas/blockchain-scalability [accessed nov. koteska, b., karafilovski, and mishev, (), blockchain implementation quality challenges: literature review proceedings the sqamia workshop software quality, analysis, monitoring, improvement, and applications, belgrade, serbia, -... malanov.a, (). six main disadvantages bitcoin and the blockchain. [online] kaspersky.com. available at: https://www.kaspersky.com/blog/bitcoin-blockchain-issues// [accessed nov. motherboard. (). one bitcoin transaction now uses much energy your house week. [online] available at: https://motherboard.vice.com/en_us/article/ywbbpm/bitcoin-mining-electricity-consumption-ethereumenergy-climate-change [accessed nov. nakamoto, s., bitcoin: peer-to-peer electronic cash system. the nodesource blog node.js tutorials, guides, and updates. (). why asynchronous?. [online] available at: http://nodesource.com/blog/why-asynchronous/ [accessed nov. park, j.h. and park, j.h., (). blockchain security cloud computing: use cases, challenges, and solutions. symmetry, (), p.. poon, and dryja, t.. (). the bitcoin lightning.network [online] available at: https://lightning.network/lightning-network-paper.pdf. raiden-network.readthedocs.io. (). raiden specification raiden network documentation. [online] available at: https://raiden-network.readthedocs.io/en/stable/spec.html [accessed dec. reitwiessner, (). zksnarks nutshell [online] available at: http://chriseth.github.io/notes/articles/zksnarks/zksnarks.pdf [accessed nov. sirer, e.g. and song, d., february. scaling decentralized blockchains. international conference financial cryptography and data security (pp. -). springer berlin heidelberg. sompolinsky, y., lewenberg, and zohar, a., spectre: fast and scalable cryptocurrency protocol. iacr cryptology eprint archive, p.. sompolinsky, and zohar, a., january. secure high-rate transaction processing bitcoin. international conference financial cryptography and data security (pp. -). springer, berlin, heidelberg. son, (). bitcoin's rise happened shadows finance. now banks want in. [online] bloomberg.com. available at: https://www.bloomberg.com/news/articles/--/bitcoin-s-rise-happened-in-shadows-of-financenow-banks-want-in [accessed dec. swan, m., blockchain: blueprint for new economy. o'reilly media, inc.". visa (). visa inc. facts figures [online] available at: https://usa.visa.com/dam/vcom/global/about-visa/documents/visa-facts-figures-jan-.pdf [accessed nov. yli-huumo, j., ko, d., choi, s., park, and smolander, (). where current research blockchain technology?--a systematic review. plos one, (), p.e. dziembowski, stefan; faust, sebastian; kolmogorov, vladimir; pietrzak, krzysztof (). "proofs space". available at: https://eprint.iacr.org//.pdf secg.org. (). standards for efficient cryptography [online] available at: http://www.secg.org/sec-v.pdf [accessed jan. wood, g., ethereum: secure decentralised generalised transaction ledger. ethereum project yellow paper ethereum. (). ethereum/wiki [online] available at: https://github.com/ethereum/wiki/wiki/patricia-tree [accessed jan. team hycon. (). team-hycon/genesis-view [online] available at: https://github.com/team-hycon/genesis-view [accessed jan. cryptonight hash function cryptonote.org. (). [online] available at: https://cryptonote.org/cns/cns.txt [accessed feb. justcryptonews. (). sia coin bitmain antminer blake (b) asic miner announced [online] available at: https://www.justcryptonews.com//sia-coin-bitmain-antminer-a-blake-b-asic-miner-announced [accessed feb. monero (xmr) cpu miner github. (). xmrig/xmrig [online] available at: https://github.com/xmrig/xmrig [accessed feb. palatinus, m., rusnak, p., voisine, a., bowe, s.. bitcoin/bips/bip- [online] available at: https://github.com/bitcoin/bips/blob/master/bip-.mediawiki [accessed feb. bip. (). bitcoin/bips [online] available at: https://github.com/bitcoin/bips/blob/master/bip-.mediawiki. bip (). bitcoin/bips [online] available at: https://github.com/bitcoin/bips/blob/master/bip-.mediawiki the monero project. (). monero: scheduled network upgrade planned for april [online] available at: https://getmonero.org////a-scheduled-protocol-upgrade-is-planned-for-april----.ht ml. appendices appendix genesis block discussion the hycon genesis block was published january th, :am kst(gmt+) coincide with the anniversary the publication the bitcoin genesis block. below summary the information contained within the block. the block, along with decoding software written several programming languages, available online the team hycon github repository. the block itself contains header and six transactions. the six transactions represent the minting the hycon that initially allocated. see appendix for full details the token and budget allocation. the block header contains the mining difficulty, the root the merkle tree the transactions, the root the world account states, and the timestamp the block. the remainder the block data made the individual transactions which are loading the accounts used for future token distribution. was felt that encoding the transactions within the genesis block this manner was the most transparent method for preparing for the wide release hycon, will allow all the funds from these accounts tracked from the beginning. contents hycon genesis block when decoded, the contents the hycon genesis block are follows: block header difficulty: merkle root: cfffaceebfffbdcefddfdfebff state root: ecbbffbafdcddafbabdaed timestamp: thu jan kst transactions ico account account address(raw): eeefabeddadf amount: ,,, hycon airdrop account account address(raw): faefbdcefcaaede amount: hycon team account account address(raw): babefccdaeadbdffdca amount: hycon development fund account address(raw): abeacedadafdaaf amount: hycon bug bounty account address(raw): aeafbbeedaaecdbcafabc amount: hycon corporate social responsibility account address(raw): decdfebabccffc amount: hycon appendix coin distribution budget allocation coin distribution the total available number hycon issued billion. the method for allocation follows can seen the above chart, the majority hycon coins will available through public mining, with billion hyc) allocated for that purpose. the remaining coins have been minted within the genesis block and allocated hycon accounts responsible for the distribution those coins once the network live. this has been allocated for six purposes. the largest portion for the participants the ico and other pre-investors, with total one third the initially minted coins hyc total; ,,, hyc) being allocated thus. the total hyc, (,, hyc) will provided the team, the ecosystem development fund, and the bug bounty programs respectively. hyc total hyc will allocated towards the corporate social responsibility hycon. the remaining hyc, total hyc) the minted coins are airdropped through events other yet decided upon methods. should noted that the genesis block contains billion allocation for the ico fund, however after consultation with the community, the number tokens made available was halved, with billion being available for that purpose. the other billion currently stored the genesis block will burned, mined later date. budget allocation the primary focus for the allocation funds from our ico facilitate the securing talented development and securing the long term future the project. such, the funds raised will into funding the future research and development hycon and the infinity project, including the infinity platform and the infinity decentralised exchange. important note that while these are separate projects, the hycon ico the only fund raising drive being taken ensure the liquidity the entire project moving forward.