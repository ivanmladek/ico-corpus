ethorse whitepaper the world's first dapp bet the price cryptocurrencies draft version table contents abstract...................................................................................................................................................................................... introduction ............................................................................................................................................................................... the dapp user experience ....................................................................................................................................................... avoiding manipulation .......................................................................................................................................................... safety funds refunds .................................................................................................................................................. architecture ............................................................................................................................................................................... backend ................................................................................................................................................................................ frontend ................................................................................................................................................................................ workflow .................................................................................................................................................................................... implementation ...................................................................................................................................................................... code audit progress ........................................................................................................................................................... roadmap ................................................................................................................................................................................ horse token crowdsale ................................................................................................................................................... the team ................................................................................................................................................................................ disclaimer ............................................................................................................................................................................... references ............................................................................................................................................................................. (c) hors abstract abstract the ultimate combination horse betting, blockchain technology, and cryptocurrencies. ethereum smart contract based dapp for betting the price cryptocurrencies and win from everyone who bets against you. ethorse interesting tool for all cryptocurrency traders who like bet the price movement cryptocurrencies. users bet with eth one the listed coins tokens have the highest gain fixed period (parimutuel betting). all bets are placed the blockchain, allowing users see the total number bets, the total bet amount for each coin, and the payoff odds deriving from them. this allows users who follow the crowd pick winner easily. however, the payoff-odds can also used bet underdog for very large wins. the platform can used bet and win eth both bull and bear markets. compared mainstream betting sites and centralized exchanges, ethorse holds many advantages does not require users signup and deposit funds entity. the development open source and the funds are secured the ethereum smart contracts, ethorse enables completely trustless peer-to-peer betting environment. the prices are pulled from the exchanges using oraclize and done way avoid manipulation. with user-friendly interface, ethorse groundbreaking platform and has the potential attract large set the trading population the crypto space. the platform's tokens, are issued the crowdsale contributors. takeout from all the betting pools goes the reward pool, which can claimed the horse token holders using our dapp and staking the tokens during fixed period. the takeout from the bet pools minimal compared the usual %-% horse betting []. the end each quarter, smart contract our dapp site will used claim eth from the reward pool based the proportion horse tokens staked compatible wallet during particular time period. for example, wallet staking the total horse token supply our dapp will receive the reward pool. the bets are always placed between the users and bankroll does not pay the winners, the reward pool balance will always remain positive. the platform gains popularity, ethorse will allow users bet using horse tokens which can unlock advanced features and enjoy smaller takeout. (c) rse introduction introduction ethorse provides user-friendly interface interact with the betting smart contract that handles all operations secure way, including collecting bets, monitoring prices, calculating winners, and rewarding. the betting system used ethorse called parimutuel betting [], and popular horse betting and many sports where participants finish ranking order. parimutuel betting, all wagered amounts are placed together pool, the house race track takes cut from the pool, then the reward shared among everyone who bets the winner proportion the amount they bet. ethorse uses this betting system where users bet the price cryptocurrencies choosing winner among multiple cryptocurrencies. winner coin token that has the highest price increase among all the other competing coins tokens specific time period. ethorse implements this purely the blockchain without any interaction with the outside world except fetch the prices from the exchanges using oraclize. race published announced when contract deployed. all the variables are set this time such the three sequential periods explained below. one can interfere influence the contract once contract deployed and race made public. (c) rse introduction the time period following the announcement race during which users can place their bets using the ethorse dapp metamask(tm) (https://metamask.io/) compatible browser such google chrome(tm), firefox(r) application from ethereum foundation such mist geth. during this period, users can see real time all the information about placed bets such the wagered amount and the number bets each token/coin. win odds are calculated and updated bets are placed. win odds are explained with algebraic representation the below section. the beginning this period, the contract locked for further betting. any transactions trying place bet would fail, not deducting the corresponding balance from the user's wallet. price each coin/token fetched from the exchanges the beginning this period and displayed the betting page "race start price". rewarding period the end the racing period, prices are fetched again from the exchanges and displayed the website "bet close price". the price increase from the "bet lock price" "bet close price" used decide the winner. the winning coin announced the web interface. users can use the function "check result" view their winnings and use the "claim" function execute transaction without sending any eth and include only the gas (or transaction fee). this triggers the smart contract send their winnings the form eth. users have set period (currently days, subject change with notice) claim their winnings. one the ethorse betting contract addresses used november that verified etherscantm xeafdaabdbfdb. all unclaimed winnings the bankroll and are included the reward pool. race with set cryptocurrencies listed for betting, with total bet pool each cryptocurrency ..., bn, the total pool money the event is: $&' after takeout "t" from the pool, the amount remaining distributed among the successful bettors bt( t). those who bet the winning outcome "w" will receive payout br/bw for every eth they bet it. (c) rse the dapp user experience the dapp user experience the web interface enables users browse through past games, check their results, and claim their accumulated rewards. the interface also presents information the status ongoing races, races that are open for betting, and schedule upcoming races. users will able choose from multiple games that are open for betting, view the status on-going races, and claim their rewards from completed races. there are several types games categorized the race period (hr, week, etc.) and bet type (win, place, show []). for the beta release testnet, the most popular version horse betting "win" was provided the users. this type bet, users pick winner for the spot. hour betting period (upon the announcement), -hour race period find winner, and then -day reward claim period was applied. countdown timer will always running the race page show the beginning end the corresponding time period the race currently on. all the terms the race are transparent for the public verify anytime, thanks the nature the blockchain and ethereum. below shown demonstration possible scenario from single race help understand the bets and payout. screenshot from the working beta []) total pool takeout rate total payout winning pool winner payout (c) eth bt( ltc with price increase (btc +.%, eth +.%) br/bw ./. eth, i.e., eth profit for eth bet ltc rse the dapp user experience bankroll (horse holders) receive eth (bt-br) and any unclaimed winnings claim the end the quarter from this one race. ethorse can run one race similar the this demonstrated race every day, horse holders can earn eth the end the quarter. ethorse scales, will have much more user bet amount, coins bet, and types bets. this shows huge potential market value for the ethorse platform. avoiding manipulation the prices fetched from the exchanges using api calls through oraclize plays critical role determining the winner. hence, the best techniques and algorithms are used avoid any manipulation. for this purpose, the prices fetched from multiple exchanges will aggregated instead using one source. the trading volume the coin token exchange will taken into account. the time which the price from the exchanges pulled will randomized within specific short time period avoid possible price manipulation exchange orders. the beta, prices are pulled from the coinmarketcaptm api []. safety funds refunds the contract fails for any reason, one being issue with fetching the price from the exchange, there are safety mechanisms place cancel the race and issue full refund all the bettors after the gas costs for the transaction. can publicly verified the open source smart contract code that one including the contract owner will able take control the funds breaking the contract. the only action that contract owner can take unlock the funds for anyone make them available for all bettors withdraw them. this works similar way with the "claim reward" function explained the previous section. more technical details about its implementation are available the following section. (c) rse architecture architecture ethorse decentralized application built completely inside the ethereum blockchain []. the entire dapp lives inside the ethereum virtual machine (evm) []. the evm has two types components, the volatile and non-volatile. ethorse dapp contains the code, data, stack, arguments, and memory. since the evm lives inside the ethereum network, any read write data operation has through the blockchain. the following sections, the workflow and implementation the smart contract are discussed detailed. while uses the architecture the development done far for the beta, scaling solution towards the release full suite cryptocurrency price betting being meticulously worked the team. (c) rse architecture backend the backend component consists the core logic behind the dapp, which smart contract the ethereum world. the smart contracts for ethorse have been written solidity language. truffle framework used for the administration and management the contract and the frontend. the dapp structure truffle followed. all the contracts the ethorse environment are built following the openzeppelintm secure smart contract protocol. apart from the core logic, there are also additional libraries and services used the dapp. one the main supporting components oraclize. oraclize used data carrier. since the dapp resides closed environment, the only way get touch with the external web api using oraclize. oraclize works bridge between the dapp and external apis. external apis are used pull prices from the exchanges, coinmarketcaptm (for beta), and random.orgtm for unbiased random number generation used randomizing the time which the price pulled from the exchanges. frontend react and redux are used for the frontend development. the choice react derives from the need working with the ethereum blockchain, which makes state change for every action operation performed the blockchain. every state change that occurs the blockchain tracked and the changes are reflected the dapp for the users. though this could achieved with vanilla html css and stack, for seamless integration and smooth user experience the power react harnessed. the interacts with the blockchain using any type web provider. the frontend code has been tested work with some the frequently used web providers such metamasktm browser extension google chrometm firefox(r) browsers and mist from ethereum foundation. the frameworks that are used interact with the frontend include ethereum web javascript framework and truffletm suite frameworks such truffle-contract and truffle-artifactor []. (c) rse workflow workflow ethorse designed with simple and straightforward workflow minimize any security risks. using the appropriate and absolutely necessary functionality, the complexity the application has been masked the optimal betting algorithm. (c) rse workflow the starting point the contract the constructor. the constructor the method which gets invoked when the contract deployed the blockchain. when deploying the contract, the constructor sets the gas amount required execute the oraclize queries. this predetermined gas termed "starter gas" and fed the contract the ethorse bankroll. the constructor also sets the notary for the oraclize service and calls the update method. the update method responsible for setting delays and placing the oraclize queries. the delay the oraclize calls determines the betting period, racing period, and rewarding period. once race selected, the user picks coin that they want bet and enters the amount place bet. this action involves transaction that contains the user's selection coin and the value payload. the state change made the blockchain the smart contract. the contract not only logs the event placing bet but also stores all the information the bettor structure. all the bets are placed and locked the end the betting period. this time, the oraclize queries placed the contract result fetching the price the coins randomized time within predefined period. similarly, the bet closing price fetched the end the racing period, after which the winning pool identified, and the rewards are prepared for collection. there are any issues with the price returned from exchange api calls from oraclize, there refund mechanism already built the code. once the "bet closing price" received, the gas amount for claiming the reward determined the estimategas method provided the contract instance. the bettors can claim all their unclaimed rewards from previous races verifying with their wallet used for betting. (c) rse implementation implementation the website interacts with the smart contract using the truffle library. makes use artifact interact with it. race can have minimum bet amount and maximum bet amount stated. once bet placed, the amount converted wei before the bet stored the smart contract and logged event. after the betting period over, "place bet" action disabled the user interface. this help users not spend gas unnecessarily. the "place bet" button will also disabled whenever bet placed until transaction for the previous bet returned the network. inside the contract, there are several variables, structures, and methods exposed the public. the getter methods defined the contract are for exposing the data the contract the frontend. there are three structures present the contract. the first one stores the betting information. each bet that placed will have its data stored this structure. the second structure used for storing information about each listed coin and the corresponding bet pool information. the third structure used for storing the information every bettor. all the bets that are placed the bettor are stored array betting information structure. the contract also leverages the usage hashmaps. there are three hashmaps that are being used. the first hashmap for mapping the oraclize ids with its corresponding coin. since the oraclize works using the callback functionality, requires methodology track the query for which the callback has been invoked. addition this, there are several logs created log every event that makes state change the contract. all the events used are indexed. indexed events are used help when there are large number events logged, will useful searching efficiently while identifying winners and rewarding. there are modifiers that are defined enforce restriction the access several methods. the update function where the oraclize queries for fetching the prices are implemented. there are two oraclize query calls for every coin source: the "bet locking price" and the "bet close price". all the coin prices are requested and fetched the form json and the price each coin parsed from using json parser library for solidity. the framework used for this "jsmnsollib". once the prices start arriving the callback method, the coin_info structure updated with the data. there are also boolean flags present segregate the "bet lock" and "bet close" prices. logic implemented check the price-data meets the requirements for the reward method invoked. once all the price data arrive, the reward method invoked internally. (c) rse implementation the calculation finding the coin with the highest gain performed calculating the percentage price increase from the "bet lock price" "bet close price". this termed the "coin delta (cd)". the calculated precision decimals. case, the two more coins equal and larger than the remaining coins, all the coins with the largest are declared winners and rewards are provided for everyone who bet any those coins. the method for calculating the reward has been deliberately made constant function that the bettors not have spend gas check their bet results. the user decides claim the reward, the user invokes the claim reward method. this method uses some amount gas similar the placebet method. mentioned the previous section, there any technical issue the contract, the contract owners will not able withdraw the user funds their wallets. the only possible action unlock the fund for the bettors receive full refund. (c) rse code audit progress code audit progress the first beta ethorse dapp (http://ethorse.github.io/betting/) was released october this release was announced reddit collect feedback from the developer community (r/ethdev). the dapp was deployed and tested ropsten testnet []. both positive and constructive feedback was received improve the app. provided the team with ideas improve the contract logic and workflow, and also encouraged the team add some new features. after some internal testing new features added, november ethorse announced the first public bug bounty for the developer community. the contract was deployed ropsten testnet. several solidity developers reviewed the code. issues are reported users the github []. while the team proud that there were not any successful attacks made withdraw the user funds, the participants exposed some potential vulnerabilities. the most severe vulnerability reported the contract owners are play bad actor role, that they had the ability influence the race. very important for the team fix such issues the vision building truly decentralized and transparent dapp not allowing anyone control the contract once race published. all the participants who discovered qualified bugs are awarded eth. getting the smart contract code reviewed multiple independent and experienced solidity developers have proven more useful than working with one auditing business. here recent bug bounty that conducted: https://www.reddit.com/r/ethorse/comments/gx/ethorse_smart_contract_bug_bounty/ (c) rse roadmap roadmap oct developer beta testnet (completed) quarter quarter gas optimization, uiux enhancement, seeded races, in-house oracle, staking/payout claim portal price index, additional races and coins bet, exchange listing, marketing and partnerships nov quarter updates, public bug bounty for betting smart contract (completed) exchange listing, full launch, recurring bets, ui/ux enhancements dec jan crowdsale announcement contract dev, audit, public testnet beta phase phase crowdsale, token distribution, mainnet soft launch (c) rse quarter additional language support (chinese, korean, etc), and promotions, mobile support horse token crowdsale horse token crowdsale horse erc standard token created with strictly limited supply issued the crowdsale contributors. takeout taken from the bet pool each race and deposited the reward pool before the winners can claim their winnings eth the race demonstrated section ii). the current takeout rate the end each quarter, smart contract our dapp site will used claim eth from the reward pool based the proportion horse tokens staked compatible wallet during particular time period. for example, wallet staking the total horse token supply our dapp will receive the reward pool. the bets are always placed between the users and bankroll does not pay the winners, the reward pool balance will always remain positive. the platform gains popularity, ethorse will allow users bet using horse tokens which can unlock advanced features and enjoy smaller takeout. the platform scales, monthly reward staking and claim mechanism will rolled out. horse tokens will used for betting the platform gains adoption and users will enjoy discounted takeout rates the races where horse tokens are used. horse tokens will also unlock advanced features for the bettors. bounty crowdsale founders, (c) rse horse token crowdsale token symbol horse type ethereum erc standard contract address will made available the website before crowdsale begins total fixed supply horse tokens minted crowdsale hard cap* horse tokens crowdsale soft cap** eth founders token*** (vested over years) *crowdsale hard cap will eth sold all tokens during phase- sale. there sufficient interest from the crowdsale, ethorse will refund all the eth collected from the crowdsale upon community consensus. ***founders' tokens are time-locked with ethereum smart contract, vested over years with cliff period months. all unsold tokens are burnt either week from the time the hard cap reached week after the end the crowdsale period, whichever occurs first. this case, founders' tokens will also burnt maintain the distribution rate the founders. there will not any mintage horse tokens the future. tokens will appear the wallet within week from the crowdsale contribution. conversion rate period eth horse bonus phase eth phase day eth phase week eth phase week eth phase weeks eth *people registered for the phase our website are given priority participate the phase sale before opened for the public. maintain healthy token price upon listing exchanges, bonus tokens are unlocked for transfer days after the base tokens are unlocked. the crowdsale ends phase-, bonus tokens are unlocked along with the base tokens. (c) rse horse token crowdsale sale timeline december january february *phase- registration open *phase- sale january january phase- sale open for public *phase- sale *registered participants only *phase- sale subject change based phase- progress bankroll development marketing funds raised from crowdsale will used bet the first few races. this liquidity will attract users try and bet the crypto prices using the dapp. (c) rse the team the team the core team comprises three members with experience information security and blockchain development. they share the responsibilities programming solidity (smart contracts), react.js and redux.js (web), html, css, graphics design, strategy, business development and community management. the team prefers anonymous for the benefit the project until there need. article published the team december provides more clarity and transparency about the need for anonymity (link: https://medium.com/@ethorse/ethorse-teamtransparency-decbd). inspired projects such etheroll, the team wants follow similar path. all the work that produced far done in-house, including the working dapp that released the public. november the team has made commits the open source code repository github and it's growing with the team being active almost every day (https://github.com/ethorse []). this credibility proves that the team fully capable executing this project. the team will continue deliver per the roadmap. the vision for ethorse (and horse) owned and supported the community. discussions and inputs are always welcome the dedicated communication channels. ethorse welcomes anyone build their own applications using the ethorse smart contracts. (c) rse disclaimer disclaimer horse tokens should not considered investment that provides guaranteed returns increase value. also does not grant any controller ownership, equity, direction, decision-making ethorse platform whole. you should not participate the crowdsale you are resident citizen the united states america, including puerto rico, virgin islands (u.s.) and any other u.s. possession, singapore, hong kong, peoples republic china, any other jurisdiction which not permissible participate token crowd contributions acting behalf any them. crowdsale participants and platform users should follow the rules their jurisdiction abide their local security and online gambling laws. with any other cryptocurrency technology, there are risks theft, hacking, lack adoption and technical issues that can make people lose eth, horse tokens, their market value. since the crowdsale performed collecting eth, ethorse team may not able fund and continue developing the platform the market value eth declines drastically. (c) rse references references http://horseworlddata.com/pmtrcks.html https://en.wikipedia.org/wiki/parimutuel_betting https://www.bovada.lv/help/win-place-show https://ethorse.github.io/betting/ http://www.oraclize.it https://coinmarketcap.com/api/ https://ethereum.org/ http://ethdocs.org/en/latest/introduction/what-is-ethereum.html#ethereum-virtual-machine https://en.wikipedia.org/wiki/smart_contract https://solidity.readthedocs.io/en/develop/ http://truffleframework.com/ https://github.com/openzeppelin/zeppelin-solidity https://etheroll.com https://github.com/trufflesuite/truffle-contract https://github.com/trufflesuite/truffle-artifactor http://ethdocs.org/en/latest/ether.html http://ethorse.github.io/betting https://reddit.com/r/ethdev/ https://ropsten.etherscan.io/address/xcdadbeecefadacefb#code https://github.com/ethorse/ethorse-core/issues https://theethereum.wiki/w/index.php/erc_token_standard https://github.com/ethorse https://reddit.com/r/ethorse (c) rse