komodo advanced blockchain technology, focused freedom june whitepaper komodo platform version introduction komodo the komodo project focuses empowering users with freedom through blockchain technology. there are many forms freedom that komodo can provide, and are currently focusing empowering two types users: the blockchain entrepreneur, and the average cryptocurrency investor. together, our community entrepreneurs, investors, and other users form economic ecosystem. the foundational pillar the komodo ecosystem security. komodo provides unique and innovative form security that strong the bitcoin network, yet does not require the incredible cost. every member the komodo ecosystem receives the benefits this security. the investor relies for everyday use. the entrepreneur relies protect their blockchain innovation cost that affordable even small businesses and startups. another komodo's powerful technologies new method trading cryptocurrencies directly from one person another. new kind "decentralized exchange." our decentralized exchange removes all forms middlemen, vouchers, and escrow services. relies underlying concept called the "atomic swap", and are the leaders this technology. our atomic-swap powered decentralized exchange serves both the investor and the blockchain entrepreneur. for the investor, they can trade cryptocurrencies without having pass through centralized exchange, which can arduous and even dangerous process. they also not have use escrow service, voucher, nor even intermediary coin--not even bitcoin. furthermore, there registration process required, nor are there any withdrawal limits. currently support approximately the cryptocurrencies existence, including bitcoin-protocol based coins, ethereum, and ethereum-based erc tokens. for the entrepreneur, our decentralized exchange enables the release new products the world without middleman involvement. furthermore, even entrepreneurs who have previously built other blockchain projects outside our ecosystem can easily feature their coin our decentralized exchange. the only requirement that the blockchain product have the proper security elements the core the blockchain's code. komodo also has powerful privacy features built into our platform. this allows the investor trade and purchase goods and services within their right privacy. also allows the entrepreneur release their product, and crowdsource funds, from audience that may prefer maintain this privacy. there are many other technologies and features the komodo ecosystem, and are experiencing rapid growth both entrepreneurs and investors. june whitepaper komodo platform version this komodo white paper provides in-depth discussion about komodo's unique security features, our decentralized exchange, the method releasing new products it, and our native privacy features. welcome feedback from our readers. you have any questions concerns over the course reading this material, please reach out our team directly. you may find our contact information our accompanying website: komodoplatform.com iii june whitepaper komodo platform version contents komodo's method security: delayed proof work (dpow) foundational discussion blockchain security what consensus mechanism? the "double spend" problem the consensus mechanism provides security against "double spend" miner competes add blocks the network's history, exchange for reward pow currently the most secure form consensus mechanisms speed and power are the essence the network effect: bitcoin's ability dominate begins the longest chain rule: the "secret sauce" pow domination the simple effects the longest chain rule tale two blockchains internal conflict interest arises within the bitcoin network the longest chain rule: the history which longer first, wins the "easy" way destroy pow network: the attack size yet another reason behind bitcoin's current success among pow networks the "hard" way destroy pow network: the genesis attack genesis attack the bitcoin network the more realistic dangers the genesis attack the financial and eco-unfriendly problems with all pow networks pow networks are expensive miners are free mine other networks the primary alternative consensus mechanism: proof stake the security risks and shortcomings pos summary the pow consensus mechanism the komodo solution abstract the delayed proof work consensus mechanism (dpow) note about komodo's iguana core technology brief discussion the security provided the notary nodes the notarization process understanding security and economic incentives the komodo dpow network komodo's protective measures action june whitepaper komodo platform version contents notarizations provide defense against both the attack and the genesis attack the dpow consensus mechanism inherent all komodo asset chains the decentralized initial coin offering(dico) abstract the decentralized initial coin offering the challenges current ico platforms specific weaknesses the centralized ico model third-party discrimination via the centralized ico centralization ico technology: whales, hackers, and human error hackers and human error the komodo solution the decentralized initial coin offering the process creating new blockchain the komodo ecosystem the first command create new coin the features the new asset chain generating and mining the new coins the entire coin supply distributed the genesis block notarizing the komodo main chain the distribution coins the trials and travails the centralized ico method enter the dico powered komodo's barterdex jumblr technology the many solutions the dico model: security, privacy, decentralization, and freedom iii komodo's atomic-swap powered, decentralized exchange: barterdex abstract(barterdex) introduction the beginnings and travails decentralized exchanges barterdex: complete solution recent improvements barterdex barterdex technology order matching order matching with full-relay and non-relay nodes jumblr technology adds privacy iguana core provides the foundation for our "smart address" feature the utxo: elusive, yet fundamental concept comparing the utxo fiat money understanding cryptocurrencies and their utxos june whitepaper komodo platform version contents trading barterdex how barterdex deals with order offers and utxos detailed explanations the barterdex process atomic swaps the komodo barterdex introducing, alice and bob alice and bob make deal incentives and disincentives maintain good behavior additional barterdex atomic swap details more detailed explanation the atomic-swap connection process the dex fee: the barterdex api brief discussion the future barterdex komodo's native privacy feature: jumblr abstract(jumblr) introduction the option privacy essential the komodo ecosystem challenges for privacy-centric systems and the komodo solution the komodo solution introduction jumblr brief explanation the two foundational technologies the jumblr process anonymizing native komodo coin (kmd) user actions additional security layers jumblr's process breaking down funds jumblr's process moving the individual lots into private address additional privacy considerations the timing attack the knapsack attack further security enhancements combat the timing and knapsack attacks offering privacy other cryptocurrencies the current jumblr process: manual non-kmd kmd trading barterdex future capabilities: jumblr automates the barterdex trading process for the user word risks inherent jumblr and the komodo ecosystem jumblr provides the komodo ecosystem with privacy additional information regarding the komodo ecosystem final notes regarding the komodo project fiat-pegged cryptocurrencies june whitepaper komodo platform version contents smart contracts the komodo platform bitcoin-protocol based smart contracts crypto conditions, merkle root merkle root (mom), and customized asset chains details regarding the primary chain the komodo ecosystem: kmd conclusion acknowledgements and references june whitepaper komodo platform version vii part proof work (dpow) june whitepaper komodo platform version komodo's form providing security called delayed proof work technology (dpow). builds the most advanced form blockchain security existence, proof work technology (pow). the latter form security the method that the bitcoin network utilizes. understand the value komodo's dpow security, must first explain how pow works and why the most secure method maintaining decentralized blockchain. must also examine pow's shortcomings, that may understand the need for komodo's dpow method and the advantages provides the blockchain community. understand how pow technology functions, begin explaining the roots that make the bitcoin protocol viable means securely transferring value. what consensus mechanism? the "double spend" problem the creation blockchain technology stems from the early mathematical studies encryption using computer technology. one such example related the information-encoding device, "enigma," invented the germans the end world war alan turing, british intelligence agent, famously beat the enigma device inventing the world's first "digital computer." this provided enough computing power break enigma's encryption and discover the german secret communications this early affair with encryption set off race throughout the world develop myriad forms securely transferring information from one party another via computer technology. while each new form computer encryption provided more advantages, there remained one problem that prevented encryption from being useful means transferring not just information, but also financial value. this challenge known the "double spend" problem. the issue lies the ability computers endlessly duplicate information. the case financial value, there are three important things record: who owns specific value; the time which https://en.wikipedia.org/wiki/enigma_machine june whitepaper komodo platform version what consensus mechanism? the person owns this value; the wallet address which the value resides. when transferring financial value from one person another, essential that person sends money person person should not able duplicate the same money and send again person the bitcoin protocol invented anonymous person (or persons) claiming the name satoshi nakamoto, solved the double spend problem. the underlying math and computer code both highly complex and innovative. for the purposes this paper need only focus the one aspect the bitcoin protocol that solves the double spend problem: the consensus mechanism. the consensus mechanism provides security against "double spend" the consensus mechanism invented nakamoto perhaps one the most powerful innovations the twenty-first century. his invention allows individual devices work together, using high levels encryption, securely and accurately track ownership digital value (be financial resources, digital eal estate, etc.). performs this manner that does not allow anyone the same network (i.e. the internet) spend the same value twice. let suppose user, alice, indicates her digital wallet that she wants send cryptocurrency money friend. alice's computer now gathers several pieces information, including any necessary permissions and passwords, the amount that alice wants spend, and the receiving address her friend's wallet. all this information gathered into packet data, called "transaction," and alice's device sends the transaction the internet. there are several types devices that will interact with alice's transaction the internet. these devices will share the transaction information with other devices supporting the cryptocurrency network. for this discussion, need only focus one type device: cryptocurrency miner. note: the following descriptions are simplified explanations truly complex byzantine process. there are many other strategies cryptocurrency miners devise out-mine their competition, and those strategies can vary widely. miner competes add blocks the network's history, exchange for reward step one: preparing the preliminary information this device performing activity called cryptocurrency "mining." let focus now mining device that captures alice's raw transaction data. this device owned tech-savvy miner, named bob, who wants add alice's transaction the permanent history the bitcoin network. https://en.wikipedia.org/wiki/bitcoin_network june whitepaper komodo platform version what consensus mechanism? bob the first person properly process alice's transaction will receive financial reward. one key part this reward percentage-based fee, taken from alice's total transaction amount. the mempool the collection all raw transactions waiting processed furthermore, bob does not have just one transaction alone mine. rather, has entire pool raw transactions, created many people across the internet. the raw data for each these transactions sits the local memory bank each miner's mining device, awaiting the miner's commands. miners call this pool transactions, the "mempool." most miners have automated systems determine the transactionselection process, based estimated profit. creating transaction hashes after bob makes his choices about which transactions will attempt mine (and assume that includes alice's transaction), bob's mining device then begins series calculations. his device will first take each individual transaction's raw data and use mathematical formulas compress the transaction into smaller, more manageable form. this new form called "transaction hash." for instance, alice's transaction hash could look like this: bbb bfa bob will prepare potentially hundreds transaction hashes before proceeding the next step.one important thing understand about the compression data the bitcoin protocol, including the transaction hash above, that calculations herein obey principle called, the cascade effect. the cascade effect: changing one bit data changes the entire result the cascade effect simply means that were bob attempt change even the smallest bit the raw data--whether from desire cheat, mistake, for any other reason--the entire transaction hash would dramatically change. this way, the mathematical formulas the bitcoin protocol ensure that bob cannot create improper history. were bob attempt create incorrect transaction hash, other miners the network could use the raw transaction data from alice, perform the proper mathematical formulas the bitcoin protocol, and immediately discover that bob's hashes are incorrect. thus, all the devices the network would reject bob's incorrect attempts and prevent him from claiming rewards. june whitepaper komodo platform version what consensus mechanism? step one continued: finishing the preliminary calculations now, using more mathematical formulas, bob takes the transaction hashes attempting process and compresses them into new manageable piece data. this called, "the merkle root." represents all the transactions that bob hopes process, and from which hopes gain reward. bob's merkle root could look like this: dac debbd finally, bob will gather information provided from the last miner that successfully added the permanent blockchain history. this information called, "the block header." contains large amount complex data, and won't into all the details. the one important element note that the block header gives bob clues about how properly add the next piece information the permanent bitcoin history. one these hints could look like this: will return this clue further on. having all this information, bob nearly prepared. his next step where the real challenge begins. step two: the race finish first bob's computer going gather all the above information and collect into set data called "block." mining this block and adding the list blocks that came before the process creating "chain" blocks--hence the industry title, "blockchain." however, adding blocks the blockchain not easy. while bob may have everything this point correctly prepared, the bitcoin protocol does not yet give bob the right add his proposed block the chain. the consensus mechanism designed force the miners compete for this right. requiring the miners work for the right mine new valid block, competition spreads across the network. this provides many benefits, including time for the transactions users (like alice) disseminate around the world, thus providing level decentralization the network. therefore, although bob would prefer immediately create new valid block and collect his reward, cannot. must win the competition performing the proper work first. this the source the title the bitcoin-protocol consensus mechanism, "proof work" (pow). the competition that bob must win the first person find answer simple mathematical puzzle, designed satoshi nakamoto. solve the puzzle, bob guesses random numbers until discovers correct number. the correct number determined the internal complex formulas the consensus mechanism june whitepaper komodo platform version what consensus mechanism? and cannot discovered any means other than guessing. bitcoin miners call this number "nonce," which short for 'number' you use 'once.'" bob's mining device will make random guesses the nonce, one after another, until correct nonce found. with each attempt, bob will first insert the proposed nonce into the rest his block. find out his guess correct, will next use mathematical formulas (like those used earlier) compress his attempt into "block hash." block hash small and manageable form data that represents the entire history the bitcoin blockchain and all the information bob's proposed block. block hash can look like this: recall now the cascade effect, and how states that changing one small number the data before performing the mathematical computations creates vastly different outcome. since bob continually including new guesses the nonce with each computation block hash, each block-hash attempt will produce widely different sequence numbers. miners the bitcoin network know when miner, such bob, solves the puzzle; observing the clues that were provided earlier. recall that the last time miner successfully added data the blockchain, they provided these clues their block header. one the clues from the previous block header can look like this: this detail, "difficulty," simply tells miners how many zeros should the front the next valid block hash. when the difficulty setting the level displayed above, tells miners that there should exactly ten zeros. observe bob's attempted block hash once again, which created after making guess nonce, adding this proposed nonce into his block, and performing the mathematical formulas: the block hash above has ten zeros the beginning, which matches the number zeros the difficulty level. therefore, the hash that bob proposed correct. this must mean that guessed correct nonce. all the miners the network can prove for themselves that bob was correct taking all the same information from their mempools, adding bob's nonce, and performing the mathematical calculations. they will receive the same result, and therefore bob the winner this round. the other hand, due the cascade effect, bob's attempted nonce had produced block hash with the incorrect number zeros the front, his block hash june whitepaper komodo platform version what consensus mechanism? would invalid. the network would not afford him the right add incorrect block hash the network, and all the miners would continue searching. step three: bob finds the nonce once miner discovers nonce that produces valid block hash, the miner has "found new block," and can send the signal across the internet. the consensus mechanism running every other mining device can verify for themselves the calculations. once verified, the consensus mechanism grants the miner the right both add the proposed block the blockchain, and receive the reward. let return bob's machine, having just guessed correct nonce, and thus holding valid block hash. bob's machine instantly sends out the winning information across the internet, and bob collects his reward from the bitcoin network. all the other miners must readjust. earlier, they were searching for the correct nonce based off the information from the previous block header. however, bob's new valid block includes new block header. all the other miners the network abandon their current work, adopt bob's new block header, make many recalculations their underlying data, and begin their search for the next nonce. there sympathy the bitcoin protocol for any miner's wasted efforts. suppose another machine the network was also trying mine alice's transaction, and lost bob the race. only bob earns the reward from alice's transaction, and the other miner receives nothing return for their costs and time. for alice, this process seems simple. she first indicated the wallet address her friend and sent cryptocurrency. after certain amount time, her friend received the money. alice can ignore the byzantine process the miners that occurred between these two events. alice may not realize it, but the pow consensus mechanism provides the foundation security upon which she relies. june whitepaper komodo platform version consensus mechanisms there are several reasons why pow networks, especially bitcoin, continue dominate terms security and blockchain success. simple, preliminary reason that pow networks foster ever- increasing speed and computer power. miners must constantly update and innovate above their competitors continue earning rewards. there are yet more reasons behind pow's success, and the longest chain rule one the most notable. this rule can also dangerous the unwary and unprepared entrepreneur new blockchain product. speed and power are the essence among miners, having faster and more powerful computer can mean earning rewards more frequently. for miners seeking maximize profit, competition requires constant upgrades machinery and miner's customized underlying code. the frequency which device can create proposed block hashes called "hash power." the more hash power collective pow network has across all miners mining the blockchain, the more secure thenetwork. this competitive pressure provides one important advantage security pow networks, compared alternate consensus mechanisms. the network effect: bitcoin's ability dominate begins high level security fosters sense trust among users, and this can grow pow network's audience. the audience grows, both the number transactions and the price the coin increase. this attracts more miners. the rising level miners provides greater overall hash rate the network, which turn fosters stronger sense trust. this increased sense security can raise the number users the network, which can increase the number miners, and the cycle repeats. economics, this classified "network effect," where cycle behavior encourages more the same behavior, with compounding interest. due the network june whitepaper komodo platform version the longest chain rule: the "secret sauce" pow domination effect, and the fact that bitcoin the oldest pow network, bitcoin increasing its security rate faster than the rate other pow networks. furthermore, consider the effect caused when the price pow-blockchain coin rises. before the rise, assume the blockchain coin worth one dollar. miner justified spending the necessary money (on equipment, upgrades, and electrical costs, etc.) justify one dollar's worth hash rate. the price shifts upwards two dollars, the miner must upgrade their entire business justify two dollars' worth matching hash rate. the miner does not upgrade, their competitor will, and then the miner will longer able compete for rewards. the longest chain rule: the "secret sauce" pow domination there are many more reasons why pow networks continue dominate security. yet, for our discussion, there one element that rises above all others. called, "the longest chain rule," and some can argue that "the secret sauce" that fuels pow's strength. the longest chain rule the determining factor whenever two competing versions the blockchain history arise the network. the rule simply states that whichever the two versions grows longer first, wins. the other version overwritten, and therefore all transactions and rewards that version are erased. the simplicity this rule key understanding why pow consensus mechanisms continue outperform their competition. the simple effects the longest chain rule surface level, this rule prevents double spend network user. for instance, consider husband and wife accidentally attempting spend the same money the exact same time, while each person traveling different part the world. komodo team note: for the sake the discussion, are oversimplifying the following actions that they take place within only few milliseconds. also oversimplify the technical details, for clarity. the full explanation this process provided the bitcoin wiki, for those who would like gain deeper understanding. tale two blockchains let suppose that the husband asia and the wife the americas. both are purchasing car. the husband uses all the funds from the family bitcoin wallet purchase car precisely (utc). the wife makes her purchase the exact same moment, for similar amount. after making his purchase, the husband's transaction hash immediately sent mining device china, where held june whitepaper komodo platform version the longest chain rule: the "secret sauce" pow domination the miner's local mempool (recall that mempool collection all raw transaction data across the network). let suppose that the husband's transaction arrives the chinese miner's mempool the exact moment that the chinese mining equipment finds correct nonce and valid block hash. the chinese miner declares the winning information, mines new block, and collects reward. all the miners his local (asian) vicinity (who receive the winning information faster than the americas, due proximity) complete the block verification process, increase the length the blockchain, and begin searching for the next valid block hash. the opposite side the world, essentially the exact same actions happen. the wife's transaction sent the nearest miner, this time located washington state the united states. just the transaction enters the washington state miner's mempool, the miner discovers valid block hash. sends out the signal, mines new block, and also collects the reward (this the same reward that the chinese miner attempting claim). all the miners the local (us) vicinity verify the information immediately and begin searching for new valid block hash based the washington state miner's recent block. internal conflict interest arises within the bitcoin network note the paradox here. there are now two versions the bitcoin history that are valid, yet different. these two versions make their way across the internet, around the world, each the other side. when the competing messages arrive, the bitcoin protocol sees that there conflict: the same money was spent twice. consider how each side the world the miners are spending their financial and temporal resources further their own interests. there economic incentive for either side submit the other, nature. therefore, there conflict interest within the bitcoin network itself. the bitcoin network would swiftly fail, were not for the longest chain rule. the longest chain rule: the history which longer first, wins the longest chain rule simply declares that whichever the two competing blockchains grows longer first, wins. the consensus mechanism erases the other version. let suppose that the chinese mining equipment superior this instance, and the chinese miner manages discover the next valid block hash and send out the signal before the washington state miner can likewise. across the world, the moment the information arrives that the chinese miner completed yet another valid block, the bitcoin protocol erases the washington state miner's version the bitcoin history. june whitepaper komodo platform version the "easy" way destroy pow network: the attack there sympathy for any wasted efforts, nor for any misunderstandings between the wife and her car dealer. the bitcoin protocol's consensus mechanism simply presses forward. the washington state miner's rewards disappear, though they never occurred. the wife's purchase car likewise evaporates. (typically, normal and prepared car dealer utilizing cryptocurrency would not consider customer's transactions acceptable until several new blocks were added the blockchain. this manner,cryptocurrency users can ensure that transaction beyond contestation before the customer can, for example, drive new car off the lot.) the washington state miner gets raw deal this scenario, but the network benefits whole. the longest chain rule provides the necessary security prevent double spend. the network accurately recorded one family member's purchase car, prevented the mistaken double spend, and ensured that the most competitive miner received just reward. this example illuminates the importance the longest chain rule. however, there dark side this rule for the unsuspecting and unprepared blockchain developer. the "easy" way destroy pow network: the attack here's where intrigue enters the picture. the "easiest" way steal money pow blockchain (such bitcoin) perform attack. this attack, the malicious actor first spends cryptocurrency exchange for something value, which they take from their victim. next, the malicious actor creates alternate version the pow network's history wherein those transactions never took place. using advanced mining equipment, the malicious actor then "attacks" the pow network mining blocks this "false" history faster than the rate which other miners the pow network can mine blocks the "true" history. assuming the malicious actor has sufficient hash rate, this "false" history grows longer than the "true" history, the longest chain rule will cause the consensus mechanism overwrite the "true" version. the earlier transactions the malicious actor made would though they never occurred. therefore, the malicious actor would keep both their original funds and whatever item value they exacted from their victim. this known the attack. the number derives from the fact that successfully perform this attack, the attacker must add enough hashing power the overall pow network form majority the hash rate. june whitepaper komodo platform version size yet another reason behind bitcoin's current success among pow networks size yet another reason behind bitcoin's current success among pow networks today, bitcoin's overall hash rate enormous. the collective computers around the world mining bitcoin effectively the largest supercomputer ever created man. the writing this paper, some estimate that the bitcoin network consumes more electricity than the entire country denmark, and the number miners continues grow. therefore, attempt attack against the bitcoin network could cost millions, not billions dollars computer hardware. would also require sustained consumption electricity that likely unfeasible for single geographical location, and would expensive even for decentralized-hardware network. long the miners bitcoin remain interested the bitcoin network, therefore, bitcoin has level security that nigh impenetrable. will return the proposition the miners' ability choose different network mine, later. the "hard" way destroy pow network: the genesis attack genesis attack the bitcoin network recall that according the original version the bitcoin protocol, sometimes called the "vanilla" version the longest chain rule only requires that the blocks the longest chain all properly mined. furthermore, recall that computers can endlessly duplicate code. finally, note that during our explanation, when describing malicious actor's attempt create empty, meaningless blockchain history, use quotation marks when employing the word, "false." likewise, when describing the blockchain history trusted the people the network, include the word "true" quotations. this because the core level, the consensus mechanism purposefully blind regarding any human user's preference between "truth" and "false." the code only sees "truth" terms properly mined blocks, and overall blockchain length. nothing more. now suppose the existence supercomputer thousand times more powerful than the entirety the bitcoin-miner network. this supercomputer could, theory, stealthily re-create and execute the initial code that spawned the very first block the bitcoin blockchain--the "genesis block." the supercomputer could then grind out https://www.worldcryptoindex.com/bitcoin-scaling-problem-explained/ june whitepaper komodo platform version the "hard" way destroy pow network: the genesis attack block hashes, one-by-one, mining meaningless blocks and adding them this empty, "false" version the bitcoin history. once this meaningless blockchain's length sufficiently exceed the so-called "true" blockchain used today, the supercomputer could then release its "false" version the internet. throughout the world, (assuming the vanilla protocol) the bitcoin network would automatically recognize the "false" blockchain the correct blockchain! this would all according the code. the so-called "false" blocks would properly mined, and the length would longer than the chain that users currently trust. the vanilla protocol would, theory, replace the so-called "true" history with the empty variant. might seem users like virus being uploaded the internet. could destroy all human trust the current version the bitcoin protocol, wreaking financial havoc throughout the cryptocurrency realm. while users the bitcoin protocol would naturally protest, the entire operation would entirely agreement with the underlying code. when observing bitcoin's current hash power, the creation such anti-bitcoin supercomputer clearly not feasible the immediate future. assuming bitcoin miners remain interested the bitcoin network, the risk genesis attack bitcoin essentially non-existent. however, consider the implications the genesis attack unsuspecting underprepared smaller pow blockchain projects. the more realistic dangers the genesis attack let assume naive blockchain entrepreneur building new product. they are generally aware that malicious actors throughout the world are likely attack their blockchain, stealing funds and otherwise causing trouble. therefore, the naive entrepreneur decides implement what they believe the most secure method blockchain consensus mechanism, pow, and they offer ample financial rewards miners incentivize secure network. the entrepreneur and their entire audience may not realize it, but long their network's overall hash rate remains below the threshold attack even average supercomputer, their entire blockchain history vulnerable complete annihilation. technically astute competitor, seeing the vulnerability, and possessing ownership the requisite computer hardware, would able create empty and longer version the same blockchain code and vaporize their competitor's financial records. the cryptocurrency industry young, and few but the most advanced developers understand the many ways which blockchain competition can technically eliminated. therefore, have seen but few serious cases the genesis attack. one notable instance occurred when original bitcoin developer, luke-jr, used june whitepaper komodo platform version the financial and eco-unfriendly problems with all pow networks variation the attack destroy blockchain project called coiledcoin. luke- performed this attack out belief that coiledcoin was disingenuous project setting aside any human sentiment either side the event, the fact stands that luke-jr's variation the genesis attack was the end the coiledcoin network. the complexity establishing secure pow blockchain remains challenge for would-be entrepreneurs. furthermore, there are existing pow developers that are not fully aware their vulnerability. likewise, there are would-be malicious actors that have yet realize the many methods available cause frustration. the potential danger surrounding the issue the genesis attack shows the relative youthfulness the cryptocurrency industry. for pow blockchain network maintain bitcoin-level security, therefore, must maintain hash rate that high enough constantly mine blocks faster than potential competitor could either perform the attack (destroying the most recent transactions), the deadly genesis attack (complete annihilation). the financial and eco-unfriendly problems with all pow networks the problems with young pow networks not stop there, and furthermore, even bitcoin's pow network has issues: the security pow network comes high cost the environment, and miners have obligation mine any particular network. pow networks are expensive some estimate that the bitcoin network alone will consume more electricity than the entire world currently consumes (as having just one pow network existence, therefore, already strain enough our environment. also burden our infrastructure and our worldwide economy. the one hand, adding additional pow blockchains the world can serve the purpose forcing free- market competition the bitcoin developers, encouraging ethical and innovative behavior. therefore, some competition among pow networks likely useful. however, human species, can consider that there are more financially sound and eco-friendly methods innovating with blockchain technology without always directly competing with bitcoin pow security. our innovation, delayed proof work, one response this fact, will soon discuss. https://bitcointalk.org/index.php?topic=.msg#msg https://arstechnica.com/tech-policy///bitcoins-insane-energy-consumption-explained/ june whitepaper komodo platform version the financial and eco-unfriendly problems with all pow networks miners are free mine other networks november for few hours the majority bitcoin network miners switched their hash power competitor's pow network, the "bitcoin cash" network. this switch was the result clever software engineering the part the bitcoin cash team. the team recognized that most miners the bitcoin network are set automatically mine whichever network most profitable. therefore, the team conducted calculated change their underlying protocol that caused the profitability the bitcoin cash network dramatically increase. the majority the world's bitcoin mining equipment, running via automation, recognized the higher profitability and switched the bitcoin cash network automatically. while bitcoin cash's play for majority hash rate only proved effective for matter hours, their accomplishment raised awareness tacit principle the network: bitcoin's hash rate not bound bitcoin. the hardware free serve any compatible network the miners choose. the time the writing this paper, between bitcoin and bitcoin cash, the available hash rate aligned with the former, and with the latter. there speculation the industry that the bitcoin cash network creates more favorable position, the balance hashing power could change long-term basis. furthermore, there are many other blockchain competitors who may gain the attention bitcoin's miners the future. were shift the balance hash rate occur, bitcoin would longer the leader security the cryptocurrency realm. the price bitcoin would likely drop users realized the resulting lack security leadership. this might cause more miners switch more profitable network cover the cost operating their expensive hardware. miners abandon bitcoin, and users continue leave, the situation becomes reversal the network effect. the bitcoin network would come crashing downwards ever-compounding rate. this all theoretical, but raises yet another concern that need illuminate: the security blockchain depends many things, including the potentially fickle support human blockchain miners. our innovation, delayed proof work (dpow), takes this fact into account empower members the komodo ecosystem with bitcoin-level security. before finally turn our own solution, must discuss the primary competitor the pow consensus mechanism, proof stake (pos). the primary alternative consensus mechanism: proof stake perhaps the most popular alternative consensus mechanism proof stake (pos). this mechanism, blocks are mined not miners performing work, but rather any user "staking" their coins the open network for the right mine blocks. https://www.coinwarz.com/network-hashrate-charts/bitcoincash-network-hashrate-chart june whitepaper komodo platform version the financial and eco-unfriendly problems with all pow networks the meaning "staking" has different variations depending the specific rules set forth the developers the unique variant the pos consensus mechanism. general, staking one's coins means placing them collateral the open network exchange for the right mine new blocks. users who stake their coins, thereby, can periodically extract portion the mempool, mine new blocks, and earn rewards. there need perform any hardwareexpensive proof-of-work calculations, the user's incentive honest encouraged the fact that their own wealth hangs the balance. the security risks and shortcomings pos the downside pos that user who simply leaves large portion wealth staked (and therefore continually claims rewards) gradually becomes centralized point wealth through the power compound interest. pos networks, monopolies are constant danger. the owner monopoly has power over the well-being the network. once majority the supply obtained, the owner gains position known "nothing stake." the owner can mine "false" blocks the pos blockchain and use their own majority supply over the network declare these "false" blocks valid. all other stakeholders the network must adopt these "false" blocks, lest the majority holder use their strength declare competing blockchain versions invalid. non-majority holder attempts challenge the monopoly holder's version, the non-majority holder can achieve little more than the loss coins they placed stake. compare this with non-majority holder pow system: the question over the "truth" the blockchain history depends not upon ownership wealth, but upon the miner's innovation and performance. pow-based systems not suffer from the risk monopolies, therefore, majority stakeholders gain unique control over the mining new blocks. variations pos, including the popular delegated proof stake (dpos) and delegated byzantine fault tolerance (dbft) systems, not resolve the underlying issue monopoly ownership and centralized manipulation. vanilla pos system, the malicious actor needs only purchase majority supply the coin mine "false" blocks. dpos/dbft type system, wherein the ecosystem stakeholders elect and endow delegates with the responsibility mine new blocks, the malicious actor has only compromise most the delegates. thereafter, the compromised delegates can mine "false" blocks, and the users the ecosystem have direct means retaliate, beyond abandoning the network. this not say that pos and its variants have use cases. indeed, there are scenarios which pos can useful for entrepreneurs. the komodo ecosystem, our dpow consensus mechanism can provide security networks that use either type consensus mechanism. june whitepaper komodo platform version the financial and eco-unfriendly problems with all pow networks after the following section summary, finally turn our attention our dpow consensus mechanism. summary the pow consensus mechanism short, the pow consensus mechanism, designed satoshi nakamoto, currently the soundest method blockchain security. solves the double spend problem and creates secure network, capable transferring financial value. furthermore, competition among miners and the longest chain rule create fairness the blockchain. the combination features provides high level defenseagainst two the most dangerous methods blockchain destruction--the attack and the genesis attack--assuming strong overall hash rate the network. new pow blockchains can opt compete directly with bitcoin's hash rate, and some level competition good for the ethical values and innovative power the cryptocurrency industry. however, not necessary, cost-effective, nor eco-friendly that every new blockchain innovation requiring security should attempt compete directly with bitcoin. not only this unsustainable, but also unreliable, depends the arbitrary choices the decentralized network miners around the world. june whitepaper komodo platform version the komodo solution abstract the delayed proof work consensus mechanism (dpow) komodo presents technology, the delayed proof work consensus mechanism, that solves the problems described above. komodo's unique consensus mechanism provides the same level security the strongest pow network, without attempting direct competition. instead, komodo's consensus mechanism uses the chosen pow network storage space for "backups" komodo transactions. this method, the event attempted attack komodo's blockchain history, even single surviving copy the komodo main chain will allow the entire ecosystem overwrite and overrule any the attacker's attempted changes. key difference separating komodo from regular pow networks, our dpow consensus mechanism does not recognize the longest chain rule for any transactions that are older than the most recent "backup" the komodo blockchain. for conflicts that may arise which refer transactions that are older than the most recent "backup," our consensus mechanism looks the backups the chosen pow blockchain find the accurate record. furthermore, entrepreneurs who build independent blockchains (asset chains) the komodo ecosystem can likewise elect have backups their own records inserted into the komodo main chain. this manner, the records the entrepreneur's chain are then included the backup that pushed into the protective hash rate the main pow blockchain (bitcoin). thus, entrepreneurs and developers the komodo ecosystem can have their independent blockchains protected the chosen pow network's hash rate. therefore, destroy even the smallest asset chain that employing komodo's dpow security, the attacker would have destroy: all existing copies the asset chain; all copies the komodo main chain; the accompanying pow security network into which the dpow backups are inserted (bitcoin). this endows the komodo ecosystem with higher than bitcoin-level security, while avoiding the excessive financial and eco-unfriendly costs. addition, the dpow security provided komodo not only greater than bitcoin, but also more flexible. the komodo security services are performed no- june whitepaper komodo platform version abstract the delayed proof work consensus mechanism (dpow) tary nodes, chosen through stake-weighted vote. notary nodes have the freedom switch notarization another pow network. reasons the notary nodes might elect switch networks could include event where worldwide miners' hashing power changes another pow network, the cost notarization the current pow network becomes more than necessary. through this flexibility, the komodo ecosystem maintains both superior level security and more flexible and adaptive nature than bitcoin itself. note about komodo's iguana core technology all the following processes are supported deeper komodo technology called iguana core. readers our entire white paper will note that iguana core featured each section. this because iguana core the heart the underlying technology that enables the vast komodo ecosystem work together. the iguana core code itself complex and fully explain would require separate white paper. short, iguana core collection code that serves many purposes. one function iguana core empower the blockchain technologies komodo either builds adopts act coordination with each other. often, iguana core can advance their initial capabilities beyond original expectations. the case dpow, the code that underlies notary-node functionality spawned from iguana core technology. iguana core coded the programming language--the language choice our lead developer, jl. the language designed enable computers process high volumes information secure manner high speed. this aligns with komodo's directives provide security and scalability our users. brief discussion the security provided the notary nodes security the foundational aspect the komodo ecosystem. therefore, for the reader, must first discuss the nature the security the notary nodes provide. more detailed explanations individual components will follow. the komodo ecosystem uses stake-weighted vote elect parties who will run sixty-four separate "notary nodes." these notary nodes perform the "backup" process via automation provided the iguana core software that runs the heart our system. these backups are called "notarizations." each notarization performed the notary nodes acts marker the "true" history for the komodo ecosystem, and this marker's accuracy secured the hash power the chosen pow network. the notary nodes work together decentralized and trustless manner both create each notarization and write the chosen pow network (bitcoin). frequency varies between two six notarizations per hour, and the yearly cost perform this service btc. funds for this service were raised part our initial komodo ico, and our holdings allow continue this method for many years before will required implement business model replenish our reserves. june whitepaper komodo platform version the notarization process with our dpow mechanism, each confirmation the chosen pow network also confirmation the entire komodo ecosystem's history. the only sacrifice that made the time takes push the komodo ecosystem's records into the protection the main hash rate. for this reason, name our consensus mechanism, "delayed proof work" (dpow). our consensus mechanism designed keep the advantages provided the pow system, circumvent the excessive financial and eco-unfriendly overhead costs, and avoid the security risks found pos system. accomplish these measures several means. the most important measure that all actions notary node takes are publicly verifiable, and the iguana core software running the users' machines verifies notary nodes' actions. the notary nodes themselves are not arbiters "truth." therefore, the only type "false" behavior malicious notary node can perform withhold notarization. there are sixty-four notary nodes. the minimum number notary nodes required maintain the komodo ecosystem thirteen. thus, malicious actor would have compromise fifty-one notary nodes shut down the komodo ecosystem. such action would uneconomic, this would destroying the access the financial rewards notary node receives for performing its duties. this design, notary nodes have only one economically favorable position: properly transfer the records the komodo ecosystem into secure location and increase komodo's market share and value. for the average user, when performing trade goods and services where security desired, the user simply needs wait until the notarization process complete. after the notary nodes are finished, the only way break the security protecting their transaction history requires breaking the security the chosen pow network (bitcoin). the iguana core code running the main komodo software automates the verification process. entrepreneurs and developers should aware this information they design business models and services for their users. thus, komodo's dpow consensus mechanism maintains the security innovated satoshi nakamoto, and because enables the bitcoin hash rate serve more independent blockchains than just the single bitcoin blockchain, dpow even expands nakamoto's original design. the notarization process step one: gathering the appropriate data the process notarization simple. roughly every ten twenty-five minutes, the notary nodes perform special block hash mined the komodo blockchain and take note the overall komodo blockchain "height" (i.e. the number total blocks the komodo blockchain since inception). the notary nodes process this specific june whitepaper komodo platform version the notarization process block such manner that their signatures are cryptographically included within the content the notarized data. the pieces going into the notarization process could look like this this the "block hash" from the kmd blockchain--mined and cryptographically signed the notary nodes block this the blockchain "height" the komodo blockchain the time notarization (i.e. the total number kmd blocks ever created) kmd the letters "kmd" are added into the notarization mixture indicate the name the blockchain which this notarization belongs the notary nodes will take these three pieces information and compress them into format that more computer-friendly. the result will look like this: bfdb the above number can said cryptographic representation all that has happened the komodo blockchain this point time. according the cascade effect, were attacker attempt back the history the komodo blockchain and change even single character data, and then perform the same hashing formulas the komodo code, the number above would dramatically change. this makes the notary nodes' notarization useful backup, assuming this number safe location where anyone the internet can view and verify it. enables single surviving copy the "true" komodo main chain identify itself the rest the komodo network, only the "true" data can produce the same result. the other hand, incorrect history the komodo network will not able produce the same notarization. through the automation the iguana core software that underlies the komodo ecosystem, all users will align with the "true" blockchain history and ignore any malicious actors' "false" attempts. all examples herein are estimated based off this actual kmd notarization the btc network: https://www.blocktrail.com/btc/tx/aeddbeadffddffbedeeffdffbb# tx_messages june whitepaper komodo platform version the notarization process step two: notarizing the data secure location naturally, for security purposes this number cannot simply saved one person's local computer, written down piece paper. were the number such centralized location, would-be attacker could simply destroy the backup, replace with "false" version. for the number useful, must placed secure and decentralized location. here where komodo adopts security from another network: komodo will perform simple transaction which writes the above number into the data history the strongest pow blockchain (currently bitcoin). this location secure the miners' hash rate makes it, and the location decentralized, nature. place this information the accompanying pow network, the notary nodes will use feature that exists the core the bitcoin protocol when making transaction. the feature called "op_return," and allows for message added the blockchain, permanently, part performing transaction. notable use the ability write messages pow blockchain found the first actions satoshi nakamoto himself (themselves). the first bitcoin block ever mined, satoshi used feature like op_return include this message: -jan- chancellor brink second bailout for banks readers who have downloaded the bitcoin blockchain their local computer, and who possess the knowledge necessary inspect the raw bitcoin data, can discover these very words written their own hard drive. the important thing understand for our discussion that any message written secure and decentralized pow blockchain viewable and verifiable all. the permanence and security op_return messages are core aspect dpow's security. the event powerful attack the komodo network, there need argument over the correct notarized marker upon which the ecosystem members should rely. the iguana core code running the heart each user's komodo software can continue securing, decentralizing, and distributing the accurate version the komodo history though the attack never occurred. step three: notarizing the pow network information back the kmd main chain one final step remains complete the loop security between the kmd main chain and the chosen pow network. the kmd blockchain must record within its own records the specific location where placed this backup into the pow blockchain. this enables the iguana core software identify the location the most recent notarization. nakamoto used feature called "coinbase," which similar op_return. primary difference between coinbase and op_return that coinbase used miners when mining block, whereas op_return can used when performing transactions. https://en.bitcoin.it/wiki/genesis_block june whitepaper komodo platform version the notarization process create this reminder, the notary nodes will now gather one more piece information, this time drawn from the accompanying pow network: the transaction hash (txid) identifying the location the first notarization. this information could look like this: aeddbe dffb the notary nodes will combine with all the information that has come before. the result will transformed, again, into computer-friendly version: bfdb bfb deb bededa this number compressed cryptographic representation everything that has happened the komodo ecosystem this point time. the notarization placed transaction message directly into the kmd main chain itself. enables the komodo ecosystem know how find reference its own history. each notarization built upon all the notarizations that came before, iguana core does not need monitor each notarization. rather, only needs observe the most recent iteration. this favorable for komodo security, there always possibility that the chosen pow network (bitcoin) could fail. this event, the notary nodes would place their next notarization competing pow network (such bitcoin cash) and the entire komodo ecosystem would remain secure. the notarizations the failing pow network would longer required verify ecosystem accuracy. understanding security and economic incentives the komodo dpow network the nature mining the komodo ecosystem serves incentive motivate the notary nodes perform their job well. this setup also principle method which the komodo ecosystem dramatically reduces the overhead costs necessary for function. portions the mining rewards are available not just the notary nodes, but also all members the komodo ecosystem, through various means. the komodo network surface-level minable network, like other pow networks. any technically savvy user can activate device capable mining the komodo network, and thereby process users' transactions, mine blocks, and receive rewards. for these miners, the komodo protocol functions almost the exact same manner the bitcoin blockchain's mining rewards function. june whitepaper komodo platform version the notarization process understanding the similarities will explain the reader the motivations for the notary nodes and other komodo miners secure the komodo network. the differences, the other hand, are explained part this paper "easy difficulty" dpow: the key notary nodes' financial incentives the foundational similarity understand that with each block header, clues are provided for miners find the next valid block hash. the specific clue, "difficulty," changes with each block header. under normal circumstances pow blockchain, with each block header the difficulty level can change. the bitcoin protocol itself decides what the difficulty for the next valid block should be. the difficulty decided based the amount overall hash power mining the network. many miners are active, then the hash rate high, and the bitcoin protocol sets the difficulty higher number. the other hand, the hash rate low, then the protocol sets the difficulty lower number. recall that the "difficulty" level determines the number zeros the beginning the next valid block hash. the more zeros the beginning valid block hash, the more unlikely each attempt finding valid block hash will be. when the bitcoin protocol was its infancy, the difficulty setting was easy. fact, the block hash used earlier example is, truth, the very first block hash ever created--by satoshi nakamoto himself (themselves). (they) designed the difficulty setting encourage the network find new block hashes once every ten minutes, average. for computer, guess within ten minutes nonce that will produce block hash beginning with ten zeros relatively easy. simple, fact, special computer required. early bitcoin miners could use nothing more than the average desktop machine, having the cpu--the small heart the computer--performing the calculations. more miners joined the network, however, the bitcoin protocol automatically increased the difficulty. this maintained the speed which the pool all miners discovered new blocks, despite the increased size the pool. stabilizing the speed created several benefits, including amount economic predictability upon which users can rely. today, bitcoin's current level overall hash power, valid block hash requires much higher level difficulty. here recent successful block hash: bbadabaddb see the section regarding the rewards allocated all users who hold least kmd their wallet address. this reward given users out the funds that would normally given bitcoin miner method minting new bitcoin coins. june whitepaper komodo platform version the notarization process there are seventeen zeros, and find valid block hash this level requires prodigious effort. the race win blockchain rewards, miners all over the world have built entire farms specialized equipment for mining. the small cpu desktop longer useful, and the time "easy difficulty" bitcoin has passed. the dpow system has sixty-four elected notary nodes here where our dpow consensus mechanism diverges from the bitcoin protocol's limitations. addition performing the notarizations the komodo ecosystem, notary nodes are also special type blockchain miner. they have certain feature their underlying code that both enables them maintain effective and cost-efficient blockchain ecosystem and provides the notary nodes with financial incentive. the combination benefits prevents the komodo ecosystem from falling into the trap directly competing with other pow networks for hash-rate security status. each notary node gets one chance per every sixty-five blocks mine easy each individual node periodically receives the privilege mine block "easy difficulty." other words, while the rest the miners the komodo ecosystem are mining calculated difficulty level, the notary nodes occasionally receive the chance mine though they are alone the network. the notary nodes' "easy difficulty" setting operates cyclical manner, with each notary node its own cycle. the start the cycle the notary node holds the "easy difficulty" ability until mines one "easy" block. then the iguana core code removes the ability for the next sixty-four blocks. after the sixty-four-block period passes, the notary node can once again attempt capture block "easy difficulty." therefore, while everyone else the network mines adjustable level difficulty according the normal pow consensus mechanism (which keeps the overall speed the komodo network stable) the notary nodes have chance step outside the normal rules. for every sixty-five-block period the komodo blockchain the odds that block will mined notary node, opposed normal miner, are essentially since the rest the miners have adjustable difficulty ratio, does not matter how many more miners attempt mine komodo. most the valid blocks will always found the sixty-four elected notary nodes, even were the entire hash power the bitcoin network somehow switch all its attention mining komodo. the mining rewards that notary node receives through this feature are kmd per day. this reward occurs regardless kmd's popularity, market value, even the competition from normal kmd miners. the reward notary nodes receive creates see following section the free-for-all period june whitepaper komodo platform version komodo's protective measures action economic incentive for each party controlling notary node support and protect the komodo ecosystem, and increase the relative value this daily kmd reward. the free-for-all period every blocks, the iguana core code removes the easy-difficulty mining ability from all notary nodes for sixty-four-block period. this gives the entire ecosystem the chance freely mine the komodo blockchain. the primary purpose the free-forall period recalibrate the difficulty level all miners the komodo network. also gives fair chance all members the komodo ecosystem capture mining rewards. the notary nodes continue the notarization process itself throughout the free-forall mining period. when the free-for-all period concludes, the notary nodes regain their abilities and resume mining the current chain. komodo's protective measures action there are myriad ways that attacker can assail blockchain project, and the komodo ecosystem well prepared. this foundational paper, only discuss two the most crucial attacks--the attack and the genesis attack. separate technical white paper, written our lead developer, provide several more discussions how komodo responds many other forms attack some mentioned therein include the sybil attack, the eclipse attack, and more. encourage any reader searching for information about the deepest levels komodo security not only read the accompanying white paper, but also reach out our team directly. notarizations provide defense against both the attack and the genesis attack relying the notarizations the chosen pow network's hash rate (bitcoin), users the komodo ecosystem are well protected from both the attack and the genesis attack. recall that attack, the attacker first makes transaction and then erases providing the total hash rate "false" blockchain where the transaction never occurred. the genesis attack, the attacker recreates the genesis block blockchain and mines entirely false history. for either these attacks play any part the komodo ecosystem, the successful attack would have destroy every transaction every level recorded. some this earlier paper now deprecated, and therefore has been removed from most locations our website. there remain relevant sections regarding komodo's protections against various other attacks. please reach out our team directly for copy this white paper, interested. june whitepaper komodo platform version komodo's protective measures action first, let consider the implications the notarization process provided against the genesis attack. once independent blockchain has even just single transaction pushed through the notarization process into the chosen pow network, that notarization protects against the genesis attack. successfully complete genesis attack against komodo-built blockchain, the attacker would have destroy the chosen pow network's records from that moment going forward. the attacker would also have destroy the kmd main chain from that moment forward, and the entire independent asset chain. the likelihood achieving this task effectively probable performing genesis attack the chosen pow network itself. the komodo ecosystem also well protected against the attack, long users wait for desirable number notarizations. consider transaction that recently performed asset chain the komodo ecosystem. while the notary nodes have not yet notarized the transaction into the kmd main chain, then plausible that during this approximately ten-minute period attacker could successfully perform attack this transaction. the attacker would simply make transaction, and then provide the total hash rate "false" version the independent asset chain erase the transaction. therefore, users should always wait until they receive least one notarization the kmd main chain before considering any transaction final. there are methods and resources available for developers and entrepreneurs who wish securely alleviate any wait time user might experience during this tenminute period. the trust api (briefly explained part iii this white paper), our forthcoming chips technology, and our crypto conditions and mom smart-contract technology (currently beta and alpha stages) can serve these purposes. the speed mode setting barterdex demonstration the trust api feature. allows users have certain amount high-speed transaction bandwidth available, without having wait for any notarizations. development these features currently top priority, and progress proceeding quickly. please reach out our team for more details, these features are interest. once the transaction reaches the kmd main chain, this point, the attacker would have successfully perform the attack against both the kmd main chain and the independent asset chain. this already quite difficult achieve, would require overcoming the notary nodes and other kmd miners, while simultaneously attacking the independent chain. entrepreneurs, developers, and users should decide for themselves how much trust they wish place the system this point the notarization process. when considering large sums money, the need for protection grows. large sum money can both single large transaction, can the collective value many small and normal-sized transactions that build over hours, days, and years. these transaction histories need protection against the sophisticated blockchain attacker. for this reason that the notarization process exists. once the notary nodes have pushed the most recent version the komodo ecosystem's history into the chosen pow network (bitcoin), the entire ecosystem relies only june whitepaper komodo platform version the dpow consensus mechanism inherent all komodo asset chains that notarization the arbiter truth. all transaction records that have been pushed into the chosen pow network can only rescinded altering the chosen pow network itself (while simultaneously altering the histories the kmd main chain and the independent asset chain). accomplishing such task highly improbable (though warn the reader never consider any attack impossible). therefore, any record that has been the komodo main chain for least one notarization has fortress hash rate and other security measures its guard. long users and developers are mindful wait for the desired number notarizations secure their payments, both the attack and the genesis attack are highly unlikely either successful, provide economic value the would-be malicious actor. nevertheless, remind all users our ecosystem consider their own vigilance and mindfulness the most effective protection against the would-be attacker. users, entrepreneurs, and developers utilize all aspects the komodo network their own risk. considering attack the notarization process create notarization for the kmd main chain, the minimum number notary nodes required the notary nodes themselves come under attack and must work maintain access the internet, just the full are required for the komodo ecosystem continue its operations. the possible event disconnect from the minimum number notary nodes, chains the komodo ecosystem should simply the alert. users, developers, and entrepreneurs would simply need wait for the notary nodes regain access the internet and resume the notarization process before considering any transaction final. for this reason, the position notary node held with high importance, and the parties which gain these positions are measured foremost their information technology experience and capabilities. komodo stakeholders are responsible vote for candidates that are the most qualified perform the notary-node duties. the dpow consensus mechanism inherent all komodo asset chains these security features extend any asset chain relying the notarization process. the primary difference between asset chain and the main chain that the main chain notarizes exterior pow network (bitcoin), whereas the asset chain notarizes the kmd main chain. the notarization for the asset chain performed the notary nodes service the independent developer and entrepreneur. notary nodes create notarization the asset chain and write into the kmd main chain. then they write their actions into the asset chain itself. this allows iguana core (running the heart the asset june whitepaper komodo platform version the dpow consensus mechanism inherent all komodo asset chains chain) identify where its most recent notarization can found. the notarization process cycles every ten minutes, assuming the asset chain's network consistently active. the network has periods inactivity, the notary nodes halt the process (to save against unnecessary notarization costs) and reactivate soon new transaction activity appears the asset chain's network. there also difference the number notary nodes required notarize asset chain compared the kmd main chain. whereas with the kmd main chain notary nodes are required, only notary nodes are required notarize asset chain. this difference based the underlying math that ensures that the number asset chains the komodo ecosystem can scale into the tens thousands. (we invite the reader consider the fact each asset chain can support thousands transactions per minute, this makes the combined ecosystem capable supporting millions transactions per minute. this includes cross-blockchain interoperability, via our atomic-swap powered technology, explained part iii. this makes komodo among the most scalable financial-technology solutions existence, and capable competing with the transaction volumes fiat networks.) naturally, each level notarization takes time perform, there additional delay for asset chains compared the kmd main chain. asset chain's history notarized into the kmd main chain approximately every ten minutes, assuming constant activity. this notarization will then pushed through the notarization process into the chosen pow network (bitcoin). estimate that transaction performed asset chain will receive the kmd main chain's protection within approximately ten minutes, and the bitcoin hash rate's protection approximately twenty thirty minutes. another difference between the kmd main chain and asset chain that the notary nodes only mine the kmd main chain. asset-chain developers are responsible create any required network miners process the asset chain's transactions. this does not need full network mining farms, such those bitcoin. rather, only needs enough computing power process transactions, and provide any desired level hash-rate security cover the ten-minute waiting period. for smallbusiness with intermittent periods transaction activity, single, dedicated, full-time server may enough. larger businesses can scale desired and can also work attract network freelance miners. also possible that network freelance miners will naturally arise within the komodo ecosystem, observe and manage transaction-processing services wherever and whenever they are required, through automation. this setup dramatically reduces the overhead costs and effort the entrepreneur and developer would otherwise have allocate network high-hash rate miners. these freed resources the entrepreneur and developer can therefore allocated other uses their business models. the total yearly cost for the komodo notary nodes notarize the kmd main chain into the currently chosen pow chain, bitcoin, approximately btc/year value ~$.m usd the time the writing this paper). funding for the notary june whitepaper komodo platform version the dpow consensus mechanism inherent all komodo asset chains nodes perform this service was raised during the komodo ico, and current btc holdings give many years come before will required implement any business models replenish our btc funds. the other hand, the total cost for the asset chain developer notarize their independent chain into the kmd main chain but fraction the cost. have not yet finalized the details, please check with our team for the most recent information. general, notarize into the kmd main chain, the notary nodes require payment kmd for little over one year's worth notarization. they also require the entrepreneur's coin, and any additional startup fees necessary cover the required ecosystem services (including block explorer website, developer integration into our multi-coin wallet, etc.). the payments for notarization services are not designed generate profit for the notary nodes. rather, the payments merely cover operating costs for the notarization process. (recall that each notarization transaction, and transactions must have financial cost.) the notary nodes instead make their profits through their ability mine the kmd main chain the dedicated "easy difficulty" level. thus, entrepreneur our ecosystem can have their own independent blockchain that backed the hash rate the bitcoin mining network, only fraction the cost. the following section, part ii, begin our discussion entrepreneur's formation and distribution komodo asset chain. part iii, discuss detail our method distribution and trading, using our atomic-swap technology. part discusses how with each these components, users have the option zero- knowledge privacy. part mention our smart-contract technology (our current development focus). june whitepaper komodo platform version part the decentralized initial coin offering(dico) june whitepaper komodo platform version abstract the decentralized initial coin offering there lies great power the idea that any person, regardless nationality, creed, background, can obtain funding innovate and prosper. integral tenet blockchain technology "decentralization." decentralizing systems, reduce the number control points that can compromised and manipulated. decentralization plays more common role our new cryptocurrency economy, but there one area the market that remains centralized and vulnerable: the initial coin offering (ico). the cryptocurrency industry needs solution, and komodo presents answer with our decentralized initial coin offering (dico). today's common ico model, the high level centralization creates many problems. third-parties can block manipulate entrepreneurs' efforts innovate and prosper. the centralized location releasing the ico blockchain product vulnerable, allowing whales, hackers, and human error corrupt destroy entrepreneur's efforts. the negative experience users these situations can also impact the perception and adoption cryptocurrency. furthermore, the traceable nature ico prevents society from crowdsourcing and purchasing within our inherent right barter private. the dico model, created the komodo project, overcomes these challenges. provides the necessary technology create and release blockchain product the world with the full power decentralization. entrepreneurs building our platform begin creating asset chain, and our technology simplifies this process. one need only install the necessary software, execute few commands command prompt, and then establish connection between two more komodo-enabled devices. komodo's core technology will the rest the work necessary create fully independent blockchain, empowered with array komodo features. our dpow technology key feature, explained part dpow provides the necessary security protect the integrity the blockchain. use dpow optional, and since asset chains the komodo ecosystem are independent nature, entrepreneurs can discontinue dpow services will. having thus created the blockchain, the entrepreneur then uses our decentralized exchange release the project the world decentralized manner. our decentralized exchange called, barterdex, and thoroughly explained part iii this june whitepaper komodo platform version the challenges current ico platforms paper. because barterdex decentralized exchange, and through our atomic-swap technology (also explained part iii), third-party manipulators can prevent the entrepreneur from their crowdsourcing and innovative endeavors. through our privacy technology, jumblr, dico participants can purchase the product within their inherent right barter private. detailed explanation jumblr and its method providing privacy provided part this paper. the challenges current ico platforms specific weaknesses the centralized ico model there are many weaknesses present today's initial coin offering (ico) process. several notable weaknesses include third-party discrimination, "whale" manipulation, the vulnerability theft and human error, and lack privacy. third-party discrimination entrepreneur seeking serve their intended audience may experience adverse intervention from third party. the antagonists may display personal and malicious intent, regardless the value the entrepreneur's innovation. centralization technology: "whale" manipulation, theft, and human error during the initial stages blockchain's release the public, users who are wealthy and tech-savvy (often referred "whales") have unequal advantage: they can rapidly purchase majority the coin supply while inexpensive. thereafter, they can manipulate the market price the expense less established ico participants. furthermore, today's icos are generally conducted escrow, where the purchasers must transfer money one node for holding. this typically occurs through single website, and the cryptocurrency funds are held single server. they must then wait while the ico administrators first verify the transactions and distribute the coins. during this time the funding centralized, and therefore vulnerable thieves and human error. lack privacy because ico transactions are highly traceable difficult, not impossible, perform icos within our right barter private. june whitepaper komodo platform version the challenges current ico platforms third-party discrimination via the centralized ico one weakness the ico process is, paradoxically, rooted great strength blockchain technology: its borderless nature. key power any blockchain that any human capable accessing the technology can activate the blockchain, regardless their geographical location social status. thus, anyone can provide yet another verifiable record the transaction history, and this decentralization provides crucial element security the blockchain. ico innovator, therefore, may prefer use blockchain platform that transcends man-made barriers, protect their innovation. circumventing man-made barriers could integral the blockchain's survival, because the element decentralization prevents malicious actors from creating subjective borders around the blockchain records and then using authority falsify and manipulate. this creates conundrum, however. human race, also find strength and empowerment subjectively defining our own demographics for various reasons, whether they form companies, cultures, communities, etc. while find the ability create subjective demographics useful, contrasts with the borderless nature blockchain technology. members one demographic may desire participate specific ico, but another demographic may find this unfavorable. therefore, the second party might try forestall progress. the paradox lies the fact that for the underlying blockchain product maintain its integrity, must serve both communities without regard any man- made barrier between them. the problem compounds even further observe that decentralized blockchain platform, new ico product capable functioning anywhere there access the underlying technology. therefore, decentralized platform, once new blockchain product released any person from either demographic now able utilize regardless the overall sentiment either demographic. the problem becomes most pronounced members competing group attempt even maliciouslyprevent innovation out selfish reasons. thus, imperative that the innovator have the option protection against would-be malicious competitors. the overall centralized nature today's ico process, therefore, presents problem. entrepreneurs who are not able navigate the adverse effects inhibiting third party may unable realize their creative potential. centralization ico technology: whales, hackers, and human error yet another issue plaguing icos that the technology upon which ico released also centralized. this presents vulnerability human foibles. the manipulative behavior whales the centralization the point purchase creates unequal playing field favor wealthy, tech- savvy users (referred "whales" the cryptocurrency commu- june whitepaper komodo platform version the challenges current ico platforms nity). understand this problem, one must comprehend that "nodes" (computer devices which compute the buying and selling cryptocurrencies) take orders from ico purchasers one-by-one. presently, icos are released only one node for example, the purchase could take place through single website, wherein the gathered funds are held single server. because the node can only process one transaction time, the person whose order arrives first will receive advantage over the coin's future value. the initial purchaser both wealthy and able program sophisticated "bots" (custom-designed programs that automate the trading cryptocurrencies), the whale can buy controlling interest the supply before less wealthy less technologically savvy people have chance participate. our current market, often the people who would most benefit from ico are unable participate before the supply evaporates. meanwhile, this whale now has sufficient control the overall supply act centralized market manipulator. buying and selling large quantities forces fluctuations the whale's favor. hackers and human error because all coins ico typically process through one node during the purchasing period, the entire supply vulnerable any person with access the node. therefore, both malicious and clumsy human agents can destroy ico. the data holding the cryptocurrency can damaged, stolen, simply lost through incompetence. entrepreneur can also consider that today's ico model both the funding provided the purchasers, well the actual ico coins that the entrepreneur intends sell, remain the centralized node for long period time. not just one side the crowdsourcing endeavor that risk, but both. this central point failure can catastrophic for all participants. the right barter private finally, the lack current privacy options the ico process inhibits blockchain participants from purchasing within our right barter private. this right privately exchange goods and servicesextends further into history than the written word. have, species, utilized this right organize into communities, institutions, and even nations. many humanity's most meaningful advancements art, technology, and other human endeavors began situations where the creator had the security privacy which explore, discover, make mistakes, and learn thereby. the right barter private, however, under modern threat the recent monumental and historical phenomenon, "the internet information," permits many kinds people quietly and without inhibition; monitor other people's shopping and bartering behavior. this dangerous development, destroys the privacy june whitepaper komodo platform version the challenges current ico platforms that empowers much humanity's personal growth. must reserve our right barter private, for observe that there are myriad ways which common person may explore personal growth economic environment. yet, the highly traceable nature today's centralized ico model direct contradiction this human need. the blockchain industry needs solution, and komodo presents answer together, these issues show that the current state the ico market plagued with limitations that inhibit freedom, security, entrepreneurship, and even human growth. the cryptocurrency industry needs solution these problems, and komodo presents answer. june whitepaper komodo platform version the komodo solution the decentralized initial coin offering the komodo ecosystem presents solution, the decentralized the initial coin offering (dico), that solves these issues and even adds new possibilities the cryptocurrency market. the decentralized nature the dico enables the entrepreneur release blockchain product beyond the reach malicious third-party influencer. furthermore, through our decentralized exchange, barterdex, the dico allows entrepreneur release their product manner that mitigates and even eliminates many the issues regarding whales, hackers, and human error. with the advantage komodo's privacy technology, jumblr, the participants dico are empowered with their right barter private. our decentralized exchange, barterdex, explained detail part iii. indepth discussion our privacy technology, jumblr, provided part iv. the process creating new blockchain the komodo ecosystem note: you are interested performing your own dico become part the komodo ecosystem, please reach out our team directly our website, komodoplatform.com. are actively seeking new partnerships. formerly, coding and generating the blockchain itself were most difficult aspect the development process. now, the komodo team has simplified the process into easy steps. through komodo's iguana core technology (introduced part i), the entrepreneur can create new independent blockchain entering just two simple commands the command prompt their computer. the following steps rely one komodo's underlying software processes that run the background user's computer. the name this software the "komodo daemon," komodod, for short. komodod rooted iguana core technology. june whitepaper komodo platform version the features the new asset chain the first command create new coin komodod -ac _name=[entrepreneur' coin] -ac supply =[total coin supply] -gen the first part the command, [./komodod], initiates new instance komodod. default, the initial [./komodod] command executed alone would launch the komodo main chain, kmd, the user's computer. however, the next part the command tells komodod behave differently. -ac _name=[entrepreneur' coin] this command tells komodod look for coin with the inserted name. -ac supply =[total coin supply] this tells komodod how many total coins there should this chain. -gen this tells komodod that the user desires mine this network. the underlying code iguana core can now make several decisions. first, will check its connection the komodo ecosystem see there coin the name *entrepreneur's coin+, having coin supply [total coin supply]. the coin name and total supply are not found, komodod will assume that the user attempting create new coin, and the [-gen] command tells komodod that the user wants mine it. komodod now begins the automated process creating new asset chain the komodo ecosystem. komodod will first make fresh and empty clone the kmd main chain (though will not yet generate the actual coins), with only few differences the underlying nature the chain. the features the new asset chain there are several primary differences between asset chain and the main komodo chain. for example, the asset chain will not automatically generate rewards for all wallet addresses holding coins, unlike the main chain. furthermore, the asset chain's dpow consensus mechanism built notarize the kmd main chain (as explained part i). some the differences reveal strong advantages held members the komodo ecosystem. design, this asset chain capable automatically adopting any updates that the komodo core development team add the framework. the asset chain also has built-in capacity within the framework allow the entrepreneur code new rules. for example, the entrepreneur may decide not use pow consensus mechanism, but may instead prefer pos (discussed part i). other changes can also made, june whitepaper komodo platform version generating and mining the new coins according the entrepreneur's imagination and developer knowledge. long the new code that the entrepreneur adds the asset chain does not interfere with the overall framework, the asset chain will smoothly integrate with the rest the komodo ecosystem. provide more details this topic part v's section regarding smart contracts. for the purposes our discussion, this new asset chain otherwise the same the komodo main chain, including the features communicate natively with other blockchains via barterdex. the reader may note that this new komodo asset chain not colored-token running top parent blockchain, often the case other blockchain ecosystems (consider the erc token the ethereum platform). instead, this asset chain entirely unique and independent blockchain unto itself. this empowers the entrepreneur with significant advantages over other blockchain ecosystems. the asset chain can run its own nodes, act according whatever rules the entrepreneur can imagine, and can scale according its own audience. should asset chain the komodo network experience sudden explosion activity, the sudden change will not negatively impact the overall komodo ecosystem. this independence grants significant competitive advantage the form overall security, speed, and ease use. consider the advantage developing entrepreneurial product fully independent blockchain. should the entrepreneur desire future point leave the komodo ecosystem for any reason, they are free take their blockchain product with them. generating and mining the new coins let return now the moment after the entrepreneur executes the first command the command prompt, and komodod creates fresh and empty clone the komodo main chain. while the instance the komodod program (running the entrepreneur's local computer device) will create the necessary code for the new asset chain, komodod will not yet generate the coin supply itself. komodod instead will wait for the next few steps occur. the reason for the wait that blockchain's essence depends upon existing not isolation, but network multiple devices connected. this the nature decentralization. komodod will wait until receives signal from another device, thus indicating that has peer with which form the asset- chain network. the entire coin supply distributed the genesis block imperative note that the komodod process, the entire coin supply created and distributed immediately the device that mines the first block, the genesis block. the code performs this distribution one-time reward for discovering june whitepaper komodo platform version notarizing the komodo main chain the first valid block hash (as explained part i). due the sensitive nature this step, recommend that the entrepreneur use virtual private server (vps) service. this allows two secure devices connect each other with little, any, risk third-party actor mining the first block (which would thus enable would-be thief acquire the entire coin supply before distribution). having established secure connection with second device, the entrepreneur will enter the following command the second device. komodod -ac _name=[entreprenuer' coin] -ac supply =[total coin supply] -addnode =[insert address first device] note that the first three elements the command, [./komodod], [-ac_name], and [-ac_supply], are the same. important that the parameters inserted into these commands match exactly. otherwise, the instances komodod running the separate devices will ignore each other, and the coin will not mined. note also that the [-gen] command not present. this circumstance, are assuming that the entrepreneur wants capture the entire coin supply the first device. technically speaking, assuming the entrepreneur has ownership over both devices, does not matter both devices initiate the [-gen] command. both devices will attempt mine the first block and the superior device will receive the coin supply. there one key difference the command. -addnode =[insert address first device] "ip address" can compared human being's home mailing address, where the address designed for computers able geographically find each other. with the execution the address command, the second device knows look across the available connection (the internet, vps service, etc.) for the first device, which already running instance komodod and the new coin. the command here simply tells the computer the proper address the first device. soon these two devices connect, having all the proper komodod software running and set place, the mining begins. one the devices will mine the first block and instantly receive the total coin supply the entire blockchain into the user's chosen wallet. both devices sync this information each other, and the *entrepreneur's coin+ now exists the world. the entrepreneur can also add more and more devices the network. notarizing the komodo main chain receive the security the dpow consensus mechanism, the entrepreneur simply needs have the elected notary nodes add the *entrepeneur's coin+ their june whitepaper komodo platform version the distribution coins internal list coins notarize. this will empower the entrepreneur's product with the same verifiable and decentralized security the komodo parent chain. the process adding new notarization service can executed the notary nodes with just simple command. while are this early stage development, this sign-up process for new dico products not yet automated. the future, intend automate much this process possible. there fee for receiving notarization services. this helps cover the business costs associated with notarization (recall that all notarizations are financial transactions, nature). already have over fifteen partners successfully notarizing the komodo main chain. are actively seeking more partners, and encourage the reader reach out our team directly with inquiries. entrepreneurs are thus able use the asset chain's native dpow consensus mechanism notarize the komodo main chain create secure backup the coin's history. even the event attack this early state existence the entrepreneur can rest assured that their product will survive, long one copy the blockchain's history exists. everything set the backend for the entrepreneur, and they are now fully prepared begin the dico process. naturally, understand that for many potential entrepreneurs the komodo ecosystem, this process unfamiliar territory. encourage interested entrepreneurs reach out our team for guidance during development. the distribution coins the trials and travails the centralized ico method previously, the entrepreneur this point would have been required through centralized ico process. this could have required several cumbersome and possibly dangerous steps. for example, the entrepreneur would begin gathering cryptocurrencies from their audience personally hold escrow while the process matching purchases the new blockchain coin were verified. distribute these coins, the entrepreneur had two primary options. they could have created and distributed digital software wallet capable holding the entrepreneur's coins. this would requiretheir audience download the software. the entrepreneur would then have send all the appropriate coins each wallet address, according the process they established during their ico. or, the entrepreneur would have make formal arrangements with another service manage this process, such with centralized exchange. this would require successful negotiation with this third party, likely paying fees part the agreement. june whitepaper komodo platform version enter the dico the entrepreneur would then required act within the centralized exchange's arbitrary framework. the centralized ico process can arduous and, times, disastrous. enter the dico powered komodo's barterdex jumblr technology the komodo dico model extension komodo's barterdex technology. barterdex atomic- swap powered, decentralized exchange. enables users directly exchange cryptocurrencies from one person another without third-party involvement (i.e. centralized exchanges, escrow services, vouchers, etc.). furthermore, the dico model entirely decentralized, anyone can use will. there are centralized authority figures capable creating artificial control points that can manipulated the expense the users. please turn part iii for more details. begin the distribution process, the entrepreneur first chooses how many nodes they would like use for the distribution. nodes can any type machine capable connecting barterdex. typically, small-business entrepreneur may choose use server machines. server capacity can rented online, and the servers can distributed geographically throughout the world, desired. while renting multiplicity servers may the method choice for established small-business, not requirement. owner even smaller business, operating low budget, can simply use their own computer(s), geographically stationed nearby for convenience. the other hand, large corporation could use the server capacity they already own. the number and strength the machines choice made the entrepreneur. having decided the method distribution, the entrepreneur will then prepare the total supply coins. (we are assuming the coins are still located the first device that mined the entrepreneur's genesis block.) the entrepreneur will first break down the total collection coins into smaller digital pouches. these small bags coins are ultimately what will traded barterdex with their audience. the size the bags chosen the entrepreneur, and therefore the entrepreneur can choose size that agreeable their outlook any kyc legal requirements. for detailed explanation the process breaking down the total collection into smaller bags coins, also recommend reading about utxo technology part iii this paper. having created these bags coins, the entrepreneur then sends them all chosen nodes throughout the barterdex network. coins are distributed each node's wallet(s) normal transaction. with the coins distributed desired, the entrepreneur sets the time and date when each bag coins will available for purchase. when bag coins becomes available barterdex for trading, members the komodo ecosystem simply purchase june whitepaper komodo platform version enter the dico the coins. please see our discussion atomic- swap technology part iii for more details. the many solutions the dico model: security, privacy, decentralization, and freedom this method conducting decentralized initial coin offering mitigates and circumvents the issues found centralized ico. the entire process conducted decentralized manner. the dico entrepreneur has direct access their audience, there are centralized human authorities acting middlemen. because the bags coins can distributed across vast range nodes, and because the entrepreneur can program the time which each bag coins becomes available, possible prevent "whale" from seizing majority control one swooping moment the dico. the whale will have compete purchase their desired amount one transaction time, just like the other members the ecosystem. furthermore, barterdex has advanced trading features that provide additional whale resistance. for example, barterdex can perform ten twenty trades once, unlike normal node the typical ico model. therefore, even the whale were able place large orders every node dico, barterdex would still performing orders simultaneously for other members the komodo ecosystem. concerning theft, the dico provides solutions both methods theft the centralized ico. unlike the centralized ico, once the distribution the bags takes place the effect their distribution adds layer security from would-be hacker. the hacker can only steal funds the node they manage penetrate. were the hacker steal coins before the actual dico, the entrepreneur would have the option simply create *new entrepreneur's coin+ again, without losing any personal wealth. furthermore, since the trades happen instantaneously with each bag available for sale, the entrepreneur only possession either their own *entrepreneur's coin+, the cryptocurrency funds provided the dico participants--but not both. the entrepreneur never risk losing both their own funds and the funds their audience, which strong advantage over today's ico model. regarding human error, should one the node's databases corrupted accident hardware failure, only one node's coin supply lost. since the coins are immediately available the barterdex exchange for trading, the entrepreneur's audience has immediate trading market. this stands contrast today's ico model, where users often wait weeks even months before liquidity for their ico product arises centralized exchange. finally, through jumblr technology, participants have the option privacy when purchasing the dico product. this enables them support the crowdsourcing efforts the entrepreneur within their inherent right barter private. june whitepaper komodo platform version enter the dico upon conclusion the distribution the dico coin supply the entrepreneur has successfully and immediately completed all the crowdsourcing-related steps that could have taken months today's typical ico model. komodo's dico model significantly easier, freer from manipulation, more flexible, and more secure. june whitepaper komodo platform version part iii june whitepaper komodo platform version komodo's decentralized exchange, barterdex, allows people trade cryptocurrency coins without counterparty risk. the protocol open-source and trading available for any coin that any developers choose connect barterdex. the parent project, komodo, freely provides barterdex technology through open-source philosophy. our service fully realizes decentralized order matching, trade clearing, and settlement. the order-matching aspect uses low-level pubkey-to-pubkey messaging protocol, and the final settlement executed through atomic cross-chain protocol. like any exchange, our decentralized alternative requires liquidity, and provide methods and incentives therein. introduction the current, most practical method for cryptocurrency exchange requires the use centralized exchange services. such centralized solutions require vouchers perform the exchange. among many dangers present this system, end-users are under the constant risk their assets being stolen either inside theft outside hack. furthermore, the operators centralized exchanges exhibit bias how they facilitate trading among their users. they can also create fake levels volume their exchange. eliminate such dangers and limitations requires the creation decentralized-exchange alternative. among all the centralized exchanges, trading tends coalesce around few the most popular. there reason for this behavior. trading via vouchers fast; central exchange can swap internal vouchers instantaneously, whereas trading actual cryptocurrencies through human-to-human coordination requires communication from both parties. requires waiting for blockchain miners calculate transaction confirmations. the speed advantage centralized exchange, therefore, creates compounding effect the centralization traders. the faster processing time vouchers attracts more people: the increased presence traders creates higher liquidity: with more liquidity, the exchange can feature better prices: the higher quality prices turn attracts larger community, and the cycle repeats. this classic network effect, and the reason that few centralized exchanges dominate with high-volume june whitepaper komodo platform version introduction trading, while smaller exchanges--both centralized and decentralized--suffer from lack liquidity. the beginnings and travails decentralized exchanges project called the multigateway created one the first decentralized resources for trading cryptocurrencies. the multigateway relied separate, though related, blockchain project called the nxt asset exchange. the latter facilitated the decentralized exchange blockchain coins using proxy tokens (as opposed vouchers), and these proxy tokens represented external cryptocurrencies (such bitcoin). the underlying technology this solution still use many blockchain platforms, but the proxy- token protocol too limited compete with centralized exchanges. because trading the means proxy tokens requires trading actual blockchain, the trading process loses the speed centralized exchange. also, proxy-token decentralized exchange must still have storage center hold the external cryptocurrencies represented the proxy tokens. best, this storage center only distributed, and therefore end-users are under the same counterparty risk that exists centralized exchanges. furthermore, the process trading proxy-token platforms requires using set ofgateways (i.e. "the multigateway") convert external native coins (such bitcoin) and from the affiliated proxy tokens. together, these many problems make the proxy-token method decentralized trading impractical solution. therefore, decentralized exchange alternative that seeks successfully remove the threats and limitations centralized exchanges must feature the same speed, liquidity, and convenience centralized exchange. today, decentralized exchange has successfully replaced any their centralized counterparts. barterdex: complete solution now present fully functional, new decentralized technology that makes competitive decentralized exchange possible. call our technology barterdex, and allows people freely and safely exchange cryptocurrency coins from one person another. the barterdex decentralized exchange creates competitive method for bartering cryptocurrencies, combining three key components: order matching, trade clearing, and liquidity provision. these components are combined into single integrated system that allows users make request trade their coins, find suitable trading partner, and complete the trade using atomic cross-chain protocol. additionally, barterdex provides layer privacy during the order-matching process, enabling two nodes perform peer-to-peer atomic swap without any direct contact. june whitepaper komodo platform version introduction the "order matching" component the process pairing end-user's offer buy with another end- user's offer sell. this component not the actual trade itself, but only digitally created promise between end-users stating that they will perform their parts the trade. the order-matching process achieved algorithms that define how the orders are paired, and which order they are fulfilled. after successful order-matching execution, the next component the "clearing" aspect the trade, wherein end-users must fulfill their promises. this the process wherein the assets are swapped between the trading parties. barterdex facilitates this process and assures the safety the users therein. recall that previous decentralized exchanges there lies problem when exchange has low liquidity. barterdex solves this problem creating liquidity provider nodes (lp nodes). lp's are trading parties that act market-makers, buying and selling assets. they provide liquidity the exchange, and make their profit from the spread between bid and ask orders. lp's bring price stability the market, and facilitate end-users making fast and efficient trades. recent improvements barterdex barterdex the result years development and iterated versions, with each iteration adding the next layer required functionality achieve our eventual goal large-scale adoption. barterdex holds support for spv electrum-based coins (removing the need download coin's blockchain), all bitcoin-protocol based coins running native-coin daemons, ethereum, and ethereum- based erc tokens. the barterdex api built handle the nature the spv requirements, providing additional functionality developers. barterdex also enables feature known liquidity multiplication, protocol that allows the same funds used multiple requests barterdex "orderbooks." the first request fill completes the trade, and all outstanding requests are immediately cancelled. this feature available the user when providing liquidity the exchange (called "bob-side" trade); not necessary establish full node engage liquidity multiplication. liquidity multiplication therefore allows initial amount funding create exponentially higher amount liquidity the exchange. this also provides special advantage for traders that like wait for below-market dumps. while this feature something that any other exchange could implement, few do. barterdex, all orderbook entries are backed real funds, opposed centralized exchange's vouchers, which are not reliable and therefore would present yet another danger for their end-users. june whitepaper komodo platform version barterdex technology barterdex technology before get into details regarding the nature atomic swaps, there are several aspects barterdex that are critical understand. order matching the first the decentralized orderbook. the orderbook the collection bids and offers that end- users place the network. create our orderbook, barterdex creates custom peer-to-peer network that employs two separate types nodes: full-relay node and non-relay node. order matching with full-relay and non-relay nodes the difference between full-relay node and non-relay node that the former typically high- volume trader who provides liquidity the network exchange for being trading hub the network. this puts him the position being able complete trades more quickly than his trading competitors. the latter type node (non-relay) the more common user, who engages with barterdex when trading one cryptocurrency for another, given the user's daily motivations. there are requirements payments necessary become either type node, and anyone desiring become high-volume full-relay node will find restrictions. successful full-relay node, however, one must able carry out transactions the network with competitive internet connection and high-capacity bandwidth. there are several incentives encouraging users become full-relay nodes, these types nodes are necessary build the backbone the barterdex network. one incentive run full-relay node that being the center wide network non-relay nodes, the full-relay node has better connectivity and thus higher chance being the first complete trade. non-relay node has all the same available trading options--including the option liquidity providers, and thus use liquidity multiplication. non-relay nodes are only limited, naturally, terms the total number connections they maintain other users. expect that most nodes joining the network will non-relay nodes. theory, roughly full-relay nodes should able support thousands (if not tens thousands) non-relay nodes, thus providing large and high-volume network. are the process achievingreal-world implementation. the writing this white paper, the public komodo community has performed almost atomic-swap trades barterdex. when limitations arise the scaling process, have various contingencies place, one which the creation clusters. possible create clusters barterdex nodes that are separate from other clusters the network. achieve june whitepaper komodo platform version barterdex technology this, when one cluster approaches level user load that overcapacity, users can opt seed new cluster creating independent set seed nodes. this feature amplifies the scalability the barterdex network, allows clusters users form accordance with user desires. assume that large scales there will sufficient inventory the orderbooks for clusters provide ample asset liquidity, especially the act partitioning into new cluster based trading coin that overcrowded. furthermore, continue develop this new technology, may also create protocol that will allow these separate clusters share their order boards via bridge nodes, which theory can act cross-pollinate desired orders from one cluster another. optimize the network load, minimize the hierarchical transmission the orderbooks and the fetching data. there are also several different methods obtaining data which can maximize the number nodes that can fully connect the barterdex network. jumblr technology adds privacy while barterdex does not require non-relaying nodes publicly share their addresses, important note that barterdex itself not private. instead, use jumblr, accompanying komodo technology, provide privacy options. users should assume that privacy important for their given trading activity, they need employ komodo's additional privacy technology, jumblr. the surface, non-relaying nodes perform addressing via pubkey, and the address one non-relaying node normally not directly shared with their accompanying non-relaying trading partner. however, full-relay nodes are capable monitoring addresses the lower levels the network, and therefore malicious actor would able link addresses non-relay nodes pubkeys, thus uncovering the most crucial aspects their privacy. iguana core provides the foundation for our "smart address" feature barterdex itself fork one our earliest codebase experiments, iguana core, which briefly encounter each part this paper. all barterdex transactions that use the atomic-swap protocol are created and signed format that managed the iguana core codebase. this enables powerful combination features. the following page high-level discussion one method that iguana core supports the fluidity the komodo ecosystem. newcomers the cryptocurrency industry and those who are not familiar with developer language may find this section too challenging understand. welcome the reader simply read the two warnings below, and then skip the next section. june whitepaper komodo platform version barterdex technology first warning: some the features that iguana core enables are highly advanced, and therefore users interacting with barterdex and other iguana-compatible gui software applications should always perform proper research and exercise caution. second warning: the important thing for users understand that they should careful not spend the same funding two different standalone apps. other words, they are trading with funds barterdex gui, they should not also try spend those funds their agama wallet (or another iguana- compatible wallet). instead, they should wait for both apps sync before moving forward. one specific feature specialty wallet that can manage and trade among multiplicity different blockchain coins. explain the significance this multi-coin wallet feature, let observe how standalone gui app formerly interacted with cryptocurrencies. previously, for gui software application manage cryptocurrencies, the software application usually required the creation wallet.dat file, which locally stored the user's computer. this wallet.dat file held the privkeys--passwords that unlock funds blockchain--and other encryption-enabled protocols necessary for the user manage funds. there are many limitations the wallet.dat method. for instance, typically only one software application should access the wallet.dat file time, prevent data conflict and corruption. the iguana core codebase enables the user interact with their funds the blockchain(s) without requiring wallet.dat file. because the iguana core codebase works with raw transaction data, the codebase allows user first create and then manage public blockchain "smart address" that can accessed from anywhere, any compatible standalone gui, simply with passphrase that unlocks their privkey. maintain control over their funds without requiring wallet.dat file, users need only create smart address and then retain copy the accompanying passphrase (typically collection common dictionary words arranged specific order) that provided the moment creation. entering this passphrase into iguana core compatible standalone gui app, iguana core then activates their which then enables users manage their funds. furthermore, the smart address created iguana core can manage and maintain multiple types coins and other blockchain assets. when user activates any compatible coin using the iguana-core passphrase, iguana core can store these coins separate address that compatible with the appropriate blockchain and link this sub-address the other addresses unlocked the iguana-core passphrase. therefore, the underlying iguana code, each the unique coins gets address that compatible with its own blockchain, but the iguana-core passphrase enables the user access these coins all once. therefore, barterdex gui app can use this passphrase enable users actively trade between multiplicity coins. one key function the iguana codebase that makes this possible the command the iguana core api. this command that allows individual gui june whitepaper komodo platform version the utxo: elusive, yet fundamental concept apps, such standalone barterdex gui app, work with the underlying funds the user's addresses. notice several the freedoms this provides the user. all the funds are only spendable the user with the passphrase. because there need for wallet.dat file stored locally, there less danger (though users should exercise caution) data corruption between different standalone software applications that are accessing these funds. therefore, end-user can have standalone barterdex gui app running their local machine, which they use trade, and can also have separate standalone gui wallet app that managing their long- term cryptocurrency holdings. this also allows standalone gui applications that are iguana-core compatible support each other. for instance, while barterdex gui can function without any native-coin daemon process running the background simply relying iguana core and public electrum spv servers (which remove the need download blockchain data), the barterdex gui can also work with native wallet's coin daemon background process coordinate blockchain synchronization. for instance, komodo user may run the komodo agama wallet, which runs native komodo coin daemon (and has local wallet.dat file), alongside barterdex gui app. iguana core can then enable the barterdex gui rely the native coin daemon running the background the komodo agama wallet, which speeds the trading process for end-user, they not have wait for the public electrum servers update. the native komodo coin daemon the software encountered part ii, komodod. the utxo: elusive, yet fundamental concept barterdex relies heavily rarely understood technology called the "utxo," short for unspent transaction, which was invented the original bitcoin protocol. this technology fundamental the operations any blockchain project that utilizes the original bitcoin protocol. however, even the most active cryptocurrency users rarely know what utxos are why they exist. because utxos play important part barterdex, and provide pleasant user experience, essential adequately explain the utxo concept. the future, the technology surrounding barterdex iterates, and the cryptocurrency community continues learn, hope that the concept utxos will less taxing user's learning curve. begin our explanation utxos, let first examine the language common user when describing how much cryptocurrency money they have and how they perceive those funds. will therefore need understand the concept "satoshis," the way blockchain handles the collection and distribution funds, and how utilize these core technologies when trading barterdex. june whitepaper komodo platform version the utxo: elusive, yet fundamental concept comparing the utxo fiat money let assume cryptocurrency user, whom name charlie, has his physical wallet. naturally, when charlie thinks about the amount physical (or "fiat") money has, says himself, have $,." however, there such thing $,-dollar bill. instead, charlie actually has collection smaller bills stacked together. for instance, could have stack $-dollar bills, the total which equals dollars. charlie goes purchase item that costs and only has $-dollar bills his wallet, make his purchase will take out single $-dollar bill and give the cashier. the cashier then breaks that $-dollar bill down into series smaller bills. the cost for the item, remains with the cashier, and the cashier then provides change--perhaps the form one $-dollar bill, two dollar bills, one $-dollar bill, and four $-dollar bills. charlie now thinks himself, have $,." specifically, however, has ninetynine $-dollar bills, $-dollar bill, two $-dollar bills, one $-dollar bill, and four $-dollar bills. emphasize that not only does not have ten thousand $-dollar bills, also does not have one million pennies ($.). furthermore, because pennies are the smallest divisible unit value charlie's wallet, could point out that each bill collection its respective units pennies. for instance, $-dollar bill charlie's wallet could describe as, bill that represents collection one hundred pennies and their value." understanding cryptocurrencies and their utxos satoshi the smallest divisible unit cryptocurrency continuing with our explanation utxos, next need understand the concept "satoshis." the name "satoshi" derived honor satoshi nakamoto, author the original bitcoin white paper. convention the cryptocurrency community, one satoshi equal one unit coin the smallest divisible level. for instance, satoshi bitcoin equal btc. let suppose now that charlie has btc (bitcoin) his digital wallet. assuming charlie correctly understands the concept satoshis, charlie could say himself, have nine hundred and ninety-nine million, nine hundred and ninety-nine satoshis bitcoin." this how charlie might mentally perceive the collection money that exists his digital wallet, like perceives the his fiat wallet. june whitepaper komodo platform version the utxo: elusive, yet fundamental concept utxo packet satoshis, just fiat dollar bill packet pennies recall now that with fiat money, charlie did not think about how his original was comprised smaller individual $-dollar bills. similarly, charlie also does not think about how his btc could comprised smaller collections satoshis. furthermore, just charlie did not carry around fiat money collection pennies, also not carrying around raft satoshis. were try carry million pennies his physical wallet, the weight the wallet would unmanageable. similarly, the bitcoin protocol were attempt manage nine hundred and ninety-nine million, nine-hundred and ninety-nine satoshis, the "data weight" would heavy, the bitcoin protocol would enormous and unmanageable. optimize "data weight," the bitcoin protocol therefore bundles the satoshis into something that like the example dollar bills earlier, but with one important difference. fact, here where the bitcoin protocol exercises superiority over fiat money deviating from the limitations fiat money must obey when bundling smaller values into larger values. fiat money, one hundred pennies are bundled into one-dollar bill, which can then bundled into larger bill, and on. all the sizes fiat money are preset and predetermined the issuer the fiat money when they print their bills and coins. the bitcoin protocol, however, does not need pre-plan the sizes "bills" (i.e. the collections satoshis) the owner's wallet. bitcoin freer this sense; can shift and change the sizes its "bills" will because there need accommodate for the printing physical coins and paper. instead, the bitcoin protocol allows for the developer digital wallets write code that can optimize how bitcoin satoshis are packaged into "bills," and thus the community developers can work together keep the data weight the blockchain manageable. the better the digital-wallet developer, the more efficient the size the "bills" (a.k.a. the packets satoshis). the bitcoin protocol does have one limitation, however: must keep track how these satoshis are being collected into larger "bills" everyone's digital wallets. after all, the very idea bitcoin stands the idea that everything happens under the public eye, where can verified. because the bitcoin blockchain must keep track the sizes these packets satoshis, the only time the packets can assembled disassembled into larger and smaller sizes the moment when the user spending money the public blockchain. this time that the user under the public eye, and therefore his actions can verified. compare this limitation fiat money, consider the effect created were charlie cut $-dollar bill into smaller pieces. the $-dollar bill would longer respected valid form currency. the word, "utxo," not sonorous word, some users the komodo ecosystem simply refer utxos "bills." the concept effectively the same. however, the rest the blockchain industry primarily uses the word "utxo," frequently must june whitepaper komodo platform version the utxo: elusive, yet fundamental concept use this word maintain common line communication. the word utxo will used throughout the rest this white paper, keep line with industry practices. the utxo packet can any size, and the developer the gui software decides this process. most importantly, and reiterate, utxo can only resized during the process spending, this the moment when the user interacts with the public blockchain. further clarify this, let return charlie's example with fiat money. recall that when charlie went purchase $-dollar item, only had $-dollar bills his wallet. had give out one dollar bill, and then receive broken-down collection dollar bills return. this exactly how works with utxos. charlie has collection utxos his digital wallet. when goes buy something, will give out utxos until surpasses how much owes, and then the extra change from the last utxo used will broken down and returned him. for example, let suppose that charlie's btc comprised three utxos worth the following values: utxo btc utxo btc utxo btc total btc table utxos charlie's wallet charlie now desires purchase item that costs btc. will have hand out enough utxos from his wallet until covers the costs this transaction, just would were using fiat money. the bitcoin protocol calculates the change from the transaction and then returns his change him. remember that there fee when spending money blockchain. since are using bitcoin this example, the fee would paid cryptocurrency miners. let imagine that the fee the miners charge charlie satoshis. begin looking how charlie would see the process making the purchase, assuming does not understand the concept utxos. for now, charlie only understands how much his wallet the satoshi level conducts his transaction: june whitepaper komodo platform version the utxo: elusive, yet fundamental concept btc the amount charlie initially owns btc the amount charlie sends the digital cashier for his purchase btc the network fee paid miners btc the amount left his wallet this deduction for his purchase all appears very simple charlie--a testament the bitcoin protocol's effective design. the background, however, the digital wallet handles the utxos and the change process manner determined the programmer. charlie's example, let assume that proceeds this way: btc the total amount that charlie owes the cashier and network btc the wallet sends the full value utxo the digital cashier btc this the remaining total amount that charlie still owes the wallet now brings out utxo which worth btc: this utxo broken down shattered into smaller pieces. btc the size charlie's utxo now the process change btc this shatter utxo goes the cashier (payment fulfilled) btc this shatter utxo pays the network fee the miners btc this last shatter now returns charlie's wallet new utxo charlie now has one new utxo his wallet, and worth btc: june whitepaper komodo platform version trading barterdex utxo btc utxo btc total btc table charlie's new wallet state charlie wants buy something later, these utxos will have broken once more, according the costs and programming the digital wallet. again, whatever left over from his last utxo comes back his own wallet new utxo. now let suppose that charlie receives btc from someone else. charlie's wallet, will see total btc. however, his wallet there are now actually three utxos: utxo btc utxo btc utxo btc total btc table charlie's new wallet state result, the number and sizes utxos charlie's wallet will vary over time. may have many smaller utxos that make his full balance, sometimes might just have one large utxo that comprises all it. for charlie, normally possible ignore this since the wallet developer could handle everything automatically. however, understanding the nature barterdex currently encourages users understand utxos, the process relies their utxo inventory during trading, explained below. trading barterdex from our point view developers, the most difficult aspect creating barterdex was matching the inventory utxos between trading partners. illustrate this complexity, let briefly return the example charlie and fiat currency. let suppose that charlie has only $-dollar bill his wallet and wants spend dollars videoarcade. needs trade for the equivalent june whitepaper komodo platform version trading barterdex number video-game tokens. however, can only work with the bill that his wallet trade for the tokens. typical arcade, this process simple. there are just two currencies--his dollars and the video game tokens--and will have human cashier available manage the trade. gives the $-dollar bill the human cashier, and the cashier returns dollars dollar bills, and dollars' worth video- game tokens. creating barterdex, however, our goal decentralize all points control. (the "cashier," this sense, centralized authority who could corrupted could commit human error). that means that cannot have human cashier present barterdex trade charlie's three utxos into their appropriate sizes when wants swap for other currencies. further challenge lies the number currencies. for barterdex there are not just two coins, but many coins, with myriad users, each having variety unique utxo sizes their wallets. addition, the trading happens real-time, through automation, decentralized peer-to-peer network, supporting countless number separate blockchain projects, while providing speed and (eventually) liquidity comparable that centralized exchange. all this must accomplished while maintaining level security and safety that only decentralization can provide. finally, imagine there were cashier break down charlie's $-dollar bill. what instead, had approach other arcade customers barter for their tokens? this would create difficult scenario for charlie. its current iteration (continuing the use the $-dollar metaphor applied utxos), limit barterdex's capability only perform trade for charlie's $-dollar bill exchange for the currency that another customer holds. barterdex does not provide service whereby charlie can break down his $-dollar bill into convenient set $-dollar and $-dollar bills for trading. must give his full $-dollar bill for whatever wants return. the process breaking down utxo inventory, therefore, both the hands the user and those the developers creating the standalone gui apps. are working with our community simplify this process. naturally, complex and will take time. therefore, recommend that users who engage with barterdex have basic understanding their utxo inventory and how they are bartering with other users before using it. how barterdex deals with order offers and utxos when barterdex user offers trade the network, the barterdex protocol itself does not prioritize the total number satoshis that the user offers. instead, barterdex simply looks through the user's inventory for the largest-sized utxo that below the amount the user offered. for example, let suppose that charlie has kmd (komodo coin) his wallet. comprised three utxos: june whitepaper komodo platform version detailed explanations the barterdex process utxo kmd utxo kmd utxo kmd total kmd table charlie's initial wallet state charlie wants trade kmd the barterdex network. puts out order for alternate cryptocurrency called doge (doge coin), and wants exchange ratio. barterdex itself will not attempt manage for charlie's misunderstanding his utxo inventory. (the developer charlie's standalone software could try help him, but that separate matter.) rather, barterdex will simply look through his inventory for the largest utxo that below the total amount offered. this example, barterdex will select his utxo worth kmd. barterdex will then calculate the necessary fee, which happens exactly equal the amount utxo kmd. barterdex can then take these two utxos and facilitate trade for doge price ratio. charlie's final wallet appears so: utxo kmd utxo kmd total kmd doge table charlie's final wallet state charlie, the creators any standalone gui wallet, manage the utxos. barterdex only manages the matching the utxos once they are created. detailed explanations the barterdex process with understanding the specifics what barterdex actually trading, can now approach explanation how the trading procedure occurs. june whitepaper komodo platform version detailed explanations the barterdex process atomic swaps the komodo barterdex facilitate trading among users, barterdex implements variation the atomicswap protocol, described tier nolan bitcointalk.org. the original concept provided tier nolan can said "ahead its time," both complex and relies conceptually technology that yet does not exist. therefore, create our variation the atomic-swap protocol, adapted for the current technology. thorough study nolan's original exposition can provide solid background into the tradeoffs that made selected our final version our atomic-swap protocol. emphasize the reader that the key aspect that maintained from the original concept that each step there are both incentives proceed the next step the proper manner, and disincentives avoid abandoning the procedure. with this structure place, regardless where the protocol stops, each party receives their proper reward. party attempts deviate from the proper path, their funding penalized the point eliminating any potential rewards user could gain acting maliciously. these incentives and disincentives create the foundation for the requisite trustless nature our atomic-swap protocol. introducing, alice and bob understand why the atomic-swap protocol necessary, first important recall that computer code executed linear fashion. even were assume that both parties trade may honest, computer the process taking money from each digital wallet and pulling the money into the open must happen one wallet time. therefore, one person must send out their money first. the atomic- swap protocol protects that person from vulnerability. without the atomic swap, any malicious party involved (whether full-relay node, trading partner, other external agent) would able destroy the fairness the trade. there are two parties atomic swap: the liquidity provider and the liquidity receiver. once the process atomic swap begins, the behavior each party's public trading profile recorded and added their reputation the barterdex network. the process atomic swap begins with the person who makes the initial request--this the liquidity receiver. convention, call this person, "alice." alice will need two utxos perform her swap. one utxo will cover the protocol fee, which roughly /th the size her desired order. call this fee the and its primary purpose serve disincentive alice from spamming the network with rapid requests. the second utxo required alice the actual amount she intends swap. barterdex first verifies that she has these funds, but for the moment she retains these funds the safety her own digital wallet. june whitepaper komodo platform version detailed explanations the barterdex process the other side the atomic swap, have the liquidity provider--we call this person, "bob." bob sees the request the network for alice's atomic swap and decides accept the trade. now his part the process begins. complete the trade, must also have two utxos, but with one important difference: the first utxo equal the amount that alice requested; the second utxo exactly equal the amount that alice intends swap. other words, bob must provide liquidity the total amount the currency that alice requests. the first utxo (.%) bob now sends out security deposit, placed the barterdex network. the network's encryption holds the deposit safely view, but untouchable. call this utxo, will remain there until his side the bargain completes full, until alice's request for swap times out. assuming bob keeps his promises and stays alert, these funds will automatically returned him the appropriate moment. the second utxo (%) retains within the safety his own wallet for the moment.performing successful connection between bob and alice, and verifying their requisite utxos, the most complex and difficult aspect creating the barterdex network. myriad factors are involved successful attempt for bob and alice connect: human motivation; the experience level the users; economics; connection technology; user hardware setups; normal variations within internet connections; etc. emphasize users here that the process performing these actions over peer-to-peer network has almost artistic element it. attempt successfully connect bob and alice can thought more like fishing, where must simply cast and recast our line until successfully connect with our target. user attempts trade and response returns from the network, the user should slightly adjust the parameters their offer and try again. barterdex continues iterate and improve, and the number users increases, expect any required effort lessen for users, the network, and the barterdex gui apps. alice and bob make deal assuming alice and bob are successfully connected, the process from this point forward becomes quite simple: (note: some cases, possible perform atomic swap with fewer steps, but for the sake brevity will focus only this scenario.) summary the procedure: alice requests swap and sends the the barterdex full-relay nodes. the full-relay nodes receive her request and publish the network bob sees the request the network, accepts it, and sends out june whitepaper komodo platform version detailed explanations the barterdex process enters state limbo the barterdex network, held safely encryption, awaiting either alice proceed, for the swap time out the latter occurs, automatically refunded bob via the barterdex protocol alice now sends her bob she does not send the payment bob directly, but rather into temporary holding wallet the barterdex exchange, which encrypted and protected his private keys only bob has access this wallet, via the set privkeys that only owns ii. however, the barterdex code does not yet allow bob unlock this temporary holding wallet; must continue his end the bargain first iii. the will remain bob's temporary holding wallet for limited amount time, giving him the opportunity proceed bob now sends his alice again, this not sent alice directly, but rather into yet another temporary holding wallet likewise, only alice has access the necessary privkeys for this wallet the will automatically refunded she does not complete her part the process alice now "spends" the the word "spends," simply mean that she activates her privkeys and moves all the funds another wallet--most likely her smart address barterdex registers that alice's temporary holding wallet successfully "spent" the funds bob "spends" the likewise, bob simply moves the entirety the into wallet his own--again, will most typically his own smart address barterdex now knows that bob also successfully received his money seeing both temporary holding wallets now empty, the barterdex protocol recognizes that the atomic swap was complete success. barterdex now refunds back bob and the process complete. while may seem inefficient have seven transactions for swap that could done with two, the complexity this process provides with the requisite "trustless-ness" maintain user safety. june whitepaper komodo platform version detailed explanations the barterdex process incentives and disincentives maintain good behavior will now explain, every step along the way there are incentives for each side proceed, and there are various financial protections place should one side fail. also, because payments are sent these "temporary holding wallets" that exist within the barterdex protocol, the protocol itself can assist the process moving money the appropriate steps. let now examine what happening each step. alice sends bob accepts the offer trade, but does not send alice only stands lose her utxo. this only /th the entire transaction amount, she loses very little. bob, the other hand, stands lose more. since bob did not follow through with his end the bargain, the barterdex network indicates his public barterdex trading profile that failed commitment, thus decreasing his profile's reputation. bob continues this behavior habit, may find difficult discover trading partners. long the frequency "bobs" failing low, the occasional extra paid alice minor issue. however, there sudden spike misbehavior, the barterdex code has in-built contingency plans which can provide refunds alice(s), should particular alice node(s) experience large loss via bob successfully sends alice does not follow with her next step, the then alice loses not only the but she also receives mark her public barterdex profile. she gains nothing, and bob has reason fear will automatically return him via the barterdex protocol. alice successfully sends bob does not proceed with his next step, the then after hours alice can simply activate barterdex protocol that will allow her claim recall that the original intended trade; bob has every incentive therefore continue with his end the bargain, and alice has nothing fear should bob fail. she even stands gain bonus, bob's expense. bob sends now, alice does not follow "spending" the (i.e. taking the money out the temporary holding wallet and into her own smart address), then after hours bob can activate barterdex protocol that allows him reclaim his immediately. furthermore, four hours later bob may activate refund bob safe from alice, should she fail. for alice, the barterdex june whitepaper komodo platform version detailed explanations the barterdex process protocol allows alice reclaim her after bob reclaims both his payments. everything herein recorded the respective users' barterdex trading profiles, ensuring their reputations are the line. recall also that the barterdex protocol requires each step performed the proper order, thus ensuring that neither party can take any funds before the users' appropriate moment. thus, this integral stage the process, every step the path intricately interconnected and maintains various levels protection. alice spends this point, alice entirely through with any risk her reputation, her payment, the loss her time. bob does not follow also "spending" the concern alice because she has already received her funds. bob simply sleeping and forgets spend the can only hurt himself. naturally, for bob this slightly dangerous. bob's best course action remain alert and spend the once received. after four hours, bob still sleeping, alice can still activate the protocol that allows her claim this scenario, she receives both the and only the costs the and bob can still make later claim for the when regains his awareness. bob spends assuming all has gone according plan, and having spent the bob may now reclaim just before, bob does not refund his own deposit, his loss; four hours alice will able activate claim bob reclaims the process complete. alice received the bob received the bob has back his own possession. the entire process only cost alice the original each step along the way, the side that needs take the next step motivated so, with greater and greater urgency until the process complete. additional barterdex atomic swap details the barterdex implements the above series commands cross-platform manner, enabling users atomic-swap trade with coins many types, including both june whitepaper komodo platform version more detailed explanation the atomic-swap connection process native coin daemon's and those that run spv electrum servers. swap that not completed immediately can carry while the time has not expired within the barterdex protocol. naturally, users must understand that outside forces can disable the process and thereby damage one the users. for instance, internet outage for bob could particularly dangerous. therefore, users are advised only trade manageable sums that they are willing put risk, and only with nodes that have reliable reputations. this atomic-swap protocol, with all its cryptographic validations and intricate key exchanges, less than half the difficulty komodo experienced creating barterdex. relatively speaking, "easy" atomic swap isolation between two test nodes, using utxos that are carefully prepared for the test. entirely different matter open this the public large, including the enabling our orderbooks and order-matching features. due the peer-to-peer nature the barterdex, live network impossible guarantee that user that indicates they would like begin swap will receive successful reply. for instance, bob may see potential swap that would like make, but the time his attempt accept the swap crosses the expanse the internet, someone else could have already accepted the swap, thus leaving bob his original position. there are legion scenarios wherein the initial connection can fail. once the connection made, however, the rest the process maintains reliability and user safety. failed attempts establishing connection only result the loss few seconds the user's time, and there cost associated with the failure. the paid alice never occurs, and barterdex disregards bob's attempt send therefore, while cannot guarantee that barterdex will always form valid connection for each attempt trade, can offer comfort knowing that the users' losses these scenarios are insubstantial. more detailed explanation the atomicswap connection process the following brief explanation the complex process which barterdex establishes connection between alice and bob. for barterdex accept request begin atomic swap, the code first needs register and create all the necessary backend elements for the and all four must specified before barterdex can indicate alice and bob that can successfully support this atomic swap. this more complicated than appears. explained earlier, most users not understand the true nature how funds operate cryptocurrency. rather, june whitepaper komodo platform version more detailed explanation the atomic-swap connection process most simply view their balance single conglomerate coins that they can spend the "satoshi level." this misperception important correct understand how barterdex performs atomic swap. naturally, because users have varying sizes utxos their wallets, the true challenge creating barterdex was create method maintaining network that would coordinate each user's list utxos their wallets, and allow them match with other users trading pairs. addition, barterdex also automatically calculates the appropriate mining and transaction fees for the blockchains involved, according speed that maintains optimized atomic-swap process. created the necessary code make the atomic swap possible for the public, found that not practical have the user specify which utxo pair they have sitting their wallet when choosing make swap. this would also not intuitive for the user. furthermore, did not even want code way for alice know the utxos bob has available the moment negotiating trade. instead, here how barterdex deals with the complexity matching these unbroken and mismatching utxos process atomic swap. important note that users are not required have sophisticated understanding the backend utxo process, and may simply trade using either minimal understanding utxo inventories, least rely the support cleverly coded standalone barterdex gui app. assuming alice has already indicated she desires perform atomic swap, barterdex calculates out the proper divisions her utxos, defines how they will appropriated during the process, and sends "alice request" bob with information regarding her pair utxos (which are the and the also, barterdex verifies her desired price and volume. bob, the human user (or artificial-intelligence bot acting his behalf), indicates that willing accept the trade. the automation the barterdex bob-side protocol now takes over the background. validates the "alice request" make sure the utxo pair valid, and then the bob-side protocol scans through bob's utxo inventory for the most efficient way create both the and utxos. the bob-side protocol understands that the utxos will not perfectly match, and will therefore calculate the most efficient method making any "spare change" utxos needed. additional constraint the protocol needs consider that the result must match the price and volume alice wants pay. finally, accounts for the requirement that least ."alice request." (note that barterdex directly involved with managing bob's utxos, but not involved with managing alice's utxo offers.) once barterdex verifies all these conditions, the bob-side protocol sends back data packet, labeled "reserved," the alice-side protocol indicate that all order. all this optimized andconducted manner that prevents the human bob from having his funds frozen unnecessary deposit duty, should the human alice find another "bob" the interim. june whitepaper komodo platform version more detailed explanation the atomic-swap connection process next, the alice-side protocol validates the "reserved" packet from the bob-side protocol, making sure all the utxos are valid, and the protocol verifies that the price and volumes are acceptable according the original intent. assuming everything successfully validates, the alice-side protocol sends "connect" packet back the bob-side protocol with the same parameters, indicating that her funds are now "reserved" well. between the "request" being sent and the "reserved" packet being received there -second timeout which prevents alice from making further trade requests. this gives barterdex the time necessary perform all the calculations. note: this -second timeout also provides contribution what call "whale resistance" during the komodo dico process. whale resistance way komodo and barterdex resist "whales" from purchasing entire coin supply and thus forcing artificial market scarcity. the bob-side protocol now validates alice's "connect" packet and, assuming everything order, the protocol starts new bob-side thread code, thus beginning the actual atomic swap. the alice-side protocol also receives the "connect" packet, verifies, and then starts alice-side thread code. there one more "negotiation" step that needed between the alice-side and bobside protocols: the event the two sides the protocol not achieve consensus, the entire atomic swap aborts without any payments sent from either party (i.e. "no harm, foul"). (this final negotiation could have been included earlier, but due the way the atomic swap organically developed during our creation process, ended inside the atomic-swap protocol itself.) the alice-side and bob-side protocols have now properly performed their duties, and thus completed the most challenging aspect the atomic-swap protocol. barterdex returns control the humans (or bots acting their behalf) send their respective payments. the dex fee: people will notice that there small required part the barterdex protocol. this the transaction amount and calibrated make spam attacks impractical. forcing would-be attacker spend real money, attacking the network becomes costly. without this spam prevention, the barterdex could otherwise attacked the protocol level any person performing plethora trade requests. the fee ends being equal the this already far less than the fees paid average centralized exchange. also, centralized exchanges charge both sides the trade, even they charge you .%, they are actually harvesting total fees between both parties. june whitepaper komodo platform version more detailed explanation the atomic-swap connection process furthermore, they often have fees and limitations for withdrawing funds, well lengthy, challenging, invasive registration processes. barterdex has none these things. users need only record the passphrase they create when first entering the barterdex software, and they are prepared trade. possible that some atomic swaps can initiate, and then fail complete, which raises questions about what happens the the the first charge the protocol; this sense, there charged for these failed atomic swaps. however, this failure should not looked upon isolation. the barterdex protocol based statistics. statistically speaking, there will some percentage atomic swaps that start and will not complete. let suppose failure rate this stage the atomic swap three times higher than the rate failure currently observe our testing). even this scenario, the effective cost still only all alice-side requests across the entire network. therefore, you experience the loss transaction for atomic swap that fails complete (which would due failure receive response from bob), know that this all part the statistical process. you find yourself paying more than your completed trades 's, please let know. this would highly unusual statistical outlier, and will therefore want investigate. organization, when speaking generally our audience online, state that the just .%. this manner, hope create the expectation that normal; the network performs perfectly, the other hand, users will get blessing the form lower fee, .%. dealing with confirmations since barterdex trading permanently blockchains (as opposed updating internal database vouchers, managing proxy-token account balance), both sides the trading pair need wait and watch miners the respective blockchains calculate transaction confirmations. because the payments that occur one blockchain will proceed regardless the actions the other blockchain (i.e. confirmation failure one chain will not stop with the other blockchain performing its duties normal), therefore important that the barterdex protocol observe and adjust necessary. each side the barterdex protocol (bob-side and alice-side) watches and attempts provide level protection for the human users. barterdex achieves this protection array api calls, which gives each side the option specify how many confirmations they expect before the automated process should satisfied behalf the human users' interests. the setting for the feature must decided before the atomic swap begins, the number confirmations the users choose will persist until the process completes. the users have differing preferences for the total they prefer, the barterdex protocol automatically sets the larger the two preferences the re- june whitepaper komodo platform version more detailed explanation the atomic-swap connection process quirement for both parties. furthermore, this feature also includes value prevent one side from specifying unreasonable malicious number required confirmations. zero confirmations barterdex also supports high-speed trading mode. using this feature, user can activate extremely fast mode trading: this initiates form atomic-swap trading that does not wait for any confirmations all. when using this feature, atomic swaps can completed little three seconds. this high-risk endeavor, naturally, and users should exercise extreme caution when implementing it. one potential application for the feature allow groups individuals form their own organizations where they decide personal trust levels, and work together correct any mistakes that are made their accounting endeavors. barterdex also features special trust api that users can enable for themselves and groups that they form indicate how much they trust different traders. default, the trust api set neutral for all users. group users can form their own organization and develop trusted network for trading, using the trust api set each other's trader profile trust positive. such cases, user, group users, tells the trust api set another trader profile trust negative, that trader's blacklisted for any the participating individuals groups. speed mode: experimental feature using time-locked deposits using the protocol, developed new feature for the barterdex network that functional, but still experimental. called "speed mode," and adds one additional step the alice and bob process. alice places one-time security deposit amount equal greater than the amount she would like actively trade without waiting for confirmations. this security deposit sent conditional psh wallet address (presently controlled the komodo team). alice indicates within her security-deposit transaction the amount time the deposit should remain the wallet. the psh wallet will lock the funds from alice's end until the completion the expiration date, though the wallet will allow the komodo team access the funds necessary. this called "time-locked deposit." after her chosen date expiration, she can reclaim her security any time. note that her kmd funds continue eligible for earning rewards. this enables alice participate our experimental speed mode feature, fully automated protocol that tracks users' trading activities and monitors their unconfirmed swaps against their time-locked deposits. while using speed mode, alice can trade funds amounts smaller than her time-locked deposit. (the bob that accepts her request must also willing engage the speed mode feature.) her trading partners dynamically decrease her trust level she trades, monitoring the amount her unconfirmed transactions against her total security deposit. should june whitepaper komodo platform version more detailed explanation the atomic-swap connection process she reach unconfirmed trading capacity that roughly equal the amount her deposit, the protocol blocks her from participating the speed mode feature until her funds obtain more clearance through notarization their respective networks. should alice attempt cheat during any period zero confirmations, the komodo team can activate the psh wallet security deposit and deduct the amount her offense, and penalty fee, from her security deposit compensate the affected parties. the remainder will available for her reclaim the date the original expiration, the latest. with the security deposit place, alice can use the speed mode feature complete trade little three five seconds. note that this feature new, highly experimental, and recommend users exercise extreme caution when participating. user cannot activate speed mode, barterdex defaults the normal, non atomic-swap trading method. realtime metrics nodes barterdex use realtime metrics (rtmetrics) filter the possible candidates for atomic-swap matching. all nodes track global stats via file. this log file allows each node self-update the list pending swaps the network. nature, the barterdex protocol has filters that give less priority nodes that are already occupied. additionally, the alice-side protocol gives less preference bobside protocols that not have enough utxo sizes visible the orderbook. this new feature, and expect optimize and enhance future iterations. orderbook propagation when considering how prices compare between two cryptocurrencies, barterdex uses the convention "base/rel," which can translated "base currency relevant currency." the price calculated determining (base currency)/(relevant currency). the relevant currency the cryptocurrency alice using make the initial purchase, and the base the currency alice intends buy. construct public orderbook, node needs have price information. since barterdex communicates primarily means pubkeys, the price for each currency must naturally obtained from pubkey. the long run, for orderbook performance, will need specific for each node, each individual node could have hundreds utxos. currently, propagating all this information globally would use excessive amount bandwidth, therefore use different solution. barterdex instead uses hierarchical orderbook, where the skeleton the orderbook simply the (pubkey)/(price) for any (base)/(relevant) pair. note: this means that purchasing cryptocurrency the (base)/(relevant) price directly comparable selling the cryptocurrency using (relevant)/(base) ratio /(price). using the (pubkey)/(price) pairing, all that needed populate the orderbook skeleton for nodes broadcast their pubkey and price for any (base)/(rel) pair. nodes that are running local coin daemon therefore broadcast their lists utxos, june whitepaper komodo platform version more detailed explanation the atomic-swap connection process which helps propagate the orderbook. all this done the background, ondemand. critical information broadcast with fully signed encryption prevent spoofing. thus, all nodes can verify the smart address associated with pubkey. this way, nodes can validate the price broadcasted. (the electrum spv coins have their own specific spv-validation process for all utxos before they can approved for trading barterdex.) while all nodes could broadcast their utxo lists constantly keep them updated, this would result the network rapidly being overrun with congestion. eliminate this issue, barterdex simply relies the (pubkey)/(prices) this all that necessary maintain useful orderbooks. since there are n*n possible orderbooks (given currencies), not practical have barterdex configured update all possible orderbooks constantly. instead, orderbooks are created the user end when requested from the raw public data. during orderbook creation, the top entries the orderbook not possess any listunspent data, request made the network gather this information. this process ensures that the time trade completes, there already request for orderbook, which turn requests the listunspent data for the most likely pubkeys. the actual order-matchingprocess then iterates through the orderbook, scanning all the locally known utxos find high- probability counterparty whom barterdex can then propose "request" offer. practice, early users barterdex can currently experience nearly instantaneous responses, assuming all the parameters are properly met. the barterdex api created api model that the same for all coins--with the obvious exceptions the electrum-api call itself, and within some the returned json files that have different calls, such "listunspent." furthermore, the underlying technology barterdex enables the api treat all bitcoin-protocol compatible coins with universal-coin model. therefore, when working with the barterdex api, independent developer working feature their coin barterdex need only use the api "coin" symbol receive the full set barterdex features. there are several feature requirements the core code the blockchain coin, and these features are not included the core there may some limitations. for example, coin that not built the bitcoin-protocol check lock-time verify (cltv) feature can still take advantage the liquidity-taker side the barterdex api. for coin work native mode, must also have rpc call. the coin has the cltv op_code, can both the liquidity provider and the liquidity taker. for coins using spv, barterdex only supports the liquidity-taking side (for overall network-performance reasons). also, assume that any trader with june whitepaper komodo platform version more detailed explanation the atomic-swap connection process ambitions being serious liquidity provider should also serious enough install the coin daemon for the coins they are trading, this will increase their speed processing. brief discussion the future barterdex this concludes high-level summary the barterdex protocol created the komodo organization. now fully functioning and live, and with the support our community, have successfully completed roughly one-hundred thousand atomic swaps. should warn our readers, nevertheless. every element the komodo ecosystem still considered highly experimental. provide investment advice, nor any guarantees any funds utilized our network. use our products only your own risk. looking past our upcoming immediate dicos, barterdex will continue evolve. the current iteration has already identified several areas improvement for the next iteration. several different gui systems are also under construction various community members, all which are utilizing the barterdex api. develop the barterdex api, are making sure that future iterations are backwards compatible for developer ease-of-use. improving the user experience and user interface leading gui app top priority. june whitepaper komodo platform version part june whitepaper komodo platform version abstract(jumblr) jumblr komodo technology that enables users anonymize their cryptocurrencies. its foundational level, jumblr takes non-private funds from transparent (non-private) address, moves the funds through series private and non-traceable zk-snark addresses--which disconnects the currency trail and anonymizes the funds--and then returns the funds new transparent address the user's choosing. through connected komodo technology, barterdex, jumblr can provide this service not only for komodo's native coin, kmd, but also for any cryptocurrency connected the komodo ecosystem. introduction the option privacy essential the komodo ecosystem one primary goal the komodo ecosystem provide our users with the highest levels security. the option enable oneself with privacy inherent part strong security system. privacy empowers users with the ability make choices without being directly controlled observed third-party actor. many humanity's most meaningful advancements art, technology, and other human endeavors began situations where the creator had the security privacy which explore, discover, make mistakes, and learn thereby. the roots the komodo ecosystem stem from the seminal work satoshi nakamoto and his bitcoin protocol one the key challenges this technology that the original protocol does not make any account for privacy. therefore, advancing blockchain technology, created jumblr empower komodo-ecosystem members with this necessary security. challenges for privacy-centric systems and the komodo solution current pathways obtain privacy the blockchain industry have many problems. https://bitcoin.org/bitcoin.pdf june whitepaper komodo platform version the komodo solution one the most popular methods obtain privacy the use centralized mixing service. this process, users send their cryptocurrencies service providers, who then mix all the participants' coins together, and return the coins according the relevant contributions. with this method, the most dangerous issue, among many, that for the duration the mixing period users lose control over their currency. the funds, therefore, are subject theft and human error. other decentralized coin-mixing methods, such the coin shuffle require coordinating with other human parties. this also introduces the potential for the same issues theft and human error, and adds yet another risk: the coordination between human parties can result the disclosure user's privacy. some cryptocurrencies support mixing part the normal transaction process out desire provide constant anonymization. varying methods for randomizing these transaction-mixing patterns exist among the many different brands relevant cryptocurrencies. the most popular monero. the komodo solution introduction jumblr our jumblr technology solves these issues through two-layered approach, relying connected technologies the komodo ecosystem--barterdex, our native komodo coin (kmd), and the upstream zcash parameters. the jumblr process managed locally the user's machine and requires third parties, human coordination, other mixing services. brief explanation the two foundational technologies komodo coin(kmd) kmd cryptocurrency that enables users conduct both transparent and private transactions. developing the komodo ecosystem, use kmd the native cryptocurrency for many connecting technologies. kmd thereby continually gains usefulness more komodo tools are built upon it, including jumblr. kmd began fork zcash this coin began fork the popular privacy coin, zcash such, kmd retains the same inherent privacy features. notable among these features are the https://bitcoinmagazine.com/articles/shuffling-coins-to-protect-privacy-and-fungibility% da%dnew%dtake%don%dtraditional%dmixing%d/ https://z.cash/ june whitepaper komodo platform version the jumblr process zcash parameters and zk-snark technology. these enable users move funds public blockchain without leaving data trail for later analysis. this one the most powerful forms blockchain privacy existence, the provided privacy effectively permanent. the zcash parameters and zk-snark technology provide the initial foundation for users take transparent kmd funding and make anonymous (with the assistance komodo's jumblr technology) without leaving behind cryptocurrency trail. the zcash project itself fork bitcoin. thus, all the features designed satoshi nakamoto the bitcoin protocol are also available komodo. barterdex barterdex open-source protocol designed and pioneered the komodo team. allows people trade cryptocurrency coins without counterparty risk. the protocol open-source and trading available for any coin that developers choose connect barterdex. in-depth discussion barterdex provided the previous part iii section this paper. iguana core core komodo technology, called iguana core, fundamental the overall functionality the komodo ecosystem. the center nearly all komodo projects, and jumblr exception. for more information iguana core, please see our komodo github repository. there also more detail provided the barterdex section this whitepaper. komodod komodod the name the background software (also called daemon) that runs behind the scenes essentially all komodo-related software. there more information provided komodod the dico part this paper. the jumblr process jumblr enables users anonymize their funds. the jumblr process rooted our native komodo coin (kmd), and the privacy features can extend thereby any blockchain project connected the komodo ecosystem. anonymizing native komodo coin (kmd) its most simple level, jumblr takes non-private kmd funds from transparent (non-private) address, moves the funds through series private and non-traceable june whitepaper komodo platform version the jumblr process zk-snark addresses--which disconnects the currency trail and anonymizes the funds--and then returns the funds new transparent address the user's choosing. the entirety the anonymization process conducted through the user's local machine(s), with one exception--that sending the data the network for mining. therefore, jumblr eliminates many dangers, including the issues theft, human error, the disclosure user privacy through human coordination, and the unraveling privacy ever-increasing nature computer processing power. user actions the commands that initiate jumblr exist within komodo's foundational program the user's local machine, komodod. this program included typical komodo installation, and, under normal circumstances, komodod natively connected the same kmd addresses accessed the user. therefore, users the komodo ecosystem have access jumblr's privacy technology without any further effort. developers standalone gui applications for the komodo ecosystem can integrate jumblr commands into user interfaces any desired manner. there are two main commands, api calls, available: jumblr_deposit jumblr_secret jumblr_deposit this command initiates the anonymization kmd. before executing the command, the user prepares the funds placing them within the chosen long komodod has access the private keys the nothingfurther required. the user simply executes the command "jumblr_deposit and jumblr begins watching for and processing any funds the note: call transparent address address." these are fully accessible the user, and they are the means conducting normal transactions. all currency entering and leaving address fully visible the network. the other hand, call privacy-enabled address address," they utilize the zcash parameters and zk-snark technology. addresses are internal the jumblr process and user typically does not directly interact with them. june whitepaper komodo platform version the jumblr process the first step jumblr takes move the user's funds from address address. the first step the jumblr anonymization process moving the funds from transparent address privacy-enabled address. t-z naturally, the address fully public, outside observer can see the funds they leave for the respective address. therefore, fully disconnect the currency trail, jumblr then moves the funds from the initial address yet another address. jumblr creates new address for each individual lot. the second step the jumblr anonymization process moving the funds from one unique and untraceable address another z-z through the technology the zcash parameters, zk-snarks, and jumblr, the specific whereabouts the funds are known only the user. the user does not need follow the movements and however, for the advanced user, there are jumblr commands available that allow for more active interaction these stages (see the komodo wiki for further details). one command mention here z_gettotalbalance. this reveals the user the total balance they hold within all their addresses. upon executing the command [jumblr_deposit jumblr begins continually observing the should the user send more funds into their while jumblr already processing the previous amount, jumblr will simply take these new funds into account, perform any necessary actions properly adopt them into the process, and continue its course. jumblr includes two subcommands that allow the user pause jumblr manually: and the user can also halt jumblr shutting down komodod (and any relevant standalone gui applications). once the funds have reached their final address(es), they lay dormant, awaiting the user's next command. jumblr_secret the user executes this command complete the jumblr process. jumblr will extract all the user's hidden currency from each address and place the funds new address, which call the this makes the funds spendable again. the third and final step the jumblr anonymization process moving the funds from one unique and untraceable address another z-t june whitepaper komodo platform version additional security layers recommend that you keep these private addresses primarily for storage. you should never share with anyone any information regarding your 's. treat all relevant information like password. when you are prepared spend from your private funds, recommend that you repeat the jumblr process again the amount that you desire spend. this will keep the bulk your stored funds within privacy "air gap," were. for maximum privacy, also suggest that after emptying the public node all funds, the user delete and destroy the wallet.dat file which the initial privacy- creation process took place. this destroys the last remnants the cryptocurrency trail. additional security layers jumblr's process breaking down funds the method which jumblr breaks down and processes the funds provides yet another layer privacy. jumblr begins taking the total amount the and, necessary, splitting until the largest quantities are all equal kmd. then breaks down the remainder into quantities kmd, and then the remainder thereafter into quantities kmd. any final remainder (which would anything less than kmd) ignored. note that jumblr also automatically extracts its overall fee during the jumblr process. therefore, the total amount broken down into lot sizes kmd, kmd, and kmd. jumblr's process moving the individual lots into private address jumblr does not immediately move each lot into address. instead, performs its actions randomized pattern optimize anonymity, using the collective all jumblr users the komodo ecosystem blend the transactions the crowd together. first, all jumblr actions throughout the ecosystem are programmed cluster around block numbers that are multiples ten (i.e. blockchain height xxxxx). this gathers all jumblr requests from all users for the given time into one large group, clustered together every ten minutes single block generates every minute, and therefore the tenth block occurs every tenth minute). the moment activity, jumblr does one two things: either performs the next action the process anonymization, chooses nothing. option jumblr performs the next action when jumblr looks the next action, can perform one three possible steps: june whitepaper komodo platform version additional privacy considerations the lot has yet moved out the jumblr can move from the first address the first address. assuming the lot now the first address, jumblr can move the final address. assuming the api call activated, jumblr can move the lot from the final address the final address: option does nothing each turn, instead performing any the above steps, jumblr can simply abstain from any action. this happens approximately half the time. through these actions, jumblr adds layer obfuscation top the zcash parameters and zk-snark technology adding privacy the timing and movements each step for each user. additional privacy considerations although the kmd anonymization process provides measure privacy and may appear sufficient, there are still more precautions user must take. two main attacks are available would- sleuth. the timing attack this attack, the sleuth simply studies the time the funds disappear from the and looks for funds appear address soon thereafter. the privacy-user persistently chooses predictable timing for initiating and completing the jumblr commands, determined sleuth might deduce user's the aforementioned process grouping and randomizing the timing movements provides one layer security against the timing attack. users thus blend the timing their movements together, using the power the collective obscure their transactions from the sleuth. however, the timing attack remains issue the user the only person employing jumblr for the duration the anonymization their funds. this event, effectively anonymization takes place. the sleuth can clearly see the funds leave from the and return the later. therefore, effective, jumblr requires more than one user and gains strength with higher levels adoption. given the growing size the komodo community, anticipate that users will easily able overcome the timing attack. june whitepaper komodo platform version additional privacy considerations the knapsack attack the knapsack attack somewhat like the timing attack, but applied amounts. for example, there only one kmd address that entered kmd into jumblr, and kmd later emerges elsewhere, the sleuth can easily discern the user's the process breaking down the total amount into three equal sized lots (~, kmd) for all users provides one layer security against the knapsack attack. users again can blend their transactions together, using the power the collective obfuscate their movements. jumblr has another feature, multiple secret addresses, that also protects against this attack. this feature explained the following section. further security enhancements combat the timing and knapsack attacks more defense against the knapsack attack: multiple secret addresses another layer security, users can create multiple secret kmd addresses ('s) and actively use them the jumblr process. when using multiple 's, whenever jumblr reaches the stage for any given lot kmd, jumblr will randomly choose one the for this lot's final address. this enables the user split their initial funding into many different 's, thus providing another layer security against the knapsack attack. jumblr manages one time. further enhancements against the timing attack the simplest and strongest defense against the timing attack the hands the users. recall that user chooses the times they execute the commands and the longer user maintains their currency within the shielded address(es), the more security they have against the timing attack. this because the jumblr actions other users during the interim obfuscate the trail. therefore encourage users who are mindful for protection against this attack delay the period execution between the two commands. also developed jumblr have additional inherent protections against the timing attack for cases where users desire more immediate transfer. assuming jumblr activated the user's local computer, soon jumblr detects new deposit the can begin the anonymization process. however, jumblr deliberately delays its own progress provide layer security against the timing attack. recall that all user actions are clustered around block numbers that are multiples ten, and half the time, jumblr decides nothing. therefore, statistical terms, june whitepaper komodo platform version offering privacy other cryptocurrencies although the jumblr background process may constantly running komodod, jumblr only activates check for pending tasks every tenth minute, and only performs tasks every twentieth minute. thus, each hour has roughly three different moments when jumblr will perform one the three available actions: and this program randomizes the amount time takes complete the jumblr process. assuming during given period activity jumblr decides perform the action begins working through the different sizes lots from largest smallest--thus beginning with -kmd lot until they are all allocated, then the -kmd lots, and finally the -kmd lots. during any individual period activity, jumblr will perform the movement for more than single lot, and then stop. however, when jumblr performs either the other two actions and will make the transfers for all lots that are play. through these additional securities, therefore, jumblr defeats the timing attack and the knapsack attack, relying the power the zcash parameters and zksnark technology. the more participants jumblr, the more privacy users gain. for those who use jumblr consistent basis, the cost utilizing jumblr offset the rewards that can earned with the komodo coin (kmd). thus, for small fee, jumblr users can provide both themselves and their community with privacy. offering privacy other cryptocurrencies jumblr can provide privacy any cryptocurrency that connected the komodo ecosystem, barterdex natively integrated. currently, the user required perform the first and final steps trading the jumblr process non-kmd cryptocurrencies. the long term, however, jumblr capable fully automating the process. await larger adoption complete the non-kmd automation features. the current jumblr process: manual non-kmd kmd trading barterdex overall, provide privacy non-kmd cryptocurrency the komodo ecosystem, that currency must first traded barterdex into kmd. once the underlying value held kmd jumblr can complete its work. upon completion, the anonymized kmd then exchanged barterdex again for the relevant non-kmd cryptocurrency and returned secret address the user's choosing. present, while barterdex its early stages, are focusing our energies increasing overall barterdex usability. june whitepaper komodo platform version word risks inherent jumblr and the komodo ecosystem future capabilities: jumblr automates the barterdex trading process for the user the future, jumblr will simply client the barterdex service when providing privacy non-kmd cryptocurrencies. when user activates jumblr for non-kmd coin, jumblr will instruct barterdex trade the non-kmd coin into transparent kmd according the current prices. the underlying value now being kmd, the jumblr protocol performs the entirety the process previously described. with the underlying value made private, jumblr will direct barterdex exchange the value back the user's chosen cryptocurrency. finally, jumblr will return the final sum new cryptocurrency address, provided the user the outset the process. due market fluctuations, depending liquidity, possible that user will experience slippage the underlying value their non-kmd cryptocurrency. while would possible prearrange the trade barterdex (thereby eliminating any slippage), there available method make such arrangement without leaking privacy information. the party performing the second half the trade onbarterdex would central point failure. therefore, the most private method for non-kmd privacy creation simply rely the active barterdex liquidity providers. word risks inherent jumblr and the komodo ecosystem the komodo coin (kmd), and therefore jumblr association, both rely the zcash parameters put forth the zcash team. the zcash parameters are "zeroknowledge" form technology. this powerful form privacy, and arguably superior other forms effectively permanent. relying the zcash parameters allows turn our creative resources other blockchain-technology challenges, while still empowering members the komodo ecosystem with the option privacy. create the zcash parameters, the original zcash developers had create series keys that, when combined, created master key that could unlock and lock the parameters. after using the master key create the parameters, the team destroyed every individual key. the team conducted this endeavor public manner. encourage interested readers view the "zcash ceremony" explanation, and search for other viewpoints well. briefly summarize the security measures, the zcash team used several layers protection including: multi-party computation, air-gapped compute nodes, hard-copy evidence trails, uniquely crafted distribution the linux operating system, and the physical destruction each piece hardware that held individual key. the resulting layers defense would the highest level difficulty for outsider june whitepaper komodo platform version jumblr provides the komodo ecosystem with privacy penetrate. furthermore, the method creation and destruction ensured that the internal security the project was faultless, long least one member the entire zcash team was honest. our observation, the team performed this endeavor with sufficient competence and due diligence. furthermore, given the nature the project, the longstanding reputation the zcash developers, and the modus operandi their lives' work, believe they were properly motivated perform the creation and destruction capable and honest manner. nevertheless, there are privacy advocates the cryptocurrency industry who maintain degree suspicion over any project that requires element human trust. this suspicion extends the zcash parameters. these observers continually scrutinize the zcash project, searching for more and more processes which the creation ceremony could have failed. yet, while various theories have been put forth, actual failure the zcash parameters has been discovered. adopting the zcash parameters, receive frequent questions regarding how they affect the komodo coin. the answer that the privacy the komodo ecosystem permanent, regardless any potential fault the zcash team. furthermore, can adopt any updates the zcash team releases the parameters. the unlikely event that someone was able retain complete copy the master key, the only power the holder would have, would the ability create new private money our system. this holder could then trade that for transparent, spendable money. this could negatively impact the komodo coin, and would required adapt our platform. fault the zcash parameters were discovered, the komodo team has various contingency methods our disposal remove the zcash parameters and replace them with new set parameters. though komodo not see this realistic threat, nevertheless include the information here our white paper provide complete transparency for any user who seeks invest their resources the komodo project. jumblr provides the komodo ecosystem with privacy for the komodo ecosystem reach its full potential, the option enhanced privacy must available komodo users. jumblr fills this demand. jumblr relies barterdex, kmd, and iguana core connect the komodo ecosystem. the foundational privacy offers built upon the kmd coin, the zcash parameters, and zk-snark technology. additional enhancements are built into the jumblr process maximize user privacy, including protections against the timing attack and the knapsack attack. through barterdex and iguana core, these privacy features extend any cryptocurrency connected the komodo ecosystem. june whitepaper komodo platform version jumblr provides the komodo ecosystem with privacy more users become part the komodo ecosystem, they can work together enhance both their own privacy and the privacy fellow ecosystem members. the ecosystem continues grow, there are various levels growth the komodo team can offer jumblr, including automating the non-kmd jumblr process. look forward receiving your feedback this privacy-enhancing technology. june whitepaper komodo platform version part komodo ecosystem june whitepaper komodo platform version final notes regarding the komodo project there are few final miscellaneous topics discuss. these include our strategy for fiat-pegged cryptocurrencies (pax), our outlook for smart-contract technology, and the nature the main chain the komodo ecosystem, kmd. fiat-pegged cryptocurrencies our strategy towards fiat-pegged cryptocurrencies (pax) has recently changed. previously, featured our website white paper that outlined pax strategy. that former strategy was created before was clear whether governments the world would embrace blockchain technology. today, seems that governments are updating their philosophies and preparing for blockchain adoption. governments appear considering need create blockchain-based cryptocurrencies that can exchanged for their existing fiat currencies. many cases, may able directly integrate these government-sponsored fiat-to-blockchain cryptocurrencies natively barterdex. blockchain projects that properly utilize the core security features the bitcoin protocol are capable properly performing atomic swaps. possible that government-sponsored cryptocurrencies may natively integrate with barterdex, appears that creating our own pax technology may unnecessary. are putting all pax endeavors hold this time. smart contracts the komodo platform there are several smart-contract options available the komodo ecosystem. the options based the bitcoin protocol have been included with our technology, and indeed even with bitcoin, since the beginning. also recently released crypto conditions, merkle root merkle root (mom) notarizations, and asset chain customizations. these provide enhanced smart-contract and asset-chain functionality. all are still beta stages. june whitepaper komodo platform version details regarding the primary chain the komodo ecosystem: kmd bitcoin-protocol based smart contracts rarely known fact the blockchain industry that satoshi nakamoto included secure and advanced smart-contract technology the original release the bitcoin protocol. asset chains the komodo ecosystem can use the smart-contract capabilities native the bitcoin protocol, komodo ultimately fork bitcoin. various vendors and developers the open-source community provide resources make this easier, though make specific endorsements any product. one example smart-contract technology native the bitcoin protocol conditional time-locked deposit, which our barterdex technology utilizes the trading process. crypto conditions, merkle root merkle root (mom), and customized asset chains are also the process releasing our own smart-contract technology that greatly enhances the komodo developer's experience. our smart-contract technology geared language-agnostic, meaning that any language (javascript, ruby, c#, python, etc.) can execute smart contracts thekomodo ecosystem. furthermore, the mom technology allows for multi-chain and cross-chain smart- contract interoperability. these many features empower both asset chains well the main chain. each technology still the beta stages, refrain from including detailed documentation our white paper. please visit our communities find documentation resources and converse with our developers, you are interested building komodo. intend create thorough educational experiences for these products due time. details regarding the primary chain the komodo ecosystem: kmd circulating coin supply: total coin supply (yr. the foundational coin the komodo ecosystem named after the ecosystem itself, komodo (kmd). the most versatile coin are building. whenever create new technologies for our ecosystem, seek establish relationship between the functionality june whitepaper komodo platform version details regarding the primary chain the komodo ecosystem: kmd the technology and the usefulness kmd. for instance, kmd the native cryptocurrency for jumblr. all other cryptocurrencies the komodo ecosystem that seek utilize jumblr's privacy must first traded barterdex for kmd. after the privacy process complete, the users then exchange kmd barterdex for their desired cryptocurrency. kmd also the fuel for our smart-contract technology, and mom smart contracts store their data the kmd main chain. these are but few examples komodo's usefulness. readers may discover many more discussing kmd with members our community. furthermore, those who hold kmd may earn rewards annually. any wallet address that holds least kmd eligible. kmd holders must simply move their kmd once month--even the funds are sent back the same address from which they originated--in order earn their reward. this reward built into the core code komodo. the reward comes from opportunity provided our unique security system, dpow. the nature the reward rooted the financial incentive that typically given miners normal pow chain. normal pow, when miner mines new block, the blockchain mints new coins and delivers them the miner's indicated wallet. for instance, the bitcoin blockchain, the reward for mining new block currently btc. dpow, not need allocate such high incentive miners, already maintain access the hash rate our chosen pow network, bitcoin. therefore, when created the kmd main chain, recoded this coin-minting reward distribute annual rewards all holders least kmd. earn rewards the full amount .%, users must move their funds the blockchain least once per month. the reward calculated part the utxo transfer process (see part iii this paper for details utxos). the kmd code only calculates rewards for utxos one month, and then stops. simply sending the full balance wallet the same receiving address, user can generate new utxo. this manner, the user can claim their current rewards, and continue receiving them for least one month. the kmd reward will continue for period approximately twelve fourteen years. when komodo's overall coin supply reaches ~m, this reward will also discontinue. specifically, the reward will cease when the kmd chain reaches block height important note that one forced into using kmd our ecosystem. are often asked why chose this route, the free nature the komodo ecosystem can direct contrast the philosophies many other ecosystems and exchanges. other ecosystems often require users use the developer's coin. the reason why follow more open practice that strive adhere the guiding principles decentralization and open-source technology. want create blockchain platform where people are free use whatever most useful for them their entrepreneurial endeavors. keeping kmd optional element empowers the members the komodo ecosystem with freedom. june whitepaper komodo platform version conclusion conclusion this concludes thorough explanation the foundational technologies the komodo ecosystem. are working diligently improve the user experience. while some may say that the cryptocurrency industry but bubble, komodo believe have not yet begun the fight. hope that the innovations provide will meaningful contribution the remarkable advent blockchain, decentralization, and open-source technologies. june whitepaper komodo platform version acknowledgements and references barterdex practical native dex (https://github.com/supernetorg/ komodo/wiki/barterdex-%e%%-a-practical-native-dex) nakamoto satoshi (): bitcoin: peer-to-peer electronic cash system. (http: //www.bitcoin.org/bitcoin.pdf) mtchl (): the math nxt forging (https://www.docdroid.net/ahms/ forging--.pdf.html) king sunny, nadal scott (): ppcoin: peer-to-peer crypto-currency with proof-of-stake (https://peercoin.net/assets/paper/peercoin-paper.pdf) delegated proof-of-stake consensus (https://bitshares.org/technology/ delegated-proof-of-stake-consensus/) miers ian, garman christina, green matthew, rubin aviel: zerocoin: anonymous distributed e-cash from bitcoin (https://isi.jhu.edu/~mgreen/ zerocoinoakland.pdf) ben-sasson eli, chiesa alessandro, garman christina, green matthew, miers ian, troer eran, virza madars (): zerocash: decentralized anonymous payments from bitcoin (http://zerocash-project.org/media/pdf/ zerocash-extended-.pdf) ben-sasson eli, chiesa alessandro, green matthew, tromer eran, virza madars (): secure sampling public parameters for succinct zero knowledge proofs (https://www.ieee-security.org/tc/sp/papers-archived/ a.pdf) nxt community: nxt white paper (http://wiki.nxtcrypto.org/wiki/ whitepaper:nxt) larimer daniel, scott ned, zavgorodnev valentine, johnson benjamin, calfee james, vandeberg michael (march steem, incentivized, blockchain-based social media platform.(https://steem.io/steemwhitepaper.pdf) june whitepaper komodo platform version acknowledgements and references bitfury group (sep proof stake versus proof work white paper (http://bitfury.com/content/-white-papers-research/pos-vs-pow-. ..pdf) june whitepaper komodo platform version