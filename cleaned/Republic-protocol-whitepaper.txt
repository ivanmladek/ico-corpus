republic protocol decentralized dark pool exchange providing atomic swaps for ethereum-based assets and bitcoin. december taiyang zhang, loong wang abstract the market capitalization and trading volume cryptocurrencies growing rapidly every month. with institutional investors arriving into the cryptocurrency market, the development alternative trading systems critical for trading large blocks cryptographic assets while maintaining minimal price slippage and market impact. introduce republic, decentralized open-source dark pool protocol facilitating atomic swaps between cryptocurrency pairs across the bitcoin and ethereum blockchains. trades are placed hidden order book and are matched through engine built multi-party computation protocol. this provides order execution without exposing market sensitive information such price and volume certain position, which would provide advantage other traders. republic removes the need for trusted intermediary operate dark pool and provides crypto-economic incentives through protocol token for governance; enabling the development secure, decentralized, scalable dark pool protocol capable handling billions trading volume daily. introduction decentralized block order infrastructure atomic swap trustless, fair access dark pools problems with centralized dark pools how the republic protocol works system properties assumptions security model order matching incentive layer fees bonds attacks and defenses order reconstruction false orders sybil attacks protocol token roadmap references miscellaneous introduction the advent blockchain technologies has enabled the development entirely new class assets backed cryptographic verification. bitcoin (btc) and ethereum (eth) are two blockchain-based cryptocurrencies which, eclipse the aggregate market capitalization all other cryptocurrencies. november the volumes for btc and eth trades exceeded usd (not including over-thecounter and trades executed private forums). this statistic, coupled with the announcements bitcoin futures markets from cme group and nasdaq, signals interest from institutional investors looking gain exposure digital cryptographic assets. with institutions and hnwis looking deploy vast amounts wealth into cryptocurrencies, must develop the underlying infrastructure support such volumes. fundamental level, dark pools are private exchanges where financial assets and instruments are traded and matched engine running hidden order book. these exchanges are primarily created serve institutional hnw retail investors who require system where significant volumes assets can block traded with minimal price slippage. dark pools are estimated represent approximately all trading volume all stock trades []. extrapolating this statistic for btc and eth volumes, dark pool for such has the potential execute usd $.b orders monthly. introduce the republic protocol which facilitates the exchange ethereum, erc and bitcoin cryptocurrencies through decentralized dark pool. this enabled through research within subfields cryptography such secure multi-party computation, which allow develop matching engine run the distributed hidden order book. facilitate cross-chain trades through atomic swaps and implement proper economic incentives ensure these trades are executed thoroughly. compared centralized dark pool exchange, the republic protocol removes the risk asset theft, confiscation possibility interference from malicious exchange operator. this leads greater trust between institutional investors placing block orders and dark pool exchanges leveraging the republic protocol. additionally, the republic protocol available universally and highly transparent with regards how the underlying protocol operates. elementary components decentralized hidden order book decentralized, hidden order book. decentralized order matching matching orders without knowing the underlying details atomic swap infrastructure the ability swap between bitcoin, ethereum and ethereum-based tokens without trust. protocol token the ren token motivation infrastructure for block orders cross-chain trades trustless, equitable access dark pools centralization risk republic protocol how the republic protocol works the primary technical goal the republic protocol enable decentralized network nodes match orders, without knowing anything about the orders. while might seem like this impossible, can achieved applying cryptographic techniques that have been thoroughly researched over that last years; modifying them suitable for the world decentralized computation. the republic protocol uses the shamir secret sharing scheme break down orders into large number order fragments, and distributes them throughout the network. orders cannot reconstructed unless majority the order fragments are recombined. prevent this from happening, the republic protocol defines ethereum smart contract called the registrar that organizes nodes into network topology that makes unreasonably difficult for adversary acquire the enough the order fragments reconstruct order. long traders respect the network topology defined the registrar, their orders will safe. they fail so, only their own orders are risk exposure. using order fragments from two different orders, node can cooperate with other nodes that hold other order fragments for the same two orders perform decentralized computation that will determine the two orders match. the decentralized computation does not expose the order fragments, and performs random scaling the final output [][]. this prevents nodes from reconstructing the original orders, and prevents them from using the output infer anything about the orders. zero knowledge proof used verify the integrity the computation, without revealing any information. these proofs are simple and efficient, allowing them performed ethereum smart contract called the judge []. after two orders have been matched, atomic swap initiated between the two traders over the republic swarm network, decentralized peer-to-peer network. using standard asymmetric encryption primitives, the details the atomic swap are kept secure. system properties the republic protocol provides the following properties: the identity the traders secure within the republic dark pool. the underlying cryptocurrency that being traded may provide different limitations for privacy. traders not have remain connected the network while their orders are being matched. once order placed, nodes will run the matching computation until match found, the order expired (either manually, passing deadline designated the trader). order secure until matched. after being matched, some details the order are revealed the matching parties. this the natural limit security for order, since both parties know what they submitted, and both parties need know when match has occurred. note that information disclosed these cases does not provide any informational advantage either party. the total liquidity the republic dark pool cannot reasonably estimated any participant. assumptions the republic protocol built the following assumptions: there exists trusted third-party that will always perform computations honestly, but has limited computational power (i.e. ethereum). ii. participants act rationally and will not participate there financial incentive so, and will attempt maximize their own profit. this way, not assume that participant will act honestly they can maximize their profit acting maliciously. adversarial assumptions the republic protocol makes the following adversarial assumptions: adversaries cannot corrupt the trusted third-party defined previously assumption (ii). concretely, adversary cannot subvert the correctness computations done the ethereum network. all platforms built ethereum need make this adversarial assumption. ii. adversaries have limited financial, and computational, powers. limited financial powers are reasonable assumption make the real world, and computational powers are naturally limited financial powers. iii.computationally hard problems used construct cryptographic primitives are sufficiently secure. this assumption made all blockchains that utilize any form cryptography, including bitcoin and ethereum. security model defining security model allows analyze the security guarantees provided the republic protocol. the republic protocol makes use the real vs. ideal paradigm; analyzing the security real world decentralized protocol with respect some non-existent ideal world which there trusted, and incorruptible, third-party that can used handle all sensitive information and perform all sensitive computations (this not the same ethereum, since all transactions and data ethereum publicly available). the security the republic protocol can demonstrated showing that any possible attack the real world also possible the ideal world. since the ideal world trivial define, the real protocol secure implication. this approach security analysis typical for decentralized computation protocols which there are active and passive adversaries. the ideal republic protocol contains trusted, and incorruptible, third-party traders submit their orders and guarantees never reveal the details these orders. constantly attempts match orders that have been submitted, and when match found informs the respective traders. the traders each submit their cryptocurrencies and they both so, swaps the cryptocurrencies and gives them back the traders. this completes the trade. the real republic protocol considered secure if, and only if, all attacks the real protocol are also possible the ideal protocol. from the definition the ideal republic protocol clear that such equivalence sufficient. the republic protocol able guarantee that, unless the majority nodes the network are active adversaries, secure the ideal world protocol. nodes are active adversaries, and they are enjoying the attackers best-case scenario, they are able reconstruct all orders. however, the republic protocol ensures that such best-case scenario impossible achieve the real world. the typical case, nodes becoming active adversaries would only allow the adversaries reconstruct the orders. more detailed explanation given "attacks and defenses". decentralized order matching order matching the process through which nodes match orders against each other without being able observe the details the order. achieve this, traders first breakup their order into set order fragments. note that these fragments not individually represent fraction the order's value, they simply represent the separation sensitive data regarding the underlying order. its own order fragment reveals nothing about the underlying order, but when least half the order fragments for order are combined, the order can reconstructed (see "attacks and defenses" for details about protecting against this). each node performs order matching computation order fragments from multiple different orders and combines the results with the results from nodes (who are using different fragments). the fragments are constructed such way that, after the computations are applied, the resulting fragments can combined reveal, not the underlying orders, but the result the order matching computations for the underlying orders. this has several nice properties. for one, only half the order fragments are needed reconstruct order. nodes are incentivized avoid collusion (and adversaries have difficult time subverting this system, see "attacks and defenses"). this means that half the nodes accidentally die, leave the network halfway through order matching computation, the network can still finish the computation. this makes highly resilient ddos attacks, and expected failures. order fragments are constructed such way that the order matching computations can use any function, applied over polynomial, and can involve two more underlying orders. this allows for very flexible order matching computations. nodes can match orders based exact price points, partially match orders (when only some order can matched due the currently available liquidity), match triplets (or more) orders increase liquidity (e.g. the triplet btc-to-eth and eth-to-ren and ren-to-btc, where match can found with only pairs). assuming the existence decentralized, consensus-based, data stream for national best bid and offer (nbbo) data, the order matching computations can even involve orders without explicit price point. winning and losing nodes race discover order matches. any match that found must registered that other nodes can see which orders have been closed. the associated traders are notified, and none the matched orders can involved future matches. this done the ethereum network, under assumption (). two orders not match, they continue used future matching games. order cannot matched before expires, the associated fee refunded. the nodes that combine their outputs register match are rewarded fee, incentivize their honest participation the order matching game (see "incentive layer"). this also incentivizes them match many orders quickly possible, since this correlates higher reward over time. the republic protocol also includes atomic swapping protocol that initiated between traders that have had their orders matched. nodes facilitate passing messages (and where possible, setting direct connection between traders) that executes the order. note that traders cannot bound execute the orders, due the limited way which blockchains can communicate (see "attacks and defenses" for information about placing false orders). however, using trader bonds, traders can heavily incentivized faithfully execute orders. point during order matching, even after orders have matched, are republic protocol nodes capable revealing the details order. even malicious adversary capable performing attack, the order fragments are distributed such way that the adversary only able reconstruct the orders (the higher attack percentage they achieve, the higher the rate order reconstruction). ren tokens under assumption (ii), computational nodes must incentivized perform the order matching computations. unlikely that participants will willing run order matching nodes they have financial incentive so, especially when running and maintaining order matching nodes not free. the ren token introduced provide this incentivization. also used pay bonds the registrar, allowing traders and order matching nodes participate the republic dark pool. order fees fees provide decentralized mechanism for the users the system (i.e. traders) remunerate those that are providing the computational power (i.e. nodes) necessary fulfill the needs the users. this necessary under assumption (ii). traders pay order fee, ren, when submitting order. the order expires before matched, the order fee refunded the trader. any node that participates the decentralized computation for order that has been matched receives share the order fee (the shares are calculated evenly splitting the order fee amongst all the participating nodes). the order fee variable, and under assumption (ii), orders with higher order fees will favored the order matching nodes. however, nodes have incentive ignore order, especially since they not know the identity the trader, nor the details the order. the only information available the node the amount ren that they will receive for successfully matching this order. note, all order matches will actually result two payouts each participating node, one from each side the match. bonds orders are secured breaking them down into several order fragments that are distributed throughout the network. adversary attempting reconstruct orders could join the network with large number nodes the hope that they will receive the majority the order fragments (we will see later that this not actually feasible). similarly, adversary could submit large number false orders (that they not intend execute on) attempt probe the legitimate orders. prevent this class sybil attacks, and provide simple identity mechanism, traders and nodes must submit bond ren before they are allowed access the network. this bond associated with single identity the registrar smart contract and the registration status can queried anyone. the bond refunded full when the trader node leaves the network. traders are free submit flexible bond, with higher amounts allowing higher number parallel open orders (the larger the financial bond, the harder perform sybil attack, and more orders can submitted safely). nodes must submit bond ren higher than some globally defined threshold (this threshold can set needed, keep the bond requirement above sufficiently large financial commitment). since this threshold dynamic, nodes can alter the bond amount however they choose but will not able participate unless their bond above the threshold. during verification, the challenger and the provers (usually the trader and group order matching nodes, respectively) put their bond the line. the challenger correct, the prover that unable provide evidence truthful computation loses their bond. likewise, all provers are correct, the challenger loses their bond. this way, the ren bond also acts disincentive attempt cheat. attacks and defenses order reconstruction the security order maintained long its order fragments are not discovered adversary. adversary does acquire (or more) order fragments, the original order can reconstructed. such, important understand the defenses place against such attack. nodes the republic dark pool are partitioned into disjoint sets, where each order share randomly distributed most two nodes any one set. model attack this topology, assume that the adversary has full control over which nodes corrupt (the republic protocol enforces that nodes are actually randomly distributed amongst the disjoint sets, meaning that this assumption provides the adversary with more power than they have reality). the ideal attack scenario would where adversary corrupts all the nodes sets, guaranteeing that order fragments will acquired for every single order. assuming approximately uniform size each pool, the adversary must control the network. note that impossible for adversary control which set their nodes will registered, making this type attack impossible. realistically, when controlling the network, the adversary most likely control the nodes all the disjoint sets. this level control, adversary has probability successfully acquiring each order fragment but must successfully acquire order fragments know the order. can model this binomial distribution. let the number successfully acquired order fragments, the probability acquiring any one order fragment, and the number attempts that the adversary has for any one order fragment. b(n because binomially distributed with probability success. follows that, ckn p)n-i this formulation relies the number disjoint sets, which directly proportional the number nodes the republic dark pool. lim ckn p)n-i the number nodes the republic dark pool grows, the probability that adversary able reconstruct single order approaches this implies that adversary that somehow manages corrupt the network only manages discover the orders. false orders when two orders are matched, both the matching parties learn that there exists some corresponding order the republic dark pool (otherwise match would not have occurred). adversary can take advantage this attempt gain insight into the liquidity the republic dark pool. assume that there are legitimate orders the dark pool when there adversary. simplify the analysis also assume, the favor the adversary, that the adversary knows the maximum price point orders the dark pool (realistically, this impossible and the adversary would have make several guesses). assume that none the legitimate orders have matches, the adversary needs submit false orders (at the maximum price point) discover all orders. compared the fees paid the rest the network, the adversary needs match the financial commitments order fees made the network. assumption (ii) this not realistic, and becomes more and more difficult the republic dark pool used. now assume that each the legitimate orders has exactly one legitimate match, and attacker has way distributing their order fragments such way that their false orders are instead matched with p=% probability. again, this assumption favor the adversary, since they cannot actually know how perform such distribution. for binomial distribution with corresponding probability success the probability exactly successes given trials given p)n-k k!(n k)! for example, and p=., then the probability approximately this shows that only with substantial commitment order fees compared the network whole, along with many favorable assumptions, adversary able gain insight into the liquidity the dark pool. this analysis does not take into account that there limited number orders that can submitted any one trader. submit large quantity false orders trader would also need stake large amount financial power into bond registrations. future versions will also discuss methods which traders must forfeit their bond they not execute false orders. taking these three parts the analysis into account: the high amount order fees required gain insight into the dark pool, the high amount bond required submit that many orders, and the high amount bond sacrificed when false orders are not executed, adversarial assumption (ii) prevents adversaries from being able expose the liquidity the dark pool submitting false orders. sybil attacks the republic protocol, defending against order reconstruction attacks (and false order attacks) requires associating identity with node (or trader). this opens the possibility for adversary forge multiple identities, known sybil attack, attempt subvert the network. protect against this, all nodes and traders are required commit bond order register identity. under the adversarial assumption (), adversaries have limited financial power, can sure that adversary cannot forge large number identities. for malicious nodes, the bond needs discourage the registration large number nodes and the acquisition sufficiently large number order shares during the distribution order shares (see "order reconstruction"). for this method effective, the bond must high enough that adversary cannot register large number nodes, but small enough that honest nodes are still able participate. the bond amount should globally consistent (all nodes must meet the same threshold) but dynamic, account for fluctuations the value the bonded currency. for malicious traders, the bond can used further discourage the submission large number false orders (see "false orders"). this done requiring that trader submit orders that point their registered bond. there linear relationship between the bond amount, and the maximum number orders. therefore, trader that submits bond and allowed open orders could instead submit bond and allowed open orders. the registration bonds will handled the ethereum network, and are incorruptible assumption (). republic terminal introduce web-based decentralized application (dapp) for traders interface with the republic protocol. this real-time terminal provides traders with the capability place, cancel amend orders. users can also view the status and history their orders, visible only themselves. roadmap overlay network (for network-wide communication) ren erc contract atomic swapping contracts and scripts (support for btc, eth, erc, erc) pooling network (for intra-pool communication) registrar contracts (for registering nodes and traders) private public testnet order booking contracts (for opening and closing orders) secret sharing and computation official nodes maintained republic trader terminals (software allowing traders open expire orders and perform atomic swapping) verifiable secret sharing mainnet full specification for republic protocol open-source reference implementation package reference implementation for ubuntu and docker partner nodes maintained republic partners ren powered dao onwards support for more chains including litecoin. implementation scaling solutions for atomic swaps including lighting raiden. support for high frequency trading support for institutions summary the republic protocol able provide decentralized dark pool, allowing traders place different types orders that are matched against others without exposing the details those orders. this made possible the use shamir secret sharing and specialized distributed network that allows nodes perform order matching computations order fragments, instead needing use the orders directly. this way, orders are not revealed nodes within the network [][]. computations are verified through zero-knowledge proofs, and malicious nodes that are discovered are punished forfeiting their registration bond []. this allows traders trust that their orders will correctly matched. the techniques used have been peer-reviewed and have had years security analysis and are well accepted academic cryptography. the ren token introduced incentivization token. used traders offer order fee, from which order matching nodes are rewarded. this way, nodes are paid for their computational efforts and traders are able prioritize important orders issuing larger fees. further secure the system, the ren token used bond traders and order matching nodes, providing identities (while protecting against sybil attacks) that can used rate limit orders and punish malicious order matching nodes. the presence attack the network, where adversary controls the order matching nodes, they are still only capable revealing the orders that flow through the system, without the ability control which are being revealed. attempt probe orders submitting false orders also impractical attack surface, due the financial commitment required issue the required number orders. references shamir, adi (). "how share secret". communications the acm (): asharov, gilad lindell, yehuda. (). full proof the bgw protocol for perfectly-secure multiparty computation. electronic colloquium computational complexity (eccc). s---. gennaro, rosario rabin, michael. (). simplified vss and fast-track multiparty computations with applications threshold cryptography. pro podc. ./.. goldreich, micali wigderson. "how play any mental game completeness theorem for protocols with honest majority". stoc blakley, (). "safeguarding cryptographic keys". proceedings the national computer conference seth gilbert and nancy lynch, "brewer's conjecture and the feasibility consistent, available, partition-tolerant web services", acm sigact news, volume issue (), pg. introduction dark pools, "lvis picardo".