cryptonote nicolas van saberhagen october introduction "bitcoin" has been successful implementation the concept electronic cash. both professionals and the general public have come appreciate the convenient combination public transactions and proof-of-work trust model. today, the user base electronic cash growing steady pace; customers are attracted low fees and the anonymity provided electronic cash and merchants value its predicted and decentralized emission. bitcoin has effectively proved that electronic cash can simple paper money and convenient credit cards. unfortunately, bitcoin suffers from several deficiencies. for example, the system's distributed nature inflexible, preventing the implementation new features until almost all the network users update their clients. some critical flaws that cannot fixed rapidly deter bitcoin's widespread propagation. such inflexible models, more efficient roll-out new project rather than perpetually fix the original project. this paper, study and propose solutions the main deficiencies bitcoin. believe that system taking into account the solutions propose will lead healthy competition among different electronic cash systems. also propose our own electronic cash, "cryptonote", name emphasizing the next breakthrough electronic cash. bitcoin drawbacks and some possible solutions traceability transactions privacy and anonymity are the most important aspects electronic cash. peer-to-peer payments seek concealed from third party's view, distinct difference when compared with traditional banking. particular, okamoto and ohta described six criteria ideal electronic cash, which included "privacy: relationship between the user and his purchases must untraceable anyone" []. from their description, derived two properties which fully anonymous electronic cash model must satisfy order comply with the requirements outlined okamoto and ohta: untraceability: for each incoming transaction all possible senders are equiprobable. unlinkability: for any two outgoing transactions impossible prove they were sent the same person. unfortunately, bitcoin does not satisfy the untraceability requirement. since all the transactions that take place between the network's participants are public, any transaction can unambiguously traced unique origin and final recipient. even two participants exchange funds indirect way, properly engineered path-finding method will reveal the origin and final recipient. also suspected that bitcoin does not satisfy the second property. some researchers stated ([, that careful blockchain analysis may reveal connection between the users the bitcoin network and their transactions. although number methods are disputed [], suspected that lot hidden personal information can extracted from the public database. bitcoin's failure satisfy the two properties outlined above leads conclude that not anonymous but pseudo-anonymous electronic cash system. users were quick develop solutions circumvent this shortcoming. two direct solutions were "laundering services" and the development distributed methods both solutions are based the idea mixing several public transactions and sending them through some intermediary address; which turn suffers the drawback requiring trusted third party. recently, more creative scheme was proposed miers al. []: "zerocoin". zerocoin utilizes cryptographic one-way accumulators and zero-knoweldge proofs which permit users "convert" bitcoins zerocoins and spend them using anonymous proof ownership instead explicit public-key based digital signatures. however, such knowledge proofs have constant but inconvenient size about (based today's bitcoin limits), which makes the proposal impractical. authors admit that the protocol unlikely ever accepted the majority bitcoin users []. the proof-of-work function bitcoin creator satoshi nakamoto described the majority decision making algorithm "onecpu-one-vote" and used cpu-bound pricing function (double sha-) for his proof-of-work scheme. since users vote for the single history transactions order [], the reasonableness and consistency this process are critical conditions for the whole system. the security this model suffers from two drawbacks. first, requires the network's mining power under the control honest users. secondly, the system's progress (bug fixes, security fixes, etc...) require the overwhelming majority users support and agree the changes (this occurs when the users update their wallet software) [].finally this same voting mechanism also used for collective polls about implementation some features []. this permits conjecture the properties that must satisfied the proof-of-work pricing function. such function must not enable network participant have significant advantage over another participant; requires parity between common hardware and high cost custom devices. from recent examples [], can see that the sha- function used the bitcoin architecture does not posses this property mining becomes more efficient gpus and asic devices when compared high-end cpus. therefore, bitcoin creates favourable conditions for large gap between the voting power participants violates the "one-cpu-one-vote" principle since gpu and asic owners posses much larger voting power when compared with cpu owners. classical example the pareto principle where system's participants control more than the votes. one could argue that such inequality not relevant the network's security since not the small number participants controlling the majority the votes but the honesty these participants that matters. however, such argument somewhat flawed since rather the possibility cheap specialized hardware appearing rather than the participants' honesty which poses threat. demonstrate this, let take the following example. suppose malevolent individual gains significant mining power creating his own mining farm through the cheap hardware described previously. suppose that the global hashrate decreases significantly, even for moment, can now use his mining power fork the chain and double-spend. shall see later this article, not unlikely for the previously described event take place. irregular emission bitcoin has predetermined emission rate: each solved block produces fixed amount coins. approximately every four years this reward halved. the original intention was create limited smooth emission with exponential decay, but fact have piecewise linear emission function whose breakpoints may cause problems the bitcoin infrastructure. when the breakpoint occurs, miners start receive only half the value their previous reward. the absolute difference between and btc (projected for the year may seem tolerable. however, when examining the btc drop that took place november felt inappropriate for significant number members the mining community. figure shows dramatic decrease the network's hashrate the end november, exactly when the halving took place. this event could have been the perfect moment for the malevolent individual described the proof-of-work function section carry-out double spending attack []. fig. bitcoin hashrate chart (source: http://bitcoin.sipa.be) hardcoded constants bitcoin has many hard-coded limits, where some are natural elements the original design (e.g. block frequency, maximum amount money supply, number confirmations) whereas other seem artificial constraints. not much the limits, the inability quickly changing them necessary that causes the main drawbacks. unfortunately, hard predict when the constants may need changed and replacing them may lead terrible consequences. good example hardcoded limit change leading disastrous consequences the block size limit set this limit was sufficient hold about standard transactions. early this limit had almost been reached and agreement was reached increase the limit. the change was implemented wallet version and ended with -blocks chain split and successful double-spend attack []. while the bug was not the bitcoin protocol, but rather the database engine could have been easily caught simple stress test there was artificially introduced block size limit. constants also act form centralization point. despite the peer-to-peer nature bitcoin, overwhelming majority nodes use the official reference client developed small group people. this group makes the decision implement changes the protocol and most people accept these changes irrespective their "correctness". some decisions caused heated discussions and even calls for boycott [], which indicates that the community and the developers may disagree some important points. therefore seems logical have protocol with user-configurable and self-adjusting variables possible way avoid these problems. bulky scripts the scripting system bitcoin heavy and complex feature. potentially allows one create sophisticated transactions [], but some its features are disabled due security concerns and some have never even been used []. the script (including both senders' and receivers' parts) for the most popular transaction bitcoin looks like this: dup hash equalverify checksig. the script bytes long whereas its only purpose check the receiver possess the secret key required verify his signature. the cryptonote technology now that have covered the limitations the bitcoin technology, will concentrate presenting the features cryptonote. untraceable transactions this section propose scheme fully anonymous transactions satisfying both untraceability and unlinkability conditions. important feature our solution its autonomy: the sender not required cooperate with other users trusted third party make his transactions; hence each participant produces cover traffic independently. literature review our scheme relies the cryptographic primitive called group signature. first presented chaum and van heyst [], allows user sign his message behalf the group. after signing the message the user provides (for verification purposes) not his own single public this so-called "soft limit" the reference client restriction for creating new blocks. hard maximum possible blocksize was key, but the keys all the users his group. verifier convinced that the real signer member the group, but cannot exclusively identify the signer. the original protocol required trusted third party (called the group manager), and was the only one who could trace the signer. the next version called ring signature, introduced rivest al. [], was autonomous scheme without group manager and anonymity revocation. various modifications this scheme appeared later: linkable ring signature allowed determine two signatures were produced the same group member, traceable ring signature limited excessive anonymity providing possibility trace the signer two messages with respect the same metainformation (or "tag" terms []). similar cryptographic construction also known ad-hoc group signature emphasizes the arbitrary group formation, whereas group/ring signature schemes rather imply fixed set members. for the most part, our solution based the work "traceable ring signature" fujisaki and suzuki []. order distinguish the original algorithm and our modification will call the latter one-time ring signature, stressing the user's capability produce only one valid signature under his private key. weakened the traceability property and kept the linkability only provide one-timeness: the public key may appear many foreign verifying sets and the private key can used for generating unique anonymous signature. case double spend attempt these two signatures will linked together, but revealing the signer not necessary for our purposes. definitions elliptic curve parameters our base signature algorithm chose use the fast scheme eddsa, which developed and implemented d.j. bernstein al. []. like bitcoin's ecdsa based the elliptic curve discrete logarithm problem, our scheme could also applied bitcoin future. common parameters are: prime number; element -/; elliptic curve equation; base point; (x, -/); prime order the base point; cryptographic hash function deterministic hash function e(fq e(fq terminology enhanced privacy requires new terminology which should not confused with bitcoin entities. private ec-key standard elliptic curve private key: number public ec-key standard elliptic curve public key: point ag; one-time keypair pair private and public ec-keys; private user key pair (a, two different private ec-keys; tracking key pair (a, private and public ec-key (where and b); public user key pair (a, two public ec-keys derived from (a, b); standard address representation public user key given into human friendly string with error correction; truncated address representation the second half (point public user key given into human friendly string with error correction. the transaction structure remains similar the structure bitcoin: every user can choose several independent incoming payments (transactions outputs), sign them with the corresponding private keys and send them different destinations. contrary bitcoin's model, where user possesses unique private and public key, the proposed model sender generates one-time public key based the recipient's address and some random data. this sense, incoming transaction for the same recipient sent one-time public key (not directly unique address) and only the recipient can recover the corresponding private part redeem his funds (using his unique private key). the recipient can spend the funds using ring signature, keeping his ownership and actual spending anonymous. the details the protocol are explained the next subsections. unlinkable payments classic bitcoin addresses, once being published, become unambiguous identifier for incoming payments, linking them together and tying the recipient's pseudonyms. someone wants receive "untied" transaction, should convey his address the sender private channel. wants receive different transactions which cannot proven belong the same owner should generate all the different addresses and never publish them his own pseudonym. public alice private bob's key bob's addr bob carol bob's key bob's addr fig. traditional bitcoin keys/transactions model. propose solution allowing user publish single address and receive unconditional unlinkable payments. the destination each cryptonote output (by default) public key, derived from recipient's address and sender's random data. the main advantage against bitcoin that every destination key unique default (unless the sender uses the same data for each his transactions the same recipient). hence, there such issue "address reuse" design and observer can determine any transactions were sent specific address link two addresses together. private public one-time key alice one-time key bob one-time key carol bob's key bob's address fig. cryptonote keys/transactions model. first, the sender performs diffie-hellman exchange get shared secret from his data and half the recipient's address. then computes one-time destination key, using the shared secret and the second half the address. two different ec-keys are required from the recipient for these two steps, standard cryptonote address nearly twice large bitcoin wallet address. the receiver also performs diffie-hellman exchange recover the corresponding secret key. standard transaction sequence goes follows: alice wants send payment bob, who has published his standard address. she unpacks the address and gets bob's public key (a, b). alice generates random and computes one-time public key (ra)g alice uses destination key for the output and also packs value (as part the diffie-hellman exchange) somewhere into the transaction. note that she can create other outputs with unique public keys: different recipients' keys (ai imply different even with the same transaction public key sender's random data (a, receiver's public key output amount (ra)g destination key fig. standard transaction structure. alice sends the transaction. bob checks every passing transaction with his private key (a, b), and computes (ar)g alice's transaction for with bob the recipient was among them, then arg and bob can recover the corresponding one-time private key: (ar) xg. can spend this output any time signing transaction with transaction one-time private key public key (ar) receiver's private key output (a, amount one-time public key (ar)g destination key fig. incoming transaction check. result bob gets incoming payments, associated with one-time public keys which are unlinkable for spectator. some additional notes: when bob "recognizes" his transactions (see step practically uses only half his private information: (a, b). this pair, also known the tracking key, can passed third party (carol). bob can delegate her the processing new transactions. bob doesn't need explicitly trust carol, because she can't recover the one-time secret key without bob's full private key (a, b). this approach useful when bob lacks bandwidth computation power (smartphones, hardware wallets etc.). case alice wants prove she sent transaction bob's address she can either disclose use any kind zero-knowledge protocol prove she knows (for example signing the transaction with r). bob wants have audit compatible address where all incoming transaction are linkable, can either publish his tracking key use truncated address. that address represent only one public ec-key and the remaining part required the protocol derived from follows: (b) and (b)g. both cases every person able "recognize" all bob's incoming transaction, but, course, none can spend the funds enclosed within them without the secret key one-time ring signatures protocol based one-time ring signatures allows users achieve unconditional unlinkability. unfortunately, ordinary types cryptographic signatures permit trace transactions their respective senders and receivers. our solution this deficiency lies using different signature type than those currently used electronic cash systems. will first provide general description our algorithm with explicit reference electronic cash. one-time ring signature contains four algorithms: (gen, sig, ver, lnk): gen: takes public parameters and outputs ec-pair (p, and public key sig: takes message set public keys {pi }i=s pair (ps and outputs signature and set {ps ver: takes message set signature and outputs "true" "false". lnk: takes set {ii signature and outputs "linked" "indep". the idea behind the protocol fairly simple: user produces signature which can checked set public keys rather than unique public key. the identity the signer indistinguishable from the other users whose public keys are the set until the owner produces second signature using the same keypair. private keys *** *** ring signature sign public keys *** *** verify fig. ring signature anonymity. gen: the signer picks random secret key and computes the corresponding public key xg. additionally computes another public key xhp which will call the "key image". sig: the signer generates one-time ring signature with non-interactive zero-knowledge proof using the techniques from []. selects random subset from the other users' public keys his own keypair (x, and key image let despite its simplicity this approach covers every possible case: multi-/threshold signature. for the bitcoin-style "m-out-of-n" multi-signature (i.e. the receiver should provide least (for clarity are using common algebraic notation). the weighted threshold signature (some keys can more important than other) could expressed and scenario where the master-key corresponds max(m easy show that any sophisticated case can expressed with these operators, i.e. they form basis. password protection. possession secret password equivalent the knowledge private key, deterministically derived from the password: kdf(s). hence, receiver can prove that knows the password providing another signature under the key the sender simply adds the corresponding public key his own output. note that this method much more secure than the "transaction puzzle" used bitcoin [], where the password explicitly passed the inputs. degenerate cases. means that anybody can spend the money; marks the output not spendable forever. the case when the output script combined with public keys too large for sender, can use special output type, which indicates that the recipient will put this data his input while the sender provides only hash it. this approach similar bitcoin's "pay-to-hash" feature, but instead adding new script commands handle this case the data structure level. conclusion have investigated the major flaws bitcoin and proposed some possible solutions. these advantageous features and our ongoing development make new electronic cash system cryptonote serious rival bitcoin, outclassing all its forks. nobel prize laureate friedrich hayek his famous work proves that the existence concurrent independent currencies has huge positive effect. each currency issuer (or developer our case) trying attract users improving his product. currency like commodity: can have unique benefits and shortcomings and the most convenient and trusted currency has the greatest demand. suppose had currency excelling bitcoin: means that bitcoin would develop faster and become better. the biggest support open source project would come from its own users, who are interested it. not consider cryptonote full replacement bitcoin. the contrary, having two (or more) strong and convenient currencies better than having just one. running two and more different projects parallel the natural flow electronic cash economics. nicolas van saberhagen digitally signed nicolas van saberhagen dn: cn=nicolas van saberhagen, email=nvsaberhagen@gmail.co date: +'' security shall give proof for our one-time ring signature scheme. some point coincides with the parts the proof [], but decided rewrite them with reference rather than force reader rush about from one paper another. these are the properties established: linkability. given all the secret keys {xi }ni= for set impossible produce valid signatures sn+ such that all them pass the lnk phase (i.e. with different key images this property implies the double spending protection the context cryptonote. exculpability. given set most corresponding private keys (excluding and the image the keys impossible produce valid signature with this property implies theft protection the context cryptonote. unforgeability. given only public keys set impossible produce valid signature anonymity. given signature and the corresponding set impossible determine the secret index the signer with probability linkability theorem our one-time ring signature scheme linkable under the random oracle model. proof. suppose adversary can produce valid signatures with key images for any n]. since least one (pi for every consider the corresponding signature (i, ver(s) "true", this means that (pi (m, mod the first two equalities imply logg loghp (pi loghp (pi where loga informally denotes the discrete logarithm the base note that loghp (pi implies that all are uniquely determined. the third equality forces the adversary find pre-image succeed the attack, event whose probability considered negligible. exculpability theorem our one-time ring signature scheme exculpable under the discrete logarithm assumption the random oracle model. proof. suppose adversary can produce valid signature (i, with (pj with given {xi n}. then, can construct algorithm which solves the discrete logarithm problem e(fq suppose inst (g, e(fq given instance the dlp and the goal get such that sg. using the standard technique (as []), simulates the random and signing oracles and makes the adversary produce two valid signatures with the set (i, and (i, since (pj both signatures compute loghp (pj outputs because -rj -cj mod and unforgeability has been shown that unforgeability just implication both linkability and exculpability. theorem one-time ring signature scheme linkable and exculpable, then unforgeable. proof. suppose adversary can forge signature for given set .). consider all valid signatures (produced the honest signers) for the same message and the set there are two possible cases: {ii }ni= which contradicts exculpability. {ii }ni= which contradicts linkability. anonymity theorem our one-time ring signature scheme anonymous under the decisional diffiehellman assumption the random oracle model. proof. suppose adversary can determine the secret index the signer with probability then, can construct algorithm which solves the decisional diffie-hellman problem e(fq with the probability let inst e(fq the instance ddh and the goal determine logg logg feeds the adversary with valid signature (i, .), where and and simulates oracle returning for query (pj the adversary returns his guess for the index (pi then returns (for "yes") otherwise random the probability the right choice computed []: +pr inst ddh)-pr inst ddh) +pr inst ddh)+ inst ddh)*pr )-pr inst ddh)-pr inst ddh)*pr fact, the result should reduced the probability collision but this value considered negligible. notes the hash function defined deterministic hash function e(fq e(fq none the proofs demands ideal cryptographic hash function. it's main purpose get pseudo-random base for image key xhp (xg) some determined way. with fixed base the following scenario possible: alice sends two standard transactions bob, generating one-time tx-keys: a)g+ and a)g bob recovers corresponding one-time private tx-keys and and spends the outputs with valid signatures and images keys and now alice can link these signatures, checking the equality (hs a)-hs a))g the problem that alice knows the linear correlation between public keys and and case fixed base she also gets the same correlation between key images and replacing with (xg which does not preserve linearity, fixes that flaw. for constructing deterministic use algorithm presented []. xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx references http://bitcoin.org. https://en.bitcoin.it/wiki/category:mixing services. http://blog.ezyang.com///secure-multiparty-bitcoin-anonymization. https://bitcointalk.org/index.php?topic=.. http://msrvideo.vo.msecnd.net/rmcvideos//dl/.pdf. https://github.com/bitcoin/bips/blob/master/bip-.mediawiki#specification. https://github.com/bitcoin/bips/blob/master/bip-.mediawiki#backwards compatibility. https://en.bitcoin.it/wiki/mining hardware comparison. https://github.com/bitcoin/bips/blob/master/bip-.mediawiki. http://luke.dashjr.org/programs/bitcoin/files/charts/branches.html. https://bitcointalk.org/index.php?topic=.. https://en.bitcoin.it/wiki/contracts. https://en.bitcoin.it/wiki/script. http://litecoin.org. martin abadi, michael burrows, and ted wobber. moderately hard, memory-bound functions. ndss, ben adida, susan hohenberger, and ronald rivest. ad-hoc-group signatures from hijacked keypairs. dimacs workshop theft e-commerce, man au, sherman chow, willy susilo, and patrick tsang. short linkable ring signatures revisited. europki, pages daniel bernstein, niels duif, tanja lange, peter schwabe, and bo-yin yang. high-speed high-security signatures. cryptographic engineering, ():-, david chaum and eugene van heyst. group signatures. eurocrypt, pages fabien coelho. exponential memory-bound functions for proof work protocols. iacr cryptology eprint archive, ronald cramer, ivan damgard, and berry schoenmakers. proofs partial knowledge and simplified design witness hiding protocols. crypto, pages cynthia dwork, andrew goldberg, and moni naor. memory-bound functions for fighting spam. crypto, pages eiichiro fujisaki. sub-linear size traceable ring signatures without random oracles. ctrsa, pages eiichiro fujisaki and koutarou suzuki. traceable ring signature. public key cryptography, pages jezz garzik. peer review "quantitative analysis the full bitcoin transaction graph". https://gist.github.com/, joseph liu, victor wei, and duncan wong. linkable spontaneous anonymous group signature for hoc groups (extended abstract). acisp, pages joseph liu and duncan wong. linkable ring signatures: security models and new schemes. iccsa (), pages ian miers, christina garman, matthew green, and aviel rubin. zerocoin: anonymous distributed e-cash from bitcoin. ieee symposium security and privacy, pages micha ober, stefan katzenbeisser, and kay hamacher. structure and anonymity the bitcoin transaction graph. future internet, ():-, tatsuaki okamoto and kazuo ohta. universal electronic cash. crypto, pages marc santamaria ortega. the bitcoin transaction graph anonymity. master's thesis, universitat oberta catalunya, june colin percival. stronger key derivation via sequential memory-hard functions. presented bsdcan', may fergal reid and martin harrigan. analysis anonymity the bitcoin system. corr, abs/., ronald rivest, adi shamir, and yael tauman. how leak secret. asiacrypt, pages dorit ron and adi shamir. quantitative analysis the full bitcoin transaction graph. iacr cryptology eprint archive, meni rosenfeld. analysis hashrate-based double-spending. maciej ulas. rational points certain hyperelliptic curves over finite fields. bulletin the polish academy sciences. mathematics, ():-, qianhong wu, willy susilo, mu, and fangguo zhang. hoc group signatures. iwsec, pages xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx