supercomputer organized network mining sonm.io sonm (supercomputer organized network mining) distributed computing power exchange decentralized operating system for fog computing www.sonm.io google groups slack reddit telegram twitter bitcointalk medium facebook github table content introduction what sonm sonm use cases ... scientific projects ... site hosting ... game server use-cases ... neural networks projects ... rendering video and computer graphics. cost-efficiency for the end-clients sonm technology ioe, iot and fog computing world computer world computer general architecture infrastructure sonm world computer implementation scheme world computer's infrastructure service (wc iaas) ... slave messaging framework slave api ... the smart contract system sonm miner-hub interaction solution sonm client-hub interaction solution ... sonm 'blockchain-government' expansion policy ... sonm client-hub content delivery method sosna nutshell what sosna applications and containerization slaves their services masters and gateways grid core ... intercommunication services world computer saas and its api results verification safety and security implementation sonm github repositories and api ... example how the sonm marketplace works ... interface prototype ... api for software developers development roadmap modules' implementation roadmap dissemination the development process information sonm comparison other grid computing projects sonm comparison golem network sonm comparison iex.ec project sonm comparison elastic project differences from gridcoin, foldingcoin and curecoin compatibility and integration with other decentralized on-demand computing services comparison summary references introduction what sonm sonm decentralized worldwide fog supercomputer for general purpose computing from site hosting scientific calculations. sonm company effective way solve worldwide problem creating multi-purpose decentralized computational power market. unlike widespread centralized cloud services, sonm project implements fog computing[] structure decentralized pool devices, all which are connected the internet (iot internet everything). iot, important part the available computational power the world, one the key directions work for the sonm project. (see further, chapter use cost-efficient fog computing instead costly cloud structure, there more need pay advance for private and monopolized cloud computing such with amazon, microsoft, google cloud, etc. moreover, since sonm fully decentralized, there single authority that regulates computing resource distribution. sonm has hybrid architecture, and therefore supports any kind computational task without facing ethereum's "out gas" problem. from technical point view, sonm top layer underlying technologies btsync for data transfer, cocaine open source paas technology decentralized computing platform, and ethereum smart contracts consensus system. there central control behind the system and backdoors escape hatches. several existing technologies were combined and modified our developers make new sosna technology. terms providing distributed value for investors, sonm uses its own token snm, based ethereum's blockchain. (click read sonm token description business overview). almost every online service needs computational power for their product, including websites, online shops, mmorpgs, companies using large databases, and apps. everyone the world using the internet for business will have option use sonm's tokens order solve their computing power issues. moreover, all internet users will able use sonm receive passive income providing their computational resources for rent. this disruptive migration from centralized cloud computing decentralized fog computing will not happen quickly: will long transition, but the results will positive. sonm token price calculations show decent roi for the project's early adopters. sonm token price supported stable market demand for computing power and ability provide more competitive prices than traditional cloud computing services. sonm token holders earn percentage from transactions and operations fees (buy-sell-develop). direct analogue holding shares and receiving dividends from operational profit. you are miner computational power owner, sonm great resource using your equipment for calculations and processing real tasks. sonm fog computing platform fresh start for solo mining. there are lots miners with gpu mining farms that have become useless due the increased proof-of-work mining difficulty (even for altcoins). recent years, being part mining pool has been the only way guarantee profit from mining. but even the process, this profit small that often does not cover the cost electricity spent for pow mining. sonm platform the efficient solution for miners. (click read chapter goverance bo) with sonm you will stop burning your kilowatts for pow mining and start serving calculations for everyone the network. for those who are confused the difficulty bomb ethereum (and many others) pos-migration each miner suggested most profitable applications and tasks for their hardware. cpu, gpu, asic, and even gaming consoles and smartphones can used for sonm fog computing. all you need set mining client application and run it. sonm multi-agent system, each user will able use intelligent agents and smart-contracts maximize profit. you can set your automatization level choosing each project manually with one-click settings. the sonm system will then automatically pick the most profitable project for your equipment, work with and receive payouts your personal ethereum address. sonm easy setup and use, both for miners and computing power buyers. there need have advanced skills hire specialist you use sonm our self-learning system finds the most profitable task for miner's equipment (and vice versa for buyers). the network also runs this task with need set and support dedicated server. sonm self-learning and totally safe for its users. our system supports anonymity tools like proxy, vpn tor, but can't used hacker dream toolkit. intelligent agents are able self-educate using neural networks and keep malicious users out the system, while the same time providing the most efficient task solution both for miners and computational power buyers. sonm computing power exchange the free market, malicious hubs and users will shortly ignored buyers and miners due their bad reputation. (link safety and security) expect sonm the smartest, cheapest and largest decentralized computing system with strong rules regarding morality and loyalty. this largely due sonm's reputation system and self-learning intelligent agents. scheme the network miner miner miner miner worlds hubs servers buyer buyer buyer buyer buyer buyer buyer sonm use cases have experience with the limitations boinc itself scientific software and supports only c++/ fortran/python, therefore not flexible. started using more advanced solutions like cocaine and docker container (which support more languages, including java, node.js, and etc.) decided that will the other way, and will focus more not just the distributed calculations field like boinc does, but more fog computing. this way, can build more universal platform not only for scientific calculations. the flexibility the sonm platform and its multi-purposeness knit poe for non-deterministic task which unique technology owned sonm (proof execution). ... scientific projects sonm network can used run essential scientific calculations requiring massive computing power, for example: social statistics bioinformatics drug development climate prediction aerodynamic calculations modelling meteor trajectory modelling ... site hosting the sonm network can used host websites without depending centralized cloud services (aws azure google cloud etc) hosting providers. use cocaine open source paas technology implement virtual machines recognized servers, with ipfs and other decentralized data storage solutions underlying layer. website owners can also use our code snippets their websites collect payments sonm ether tokens and automatically pay for hosting, according market value. important look into tor operation (the onion router). tor uses pseudodomains .onion, domain names look like this http://oshuzjrnpzfaiq.onion/ domain names the .onion domain are generated based open random key server and consist symbols. these websites are actually not websites all, but are fact so-called hidden services. sonm going implement such services, which one application could hosting websites. storage and operation will decentralized. realization will the form free access service data from the internet, similar the tor system, limiting the access. the structure the service depends directly the application running the container. the address bar the service may look like name,site.sonm probably just %name%.sonm (which would the name the service that finds hidden node using the locator and loads the website). this can used for additional identification services the sonm network and granting them additional properties. ... game server use-cases there are lots mmo games using in-game currencies. our technology offers solution for deploying game servers the sonm network. furthermore, game currencies can easily exchanged for sonm tokens and back using our out-of-the-box solution. addition, gamers can support their favorite game servers providing their computing resources exchange for tokens in-game currency. ... neural networks projects neural networks are powerful technology becoming more that has become more widespread recent years. neuro-networking projects require massive computing power for their deployment, learning and tuning. sonm system provides cost-efficient and effective solution for neural network implementation. ... rendering video and computer graphics. rendering cgi can distributed over the sonm network between large number computing devices and can processed very quickly (in matter minutes). provide much faster processing for buyers' (clients') cgi computing projects due sonm's infrastructural flexibility. compared one nvidia unit rental from amazon (for example, for hours), buyer can use the sonm network rent nvidia units with total task processing time minutes for each them. allows for use more efficiently distributed architecture and parallel computing. unlike cloud computing services, sonm can provide buyers any rental time, any computing architecture and any computing network structure. cost-efficiency for the end-clients using the sonm platform will provide beneficial conditions due few important factors: lowering the bandwidth costs willingness miners use their hardware the market will saturated with new sellers computational power, which will facilitate drop prices the lack centralized servers which require additional infrastructure costs maintain sonm technology nowadays the popular internet things concept[] (iot) gives way the new emerging concept called internet everything (ioe). internet everything the unification all computing resources humanity. has core differences with currently widespread centralized cloud computing technology. order develop system implementing this disruptive idea, the sonm team used the most efficient and proven pp, distributed computing and blockchain technologies. sonm not monolith product, it's top layer built underlying protocols and technologies: ethereum, btsync, docker, cocaine, etc. (by the way, bitcoin creator(s) also combined existing technologies (cryptography, nodes network, git, proof-of-work concept, etc) bring brand new independent decentralized currency/payment system the world.) ioe, iot and fog computing before describing the future "world computer" architecture need mention some details regarding ioe, iot and fog computing concepts. nowadays, the concept internet things (iot) commonly known. according the iot concept, thing any natural artificial object able have address and transfer data over the network. internet everything (ioe) represents further development iot concept: "cisco defines the internet everything (ioe) the networked connection people, process, data, and things. the benefit ioe derived from the compound impact connecting people, process, data, and things, and the value this increased connectedness creates "everything" comes online. ioe creating unprecedented opportunities for organizations, individuals, communities, and countries realize dramatically greater value from networked connections among people, process, data, things[]." this definition emphasizes very important aspect ioe, which distinguishes ioe from iot: namely, the socalled "network effect", formulated james macaulay from the cisco ibsg consulting department. the term "network effect" refers decentralization organizations included ioe. these kinds decentralized systems are being developed groups so-called "crypto-anarchists" (people implementing decentralized systems using cryptographic methods[]). way implement the iot will presented the form our own operating system, built coreos implementing sonm's functionality. any device can support such system and when connected, can act computational unit for the sonm fog. furthermore, this document are referring decentralized organizations computing machine resources, and not decentralized human organizations. most the data the current iot state development being processed private centralized clouds i.e. using cloud technologies, like aws, microsoft azure, etc. centralized cloud technologies have several weaknesses and can't used ioe. some things ioe can create massive amounts data. cisco gives the example the jet engine, which creates about terabytes its activity data minutes. transferring this data the cloud, and receiving the results data processing, requires adequate network bandwidth, takes significant amounts time and can have delays. furthermore, private centralized cloud systems potentially can compromised, influenced from the outside, attacked have failures, and also have lower computing power than fog computing solutions. how can these problems solved? fog computing shifts the cloud computing paradigm and moves the lower level the network. instead processing some task using the cloud, can use all the devices surrounding us: personal computers, smartphones, even coffee makers and traffic lights. cisco's ginny nichols originally coined the term fog computing. the metaphor comes from the fact that fog cloud that close the ground, and thus fog computing concentrates processing the edge the network. fog computing, data processing and applications are concentrated devices the network edge rather than existing almost entirely the cloud. that concentration means that data can processed locally smart devices rather than being sent the cloud for processing[]. thus, instead centralized cloud solutions, can use fog computing systems, getting the computational power every internet-connected device, with decentralization advantages like independence from any centralized service and full protection against possible failures, etc. world computer the so-called "computing fog" the layer computational resources able process some kind task. however, aside from computing fog, the system also involves its users setting computational tasks, and some middleware distributing these tasks among the fog resources, which then returns the result the calculations. this system called "world computer". the first mention the world computer term was vitalik buterin's project ethereum. implemented using blockchain technology's ability include executable code into transaction blocks, every miner's machine automatically executes this code. thereby, ethereum fact the world computer working like turing machine[], with blockchain used state register tape. this also implies that due the fact that every program must run every machine the ethereum network, very costly and only limited range tasks can run using this platform. turing machine there are other projects which are developing decentralized world computer (golem, iex.ec and others). important note that all them are being implemented using the same principles ethereum. they also have the same problem: excessive parallelization leading high costs operations. this caused the absence any control centers managing task processing real time that can stop after receiving the desired result. this turn leads running parallel asynchronous processes. fact, these projects can't provide the functionality which any usual personal computer has nowadays. the sonm team has much experience developing world computer functional concept able process any task, the standard fully functional computer. sonm schematic pp-message m-a-s e.t.c world computer general architecture infrastructure the architecture single computer the presence standard components such cpu, motherboard, bios, bus, hard drive, gpu, ram memory, etc for our world computer architecture, decided follow the modular way all the personal computers are built. world computer the scheme has similar elements: cpu, bios, bus for data exchange, plugins board (connectable devices), peripheral devices, graphics card, etc. hard disk drive analogue will implemented using decentralized data storage solutions: ipfs (interplanetary file system), storj, sia, etc. the first component the system the processor. sonm world computer's processor represented the set independent hub nodes distributing tasks, assembling calculations results, keeping statistics and providing uninterrupted operation the system.each hub node the figure equivalent the processor's core (but not equivalent the processor). there can unlimited number hubs, and they can easily included and excluded from the system. hubs not process calculations directly, but rather they represent very important part the system, providing management and support (just like computer's processor regulates and controls the operation gpu, and able process sophisticated high-loaded parallel computations). hubs are implemented using cocaine 'gateway nodes'. the next element the system equivalent pc's gpu. comprised fog computing miners' processing tasks computations the sonm system. the communication bus for transferring data and messages the network represented communications module. (bitmessage/slave) buyers are equivalent peripheral devices, usually used for information input. the plugins board allows the system constantly expand and gain power connecting external compatible networks, for example, any grid network. bios important part the sonm system, represented ethereum blockchain our decentralized computer model. mentioned earlier, ethereum systems offer high reliability, but perform only basic operations due its architecture this why ethereum the most suitable candidate for the world computer bios. finally, know, itself not worth anything without operating system. our global computer also requires os, and have ready. sonm world computer implementation scheme consider the details this world computer architecture implementation figure. you can see, this architecture includes lots linked elements. clients message bus plugins inputs processor/hub data flow message flow message bus bios/blockchain data flow miners fog world computer's infrastructure service (wc iaas) the previous section looked the overall architecture the system. the infrastructure part the system handled messaging framework and smart contract system (blockchain government). ... slave messaging framework currently, the messaging framework represented the slave messaging protocol. (https://github.com/ cocaine/cocaine-core/wiki/protocol) slave api common types object ::= tuple ::= ]...]) general format every message messagepack-ed tuple three fields: channelid messageid message ::= ::= ::= message service slot number you're going call. every service has its own set slots which can inspected resolving this service via the locator. channel way multiplex multiple data flows inside single tcp session. channel generated the caller. tuple slot-specific payload. the usage slave will covered more thoroughly coming versions. ... the smart contract system ... blockchain government blockchain government organization (speaking metaphorically) consisting court, dao, registry, factory enterprises (and example said enterprise). the point blockchain government provide simultaneous work process for all enterprises registered such system, motivating them pay "taxes" the dao higher order, receiving court protection for their enterprise exchange, well protection against unfair partners the market. sonm uses the following scheme for smart contracts realize the pattern "blockchain government" https://github.com/sonm-io/contracts-scheme smart contract prototypes can found here: https://github.com/sonm-io/forge migrations regapp dao (react.js) hubwallet factory whitelist payoutapp hubwallet structure contracts: migrations(standard) sonm token dao(standard) hub wallet factory hub wallet whitelist prototype regapp (simple react/webpack app work with hub registrations) payout app (already implemented for dd@h project) https://github.com/sonm-io/drugdiscovery-token abstract outline the smart-contracts system which will implemented sonm network presented. more info about network and contracts interaction can found the whitepaper simple data flow hub before the hub starts paying out tokens miners and receiving payments from buyers, must create hub wallet simple contract with fixed amount frozen funds. the hub caught cheating, dao can initiate the process blacklisting this hub and expropriate its frozen funds. those expropriated funds will also frozen the dao account for some specified time. this protect against malicious decisions the dao: tokens can drop price during the freeze, therefore there motivation 'raskulachivat' (expropriate) every hub. hub factory hub wallet can created only hub wallet factory (which actually simplified replication factory), which creates new hub wallet contract and registers the 'whitelist' contract. whitelist whitelist contract registry contract containing info about hubs and their statuses. all hub wallets created hub wallet factory are registered this contract. supposed simple registry with special mapping for 'trusted' hubs. initially, 'trusted' hubs will checked sonm developers manually official sonm hubs. later, it's supposed also rating list everyone could check the hub and rate (betting some amount sonm tokens prevent rating fraud). regapp regapp use the react.js application which simple web application (web-page) with the purpose user friendly hub registration process. payout app payout app application process miners' token payout mechanism operations. for now implemented work with the boinc statistic mechanism. ... example usage 'hub-wallet' contract abstract before hub starts paying out tokens miners and receiving payments from buyers must create hub wallet simple contract with defined amount frozen funds. hub will cheating dao could initiate process blacklisting this hub and expropriate frozen funds from it. those expropriated funds will also frozen the dao account for some specified time. this protect against malicious decisions the dao: tokens can drop price during the freeze. therefore, there motivation expropriate every hub. logic contract logic the contract exists states created, registered, idle, suspected (+punished) when the contract created, the constructor function designates the addresses the dao, the factory, the whitelist, the wallet owner and few other variables, such the length the payout period (which currently set days). the payout period period time during which the hub can conduct payouts miners, but cannot take the entire balance for itself. the created state the contract can registered the whitelist, freezing set amount its balance sonm token). this designed circumvent situation like this the hub first deposits snm, registers the contract, and then deposits the main sum snm the first amount fixed. furthermore, the time registration recorded when the contract registered the whitelist. after the contract has been registered the whitelist, becomes registered, which state has access the transfer payday, suspect functions. let's take closer look them order. transfer function this function enables the contract conduct payouts the hub miners. works follows: first lock fee designated, percentage the payout which will locked for the payout period. the default value then limit set (the total amount frozen funds the frozen amount from the registration the percentage for this particular transaction) and the balance checked the balance below the limit, this particular transaction not conducted, everything order the frozen percentage added the total amount frozen funds and the contract invokes the approve function (details below) towards the miner. the explanation why the process done this way given the payday portion the description. approve function this function does not move the tokens the miner's wallet, but permits the miner conduct this transaction his one. this prevents the hub from registering wallet the system while conducting the payouts through separate wallet because the miner waiting for approval from this particular wallet. approve standard function. (standard erc). payday function this function sets the contract state from registered idle. this function checks the registration time against the current date and thus can invoked only the end the payout period. this condition met, transfers the frozen funds the dao wallet, after which unlocks all the frozen funds and sets the contract's state idle. this idle state the contract can move all the funds back the owner's wallet register the contract again the whitelist. during the idle state the hub cannot conduct payouts dismantled. thus, the owner can move the funds from the hub his personal wallet can two ways accordance with the rules, wait until the end the payout period, pay the dao the frozen funds and move the rest his wallet; can cheat and move all the funds using the transfer function under the guise paying miners, but this case all funds will stay frozen snm. such system motivates the hub act compliance with the rules. the contract also has the suspected and punished conditions. the registered state the state when the contract can registered the whitelist the dao and only dao can invoke the suspect function, thus setting the contract's stats suspected suspected being malicious. this function blocks all funds the contract's wallet for days. the suspected state the following functions can invoked the dao exclusively: rehab function this rehabilitates the hub, removes all fund freezes and set the contract state idle. can invoked any time. ban function this can only invoked the dao committee after days have passed since the contract's state has been set suspected. then all frozen funds the contracts get sent the dao wallet, which the contract state set punished, and the owner the contract blocked from conducting further operations using this wallet. sonm miner-hub interaction solution let's consider the process sonm miners and hubs communicating when they need establish mutual cooperation (i.e., the first phase, when the miner hasn't decided yet whether participate computations and receive tasks from the hub not). first, sonm hub administrator sets ethereum smart contract containing sonm tokens used pay miners for computations. then, the ethereum address this smart contract, address pool administrator and hub are recorded special sonm smart contract "hubs pool list".hubs pool list includes unconfirmed (unverified) hubs and verified hubs (i.e., listed the hubs whitelist). the whitelist will managed members the decentralized autonomous organization. any case, hub information sonm smart contracts includes the address the hub owner, the address the hub wallet and the hub ip. case wallet address change, the hub owner can change the hub record. therefore, sonm hub records the address smart contracts containing the funds used pay miners for computations (so miners can check the existence these funds) and registers basic information about itself, including the address the owner and ip. then, sonm hub agent starts broadcasting the network using messenger protocol, sending broadcast message about itself the format: the agent the miner's side listens the channel, receives data messages from the hubs, and then makes request the hubs pool list smart contract compare the data from the hub messages with data hubs whitelist. the miner may customize agent settings accept messages from all servers only from proven ones listed the hubs pool list. after that, miner's blockchain agent requests information about the contract-wallet the hub, amount funds the hub's wallet and recent transactions the wallet. intelligent agent checks the received data compare with conditions set the miner. are there sufficient funds the hub wallet? are hub payments miners regular? what the average amount tokens paid miners this hub? internet flowchart messages blockchain "miner-hub" messages exchange: hub hub list owner wallet, ip, name, description, wallet addres hub wallet history checking that registered blockchain hub list miner checking that the wallet exists and transactions art being carried out own table hub's status (trust/fake) hub wallet asks other mines the channel about reliability hub then, messenger agent send direct message the hub request additional meta-data, and records full information about the hub its hubs list with "not confirmed" mark. the same time, the messenger agent constantly broadcasts question messages the common miners' data channel for information about the hub, the average amount reward paid them, and on. other miners' agents broadcast positive answer messages the channel hub information the question message correlated with their information, negative answers, they believe this hub malicious not reliable. miner's agent receives sufficient amount confirmations from the network, the hub receives "checked" status the miners' hubs list. the transaction received the miner from this hub corresponds the original agreement, the status this hub changes "safe". after that, depending the settings miner's software, miner can either manually select hub connect and perform computing tasks, miner's agent can automatically select hub offering maximum profit and connect it. sonm client-hub interaction solution clients' (buyer's) interaction with sonm hubs similar the miner-hub agent's interaction, with difference intellectual agent results' parsing, which for buyers prefers the hubs with the lowest computations price (and vice versa for miners). buyers will most likely use the "application pool", than "hub pool" smart contract. buyer creates task and deposits funds the hub's smart contract wallet pay for the job. when the buyer receives the calculations result, confirms the transfer money using the smart contract;s function (similar multisignature wallet). flowchart client-hub interaction process: (some intermediate messages the flowchart are omitted) buyer blockhain hub's miners the raw file post job offer, price, etc the calculation intended costs, registration torrent search application software, the calculation power, check the wallet agreement money deposited the wallet hub hub creates the task downloading and calculation the parts the file. user downloads the file, money sent from deposit the parts the file are downloaded throught torrent, but not uploaded server. new torrent generated instead ... sonm 'blockchain-government' expansion policy previously looked ways implement the "blockchain-government" work with the sonm system using computational hubs enterprises and miners "workers", but what beyond the computational model and look that the current smart contract system broader sense? what take random business and try apply the current system? suppose you are owner restaurant which case you can similarly deploy hub contract the blockchain and register the whitelist, while carrying out your regular business transfers receiving payments from clients and paying your workers, but your bookkeeping will relatively transparent for anyone, you will under protection dao joint-share group regular people which will resolve issues via voting),and your business will registered the whitelist, similar the governmental registry, giving your business "legitimacy certificate" sorts and giving you competitive advantage. creating the "blockchain-government" system not the priority for sonm, but you may recall, sonm assembly. suppose that those interested the system described above will register the sonm whitelist, thus executing the expansion plan for the "blockchain-government" into other markets and implementations. ... sonm client-hub content delivery method content delivery method the only significant difference between client-hub and miner-hub interactions. you might expect, there difference between rendering -hour video using the local computer and uploading this video the server while waiting for video rendering the remote server, because most the time will spent uploading. developed solution for this issue: when client wants upload large file raw data the server, sonm automatically creates torrent and sends message the selected hub. this hub receives the message and creates task sequence for torrent downloading, computation work with downloaded file(s) and creation new torrent for calculation results file. after processing the calculations and creating torrent for the resulting data, the hub sends message the buyer, who only has download the received file from the miners. expect this the most rapid solution all those that exist the moment. sosna nutshell platform for sonm propose using sosna superglobal operation system by/for network architecture. (look the scheme the next page) what sosna sosna global operating system built the nesting doll principle. important understand the structure sosna order internalize this concept. let's from the end-user application outer-layer infrastructure. sosna itself top layer envelope that works with the grid-core (boinc, yandex. cocaine/ other grid-compatible paas) and the infrastructure sonm smart contracts applications and containerization when you are developing application, you must make sure it's will function properly that for the end-user. but the end-user's computer does not possess the same amount libraries the one you used during development, they may not up-to-date with vulnerabilities left, may cause unexpected results. there any way force the program run exactly was intended, and the same time make run safely for the end-user? for this, there are containers. containers allow run any software inside secure, isolated environment. itself, such container miniature virtual machine, packed with all the dependency libraries your system the compatibility problem and dependencies are relatively resolved. addition, such system isolated relation the host system, one can cause harm the miner's computer. (link docker isolation) superglobal operation system by/for network architecture sosna intercommunication services message api blockchain api grid core master modules worker modules container slaves their services let's move one level. miner's host this architecture simple node, worker. (in cloud architecture such system called slave minion). all applications performed inside containers are called services. will talk more thoroughly about what containers are the saas chapter. the miner's host itself can definitively represented assembly services and service location system. service service actor, rpc-enabled piece code, which accepts certain set messages. technically speaking, each service dispatches service protocol that is, list methods and their respective slotids you can call sending messages the service just after connection has been established. this protocol description can dynamically obtained (along with other stuff) resolving service name via the locator. the important part here that, line with the actor model, the client actor too. so, after you have sent message service something for you, responds sending messages well. but unlike server-side services with service-specific protocols, every client dispatches the streaming service protocol, mostly for backward compatibility and ease use. each connection between client and service multiplexed using channelids, and both ends given channel dispatch some specific, possibly different, protocols. for example, the usual session between client and service goes follows: client connects some service and picks any channel random (for example, channel #), because all them are not used the beginning. initially the service side channel dispatches the service-specific protocol, and the client side dispatches the streaming protocol. the client sends message tagged with the chosen channelid order call one the service's methods. that indicates the start session. the service switches its side the channel the null protocol, that the client couldn't call some other method the same channel while the service processes you request. the client starts receive the streaming protocol chunk messages with the service response. the end, the service sends choke message indicate that the session has been completed and switches its side the channel back the service-specific protocol. that was the only request, the client disconnects. note that some services provide streamable methods: that case the service will switch the streaming protocol instead the null protocol, that you can stream some data the service. locator when node starts, reads its configuration file, which has list services run. this list only specifies service names and types, but not network-related properties, because the i/o layer and the rpc layer are completely separate. moreover, the services themselves have code communicate over the network, only the message dispatching code. order enable those services receive and send messages over the network, the node starts special service called the locator. every other service attached the locator, which turn wraps them event loop, binds them some network endpoints and announces them the cluster. the locator itself always runs well-known port. so, client should perform the following steps connect the requested service: connect service locator public port. send resolve message with the name the required service using any channel. receive chunk message with the information about the service endpoint, its protocol version and its dispatch maps (which mapping message numbers method names). receive choke message indicating that the request has been completed. connect the specified endpoint and work with the requested service. services can stack protocols. for example, the elliptics service implements both the generic storage protocol and its own specific protocol, which means that client requesting storage service can routed the elliptics service instance. that fine, because stacking allows the client work with the elliptics instance without even knowing the service-specific protocol details protocol messages have the same slotids matter what service implements the given protocol and whether uses protocol stacking not. masters and gateways let's advance one layer higher. here you can see that addition the miner machine itself, there master machine, i.e. hub, the approximate function which considered the paragraph about iaas. master master manages the execution services the machines miners, maintains statistics, balances the load, carries out the validation results, leads the task planner, etc. i.e. behaves like conventional cryptocurrency pool. master also called gateway node. gateway optionally, the locator can configured aggregate other locators' multicast announcements (or use provided list remote nodes) and act cluster entry point for clients. other words, the aggregating locator job configure gateway connecting with all the remote nodes and monitoring their health and service updates. gateways are pluggable locator modules which provide remote location functionality. for example, simple builtin adhoc gateway randomly picks remote node for each client, and ipvs gateway operates kernel ipvs load balancer set local virtual service for each available service the cluster. clients can use these aggregating locators access every service the cluster regardless their physical location load-balanced fashion. grid core two machines master worker form basic implementation the grid standard loosely coupled computing network. key feature the grid standard the prerequisite for decentralization and geographic remoteness masters from workers. example, consider the product https://github. com/cocaine/cocaine-core example grid-core. ... intercommunication services sosna intercommunication services are common message bus, with which miners, hubs and clients communicate, well the blockchain api service, which allows sosna communicate with blockchain. world computer saas and its api example the simple application that can run sosna #!/usr/bin/env python from cocaine.services import service from cocaine.worker import worker storage service("storage") def process(value): return len(value) def handle(request, response): key yield request.read() value yield storage.read("collection", key) response.write(process(value)) response.close() worker().run({ 'calculate_length': handle results verification the problem validating computations executed third party thoroughly researched topic [], but still lacks production-ready solutions, since most them are very expensive practice (at least hpc setting). more practical solutions are based repeating computations verification replication. this approach requires designated nodes (hubs) distribute work units, aggregate results and verify them. docker uses this approach and has highly tested implementation. for certain kinds computational problems may practical offload the task aggregation and verification smart contract. the process goes follows: miner computes some work unit and posts merkle-tree root hash the smart contract. some other miner computes the same work unit and notices that results differ. this case, possible calculate compact proof cheat. the proof can checked the smart contract, and the cheater punished. economic motivation used promote this double-checking behavior: miners deposit some fixed amount tokens, and this deposit will returned after some timeout proof cheat was posted. the other hand, possible earn tokens checking computations and revealing cheaters. verification smart contracts actively researched [][] and has some benefits: does not require trusted third party aggregate and verify results does not impose any overhead case honest miners has limited and bearable overhead case dishonest miners notes: will have fully functional system that will used for any general-purpose computations, starting from the v... most likely that this stage the sonm platform will have full-scale computational projects deployed with high turnover volume. (link chapter roadmap) moreover, the v.. expect sonm attract lots open-source community members, which means: the community will independently creating lots decentralized grid-compatible apps. lots brand new markets and teams are potentially going appear, well numerous community-crafted tools for interaction with the sonm platform, most likely better than the original apps, developed the sonm team. for example, the official geth ethereum client made ethereum foundation comparing parity ethcore, windows media player compared winamp internet explorer comparing mozilla firefox. understand and welcome it. that means that starting from this point will need reduce our efforts for tools development and give way the free market and community. will focus creating new formations for interaction with this market: dedicated team developing decentralized computational power exchange teams providing server hosting services based the sonm platform software for niche markets various integration projects external formations for tools development (like metamask.io consensys) i.e., this point will have distinct division sonm development areas. for example: original sonm core developers are creating basic protocols the system another team creating apps within smart-solutions sonm exchange team building ui-friendly tools for the interaction with buyers and managing the decentralized exchange safety and security docker isolation. one the docker's software packages daemon which consists container server,launched via the "docker -d" command), client tools which permit the user control the modus and containers directly via the command line interface and api which permits the user control the containers via rest-style program. the daemon provides complete isolation for the containers launched the node the file system level (each container has his own root), the process level (the processes have access permission only for the container's own file system and the resources are split usign libcontainer), the network level (each container has access exclusively the range network names tied directly and the corresponding network interfaces). implementation our system solves combinatorial optimization problems (https://en.wikipedia.org/wiki/combinatorial_optimization), for example, the knapsack problem (https://en.wikipedia.org/wiki/knapsack_problem) and the travelling salesman problem (https://en.wikipedia.org/wiki/travelling_salesman_problem). these problems are np-incomplete, have basic implementation weak-class ai. the knapsack problem solved the context 'miners briefcase' how divide resources between different projects/hubs, with maximal profit and risk diversification. put simply, would like "what coins need mine btc goes down and what proportion for each it?" the travelling salesman problem solved the context resource distribution and backs grid-network standards (this feature not fully implemented yet). sonm github repositories github.com/sonm-io and api ... example how the sonm marketplace works market mechanisms. one must remember that the end-user rarely interacts with the market directly, the market mainly used owners hubs, miners developers. overview the marketplace from the viewpoint the buyer (developer). client-hub point view: hosting applications this represented standard market mechanism functioning cloud market: aggregator, where users can choose the cluster host their applications. the cluster chosen depending the preferences the client region, pricing, power, etc. the system basically functions like the market. this diagram represents simple market mechanism, where developer picks cluster where the app will hosted few clusters can chosen). selling utility services developer, which has created utility service, can sell delegate hubs, collecting passive income via it. example such service can subd, messenger service which registered the application pool and offered hubs. hubs can interested using said application attract more clients and gain advantage over their market rivals, which leads market growth. the developer can view the service statistics his personal account. overview the marketplace from the viewpoint the worker (miner) hub-miner point view: miner, according his preferences, automatically, according set criteria, connects the hub which mays the most and has the most stable bandwidth. such there market here well one side there the computational power, the other money, but this market almost entirely automated and unnoticeable the miner (the system was designed let the miner simply press button and not monitor the rest the process). summarize: for the client everything easy his application will run the closest miner. this means that for the end-user the difference will virtually unnoticeable. the client/owner will paying less, and the application will run faster. the technical level the application will first request the designated hub the required amount computational power (in order contact the locator service) for service, and such service available, the application will request performed the closest machine available (which will accordingly the cheapest option). ... interface prototype sonm buyers interface prototype pre-purchase computing power hardware selection application from application pool selection search for applications/hardware servers selection command line (terminal interface) for running own application, setup running application the server, before sent miners nodes sonm miners interface prototype select applications run the nodes (whitelist, reputation level any depending price) setup number tokens for unit computing power (flops, time) setup disk space allocation limits and price for (can used own space, purchased from other integrated services, like oraclize, factom, storj, sia, filecoin etc.). username username pre-purchase computing form pre-selling computing power form application form application form application pool selection search applications/hardware select applications run the nodes application servers selection *white list reputation level any depending price command line options select applications run the nodes application flops: flops: setup number tokens for unit computing power time: setup disk space allpcation limits and price for allocation limits: price: btc setup number tokens for unit computing power time: setup disk space allpcation limits and price for allocation limits: price: btc *can used own space purchased from other inegrated services sonm buyers interface sonm miners interface ... api for software developers the first stages developers' api will implemented using widespread and well-tested yandex, cocaine and ethereum api. the further stages platform development, after the system core upgrade v.., we'll create proprietary sonm api.top-level api, which defines the logical grouping containers, which allows you define container pools, distribute the load, and also specify their placement. development roadmap modules' implementation roadmap: ver. messaging sosna core platform smart-contracts slave protocol yandex.cocaine presaletoken, presale, "forge" payoutproto ico, token bitmessage 'slave' protocol implementation waiting for contracts' deployment. interaction protos debug cutting off yandex pitfalls. dao sonm hub dns reconstruction, additional messaging types and channels' specification, debug business logic implementation (including price api) payout dapp "forge" debug debug and feedback interaction with message bus ethereum blockchain api dcfs (etcd, swarm, ipfs) integration whitelist, hub wallet, hub factory global channels and global dns improvements. graphic locator service improvement. bugfix escrow debug feedback debug feedback bugfix debug feedback debug feedback coreos(https://coreos. com/) v.. current version yandex. cocaine platform, docker isolation. supported languages: c++ java node.js python ruby [in development] racket have the following services: logging node-local file storage mongodb storage elliptics storage node-local in-memory cache distributed in-memory cache url fetch jabber [in development] notifications [in development] distributed time service prototypes the smart-contracts system ("forge"), slave protocol for communication between nodes. anyone can create his own hub and try collect powers from miners, create his own cluster (from many owned machines). anyone could run any usual docker container create your own application cocaine framework (see sections above github). v.. month dev time main token contract and ico application. payout proto (already implemented for boinc-platform "drugdiscovery@home.com") v.. months dev time (about month which will spent organizational issues). this version (if get enough money) will focus the most crucial parts the system. for now the slave protocol literally 'protocol' has own libraries api, it's just agreement inside the module system. need rewrite using modern messages core, like bitmessage, get good looking messaging standard. the platform level will payout dapp simple dapp which allow hub administrator payout tokens miners, depending their work already done for boinc-like platforms such as"drugdiscovery@ home". need simply adapt our newly deployed token contract and architecture the cocaine gateway node. the smart contracts level will work with our dao contract. v.. months dev time. this version will adding new messaging types for new messaging systems, tuning the communication between miners and hubs. will probably rewrite the internal dns peer discovery service well (it allows the searching peers during listening the general channel the messaging system). concerning the core platform will work towards business logic (market and ai) implementation, and tuning messages and blockchain api. the platform level will implementing integration with dcfs like ipfs swarm. the smart-contracts level will finishing work "forge". v.. months dev time this level all the newest contracts from "forge" whitelist, hubfactory,hubwallet will deployed. will the start forming real new homeostasis the system. after that think that few "debug" releases will necessary with different community proposals. v.. postproduction (working out all the kinks for the release build) month dev time major issues crop up. the very first commercial version this platform for public usage. global dns and service locator improvements allow create new internet browser, which would allow everyone find and run services like https://servicename. graphic improvements for each part the system permit improve the user experience and start widely expand among 'non-bitcoiners'. also believe that other companies will use our smart-contract's organization (forge), which would allow them use one contract-register and fair system protection from malicious users and fraud. v.. improvement, community proposals, feedback, debug, etc. v.n development the new sosna version started, which will based coreos system you could literally run everywhere microwaves and washing machines). seriously, read about coreos awesome! v.. release sosna imagine your smart-watches from apple could earn you money? that's what are talking about when "time money!" not just words. notes: will have fully functional system, able used for any general-purpose computations, starting from the v... most likely, this stage sonm platform will have full-scale computational projects deployed with high turnover volume. moreover, the v.. expect sonm attract lots the open-source community members, which means: the community will independently creating lots decentralized grid-compatible apps. lots brand new markets and teams are potentially going appear, well lots community-crafted tools for interaction with the sonm platform, most likely better than the original apps, developed the sonm team. for example, the official geth ethereum client made ethereum foundation comparing parity ethcore, windows media player compared winamp internet explorer comparing mozilla firefox. understand and welcome it. that means that starting from this point we'll need reduce our efforts for tools development and give way the free market and community. we'll focus creating new formations for interaction with this market: dedicated team developing decentralized computational power exchange teams providing server hosting services based the sonm platform software for niche markets various integration projects external formations for tools development (like metamask.io consensys) i.e., this point will have distinct division sonm development areas. for example: original sonm core developers are creating basic protocols the system another team creating apps within smart-solutions sonm exchange team building ui-friendly tools for the interaction with buyers and managing the decentralized exchange dissemination the development process information the project team responsible for making the results open the public and for using all available resources disseminate information about the project. willl publish report about current development results and issues least once week. report will contain current project needs and issues. all major breakthroughs will communicated with interested mass media and spread major community forums like bitcointalk and cryptocoin talk. sonm comparison other grid computing projects sonm comparison golem network sonm has the following advantages compared golem: golem network hasn't demonstrated any proof-of-concept yet. golem network currently isn't able process general purpose computing. their network available the test mode only for cgi rendering. furthermore, sonm uses cocaine open source paas platform which compatible with more common and standardized boinc platform, also used lots existing distributed projects, therefore sonm compatible with many them. also, unlike boinc, cocaine platform support saas (software service), widespread, modern and standard programming languages, isolated, safe and standard containers (docker). addition, are developing sonm using lot open source technologies, already have the core, network platform and most the other important features the project, and, fact, are ahead the golem project least two years development. golem's range applications still limited. the moment, efficiently tested tasks golem are limited only rendering cgi blender. golem has less functionality. golem represents the "peer-to-peer market" for computational resources. sonm cryptographically secure protocol providing tasks distribution, validation results and proportional correct payment for the used computational power. validation the computing results. the results validation system one the golem project's weak points. not all the computations' results are being validated, golem depending their reputation system prevent users from paying malicious miners for the wrong calculations results. this system potentially vulnerable and can exploited. sonm uses docker verification system allowing check all the received results for correctness. sonm comparison iex.ec project iex.ec uses its own xtremweb-hep protocol. similar boinc, but has been tested less and has smaller community and support behind it. both comparison with golem and iex.ec expect get the market faster due usage open source technologies and protocols. use widespread time-tested technologies, we've already implemented the core the sonm system, most its important functionality and have the functional prototype available for community alpha testing. sonm comparison elastic project elastic team anonymous. the project being developed the elastic community, and there are team members showing their real identity. that way, case project failure, there nobody take responsibility. elastic experimental non-commercial project. fact, elastic developers are good engineers, but they lack marketing and pr, and don't think about the commercial side the platform and monetization. they don't have any financial model clear marketing plan, the future price elastic tokens and project market capitalization very unclear. also notable that elastic had finished ico crowdfunding more than year ago, but their tokens still aren't listed any crypto exchange, and ico investors still don't have access the tokens. elastic uses transactions pool for tasks, mechanism similar that used traditional blockchain systems, such cryptocurrencies. this leads serious problem: transaction's block must confirmed certain amount time, task must processed this certain time frame. the case general-purpose calculations (for example, protein folding), can't know with certainty how much time will take process the task. elastic uses its own programming language solve this issue with mechanism, similar ethereum, which leads excessive parallelism and the necessity run the code all machines the network. sonm uses modified boinc protocol, which was initially developed for volunteer grid computing and much more efficient for tasks distribution and processing. differences from gridcoin, foldingcoin and curecoin there are cryptocurrency projects such curecoin, foldingcoin and gridcoin already involved scientific distributed computing. however, these projects use the white list selection for the scientific computing projects. they don't have and don't create computing power market. our project any buyer can purchase computing power for task any size and any seller can rent computing power. therefore, our main benefit compared these projects that sonm not limited specific project's list. sonm will open decentralized secure computing power market available for everyone. also, sonm fully compatible with these platforms, once these projects start using sonm infrastructure, one may able earn snm and corresponding tokens (foldingcoin, gridcoin, curecoin etc. also). addition, sonm compatible with grid apps, any these apps can run our system. compatibility and integration with other decentralized on-demand computing services although have mentioned differences between golem, elastic project, iex.ec networks and sonm, pointing out some advantages our project, consider compatibility and possibility these systems' integration big advantage the sonm network and promising means computing power usage optimization. therefore, the goal create global integrated computing platform, where sonm, golem, iex.ec and similar systems can integrated together and computing power will flow toward the most profitable and efficient system. one our project's key goals the development intelligent, deep-learning based system, managing the efficiency computing power usage for solving specific tasks. comparison summary wsonm using the distributed cloud technology its base, modifying said technology fit our current goals less work-intensive endeavor than combining xtermweb-hep (base used iex) with traditional cloud services, due grid software being severely limited that regard, and developing commercial standards very difficult and time-consuming. this the reason sonm decided not use boinc, which one the grid software solutions, similar xtremweb-hep. having prototype system for verifying undetermined computations gives hefty advantage sonm well. implementation time and flexibility technologies used will the deciding factor the starting phase the project. currently sonm looking hire world-class specialists networks and locators (for optimization), well people with experience working with btsync and tor browser software. references https://en.wikipedia.org/wiki/fog_computing iot, https://en.wikipedia.org/wiki/internet_of_things http://internetofeverything.cisco.com/sites/default/files/docs/en/ioe_value_at_stake_public_sector%_analysis_faq_final.pdf https://en.wikipedia.org/wiki/crypto-anarchism http://internetofthingsagenda.techtarget.com/definition/fog-computing-fogging https://en.wikipedia.org/wiki/turing_machine verifying computations without reexecuting them: from theoretical possibility near practicality. walfish, blumberg. making argument systems for outsourced computation practical (sometimes). setty, mcpherson, blumberg, walfish. practical delegation computation using multiple servers. canetti, riva, rothblum. intro truebit: scalable, decentralized computational court. simon rouviere. follow and stay tuned google groups slack reddit telegram twitter bitcointalk medium facebook github