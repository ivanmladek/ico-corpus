eos introduction ian grigg abstract--current technologies for blockchain fall short providing what developers and end-users need order contract together and build large scale businesses. propose eos, performance-based and self-governing blockchain that provides operating system for building large-scale consumerfacing distributed applications. this paper outlines the context, vision and software architecture underlying eos, which are building serve broad and diverse group users with smart business. keywords--eos, blockchain, smart contract. ntroduction the notions digital cash and smart contracting have been known for long time, yet only recent times have strides been taken with respect implementation. this paper introduces the eos.io software underlying eos new platform for general value and contracting. eos presented against backdrop three existing champions because (a) they represent broad range opinions the distributed ledger technologies (dlt) space, (b) are large enough matter, and (c) are familiar the author. bitcoin (nakamoto seemed the word blockchain that promised the inspirations both digital cash and smart contracts. although captured the attention the cypherpunks, media and hodlers, failed make mark business. ethereum (woods attempted fulfill the smart contract promise with "unstoppable world computer" while bitshares (larimer strove open the market for tradeable assets. hundreds alternative bitcoin blockchains altcoins strove make small difference seem louder. corda (brown backed away from blockchain entirely and explored party party workflow solutions. are tantalisingly close but prize has yet been awarded the end-users. timely then take fresh look what the demand for, from their perspective, and lay down the basis and vision towards creating practical and performant ian grigg financial cryptographer and partner block.one. iang block.one (see http://iang.org/). this work licensed under creative commons attribution international license (cc by). caveats: (i) this paper primarily about the eos.io software that permits community stand eos blockchain. the software open source and community free any controls beyond their own constitution, this paper may indicative but cannot authoritative any particular eos blockchain that community might wish stand up. (ii) have endeavoured make this paper independent possible, but biases are ever-present and are what make life special. for the record, confidential information known the author has been excluded, and would likely change some criticisms included, for better worse. (iii) this present version draft for which solicit broad feedback! nothing written herein especially fixed for the eos.io software, and changes are expected. blockchain trade infrastructure. first, summarise the context today's market for dlts. then, look vision the end-user's needs, and how meet them. then, review architecture meet the market demands. finally quick comparison with known systems and concluding remarks. for more technical details the eos.io software, readers are referred "eos.io technical white paper" (larimer ii. ontext the market. the market competitive for all products and dlts blockchains are exception. what are the market offerings? bitcoin might seen the chain security, yet strong chain only valuable the business attached to. perhaps recognising this, ethereum touted the worldwide unstoppable turing computer, goal that might appeal computer scientists but has seemed elusive other disciplines. built corda serve the needs the financial institution, which large market but also expensive and exclusive one. this section examines those prior systems from the perspective major architectural features necessities, which suggests benchmarks assumed starting points that industry looks to. consensus. with blockchains, come consensus over block transactions, such that transaction conflicts with any other, neither this block nor prior blocks. also known the two generals problem, there rich history bringing remote actors agreement such that know that what you see what see." see figure bitcoin established proof work the nakamoto signature the way bring open entry community together over shared distributed ledger which all parties hold complete copy. this mechanism runs lottery amongst many miners determine who mines each block. tickets the lottery are competed for sha puzzle, and this requires energy produce, the winner the lottery rewarded with fixed amount bitcoin. effect, anyone can general, and the one that wins the lottery the one that sets this moment's plan battle. following generals can choose accept that plan block, reject invalid. the fully shared ledger and the cost proof work, running for bitcoin and for ethereum the time this paper's writing, have offended many. permissioned ledgers (swanson were proposed not only block those want exclude from enjoying the benefits our ledger, but also bring back the computer science roots efficient consensus practical but centralised designs well known database science. also proposed from time time are proof stake, exotic cryptography and secure enclaves. corda (brown established that consensus could user choice eos introduction fig. the "two generals" problem fundamental computer science select points within contract transactions. allowing interchangeability servers called notaries that can mediate the consensus any the above means, corda reduces the network operating cost level comparable today's infrastructure. value. similarly, there are wide variety mechanisms establish fungible value such cash. smartcard money the was typically implemented through persistent internal data stores each card that negotiated atomic dualcard transactions. the same timeframe, david chaum's ecash (chaum popularised the notion coin, being random number with blinded signature that could handed from user user. triple entry (grigg established that each party could see the same receipt, each which recorded person person transaction. balance calculated the sum receipts going and out. bitcoin uses the utxo unspent transaction output concept, state-driven layout. each transaction record spends set previously unspent values, and creates new spendable values into the future. contrast, ethereum's virtual machine provided database mechanism such that currency could constructed from table, significant improvement flexibility, but opening wide surface area for attacks. these five distinct mechanisms suggest that the way account for value not settled science. state transition. bitcoin's block list utxos, above, lays claim state, being the nature those coins, that block, that chain, that time. the duality the utxo design derives from the need the lightweight 'spv' client prove its incoming coins shared ledger: receiving client with only limited access need only trace each single 'coin' from block position back its origin order determine that incoming transaction good. the receiver does not need prove anything outside the incoming coins, such the sender's balance, order ensure complete control the value. this powerful statement that the blockchain graph state was adopted broadly within the distributed ledger field. even ethereum replaced the utxo with its more powerful virtual machine, accepted that state was the point consensus over which all nodes need reach. arrival new hashed block, each validating node calculates and agrees july draft the precise exit state resulting from all contracts found each new block. contracts. bitcoin added business logic money attaching validation 'scripts' its transactions suggest limited form contracting, which popularly became known smart contracts (szabo ethereum's notion the unstoppable worldwide turing computer provided more fully powerful coding, messaging and data storage. corda pared back these designs validate and agree over utxo-like state with command-driven changes, but also limit access only the direct parties for confidentiality. both ethereum and corda introduced more powerful high-level languages with which express contracts. performance. bitcoin has established general limit about transactions per second (tps), which point transactions can severely delayed. ethereum seems stretched tps, and recent congestion event was marked transaction fee jump the queue. the limits blockchain's throughput are many: validating prior claimed blocks, processing the new block, and mining. corda avoids these limits for the most part, its consensus via selectable, independent and localised notaries, there need for wider consensus than the parties. every system encumbered the physical limits network propagation times. use cases. notwithstanding the hype surrounding blockchain, there relatively little hard evidence successful use cases. bitcoin establishes single currency, but the explosion altcoins, the failure colored coins, and the absence any smart contracts interest suggest clear limits. ethereum tried break those limits but date success eludes, unless one considers the somewhat circular use case raising funds the promise future use cases, marked steady traffic erc- contracts. perhaps surprisingly, the progenitors eos number are two 'interesting' use cases that have reached production and scale, being distributed exchange (bitshares) and social media site (steem). the promise smart contracts, however, remains elusive. governance. this author, the critical discovery bitcoin not that can mediate with cryptography, that the design stable with decentralisation and open entry, but that must preserve these characteristics survive. entry all not only key the consensus model hash-mining over the distributed ledger, also key the survivability the system. previous digital cash systems failed because there was centre, which was attacked one way another, showing failure governance. provide further abundant evidence, centralised exchanges the bitcoin era are frequently attacked with thefts, contract breaches, denials service, bankruptcies, seizures and enforced rule changes. then, the world divides generally into two: fully decentralised open entry systems typified blockchains, and the converse typified centralised and permissioned ledgers, with the space between the two being uncertain. bifurcation over open entry raises the question how the users govern, are governed, and how governance for the benefit works both cases. the general approach open entry starts with caveat emptor, which carefully sets technical environment that page eos introduction capable most what required, but with enforcement rights limited what can automated code. sometimes labelled trustlessness, this regime draws stark line between that which technical and strong chain, and that which the user's discretion and therefore more dangerous. time goes on, institutional approaches such improvement proposals and centres power such foundations teams arise deal with some the dangers users, greater lesser degree and success (gupta caveat emptor typical bitcoin and ethereum. contrast, the permissioned network walled garden approach, only those permitted can enter and act. this scenario, parties open account, are onboarded agent and can trade with presumption good behaviour. implicitly explicitly, enforcement good behaviour typically seen out scope the technical level, although dentity typically plays unclear part. the downside that the wall around the garden can expensive erect and maintain, and every year the gatekeeper charges more. this approach commonly assumed within heavily regulated markets such banks and the like, and used corda. neither these world states are user friendly users lose too much money through caveat emptor, and systems that start from 'permission' become systems that discriminate, either the competitive level the societal level. users are routinely skeptical either. iii. ision end-state goals. what that our user needs? the abstract, she wants to: know her friends, business partners, and customers. communicate with them. able contract with them: the small, make peer peer agreements, and the large, build sophisticated business able serve the market. able retain and direct her value (pay bills, etc) necessary component business. then, all has done safely and securely. able invest predictable business. this complex issue, but appears require three components. know that the ecosystem advancing, and not undue risk failing. pay for development effort front with reasonable payback the future. because she knows that things contracts, assets, transactions, intents wrong, she wants able fix her difficulties. including, with her friends, her business, and her assets, and quickly, cheaply and without undue escalation. one caveat arrogance: assume her wants and her needs are synonymous. more precisely, are making entrepreneurial judgement call over what believe the user needs, and she'll want when she learns about it. the big idea. has become abundantly clear that for one reason another, the promise universal peer peer july draft contracting and money has been excluded the wider internet. bitcoin too unsafe, and its smart contracts opaque. ethereum too scary, too hard, too geeky. corda 'big corporate.' other systems have their weaknesses, all them are restricted the elite coder, and everyone has different view. what needed smart business for the everyday person. everyday distributed application needs live global blockchain that handles the open entry treasured the bitcoin discovery, has enough performance build big business, connected enough bring people together and safe and secure enough that wall street's gordon gecko can trade alongside africa's mama biashara. without drama, without fear, without missing out. the target. the vision before single global contracting blockchain that can scale handle long-tail businesses negotiating contracts for mutual advantage safe and secure environment. more practical terms, while there much value the internet, focus what mediated the web, and leave aside mobile and applications for now. what does builder web application want? assume that the target user the web entrepreneur, and therefore let's work backwards from that position. principal features. our design predicts blockchain handle thousands transactions per second for business contracts that are captured easy use and easy secure languages. the major features include: high performance messaging using event sourcing delegated proof stake contracts negotiation and intent messaging its heart usability from the user contract writer developer entrepreneur governance for business and chain maintenance the following section explores more depth. iv. rchitecture the philosophy. large part the practical approach the software underlying eos extend the large-scale highperformance blockchain experience bitshares and steem support end-user business. most the elements have been proven lesser greater extent, this architecture re-assembles them for new purpose build distributed applications. this section describes some important architectural differences that the software underlying eos proposes against prior practice. for more technical details, readers are referred the eos.io technical white paper (larimer the message the medium. the eos.io software design switches from the more popular consensus over state the less familiar consensus over events (grigg, -). this approach marries the event sourcing pattern (fowler, blockchain made events rather than state. computer science, deterministic state machine built machine code, state (memory), and events, both and out. every time something happens which causes change, practical machine saves intermediates memory, and page eos introduction fig. july draft coke machine expressed state machine restarting recovers itself reading back those intermediates. building practical state machine, have choice between saving events saving state, which choice depends mostly what are trying optimise. figure are save the red messages the blue state? machine saving state more likely used context where focus what state now, for example databases. machine saving messages intent more likely useful when asking how got the state are now, for example protocols legally significant logs such triple entry accounting (grigg restart faster with saved state, throughput faster with saved messages. because users need performance, the design saves messages. restart messaging event sourced machine similar recovering from the beginning, therefore incredibly slow, and optimising startup means saving checkpoints back state again. but, and here crucial outcome, saving that state, actor remains bound the saved messages, not the state, can optimise heavily and even recalculate the checkpoints needed. precisely how optimise too big topic for this introduction, but suffice predict that the combined techniques can theory take blockchain from transactions per second million. consensus. for consensus over messages, the eos.io architecture uses delegated proof stake (dpos), two-tier governance structure proven steem and bitshares (larimer the first tier, block producers are elected into round each producer gets one block per round, and rewarded for the validation incoming messages and production the block messages. block released one producer validated the next and the next and forth; not validated, not built upon. similar longest-chain mechanics bitcoin are followed, and short order, the producers converge longest chain. block that accepted quorum producers declared immutable, and the chain immutable blocks becomes effect checkpoint. like proof work, producers can censor (ignore) messages, they can front-run introducing their own from their superior knowledge the future. provide light-touch governance over bad acts producers, each round producers continuously elected the community using proof stake (pos). this second tier blockchain-mediated election over the producers and not the blocks, the so-called "nothing stake" weakness does not apply. effect, set generals chosen for campaign, and each get one turn. after the campaign, the civilian community asserts its view replace any bad generals. fig. delegation allows replacement generals after bad campaign dpos avoids the tax mining, releasing that substantial value back stakeholders. value from block rewards would initially captured entirely the producers. however, because they are elected the community, they are incentivised share the rewards scheme that producers agree amongst themselves, and promote the community. constitution, the long term reward for producing blocks can limited for example per annum (larimer -). custom, suggest that the bulk the value returned the community for the common good software improvements, dispute resolution, and the like can entertained. the spirit 'eating our own dogfood,' the design envisages that the community votes set open entry contracts that act like 'foundations' for the benefit the community. known community benefit contracts, the mechanism highlights the importance dpos enabling direct on-chain governance the community (below). the contract. the architecture comes closer the nature contracting treating contracts dynamic expression negotiation, commitment and events, rather than the more static interpretation 'the four corners the page' the performing code within machine. propose that messages are the natural element contracting, they better capture all phases successful contracting: negotiation, intent, performance and breach obligations are all events better captured messages than, say, state. user writes contract virtual construct interlocking handlers messages. user can convert her account into contracting agent adding message handlers and using her account's inbuilt database-like store hold the internal position her contracts. several message handlers working together can mediate flow messages perform complete contract legally sound agreement through its lifecycle. page eos introduction fig. tensions between stakeholders blockchain from the perspective contract, the arrival, acceptance and processing message simpler abstraction than state. consider order processing book seen market for exchange: the book accepts bids buy and offers sell. when the time comes, has calculate price which cross, and then issue accepted orders both sides. order book messaging-based system committing its set incoming messages and outgoing set messages, which relatively tractable task. contrast, fully state based system, all traders have negotiate the acceptable state all many parties, including quantities and prices, before submitting final state the blockchain. this implies that traders would get peek the solution before agreeing, opening the door game-playing. practice, the only known way solve this problem with agents and messaging. active agent receives committed messages, decides the outcome, and sends out messages committing that outcome. usability. the direct user blockchain the developer who creates web apps for her end-users. support enduser, the software must support the developer, first and foremost, and must ways that help the developer support her users. high impact support for the the developer includes (a) the tools, (b) the language, and (c) the environment. the large, the eos.io developer will supported web-based toolkit that provides fully-serviced framework which build applications distributed web-based systems coordinating over the blockchain. accounts, naming, permissioning, recovery, database storage, scheduling, authentication and inter-app asynchronous communication are all built in. goal the architecture provide fully-provisioned operating system for the builder apps, focussed the web because that's where the bulk the users are. language. within our context industrial scale distributed applications, the language for writing contracts high the impact list. most every other architectural feature the eos.io software has solid foundation that proven bitshares and steem, whereas the addition smart contracts stands out uncharted territory. behoves analyse the language needs carefully. from the point view selecting technology for automated smart contracting, the three stakeholders critical for success are: the parties, the developers and the operators. july draft fig. concepts code automation and prose contracts will evolve (clack's figure the parties need contract that is, first all, actual contract. parties also want the contract negotiable, readable, clear, and unambiguous they need their human intent captured faithfully. preferably, contracts should also supported options for dispute resolution and enforceability. the developer needs the language and wider system easy learn and write in, well expressive and securable, goals that often ignore higher semantics contractual intent. meanwhile the operators the blockchain producers blocks and full-node app businesses need the contract scaleable and provide reasonable basis for earning some revenue, interests that have little with human intent developer expressibility. taking the parties' needs first, this pushes the direction melding plaintext legal prose tightly with computer code, glued with some parameters "drive the deal" and reuse the prose and code over many contracts (grigg many research efforts aim merge the two contract views code and prose together either higher order parameters legally expressive domain specific language (clack see their figure but none have yet found this holy grail. this open research area with unsettled design choices (clack along those lines, our first temptation was towards the developer: source-interpreted scripting language based wren, and customised manage the design contractual message handler. example code snippet (larimer -): apply: assuming all prior steps pass, perform the state transition that updates balances and/or creates new account for receiver var from balance[message.from] var balance.find( action.to from.bal from.bal action.amount to.bal to.bal action.amount this hybrid wren simple learn, read, and reason about, making ideal for automated contracting. however, proved slow: trial trivial transactions capped out tps, which brings into collision with the needs operators, our producers and application businesses. page eos introduction fig. july draft members forge community with constitution fig. are aiming for times that level, the team switched webassembly (wasm) which new intermediate language designed the job that javascript currently does within browsers. wasm's first unoptimised trial within the eos framework delivered about tps for currency contract. yet, wasm switches the challenge from the operators the parties there are now tangible views over any contract: legal prose, source code initially and intermediate code wasm. thus reasonable question ask what where the contract that the parties agreed to? would like face that question head on. the two decades that have seen contracts issued the net, ricardian otherwise, and the hundreds issues that have arisen from these contracts, have yet see dispute, even confusion where what the contract said meant was key the dispute. even with the dao, that ill-fated million lesson how not issue contract, the proximate cause was (in) security, and regardless which side the fence one fell identifying the contractual significance the hack, the response was arbitrarily change whatever needed changed get the money back. there was organised, formal even vestige attempt resolve the dispute over interpretation the facts, the meaning and the rights. open question what proportion disputes court are over meanings and confusions, and what percentage are simply power plays and bullying, but not optimistic. the face the dao and other experiences, suggest that the rule one contract (grigg looks dogmatic and overly constricting. instead, least for the unregulated part the dlt space, there opportunity free the components the contract achieve better performance, even the expense little misalignment. meanwhile, should focus governance, and making dispute resolution available and comfortable the parties. the time writing, the set languages available the contract developer work progress. whether wasm wren another, will still need structure the language for performance and usability. each named message handler will need identify sections for each static, read- community can appoint governors manage responsibilities only and read-write code, each having different potentials for optimisation. eliminate re-entrant issues, outgoing messages will stacked until completion, dropped failure. intend add sql-like table structure significantly ease adoption those who are familiar with databases. crypto will external and mostly invisible. with the entire space for dlt, the competition continues internally. wren small and tight. wasm only just out standardisation. wasm's early tools target and c++ which are popular but are more costly write code in, comparison high level late-generation languages such wren. these challenges should not insurmountable the longer run the wasm project intended work with most languages, and the bulk the code any dapp outside the handlers, the websites. the ability accept many popular languages enticing, advantage available corda's jvm but not easily reachable bitcoin ethereum without holistic approach the developer cycle. conclusion, there are dramatic compromises the choice language and toolkits for the developer that beyond mere codability. would like easy read and reason scripting language that could speak full contractual terms, securable and scaleable. but the current state the art, compromises have made. governance. let now turn the environment. reality that things wrong with automated processing contracts, the distress all. our hope reduce both the frequency and the cost those errors, but they cannot eliminated entirely, and our approach build remedial methods for when they occur. blockchain based eos.io software assumes that all who use the blockchain are members under short constitution (larimer (grigg and agreeing which, all members form community subject the constitution. the constitution sets down some basic rules for the benefit the community. the constitution empowers three arms governance: arbitration for resolving disputes, block producers for choosing blocks, and referenda for community voice. arranged interlocking triangle governance, these three arms support and counterbalance each other. referenda are used the community vote the producers and arbitrators, page eos introduction well changes code and constitution. arbitrators can deliver legally binding rulings resolve disputes, and also for extraordinary changes such hard forks. block producers are technical liberty censor bad transactions introduce remedial ones but are mindful community reaction. arbitrators publish rulings, which producers might enforce, users might seek external enforcement. this counterbalanced arrangement ensures that party group has total power. even founders developers have only limited ability affect the rights the community members. hard forks and other upgrades have defined path, and individual disputes are channelled place where can resolve and get back business. further benefit that most the above governance can handled transparently, that writing contract handlers accept and manage disputes, handle referenda and the like. make these institutions work, users have agree the constitution, which empowers the producers choose blocks, and reserves all disputes into the forum arbitration. well, the constitution creates the legal rights expressed the blockchain stating that each member receives those rights properly accounted for, and return each member supports the accounted rights others. this trade your rights for the rights others becomes the cornerstone the community, that the community defined both the usage the platform and the agreement the constitution. and thus have preserved open entry even the community governs itself internally. even user transacts, all transactions from the first entry the latest refer the constitution hash, ricardian contract (grigg explicit governance mechanism, the constitution creates more fenced field than walled garden, and the gatekeeper automated transaction signpost all points. omparisons bitcoin. the platform that launched the first and most successful cryptocurrency, bitcoin baseline. yet, the 'first' its flaws shine bright its success: the utxo verification model means that complex smart business has mediated through external code. the state nicely locked chain, but the hard work negotiation done the applications. has good framework for assets, especially each transaction includes btc, and thus affront gresham's apocryphal warning against commingling assets, good money drives out bad. its lack thoughtful governance layer results that upgrades are very difficult, and the community war with itself. for example, the artificial limit tps that kills its scalability because the absence governance. ethereum. rectify bitcoin's weaknesses, ethereum establishes turing-complete virtual machine capability world-wide computer. has several major shortfalls. firstly, has dramatically restricting requirement find consensus state over thousands program executions, leading resource congestion around tps. secondly, the decision go-italone languages, vms, toolkits and the like has caused drag developer capabilities. thirdly, suffers from the adhocracy the foundation that has emerged despite the refusal july draft major stakeholders recognise the need for governance. emergent business proposition, use ethereum has been dominated raising funds for projects mostly aimed finishing ethereum platform, competing with it. few novel use cases have made their mark, suggesting that there more work before the ethereum concept smart contracts bears fruit. corda. the primary distinguishing factor corda that not blockchain but framework for party party workflow. instead posting contracts and actions blockchain, parties exchange messages and come consensus via notaries. achieves confidentiality for parties, high performance unconstrained chain coordination, and the ability for parties control the contracts they succeed and fail. yet workflow works best with small numbers parties, not large, and hence weaker issuance assets, especially cash and cash-denominated trading. another weakness that corda's walled garden approach for regulatory business stops being attractive mass market for small players. vi. onclusion user experience. the direct users blockchain such eos are the entrepreneurs and developers who write contracts implement distributed applications dapps. their users are the routine customers retail, finance, logistics, media. those latter customers not need know what blockchain is. hence the goal give the developers platform that allows extensive business logic built, but the mechanisms communication are hidden. the dapp developer given fully capable accounts, permissioning and messaging platform which express the system. the user interface matches what users are familiar with webkit for building websites and course access the blockchain. this approach expressed "an operating system for blockchain." the fact that there blockchain can hidden from the user, exemplified steem, being just another blogging platform that happens distributed blockchain. use cases. eos blockchain intended for highperformance messaging with business logic. popular use cases will include supply chain, resource management, usermessaging such social media, asset issuance and trading, accounting for remittances, and gaming. typical use case might uber. ride-sharing based setting standards behaviour for the driver and for the passenger. drivers and passengers were part the same community, there would immediate benefit the base liability and standards behaviour would covered under community constitution and dispute resolution, and their contracts could bilateral rather than intermediated, thus minimising any regulatory difficulties. then, the contracts can bilateral, the business flow could split up: tracking passengers the market, tracking cars available, finding match, negotiating contract, performance, settlement, pricing, and social tracking could all built separate dapps that interact. community. support business, need solve problems. and scale the solving problems, has done page eos introduction july draft eferences fig. the point smart business the community itself, which means has the architecture. advance community, must preserve open entry, but entry provide the tools that users find useful for governance. users want determine their risks and obligations their counterparties. when bound together community under constitution, users will know that the rights, liabilities and obligations their counterparties are least basic standard, expressed constitution and enforced dispute resolution. addition reliable names and web trust can reduce the anonymity the internet and give people sense belonging something important. acknowledgment this paper received useful feedback from brendan blumer, arthur doohan, dan larimer, wendy lee, aaron leibling, konstantinos sgantzos, joseph vaughnperling, kokuei yuan. richard brown, james carlyle, ian grigg, mike hearn, "corda: introduction" david chaum, "blind signatures for untraceable payments", santa barbara http://blog.koehntopp.de/uploads/chaum.blindsigforpayment..pdf christopher clack (), vikram bakshi, lee braine "smart contract templates: foundations, design landscape and research directions", christopher clack (), vikram bakshi, lee braine "smart contract templates: essential requirements and design options", martin fowler, "event sourcing", https://martinfowler.com/eaadev/eventsourcing.html ian grigg, "the ricardian contract," ian grigg, "triple entry accounting," ian grigg, "the sum all chains let's converge," ian grigg, blog post "the message the medium," ian grigg, blog post "seeking consensus consensus," ian grigg, blog post principled approach blockchain governance" vinay gupta, interview "bitcoin cannot divorced from pre-existing political theory," daniel larimer, "delegated proof-of-stake (dpos)" daniel larimer, charles hoskinson, stan larimer, peer-to-peer polymorphic digital asset exchange" dan larimer, "eos.io technical white paper" block.one https://github.com/eosio/documentation/blob/master/technicalwhitepaper.md dan larimer, block post "implementing hypothetical currency application eos," https://steemit.com/eos/@eosio/implementing-a-hypothetical-currencyapplication-on-eos dan larimer, blog post "what could blockchain constitution look like?" satoshi nakamoto, "bitcoin: peer-to-peer electronic cash system tim swanson, "consensus-as-a-service" http://www.ofnumbers.com/wp-content/uploads///permissioneddistributed-ledgers.pdf nick szabo, "smart contracts", nick szabo, "formalizing and securing relationships public networks", gavin woods, "ethereum: secure decentralised generalised transaction ledger", page