advanced decentralized blockchain platform whitepaper version: tron protocol version: tron foundation december th, san francisco introduction vision background history terminology address/wallet abi api asset bandwidth points (bp) block block reward block header cold wallet dapp grpc hot wallet jdk khaosdb leveldb merkle root public testnet (shasta) rpc scalability sun throughput timestamp tkc trc- trx architecture core storage blockchain storage state storage application protocol protocol buffers http tron virtual machine (tvm) decentralized exchange (dex) implementation consensus delegated proof stake (dpos) account types creation structure block block header raw data witness signature block transaction signing bandwidth model fee transaction proof stake (tapos) transaction confirmation structure tron virtual machine (tvm) introduction workflow performance lightweight architecture robust high compatibility low cost smart contract introduction energy model deployment trigger function tron solidity token trc- token trc- token beyond governance super representative general election reward vote reward block reward reward calculation committee general dynamic network parameters create proposal vote proposal cancel proposal structure dapp development apis networks tools resources conclusion introduction vision tron ambitious project dedicated the establishment truly decentralized internet and its infrastructure. the tron protocol, one the largest blockchain-based operating systems the world, offers public blockchain support high throughput, high scalability, and high availability for all decentralized applications (dapps) the tron ecosystem. the july acquisition bittorrent further cemented tron's leadership pursuing decentralized ecosystem. background the introduction bitcoin revolutionized society's perception the traditional financial system the wake the great recession (-). centralized hedge funds and banks collapsed from speculation opaque financial derivatives, blockchain technology provided transparent universal ledger from which anybody could glean transaction information. the transactions were cryptographically secured using proof work (pow) consensus mechanism, thus preventing double spend issues. late the ethereum white paper proposed network which smart contracts and turing-complete ethereum virtual machine (evm) would allow developers interact with the network through dapps. however, transaction volumes bitcoin and ethereum peaked was apparent from the low transaction throughput times and high transaction fees that cryptocurrencies like bitcoin and ethereum their existing state were not scalable for widespread adoption. thus, tron was founded and envisioned innovative solution these pressing scalability challenges. history the tron foundation was established july singapore. december tron had launched its open source protocol. the testnet, blockchain explorer, and web wallet were all launched march tron mainnet launched shortly afterward may marking the odyssey release technical milestone. june tron declared its independence with the creation the genesis block, along with the july acquisition bittorrent. october tron launched the tron virtual machine (tvm), complete developers' toolset, and support system. the tron roadmap involves combining bittorrent's million users with the tron network via project atlas, well fostering the developer community launch exciting new dapps the tron network. available https://tron.network/static/doc/white_paper_v__.pdf terminology address/wallet address wallet consisting account credentials the tron network are generated key pair, which consists private key and public key, the latter being derived from the former through algorithm. the public key usually used for session key encryption, signature verification, and encrypting data that could decrypted corresponding private key. abi application binary interface (abi) interface between two binary program modules; usually one these modules library operating system facility, and the other user run program. api application programming interface (api) mainly used for user clients development. with api support, token issuance platforms can also designed developers themselves. asset tron's documents, asset the same token, which also denoted trc- token. bandwidth points (bp) keep the network operating smoothly, tron network transactions use fuel. each account gets free daily and more can obtained freezing trx for bp. both trx and trc- token transfers are normal transactions costing bp. smart contract deployment and execution transactions consume both and energy. block blocks contain the digital records transactions. complete block consists the magic number, block size, block header, transaction counter, and transaction data. block reward block production rewards are sent sub-account (address/wallet). super representatives can claim their rewards tronscan through the api directly. block header block header part block. tron block headers contain the previous block's hash, the merkle root, timestamp, version, and witness address. cold wallet cold wallet, also known offline wallet, keeps the private key completely disconnected from any network. cold wallets are usually installed "cold" devices (e.g. computers mobile phones staying offline) ensure the security trx private key. dapp decentralized application app that operates without centrally trusted party. application that enables direct interaction/agreements/communication between end users and/or resources without middleman. grpc grpc (grpc remote procedure calls) open source remote procedure call (rpc) system initially developed google. uses http/ for transport, protocol buffers the interface description language, and provides features such authentication, bidirectional streaming and flow control, blocking nonblocking bindings, and cancellation and timeouts. generates cross-platform client and server bindings for many languages. most common usage scenarios include connecting services microservices style architecture and connecting mobile devices, and browser clients backend services. hot wallet hot wallet, also known online wallet, allows user's private key used online, thus could susceptible potential vulnerabilities interception malicious actors. jdk java development kit the java sdk used for java applications. the core java development, comprising the java application environment (jvm+java class library) and java tools. khaosdb tron has khaosdb the full-node memory that can store all the newly-forked chains generated within certain period time and supports witnesses switch from their own active chain swiftly into new main chain. see state storage for more details. leveldb leveldb was initially adopted with the primary goal meet the requirements fast r/w and rapid development. after launching the mainnet, tron upgraded its database entirely customized one catered its very own needs. see blockchain storage for more details. merkle root merkle root the hash all hashes all transactions included part block blockchain network. see delegated proof stake (dpos) for more details. https://en.wikipedia.org/wiki/grpc public testnet (shasta) version the network running single-node configuration. developers can connect and test features without worrying about the economic loss. testnet tokens have value and anyone can request more from the public faucet. rpc distributed computing, remote procedure call (rpc) when computer program causes procedure (subroutine) execute different address space (commonly another computer shared network), which coded were normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction. scalability scalability feature the tron protocol. the capability system, network, process handle growing amount work its potential enlarged accommodate that growth. sun sun replaced drop the smallest unit trx. trx sun. throughput high throughput feature tron mainnet. measured transactions per second (tps), namely the maximum transaction capacity one second. timestamp the approximate time block production recorded unix timestamp, which the number milliseconds that have elapsed since jan utc. tkc token configuration. trc- standard crypto token tron platform. certain rules and interfaces are required follow when holding initial coin offering tron blockchain. trx trx stands for tronix, which the official cryptocurrency tron. https://en.wikipedia.org/wiki/remote_procedure_call architecture tron adopts -layer architecture divided into storage layer, core layer, and application layer. the tron protocol adheres google protobuf, which intrinsically supports multi-language extension. figure tron -layer architecture core there are several modules the core layer, including smart contracts, account management, and consensus. stack-based virtual machine implemented tron and optimized instruction set used. order better support dapp developers, solidity was chosen the smart contract language, followed future support other advanced languages. addition, tron's consensus mechanism based delegated proof stake (dpos) and many innovations were made order meet its unique requirements. storage tron designed unique distributed storage protocol consisting block storage and state storage. the notion graph database was introduced into the design the storage layer better meet the need for diversified data storage the real world. blockchain storage tron blockchain storage chooses use leveldb, which developed google and proven successful with many companies and projects. has high performance and supports arbitrary byte arrays both keys and values, singular get, put and delete, batched put and delete, bi-directional iterators, and simple compression using the very fast snappy algorithm. state storage tron has khaosdb the full-node memory that can store all the newly forked chains generated within certain period time and supports witnesses switch from their own active chain swiftly into new main chain. can also protect blockchain storage making more stable from being terminating abnormally intermediate state. application developers can create diverse range dapps and customized wallets tron. since tron enables smart contracts deployed and executed, the opportunities utility applications are unlimited. solidity official documentation: https://solidity.readthedocs.io/ protocol tron protocol adheres google protocol buffers, which language-neutral, platform-neutral, and extensible way serializing structured data for use communications protocols, data storage, and more. protocol buffers protocol buffers (protobuf) flexible, efficient, automated mechanism for serializing structured data, similar json xml, but much smaller, faster and simpler. protobuf (.proto) definitions can used generate code for c++, java, c#, python, ruby, golang, and objective-c languages through the official code generators. various third-party implementations are also available for many other languages. protobuf eases development for clients unifying the api definitions and also optimizing data transfers. clients can take the api .proto from tron's protocol repository and integrate through the automatically-generated code libraries. comparison, protocol buffers times smaller and times faster than xml, with less ambiguous syntax. protobuf generates data access classes that are easier use programmatically. http tron protocol provides restful http api alternative the protobuf api. they share the same interface but the http api can readily used javascript clients. tron virtual machine (tvm) the tvm lightweight, turing complete virtual machine developed for tron's ecosystem. the tvm connects seamlessly with the existing development ecosystem provide millions global developers with custom-built blockchain system that efficient, convenient, stable, secure, and scalable. decentralized exchange (dex) google protocol buffers official documentation: https://developers.google.com/protocol-buffers/ the tron network natively supports decentralized exchange functions. decentralized exchange consists multiple trading pairs. trading pair (notation "exchange") exchange market between trc- tokens, between trc- token and trx. any account can create trading pair between any tokens, even the same pair already exists the tron network. trading and price fluctuations the trading pairs follow the bancor protocol. the tron network stipulates that the weights the two tokens all trading pairs are equal, the ratio their balances the price between them. for example, consider trading pair containing two tokens, abc and def. abc has balance million and def has balance million. since their weights are equal, abc def. this means that the ratio abc def abc per def. implementation the tron blockchain code implemented java and was originally fork from ethereumj. bancor protocol official website: https://about.bancor.network/protocol/ consensus delegated proof stake (dpos) the earliest consensus mechanism the proof work (pow) consensus mechanism. this protocol currently implemented bitcoin and ethereum. pow systems, transactions broadcast through the network are grouped together into nascent blocks for miner confirmation. the confirmation process involves hashing transactions using cryptographic hashing algorithms until merkle root has been reached, creating merkle tree: figure trx transactions are hashed into the merkle root. this merkle root then included the block header, which attached the previously confirmed blocks form blockchain. this allows for easy and transparent tracking transactions, timestamps, and other related information. bitcoin whitepaper: https://bitcoin.org/bitcoin.pdf ethereum whitepaper: https://github.com/ethereum/wiki/wiki/white-paper cryptographic hashing algorithms are useful network attack prevention because they possess several properties: input/output length size the algorithm can pass input any length size, and outputs fixed length hash value. efficiency the algorithm relatively easy and fast compute. preimage resistance for given output impossible find any input such that h(x) other words, the hashing algorithm h(x) one-way function which only the output can found, given input. the reverse not possible. collision resistance computationally infeasible find any pairs such that h(x h(x other words, the probability finding two different inputs hashing the same output extremely low. this property also implies second preimage resistance second preimage resistance given and thus h(x computationally infeasible find any such that h(x h(x while this property similar collision resistance, the property differs that saying attacker with given will find computationally infeasible find any hashing the same output. deterministic maps each input one and only one output. avalanche effect small change the input results entirely different output. these properties give the cryptocurrency network its intrinsic value ensuring attacks not compromise the network. when miners confirm block, they are rewarded tokens built-in incentive for network participation. however, the global cryptocurrency market capitalization steadily increased, the miners became centralized and focused their computing resources hoarding tokens assets, rather than for network participation purposes. cpu miners gave way gpus, which turn gave way powerful asics. one notable study, the total power consumption bitcoin mining has been estimated high gw, comparable ireland's power consumption. this same study projected total power consumption reach the near future. solve the energy waste issue, the proof stake (pos) consensus mechanism was proposed many new networks. pos networks, token holders lock their token balances become block validators. the validators take turns proposing and voting the next block. however, the problem with standard pos that validator influence correlates directly the amount tokens locked up. this results parties hoarding large amounts the network's base currency wielding undue influence the network ecosystem. the tron consensus mechanism uses innovative delegated proof stake system which super representatives (srs) produce blocks for the network. every hours, trx account holders who freeze their accounts can vote for selection candidates, with the top candidates deemed the srs. voters may choose srs based criteria such projects sponsored srs paar, c., pelzl, j., understanding cryptography: textbook for students and practitioners ed. springer-verlag berlin heidelberg, https://www.sciencedirect.com/science/article/pii/s increase trx adoption, and rewards distributed voters. this allows for more democratized and decentralized ecosystem. srs' accounts are normal accounts, but their accumulation votes allows them produce blocks. with the low throughput rates bitcoin and ethereum due their pow consensus mechanism and scalability issues, tron's dpos system offers innovative mechanism resulting tps compared bitcoin's tps and ethereum's tps. the tron protocol network generates one block every three seconds, with each block awarding trx super representatives. total trx will awarded annually the srs. each time finishes block production, rewards are sent sub-account the super-ledger. srs can check, but not directly make use these trx tokens. withdrawal can made each once every hours, transferring the rewards from the sub-account the specified account. the three types nodes the tron network are witness node, full node, and solidity node. witness nodes are set srs and are mainly responsible for block production and proposal creation/voting. full nodes provide apis and broadcast transactions and blocks. solidity nodes sync blocks from other full nodes and also provide indexable apis. account types the three types accounts the tron network are regular accounts, token accounts, and contract accounts. regular accounts are used for standard transactions. token accounts are used for storing trc- tokens. contract accounts are smart contract accounts created regular accounts and can triggered regular accounts well. creation there are three ways create tron account: create new account through api transfer trx into new account address transfer any trc- token into new account address offline key-pair consisting address (public key) and private key, and not recorded the tron network, can also generated. the user address generation algorithm consists generating key-pair and then extracting the public key (-byte byte array representing coordinates). hash the public key using the sha- function (the sha protocol adopted keccak-) and extract the last bytes the result. add the beginning the byte array and ensure the initial address length bytes. hash the address twice using sha- function and take the first bytes verification code. add the verification code the end the initial address and obtain the address basecheck format through base encoding. encoded mainnet address begins with and bytes length. structure the three different account types are normal, assetissue, and contract. account contains parameters: account_name the name for this account e.g. billsaccount. type what type this account e.g. (stands for type 'normal'). balance balance this account e.g. vote received votes this account e.g. {("xbw...xj",), ("xdjq...jm",),...,("xnd...mxi",)}. asset other assets expected trx this account e.g. latest_operation_time the latest operation time this account. protobuf data structure: message account message vote bytes vote_address int vote_count bytes accout_name accounttype type bytes address int balance repeated vote votes map asset int latest_operation_time enum accounttype normal assetissue contract block block typically contains block header and several transactions. protobuf data structure: message block blockheader block_header repeated transaction transactions block header block header contains raw_data itness_signature and blockid protobuf data structure: message blockheader message raw int timestamp bytes txtrieroot bytes parenthash uint number uint version bytes witness_address bytes witness_signature bytes blockid raw data raw data denoted raw_data protobuf. contains the raw data message, containing parameters: timestamp timestamp this message e.g. txtrieroot the merkle tree's root e.g. dacsa...ed. parenthash the hash the last block e.g. dacsa...ed. number the block height e.g. version reserved .g. witness_address the address the witness packed this block e.g. c...d. witness signature witness signature denoted witness_signature protobuf, which the signature for this block header from the witness node. block block denoted blockid protobuf. contains the atomic identification block. block contains parameters: hash the hash block. number the hash and height the block. transaction signing tron's transaction signing process follows standard ecdsa cryptographic algorithm, with secpk selection curve. private key random number, and the public key point the elliptic curve. the public key generation process consists first generating random number private key, and then multiplying the base point the elliptic curve the private key obtain the public key. when transaction occurs, the transaction raw data first converted into byte format. the raw data then undergoes sha- hashing. the private key corresponding the contract address then signs the result the sha hash. the signature result then added the transaction. bandwidth model ordinary transactions only consume bandwidth points, but smart contract operations consume both energy and bandwidth points. there are two types bandwidth points available. users can gain bandwidth points from freezing trx, while free bandwidth points are also available daily. when trx transaction broadcast, transmitted and stored the form byte array over the network. bandwidth points consumed one transaction number transaction bytes multiplied bandwidth points rate. for example, the byte array length transaction then the transaction consumes bandwidth points. however, trx token transfer results the target account being created, then only the bandwidth points consumed create the account will deducted, and additional bandwidth points will not deducted. account creation scenario, the network will first consume the bandwidth points that the transaction initiator gained from freezing trx. this amount insufficient, then the network consumes the transaction initiator's trx. standard trx transfer scenarios from one trx account another, the network first consumes the bandwidth points gained the transaction initiator for freezing trx. that insufficient, then consumes from the free daily bandwidth points. that still not enough, then the network consumes the trx the transaction initiator. the amount calculated the number bytes the transaction multiplied sun. thus, for most trx holders who may not necessarily freeze their trx participate voting, the first step automatically skipped (since trx balance frozen and the daily free bandwidth powers the transaction. for trc- token transfers, the network first verifies whether the total free bandwidth points the issued token asset are sufficient. not, the bandwidth points obtained from freezing trx are consumed. there still not enough bandwidth points, then consumes the trx the transaction initiator. fee tron network generally does not charge fees for most transactions, however, due system restrictions and fairness, bandwidth usage and transactions take certain fees. fee charges are broken down into the following categories: normal transactions cost bandwidth points. users can use the free daily bandwidth points freeze trx obtain more. when bandwidth points are not enough, trx will used directly from the sending account. the trx needed the number bytes sun. smart contracts cost energy (section but will also need bandwidth points for the transaction broadcasted and confirmed. the bandwidth cost the same above. all query transactions are free. doesn't cost energy bandwidth. tron network also defines set fixed fees for the following transactions: creating witness node: trx issuing trc- token: trx creating new account: trx creating exchange pair: trx transaction proof stake (tapos) tron uses tapos ensure the transactions all confirm the main blockchain, while making difficult forge counterfeit chains. tapos, the networks require each transaction include part the hash recent block header. this requirement prevents transactions from being replayed forks not including the referenced block, and also signals the network that particular user and their stake are specific fork. this consensus mechanism protects the network against denial service, selfish mining, and double spend attacks. transaction confirmation transaction included future block after being broadcast the network. after blocks are mined tron (including its own block), the transaction confirmed. each block produced one the top super representatives round robin fashion. each block takes seconds mined the blockchain. time may slightly vary for each super representative due network conditions and machine configurations. general, transaction considered fully confirmed after minute. structure transaction apis consist the following functions: message transaction message contract enum contracttype accountcreatecontract create account/wallet transfercontract transfer trx transferassetcontract transfer trc token votewitnesscontract vote for super representative (sr) witnesscreatecontract create new account assetissuecontract create new trc token witnessupdatecontract update information participateassetissuecontract purchase trc token accountupdatecontract update account/wallet information freezebalancecontract freeze trx for bandwidth energy unfreezebalancecontract unfreeze trx withdrawbalancecontract withdraw rewards, once per day unfreezeassetcontract unfreeze trc token updateassetcontract update trc token's information proposalcreatecontract create new network proposal any proposalapprovecontract votes yes for network proposal proposaldeletecontract delete network proposal owner createsmartcontract deploy new smart contract triggersmartcontract call function smart contract getcontract get existing smart contract updatesettingcontract update smart contract's parameters exchangecreatecontract create token trading pair dex exchangeinjectcontract inject funding into trading pair exchangewithdrawcontract withdraw funding from trading pair exchangetransactioncontract perform token trading updateenergylimitcontract update origin_energy_limit smart contract tron virtual machine (tvm) introduction tron virtual machine (tvm) lightweight, turing complete virtual machine developed for the tron's ecosystem. its goal provide custom-built blockchain system that efficient, convenient, stable, secure and scalable. tvm initially forked from evm and can connect seamlessly with the existing solidity smart contract development ecosystem. based that, tvm additionally supports dpos consensus. tvm employs the concept energy. different from the gas mechanism evm, operations transactions and smart contracts tvm are free, with trx consumed. technically, executable computation capacity tvm not restricted total holding amount tokens. workflow the compiler first translates the solidity smart contract into bytecode readable and executable the tvm. the tvm then processes data through opcode, which equivalent operating the logic stack-based finite state machine. finally, the tvm accesses blockchain data and invokes external data interface through the interoperation layer. evm: ethereum virtual machine (https://github.com/ethereum/ethereumj) figure tvm workflow performance lightweight architecture tvm adopts lightweight architecture with the aim reducing resource consumption guarantee system performance. robust trx transfers and smart contract execution cost bandwidth points only, instead trx, which exempts tron from being attacked. bandwidth consumption predictable and static since each computational step cost fixed. high compatibility tvm compatible with evm and will compatible with more mainstream vms the future. thereby, all smart contracts evm are executable tvm. low cost due tvm's bandwidth setup, development costs are reduced and developers can focus the logic development their contract code. tvm also offers all-in-one interfaces for contract deployment, triggering and viewing offer the convenience for developers. smart contract introduction smart contract protocol that digitally verifies contract negotiation. they define the rules and penalties related agreement and also automatically enforce those obligations. the smart contract code facilitates, verifies, and enforces the negotiation performance agreement transaction. from tokenization perspective, smart contracts also facilitate automatic funds transfers between participating parties should certain criteria met. tron smart contracts are written the solidity language. once written and tested, they can compiled into bytecode, then deployed onto the tron network for the tron virtual machine. once deployed, smart contracts can queried via their contract addresses. the contract application binary interface (abi) shows the contract's call functions and used for interacting with the network. energy model the maximum energy limit for deploying and triggering smart contract function several variables: dynamic energy from freezing trx ,,, (total energy limit) (total energy weight) energy limit the daily account energy limit from freezing trx remaining daily account energy from freezing trx calculated energy limit energy used fee limit trx set smart contract deploy/trigger call remaining usable trx the account energy per trx purchased directly sun energy) srs can vote adjustment there are two consumption scenarios calculate for maximum energy limit for deployment and trigger. the logic can expressed follows: const const const const const dynamic energy limit daily account energy from freezing trx remaining daily account energy from freezing trx fee limit trx set deploy/trigger call remaining usable trx account const energy per trx purchased directly calculate defined maximum energy limit for deployment/trigger smart contract l*r let min(e+t*c, l*r) else let e+t*c deployment when tron solidity smart contract compiled, the tron virtual machine reads the compiled bytecode. the bytecode consists section for code deployment, contract code, and the auxdata. the auxdata the source code's cryptographic fingerprint, used for verification. the deployment bytecode runs the constructor function and sets the initial storage variables. the deployment code also calculates the contract code and returns the tvm. the abi json file that describes tron smart contract's functions. this file defines the function names, their payability, the function return values, and their state mutability. trigger function once the tron smart contracts are deployed, their functions can triggered individually either via tronstudio through api calls. state-changing functions require energy while read-only functions execute without energy. tron solidity tron solidity fork from ethereum's solidity language. tron modifies the original project support trx and sun units trx sun). the rest the language syntax compatible with solidity ^... thus the tron virtual machine (tvm) almost compatible with evm instructions. token trc- token the tron network, each account can issue tokens the expense trx. issue tokens, the issuer needs specify token name, the total capitalization, the exchange rate trx, circulation duration, description, website, maximum bandwidth consumption per account, total bandwidth consumption, and the amount token frozen. each token issuance can also configure each account's maximum daily token transfer bandwidth points, the entire network's maximum daily token transfer bandwidth points, total token supply, locking duration days, and the total amount tokens locked. trc- token trc- technical standard used for smart contracts implementing tokens supported the tron virtual machine. fully compatible with erc-. the interface follows: contract trcinterface function totalsupply public constant returns (uint); function balanceof (address tokenowner) public constant returns (uint balance); function allowance (address tokenowner, address spender) public constant returns (uint remaining); function transfer (address to, uint tokens) public returns (bool success); function approve (address spender, uint tokens) public eturns (bool success); function transferfrom (address from, address to, uint tokens) public returns (bool success); event ransfer (address indexed from, address indexed to, uint tokens); event pproval (address indexed tokenowner, address indexed spender, uint tokens); from developer's perspective, there are several differences between trc- and trc-. some the key differences are that trc- tokens are accessible apis and smart contracts while trc- tokens allow for interface customization but are only accessible within smart contracts. from cost perspective, trc- tokens have transaction fees that are times lower than trc-, but carry bandwidth costs for api transfers and deposits. transfers and deposits smart contracts for trc- tokens cost both bandwidth and energy. beyond since tron uses the same solidity version ethereum, more token standards could readily ported tron. governance super representative general every account the tron network can apply and have the opportunity become super representative (denoted sr). everyone can vote for candidates. the top candidates with the most votes will become srs with the right and obligation generate blocks. the votes are counted every hours and the srs will change accordingly. prevent malicious attacks, there cost becoming candidate. when applying, trx will burned from the applicant's account. once successful, such account can join the election. election tron power (denoted tp) needed vote and the amount depends the voter's frozen assets (trx). calculated the following way: rozen get bandwidth every account the tron network has the right vote for their own srs. after the release (unfreeze, available after days), users won't have any frozen assets and lose all accordingly. result, all votes become invalid for the ongoing and future voting round unless trx frozen again vote. note that the tron network only records the most recent vote, which means that every new vote will negate all previous votes. reward vote reward also known candidate reward, which the top candidates updated once every round hours) will share trx mined. the reward will split accordance with the vote weight each candidate receives. each year, the total reward for candidates will trx. total vote reward per round why trx every round? total vote reward per round r/round) r/round rx/block blocks/min mins/hr hrs/round notice: this set witness_standby_allowance trx. see dynamic network parameters. total vote reward per year why trx every year? total vote reward per year r/year) r/year rx/round rounds/day days/year block reward also known super representative reward, which the top candidates (srs) who are elected every round hours) will share roughly trx mined. the reward will split evenly between the srs (minus the total reward blocks missed due network error). total trx will awarded annually the srs. total block reward per round why trx every round? total block reward per round (br/round) r/round rx/bloc blocks/min mins/hr hrs/round notice: the unit block reward set witness_pay_per_block trx. see dynamic network parameters. total block reward per year why trx every year? total block reward per year (br/year) r/year rx/round rounds/day days/year january there will inflation the tron network before january and the tron foundation will award all block rewards and candidate rewards prior that date. reward calculation reward calculation total reward vote reward block reward (br) candidate received total votes total votes total block missed note: the reward calculated per per round hours) rank rank candidate reward calculation total reward vote reward candidate received total votes total votes note: the reward calculated per candidate per round hours) committee general the committee used modify tron dynamic network parameters, such block generation rewards, transaction fees, etc. the committee consists the srs the current round. each has the right propose and vote proposals. when proposal receives votes more, approved and the new network parameters will applied the next maintenance period days). dynamic network parameters maintenance_time_interval description modify the maintenance interval time ms. known the vote interval time per round. example which hours. range account_upgrade_cost description modify the cost applying for account. example [,,,] sun which trx. range sun create_account_fee description modify the account creation fee. example [,] sun which trx. range sun transaction_fee description modify the amount fee used gain extra bandwidth. example sun/byte. range sun/byte asset_issue_fee description modify asset issuance fee. example [,,] sun which trx. range sun witness_pay_per_block description modify block generation reward. known unit block reward. example [,,] sun which trx. range sun witness_standby_allowance description modify the rewards given the top candidates. known total vote reward per round. example [,,,] sun which trx. range sun create_new_account_fee_in_system_contract description modify the cost account creation. combine dynamic network parameters get total account creation cost: reat e_n _accou ee_in _sy _con ract reat e_n _accou _ban idt h_rat example sun. range sun create_new_account_bandwidth_rate description modify the cost account creation. combine dynamic network parameters get total account creation cost: reat e_n _accou ee_in _sy _con ract reat e_n _accou _ban idt h_rat example []. range [,,,,,,] allow_creation_of_contracts description turn tron virtual machine (tvm). example true set activate and effect since utc. range true/false remove_the_power_of_the_gr description remove the initial genesis votes example true effected utc. range true/false notice: cannot set back false from true. energy_fee description modify the fee energy. example sun. range sun exchange_create_fee description modify the cost trading pair creation. known the cost creating trade order. example [,,,] sun which trx. range sun max_cpu_time_of_one_tx description modify the maximum execution time one transaction. known the timeout limit one transaction. example ms. range allow_update_account_name description modify the option let account update their account name. example false which available propose from java-tron odyssey v.. range true/false notice: cannot set back false from true. allow_same_token_name description modify the validation allowing different token have duplicate name. example false which available propose from java-tron odyssey v.. range true/false notice: cannot set back false from true. allow_delegate_resource description modify the validation allowing issue token with duplicate name, the tokenid the token, long integer data type, would the only atomic identification token. example false which available propose from java-tron odyssey v.. range true/false notice: cannot set back false from true. total_energy_limit description modify the whole network total energy limit. example [,,,,,] sun which ,,, trx. range [,,,,,,] sun allow_tvm_transfer_trc description allow trc- token transfer within smart contracts. allow_update_account_name, allow_same_token_name, allow_delegate_resource proposals must all approved before proposing this parameter change. example false which available propose from java-tron odyssey v.. range true/false notice: cannot set back false from true. create proposal only the accounts have the rights propose change dynamic network parameters. vote proposal only committee members (srs) can vote for proposal and the member who does not vote time will considered disagree. the proposal active for days after created. the vote can changed retrieved during the -days voting window. once the period ends, the proposal will either succeed votes) fail (and end). cancel proposal the proposer can cancel the proposal before becomes effective. structure srs are the witnesses newly generated blocks. witness contains parameters: address the address this witness e.g. xuh.... votecount number received votes this witness e.g. pubkey the public key for this witness e.g. xuh.... url the url for this witness e.g. https://www.noonetrust.com. totalproduced the number blocks this witness produced e.g. totalmissed the number blocks this witness missed e.g. latestblocknum the latest height block e.g. isjobs boolean flag. protobuf data structure: message witness bytes address int votecount bytes pubkey string url int totalproduced int totalmissed int latestblocknum bool isjobs dapp development apis the tron network offers wide selection over http api gateways for interacting with the network via full and solidity nodes. additionally, tronweb comprehensive javascript library containing api functions that enable developers deploy smart contracts, change the blockchain state, query blockchain and contract information, trade the dex, and much more. these api gateways can directed towards local privatenet, the shasta testnet, the tron mainnet. networks tron has both shasta testnet well mainnet. developers may connect the networks deploying nodes, interacting via tronstudio, using apis via the trongrid service. the trongrid service consists load balanced node clusters hosted aws servers worldwide. dapp development scales and api call volumes increase, trongrid successfully fields the increase api traffic. tools tron offers suite development tools for enabling developers create innovative dapps. tronbox framework that allows developers test and deploy smart contracts via the tronweb api. trongrid load balanced and hosted api service that allows developers access the tron network without having run their own node. trongrid offers access both the shasta testnet well the tron mainnet. tronstudio comprehensive integrated development environment (ide) that enables developers compile, deploy, and debug their solidity smart contracts. tronstudio contains internal full node that creates private local environment for smart contract testing prior deployment. the tronweb api library connects developers the network via wide selection http api calls wrapped javascript. resources the tron developer hub comprehensive api documentation site tailored towards developers wishing build the tron network. the developer hub provides high-level conceptual understanding tron and walks users through the details interacting with the developer hub: https://developers.tron.network/ network. the guides walk developers through node setup, deployment and interaction with smart contracts, api interaction and implementation, building sample dapps, and using each the developer tools. additionally, developer community channels are available through discord. discord: https://discordapp.com/invite/gsrgstd conclusion tron scalable blockchain solution that has employed innovative methods for tackling challenges faced legacy blockchain networks. having reached over transactions per day, with over trx accounts, and surpassing tps, tron has enabled the community creating decentralized and democratized network.